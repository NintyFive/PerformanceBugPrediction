{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/21833","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21833/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21833/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21833/events","html_url":"https://github.com/elastic/elasticsearch/issues/21833","id":192070407,"node_id":"MDU6SXNzdWUxOTIwNzA0MDc=","number":21833,"title":"Add a top_groups aggregations for simple field collapsing with pagination","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2016-11-28T17:42:59Z","updated_at":"2017-01-23T15:33:52Z","closed_at":"2017-01-23T15:33:52Z","author_association":"MEMBER","active_lock_reason":null,"body":"Today field collapsing (or grouping) is \"doable\" in ES through a `top_hits` aggregation under a `terms` aggregation:\r\nhttps://www.elastic.co/guide/en/elasticsearch/guide/master/top-hits.html\r\nIf the number of groups to retrieve is low it can be very efficient since it will be coupled with the `breadth_first` mode of the aggregation framework. Though there are limitations inherent to the `terms` aggregation that prohibit its usage for a simple field collapsing use case. One of the main limitation is that it's impossible to paginate over the groups. There are many reasons why we don't want to implement pagination on the `terms` aggregation but to me the main reason is that it's impossible to ensure that the ranking will be accurate. It all depends on the sort that is applied, so for instance if you sort on the sum of a field then we might present a wrong order to the end user. On the contrary sorting on the maximum value of a field is ok and should lead to accurate ranking. \r\nSince determining the accuracy of the sort is a difficult task we could dedicate a new type of aggregation that would limit the type of sorting that you can apply to your group. This new aggregation could look like this:\r\n\r\n````\r\n \"aggs\": {\r\n    \"my_top_groups\": {\r\n      \"top_groups\": {\r\n        \"field\":   \"product_id\",\r\n        \"sort\": [\"_score\"],\r\n        \"size\": 10,\r\n        \"group_size\": 2\r\n      }\r\n````\r\n\r\nThis aggregation would return the 10 best groups (size:10) sorted by the max _score of their inner hits with a maximum of 2 inner hits per group (group_size:2). It would be possible to sort on any field as long as the field exists in the index and to group by any field as long as the field has a unique value per document.\r\nAdditionally it should be possible to paginate over the top groups by specifying a `start` parameter:\r\n\r\n````\r\n \"aggs\": {\r\n    \"my_top_groups\": {\r\n      \"top_groups\": {\r\n        \"field\":   \"product_id\",\r\n        \"sort\": [\"_score\"],\r\n        \"size\": 10,\r\n        \"group_size\": 2,\r\n        \"start\": 10\r\n      }\r\n````\r\n\r\nSo `start:10` would be the initial offset for the list of groups to return (this would be the \"page 2\" of the first example). It won't be optimal since we still need to retrieve 20 groups per shard to find the group ranked 10 to 20 but it would be accurate. Of course we could have a limit on the `start` offset (like we do for normal search). \r\n\r\nOne limitation of this approach is that only the ranking of each group and the first hit inside each group would be accurate. The inner hits of each group after the first one may be wrong. This is due to the fact that each group can appear in multiple shards. One way to solve this problem is to ensure that all documents in each group are co-located on the same shard. By doing this we could also efficiently return the number of groups that match the query. Though I don't think this should  be a requirement but it could be documented as a way to get always accurate results.","closed_by":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"performed_via_github_app":null}