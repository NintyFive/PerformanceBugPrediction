[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/367330474","html_url":"https://github.com/elastic/elasticsearch/issues/28731#issuecomment-367330474","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28731","id":367330474,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NzMzMDQ3NA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-02-21T13:46:45Z","updated_at":"2018-02-21T13:46:45Z","author_association":"MEMBER","body":"@gellweiler Thanks for reporting this, threads indeed can get stuck evaluating the grok expression.\r\n\r\nThis reproduce for me with the following ingest simulate api call on master:\r\n\r\n```\r\nPOST _ingest/pipeline/_simulate\r\n{\r\n  \"pipeline\": {\r\n    \"processors\": [\r\n      {\r\n        \"grok\": {\r\n          \"field\": \"message\",\r\n          \"patterns\": [\r\n            \"Bonsuche mit folgender Anfrage: Belegart->\\\\[%{WORD:param2},(?<param5>(\\\\s*%{NOTSPACE})*)\\\\] Zustand->ABGESCHLOSSEN Kassennummer->%{WORD:param9} Bonnummer->%{WORD:param10} Datum->%{DATESTAMP_OTHER:param11}\"\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"docs\": [\r\n    {\r\n      \"_source\": {\r\n        \"message\": \"Bonsuche mit folgender Anfrage: Belegart->[EINGESCHRAENKTER_VERKAUF, VERKAUF, NACHERFASSUNG] Zustand->ABGESCHLOSSEN Kassennummer->2 Bonnummer->6362 Datum->Mon Jan 08 00:00:00 UTC 2018\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis api call never returns and I see in hot threads api that the following stack trace being returned:\r\n\r\n```\r\n org.joni.ByteCodeMachine.matchAt(ByteCodeMachine.java:271)\r\n       org.joni.Matcher.matchCheck(Matcher.java:304)\r\n       org.joni.Matcher.searchInterruptible(Matcher.java:457)\r\n       org.joni.Matcher.search(Matcher.java:318)\r\n       org.elasticsearch.grok.Grok.captures(Grok.java:173)\r\n       org.elasticsearch.ingest.common.GrokProcessor.execute(GrokProcessor.java:65)\r\n       org.elasticsearch.ingest.CompoundProcessor.execute(CompoundProcessor.java:100)\r\n       org.elasticsearch.ingest.Pipeline.execute(Pipeline.java:58)\r\n       org.elasticsearch.action.ingest.SimulateExecutionService.executeDocument(SimulateExecutionService.java:56)\r\n       org.elasticsearch.action.ingest.SimulateExecutionService$1.doRun(SimulateExecutionService.java:70)\r\n       org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:672)\r\n       org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n       java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n       java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n       java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nand this one:\r\n\r\n```\r\norg.joni.Matcher.matchCheck(Matcher.java:304)\r\n       org.joni.Matcher.searchInterruptible(Matcher.java:457)\r\n       org.joni.Matcher.search(Matcher.java:318)\r\n       org.elasticsearch.grok.Grok.captures(Grok.java:173)\r\n       org.elasticsearch.ingest.common.GrokProcessor.execute(GrokProcessor.java:65)\r\n       org.elasticsearch.ingest.CompoundProcessor.execute(CompoundProcessor.java:100)\r\n       org.elasticsearch.ingest.Pipeline.execute(Pipeline.java:58)\r\n       org.elasticsearch.action.ingest.SimulateExecutionService.executeDocument(SimulateExecutionService.java:56)\r\n       org.elasticsearch.action.ingest.SimulateExecutionService$1.doRun(SimulateExecutionService.java:70)\r\n       org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:672)\r\n       org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n       java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n       java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n       java.lang.Thread.run(Thread.java:748)\r\n   \r\n```\r\n\r\n@talevy What would be the best way avoiding joni from evaluating these poisonous expressions? ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/367428123","html_url":"https://github.com/elastic/elasticsearch/issues/28731#issuecomment-367428123","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28731","id":367428123,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NzQyODEyMw==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2018-02-21T18:43:10Z","updated_at":"2018-02-21T18:43:10Z","author_association":"CONTRIBUTOR","body":"So, I am still investigating what is causing the regex processor to go insane here, but I recommend trying this pattern for now:\r\n\r\n```\r\nPOST _ingest/pipeline/_simulate\r\n{\r\n  \"pipeline\": {\r\n    \"processors\": [\r\n      {\r\n        \"grok\": {\r\n          \"field\": \"message\",\r\n          \"patterns\": [\r\n            \"Bonsuche mit folgender Anfrage: Belegart->\\\\[%{WORD:param2}(?<param5>(,\\\\s*%{WORD})*)\\\\] Zustand->ABGESCHLOSSEN Kassennummer->%{WORD:param9} Bonnummer->%{WORD:param10} Datum->%{DATESTAMP_OTHER:param11}\"\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"docs\": [\r\n    {\r\n      \"_source\": {\r\n        \"message\": \"Bonsuche mit folgender Anfrage: Belegart->[EINGESCHRAENKTER_VERKAUF, VERKAUF, NACHERFASSUNG] Zustand->ABGESCHLOSSEN Kassennummer->2 Bonnummer->6362 Datum->Mon Jan 08 00:00:00 UTC 2018\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nwhich results in the same expected output (I believe) and executes much faster\r\n\r\n```\r\n{\r\n        \"_index\": \"_index\",\r\n        \"_type\": \"_type\",\r\n        \"_id\": \"_id\",\r\n        \"_source\": {\r\n          \"param5\": \", VERKAUF, NACHERFASSUNG\",\r\n          \"param9\": \"2\",\r\n          \"param10\": \"6362\",\r\n          \"param11\": \"Mon Jan 08 00:00:00 UTC 2018\",\r\n          \"message\": \"Bonsuche mit folgender Anfrage: Belegart->[EINGESCHRAENKTER_VERKAUF, VERKAUF, NACHERFASSUNG] Zustand->ABGESCHLOSSEN Kassennummer->2 Bonnummer->6362 Datum->Mon Jan 08 00:00:00 UTC 2018\",\r\n          \"param2\": \"EINGESCHRAENKTER_VERKAUF\"\r\n}\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/367455595","html_url":"https://github.com/elastic/elasticsearch/issues/28731#issuecomment-367455595","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28731","id":367455595,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NzQ1NTU5NQ==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2018-02-21T20:10:46Z","updated_at":"2018-02-21T20:10:46Z","author_association":"CONTRIBUTOR","body":"Since I do not believe this is a generic way to avoid the regex engine from entering a potentially exponential execution time, I am investigating ways to provide safe ways to interrupt the regex to avoid it from taking too much CPU for too long","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/367526644","html_url":"https://github.com/elastic/elasticsearch/issues/28731#issuecomment-367526644","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28731","id":367526644,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NzUyNjY0NA==","user":{"login":"gellweiler","id":3253331,"node_id":"MDQ6VXNlcjMyNTMzMzE=","avatar_url":"https://avatars0.githubusercontent.com/u/3253331?v=4","gravatar_id":"","url":"https://api.github.com/users/gellweiler","html_url":"https://github.com/gellweiler","followers_url":"https://api.github.com/users/gellweiler/followers","following_url":"https://api.github.com/users/gellweiler/following{/other_user}","gists_url":"https://api.github.com/users/gellweiler/gists{/gist_id}","starred_url":"https://api.github.com/users/gellweiler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gellweiler/subscriptions","organizations_url":"https://api.github.com/users/gellweiler/orgs","repos_url":"https://api.github.com/users/gellweiler/repos","events_url":"https://api.github.com/users/gellweiler/events{/privacy}","received_events_url":"https://api.github.com/users/gellweiler/received_events","type":"User","site_admin":false},"created_at":"2018-02-22T00:34:00Z","updated_at":"2018-02-22T00:34:00Z","author_association":"NONE","body":"Thanks for investigating on this issue. The grok pattern was auto generated by a tool I wrote. I've changed the grok output to produce GREEDYDATA instead of Token*. Which also seems to be safe. Still I would like to know the root cause of this issue, to prevent generating dangerous expressions in the future.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/388837637","html_url":"https://github.com/elastic/elasticsearch/issues/28731#issuecomment-388837637","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28731","id":388837637,"node_id":"MDEyOklzc3VlQ29tbWVudDM4ODgzNzYzNw==","user":{"login":"ldormoy","id":4560233,"node_id":"MDQ6VXNlcjQ1NjAyMzM=","avatar_url":"https://avatars0.githubusercontent.com/u/4560233?v=4","gravatar_id":"","url":"https://api.github.com/users/ldormoy","html_url":"https://github.com/ldormoy","followers_url":"https://api.github.com/users/ldormoy/followers","following_url":"https://api.github.com/users/ldormoy/following{/other_user}","gists_url":"https://api.github.com/users/ldormoy/gists{/gist_id}","starred_url":"https://api.github.com/users/ldormoy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ldormoy/subscriptions","organizations_url":"https://api.github.com/users/ldormoy/orgs","repos_url":"https://api.github.com/users/ldormoy/repos","events_url":"https://api.github.com/users/ldormoy/events{/privacy}","received_events_url":"https://api.github.com/users/ldormoy/received_events","type":"User","site_admin":false},"created_at":"2018-05-14T14:30:09Z","updated_at":"2018-05-31T06:34:42Z","author_association":"NONE","body":"Any update on this? I seem to have the same issue with a filebeat module.\r\n\r\nMy CPU went to 100%, hot_threads show org.joni.Matcher using all CPU. I will try to find out which grok pattern caused this, but it would be nice to have more information about which patterns should not be used within ingest pipelines","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/393414507","html_url":"https://github.com/elastic/elasticsearch/issues/28731#issuecomment-393414507","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28731","id":393414507,"node_id":"MDEyOklzc3VlQ29tbWVudDM5MzQxNDUwNw==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-05-31T06:02:38Z","updated_at":"2018-05-31T08:56:24Z","author_association":"MEMBER","body":"We have been discussing how to best fix this bug with what joni currently offers. Joni has checks in its code base that for [every 30000 loops it checks if a threads interrupted flag](https://github.com/jruby/joni/blob/master/src/org/joni/ByteCodeMachine.java#L330) has been set and in that case terminate the loop. I initially thought we could not use that as that would require to fork a thread for each thread that uses ingest with a grok processor, which is not feasible in ES. However it was brought to my attention that if we add a single background thread that checks if threads that use the grok processor have been running for too long and then set the interrupt flag. Each time the grok processor is used, threads would need to register themselves. This approach sounds good to me and I will try to implement this.","performed_via_github_app":null}]