{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/20163","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20163/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20163/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20163/events","html_url":"https://github.com/elastic/elasticsearch/issues/20163","id":173205926,"node_id":"MDU6SXNzdWUxNzMyMDU5MjY=","number":20163,"title":"Aggregations using \"missing\" lead to AggregationExecutionException because they use wrong datatype if the field was never stored in an index","user":{"login":"centic9","id":548322,"node_id":"MDQ6VXNlcjU0ODMyMg==","avatar_url":"https://avatars0.githubusercontent.com/u/548322?v=4","gravatar_id":"","url":"https://api.github.com/users/centic9","html_url":"https://github.com/centic9","followers_url":"https://api.github.com/users/centic9/followers","following_url":"https://api.github.com/users/centic9/following{/other_user}","gists_url":"https://api.github.com/users/centic9/gists{/gist_id}","starred_url":"https://api.github.com/users/centic9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/centic9/subscriptions","organizations_url":"https://api.github.com/users/centic9/orgs","repos_url":"https://api.github.com/users/centic9/repos","events_url":"https://api.github.com/users/centic9/events{/privacy}","received_events_url":"https://api.github.com/users/centic9/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2016-08-25T13:40:31Z","updated_at":"2016-12-22T13:35:13Z","closed_at":"2016-12-22T13:35:13Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Elasticsearch version**: 2.1.2 and 2.3.5\n\n**Plugins installed**: [none]\n\n**JVM version**:1.8.0_80\n\n**OS version**:Windows 10\n\n**Description of the problem including expected versus actual behavior**:\n\nWe are working on a feature where different fields can be added to documents and we want them to be handled as double value. \n\nHowever we cannot say upfront which datatype these items should have and thus cannot define datatypes directly, but rather need to use dynamic templates in the mapping, so our mapping is something like the following:\n\n```\n{\n    \"testtype\": {\n        \"dynamic_templates\": [{\n            \"num_fields\": {\n                \"match\": \"amount*\",\n                \"mapping\": {\n                    \"type\": \"double\"\n                }\n            }\n        }]\n    }\n}\n```\n\nWhen using aggregations together with specifying a missing-value, we found that the returned aggregation-key is different depending upon if the field was ever stored in the index or not.\n\nAlso if we query across two indices, one which contains a value for that field and one which does not, we get the following exceptions when doing a Bucket-Term-Aggregation together with a missing-attribute:\n\n> AggregationExecutionException[Merging/Reducing the aggregations failed when computing the aggregation [ Name: testagg, Type: terms ] because: the field you gave in the aggregation query existed as two different types in two different indices]\n\nIn the test-case below, the 2nd query returns a string \"-1\", although ideally we would get a Double value -1.0. In the 3rd query we get the exception.\n\n**Steps to reproduce**:\n1. See test-case below\n\n```\npublic class OldIndexWithoutMappingTest extends ESIntegTestCase {\n    @Test\n    public void testTwoIndicesOneWithoutMapping() throws Exception {\n        initializeIndex();\n\n        // aggregate by terms with a missing-value set\n        final TermsBuilder agg = AggregationBuilders.terms(\"testagg\").field(\"amount-high\").missing(-1);\n\n        // first try with first index only, here the \"missing\" value is returned as double\n        SearchResponse searchResponse = client().prepareSearch(\"testindex-1\").addAggregation(agg).execute().actionGet();\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getHits().getTotalHits());\n        assertEquals(2, ((Terms)searchResponse.getAggregations().get(\"testagg\")).getBuckets().size());\n        assertEquals(1234.0, ((Terms)searchResponse.getAggregations().get(\"testagg\")).getBucketByKey(\"1234.0\").getKey());\n        assertEquals(-1.0, ((Terms)searchResponse.getAggregations().get(\"testagg\")).getBucketByKey(\"-1.0\").getKey());\n\n        // then with second index only, here the missing value is returned as string!\n        searchResponse = client().prepareSearch(\"testindex-2\").addAggregation(agg).execute().actionGet();\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(1, searchResponse.getHits().getTotalHits());\n        assertEquals(1, ((Terms)searchResponse.getAggregations().get(\"testagg\")).getBuckets().size());\n        assertEquals(\"-1\", ((Terms)searchResponse.getAggregations().get(\"testagg\")).getBucketByKey(\"-1\").getKey());\n\n        // and finally with both indices, here it fails because we take the missing value from both indices and these are different!\n        searchResponse = client().prepareSearch(\"testindex*\").addAggregation(agg).execute().actionGet();\n        assertEquals(0, searchResponse.getFailedShards());\n        assertEquals(2, searchResponse.getHits().getTotalHits());\n        assertEquals(2, ((Terms)searchResponse.getAggregations().get(\"testagg\")).getBuckets().size());\n    }\n\n    private void initializeIndex() throws Exception {\n        String testMapping = getMapping(XContentFactory.jsonBuilder().startObject().startObject(\"testtype\")).string();\n        System.out.println(\"Mapping: \" + testMapping);\n\n        assertAcked(prepareCreate(\"testindex-1\").addMapping(\"testtype\", testMapping));\n        assertAcked(prepareCreate(\"testindex-2\").addMapping(\"testtype\", testMapping));\n\n        List<IndexRequestBuilder> indexBuilders = new ArrayList<>();\n        indexBuilders.add(client().prepareIndex(\"testindex-1\", \"testtype\", \"index1-1\").setSource(\"{\\\"amount-high\\\":1234}\"));\n        indexBuilders.add(client().prepareIndex(\"testindex-1\", \"testtype\", \"index1-2\").setSource(\"{}\"));\n        indexBuilders.add(client().prepareIndex(\"testindex-2\", \"testtype\", \"index2-1\").setSource(\"{}\"));\n        indexRandom(true, indexBuilders);\n    }\n\n    private XContentBuilder getMapping(XContentBuilder testtype) throws IOException {\n        return testtype.startArray(\"dynamic_templates\")\n                    .startObject()\n                        .startObject(\"num_fields\")\n                            .field(\"match\", \"amount*\")\n                            .startObject(\"mapping\")\n                                .field(\"type\", \"double\").endObject()\n                        .endObject()\n                    .endObject()\n                .endArray();\n    }\n}\n```\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}