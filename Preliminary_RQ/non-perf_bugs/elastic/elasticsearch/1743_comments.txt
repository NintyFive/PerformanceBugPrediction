[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/4226931","html_url":"https://github.com/elastic/elasticsearch/issues/1743#issuecomment-4226931","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1743","id":4226931,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjY5MzE=","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2012-02-28T22:14:03Z","updated_at":"2012-02-28T22:14:03Z","author_association":"MEMBER","body":"You can safely reuse queryPart1 (in your code) in several places. Did you run into problems with it?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/4240704","html_url":"https://github.com/elastic/elasticsearch/issues/1743#issuecomment-4240704","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1743","id":4240704,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDA3MDQ=","user":{"login":"dnavre","id":341914,"node_id":"MDQ6VXNlcjM0MTkxNA==","avatar_url":"https://avatars0.githubusercontent.com/u/341914?v=4","gravatar_id":"","url":"https://api.github.com/users/dnavre","html_url":"https://github.com/dnavre","followers_url":"https://api.github.com/users/dnavre/followers","following_url":"https://api.github.com/users/dnavre/following{/other_user}","gists_url":"https://api.github.com/users/dnavre/gists{/gist_id}","starred_url":"https://api.github.com/users/dnavre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnavre/subscriptions","organizations_url":"https://api.github.com/users/dnavre/orgs","repos_url":"https://api.github.com/users/dnavre/repos","events_url":"https://api.github.com/users/dnavre/events{/privacy}","received_events_url":"https://api.github.com/users/dnavre/received_events","type":"User","site_admin":false},"created_at":"2012-02-29T16:20:51Z","updated_at":"2012-02-29T16:20:51Z","author_association":"NONE","body":"not exactly :) sorry, I was not clear enough.\nWhat i mean is this: let's suppose i have imaginary conditions condition1, condition2 and condition3. and i need to find all rows satisfying query: (condition1 && condition 2) || (condition 1 and condition3). This is just an example, in real life the query i have is pretty damned complex and i need to reuse some of it's conditions in many places. So what happens when i use this code:\n\n``` java\nBoolQueryBuilder queryPart1 = boolQuery()\nfor(int i = 0; i < arr.size(); i++) {\n    queryPart1.must(....); // building up condition1\n}\n\nBoolQueryBuilder mainQuery= boolQuery()\n    .should(\n        queryPart1 // reusing condition1\n        .must(...) // adding condition2\n    )\n    .should(\n        queryPart1 // reusing condition1\n        .sould(...) // adding condition3\n   );\n```\n\nin the end I'm ending up with this query: (condition1 && condition2) || (condition1 && condition2 && condition3)\n\nwhat i'd like to be able to do is:\n\n``` java\n// building condition1\nBoolQueryBuilder queryPart1 = boolQuery()\nfor(int i = 0; i < arr.size(); i++) {\n    queryPart1.must(....);\n}\n\nBoolQueryBuilder mainQuery= boolQuery()\n    .should(\n        queryPart1.clone() // reusing condition1\n        .must(...) // adding condition2\n    )\n    .should(\n        queryPart1.clone() // reusing condition1\n        .sould(...) // adding condition3\n   );\n```\n\nthis way i'm actually able to reuse the condition throughout the query.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/4240787","html_url":"https://github.com/elastic/elasticsearch/issues/1743#issuecomment-4240787","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1743","id":4240787,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDA3ODc=","user":{"login":"dnavre","id":341914,"node_id":"MDQ6VXNlcjM0MTkxNA==","avatar_url":"https://avatars0.githubusercontent.com/u/341914?v=4","gravatar_id":"","url":"https://api.github.com/users/dnavre","html_url":"https://github.com/dnavre","followers_url":"https://api.github.com/users/dnavre/followers","following_url":"https://api.github.com/users/dnavre/following{/other_user}","gists_url":"https://api.github.com/users/dnavre/gists{/gist_id}","starred_url":"https://api.github.com/users/dnavre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnavre/subscriptions","organizations_url":"https://api.github.com/users/dnavre/orgs","repos_url":"https://api.github.com/users/dnavre/repos","events_url":"https://api.github.com/users/dnavre/events{/privacy}","received_events_url":"https://api.github.com/users/dnavre/received_events","type":"User","site_admin":false},"created_at":"2012-02-29T16:24:23Z","updated_at":"2012-02-29T16:24:23Z","author_association":"NONE","body":"If you're okay with it I can even try to implement this functionality myself and then do a pull request to you :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/4257478","html_url":"https://github.com/elastic/elasticsearch/issues/1743#issuecomment-4257478","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1743","id":4257478,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNTc0Nzg=","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2012-03-01T12:52:30Z","updated_at":"2012-03-01T12:52:30Z","author_association":"MEMBER","body":"I still don't understand why you would need it. You mean be able to clone a query, and then modify it? The problem with supporting clone is the semantics for more complex query builders, one that wrap a filter or another query.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/4517433","html_url":"https://github.com/elastic/elasticsearch/issues/1743#issuecomment-4517433","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1743","id":4517433,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTc0MzM=","user":{"login":"dnavre","id":341914,"node_id":"MDQ6VXNlcjM0MTkxNA==","avatar_url":"https://avatars0.githubusercontent.com/u/341914?v=4","gravatar_id":"","url":"https://api.github.com/users/dnavre","html_url":"https://github.com/dnavre","followers_url":"https://api.github.com/users/dnavre/followers","following_url":"https://api.github.com/users/dnavre/following{/other_user}","gists_url":"https://api.github.com/users/dnavre/gists{/gist_id}","starred_url":"https://api.github.com/users/dnavre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnavre/subscriptions","organizations_url":"https://api.github.com/users/dnavre/orgs","repos_url":"https://api.github.com/users/dnavre/repos","events_url":"https://api.github.com/users/dnavre/events{/privacy}","received_events_url":"https://api.github.com/users/dnavre/received_events","type":"User","site_admin":false},"created_at":"2012-03-15T10:59:32Z","updated_at":"2012-03-15T10:59:32Z","author_association":"NONE","body":"sorry for the late reply.\nI'd like to be able to clone the queries so i would be able to reuse a single query several times with different modifications.\n\nlets suppose i have a boolQuery which i wrote and assigned to myBoolQuery var. I'm going to use it in several places in my final query. The first time i use it i just need to boost it, the second time i have an additional condition and the third time i have another condition. so the final result should look something like this:\n\n``` java\nboolQuery()\n.should(myBoolQuery.boost(10F))\n.should(myBoolQuery.must(/*blah */))\n.should(myBoolQuery.must(/*another blah */);\n```\n\nThis looks like what i'd really like to do but in reality it is not cause each time i call some method on myBoolQuery object it's changing the state of the object. What i'm ending with when using this query is the following conditional statement:\n\n```\nmyPreparedCondition.boost()\n|| (myPreparedCondition.boost() && must(/*blah*/))\n|| (myPreparedCondition.boost() && must(/*blah*/) && must(/*another blah*/))\n```\n\nto get the query I originally wanted i need to wrap my prepared query in an additional bool query like this:\n\n``` java\nboolQuery()\n.should(boolQuery().must(myBoolQuery).boost(10F))\n.should(boolQuery().must(myBoolQuery).must(/*blah */))\n.should(boolQuery().must(myBoolQuery).must(/*another blah */);\n```\n\nwhich in my opinion makes the code less readable and more cumbersome.\n\nIf the queries were clonable i would be able to write the query i originally wanted to have this way:\n\n``` java\nboolQuery()\n.should(myBoolQuery.clone().boost(10F))\n.should(myBoolQuery.clone().must(/*blah */))\n.should(myBoolQuery.clone().must(/*another blah */);\n```\n\nanother option to do this same thing is by making so that each query modifying method would not change the state of the existing query object but rather return a new query object with the modification inside of it. But I think this will be a damn lot harder to implement and I'm not even sure if this is something worth doing at all.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/252534535","html_url":"https://github.com/elastic/elasticsearch/issues/1743#issuecomment-252534535","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1743","id":252534535,"node_id":"MDEyOklzc3VlQ29tbWVudDI1MjUzNDUzNQ==","user":{"login":"alex-lx","id":863274,"node_id":"MDQ6VXNlcjg2MzI3NA==","avatar_url":"https://avatars3.githubusercontent.com/u/863274?v=4","gravatar_id":"","url":"https://api.github.com/users/alex-lx","html_url":"https://github.com/alex-lx","followers_url":"https://api.github.com/users/alex-lx/followers","following_url":"https://api.github.com/users/alex-lx/following{/other_user}","gists_url":"https://api.github.com/users/alex-lx/gists{/gist_id}","starred_url":"https://api.github.com/users/alex-lx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alex-lx/subscriptions","organizations_url":"https://api.github.com/users/alex-lx/orgs","repos_url":"https://api.github.com/users/alex-lx/repos","events_url":"https://api.github.com/users/alex-lx/events{/privacy}","received_events_url":"https://api.github.com/users/alex-lx/received_events","type":"User","site_admin":false},"created_at":"2016-10-10T03:53:10Z","updated_at":"2016-10-10T03:53:10Z","author_association":"NONE","body":"hi all, does this feature getting supported now? it seems muBollQuery is not clonable on version 2.4.0.\n","performed_via_github_app":null}]