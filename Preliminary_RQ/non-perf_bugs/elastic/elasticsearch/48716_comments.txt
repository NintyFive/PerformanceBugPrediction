[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/548086714","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-548086714","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":548086714,"node_id":"MDEyOklzc3VlQ29tbWVudDU0ODA4NjcxNA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-10-30T19:58:59Z","updated_at":"2019-10-30T19:58:59Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security (:Security/Authentication)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/553399467","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-553399467","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":553399467,"node_id":"MDEyOklzc3VlQ29tbWVudDU1MzM5OTQ2Nw==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2019-11-13T13:16:24Z","updated_at":"2019-11-13T13:16:24Z","author_association":"NONE","body":"@peterschretlen I'm not sure I'm getting what you mean when you say \"API keys created on their behalf\". If they don't need to access and manage those keys, which is the difference if the keys are created by the kibana user or on behalf of another user?\r\n\r\nWhat I think is important is the set of privileges, and those are not following the \"original\" user anyway.\r\n\r\nEven if creating keys on behalf of another user, they would never get more privileges than the current user (the one performing the request), or it could gain those privileges too.\r\n\r\nCould you please help to clarify? Thanks!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/553492073","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-553492073","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":553492073,"node_id":"MDEyOklzc3VlQ29tbWVudDU1MzQ5MjA3Mw==","user":{"login":"peterschretlen","id":7903188,"node_id":"MDQ6VXNlcjc5MDMxODg=","avatar_url":"https://avatars1.githubusercontent.com/u/7903188?v=4","gravatar_id":"","url":"https://api.github.com/users/peterschretlen","html_url":"https://github.com/peterschretlen","followers_url":"https://api.github.com/users/peterschretlen/followers","following_url":"https://api.github.com/users/peterschretlen/following{/other_user}","gists_url":"https://api.github.com/users/peterschretlen/gists{/gist_id}","starred_url":"https://api.github.com/users/peterschretlen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peterschretlen/subscriptions","organizations_url":"https://api.github.com/users/peterschretlen/orgs","repos_url":"https://api.github.com/users/peterschretlen/repos","events_url":"https://api.github.com/users/peterschretlen/events{/privacy}","received_events_url":"https://api.github.com/users/peterschretlen/received_events","type":"User","site_admin":false},"created_at":"2019-11-13T16:54:58Z","updated_at":"2019-11-13T16:54:58Z","author_association":"CONTRIBUTOR","body":"\r\n> I'm not sure I'm getting what you mean when you say \"API keys created on their behalf\". If they don't need to access and manage those keys, which is the difference if the keys are created by the kibana user or on behalf of another user?\r\n\r\nThe difference is the API key would be a privilege snapshot of the 'target' user, not a privilege snapshot of the user who is making the request to elasticsearch.  \r\n\r\nThe idea is an internal kibana system user ( which has very limited privileges - it only has read/write access to the system indices it needs to operate) could take create an API key of the end-user logged into Kibana  (who will have privileges to data they want to run background jobs on) when they request a background job to be created and run. \r\n\r\n> Even if creating keys on behalf of another user, they would never get more privileges than the current user (the one performing the request), or it could gain those privileges too.\r\n\r\nThe API key should represent the 'target' user permissions,  so yes there's risk that the 'requesting' user captures that key and now has expanded privileges.  That's one way to look at what the  internal Kibana system user would be doing, but this action must be initiated by the target authenticated user, with the intent of creating a background task owned by that target user. \r\n\r\nIn general we want users to have API keys, but not require users to be able to create their own API keys.  \r\n\r\ncc @mikecote @tvernum ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/553503401","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-553503401","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":553503401,"node_id":"MDEyOklzc3VlQ29tbWVudDU1MzUwMzQwMQ==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2019-11-13T17:21:16Z","updated_at":"2019-11-13T17:21:16Z","author_association":"NONE","body":"> The API key should represent the 'target' user permissions, so yes there's risk that the 'requesting' user captures that key and now has expanded privileges.\r\n\r\nThe caller will always be able to create an API key on behalf of another user (let's say `elastic`), and access its value. Then the caller can use this API key to run any other call with the `elastic` privileges.\r\nIf the caller is not able to access this value, nobody else will and they key cannot be used.\r\n\r\n> That's one way to look at what the internal Kibana system user would be doing, but this action must be initiated by the target authenticated user, with the intent of creating a background task owned by that target user.\r\n\r\nFrom an Elasticsearch point of view, it's not important how the action starts in Kibana, but who authenticates to make the request. In this case, it would be an \"unprivileged\" user that will receive a key that can be used for potentially \"privileged\" requests.\r\n\r\nMaybe I'm missing something, so please be patient if I don't see the point. I understand the need, but I'm not sure this is the safe way to address it.\r\n\r\nWhat do you think?\r\n> In general we want users to have API keys, but not require users to be able to create their own API keys.\r\n\r\nHaving a key means just knowing the id/value, and there is no real connection with the user once created (except for the ownership relationship that is used by the `manage_own_api_key`","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/553542621","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-553542621","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":553542621,"node_id":"MDEyOklzc3VlQ29tbWVudDU1MzU0MjYyMQ==","user":{"login":"peterschretlen","id":7903188,"node_id":"MDQ6VXNlcjc5MDMxODg=","avatar_url":"https://avatars1.githubusercontent.com/u/7903188?v=4","gravatar_id":"","url":"https://api.github.com/users/peterschretlen","html_url":"https://github.com/peterschretlen","followers_url":"https://api.github.com/users/peterschretlen/followers","following_url":"https://api.github.com/users/peterschretlen/following{/other_user}","gists_url":"https://api.github.com/users/peterschretlen/gists{/gist_id}","starred_url":"https://api.github.com/users/peterschretlen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peterschretlen/subscriptions","organizations_url":"https://api.github.com/users/peterschretlen/orgs","repos_url":"https://api.github.com/users/peterschretlen/repos","events_url":"https://api.github.com/users/peterschretlen/events{/privacy}","received_events_url":"https://api.github.com/users/peterschretlen/received_events","type":"User","site_admin":false},"created_at":"2019-11-13T18:39:56Z","updated_at":"2019-11-13T18:39:56Z","author_association":"CONTRIBUTOR","body":"\r\nThe hope is for something similar to the token API.  Since the logged-in user is initiating the request (and assume the kibana system has the credentials in some form), then I don't see it as much different than the token API:\r\n```\r\nPOST /_security/oauth2/token\r\n{\r\n  \"grant_type\" : \"password\",\r\n  \"username\" : \"test_admin\",\r\n  \"password\" : \"x-pack-test-password\"\r\n}\r\n```\r\n\r\nWe'd use token API (without needing kibana system at all) except for the fact that tokens have an expiry, and these background alerting jobs may run indefinitely. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/553874966","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-553874966","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":553874966,"node_id":"MDEyOklzc3VlQ29tbWVudDU1Mzg3NDk2Ng==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2019-11-14T12:53:30Z","updated_at":"2019-11-14T12:53:30Z","author_association":"NONE","body":"Thanks @peterschretlen, now I can see the full picture and how it is supposed to work. I was missing using the current target credentials in the request.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/557373296","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-557373296","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":557373296,"node_id":"MDEyOklzc3VlQ29tbWVudDU1NzM3MzI5Ng==","user":{"login":"mikecote","id":3694571,"node_id":"MDQ6VXNlcjM2OTQ1NzE=","avatar_url":"https://avatars3.githubusercontent.com/u/3694571?v=4","gravatar_id":"","url":"https://api.github.com/users/mikecote","html_url":"https://github.com/mikecote","followers_url":"https://api.github.com/users/mikecote/followers","following_url":"https://api.github.com/users/mikecote/following{/other_user}","gists_url":"https://api.github.com/users/mikecote/gists{/gist_id}","starred_url":"https://api.github.com/users/mikecote/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikecote/subscriptions","organizations_url":"https://api.github.com/users/mikecote/orgs","repos_url":"https://api.github.com/users/mikecote/repos","events_url":"https://api.github.com/users/mikecote/events{/privacy}","received_events_url":"https://api.github.com/users/mikecote/received_events","type":"User","site_admin":false},"created_at":"2019-11-22T03:32:31Z","updated_at":"2019-11-22T03:32:31Z","author_association":"NONE","body":"@tvernum from our previous conversation a few weeks ago, you were waiting to know what time frame we would be able to test this feature and ensure what is built is suitable for our needs. I have an answer for this now which would be late January (7.7 scope). This will give us enough time to also implement the feature on our side within the same release. Let me know what you think and we will reserve time for testing / validating.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/566111133","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-566111133","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":566111133,"node_id":"MDEyOklzc3VlQ29tbWVudDU2NjExMTEzMw==","user":{"login":"albertzaharovits","id":4568420,"node_id":"MDQ6VXNlcjQ1Njg0MjA=","avatar_url":"https://avatars2.githubusercontent.com/u/4568420?v=4","gravatar_id":"","url":"https://api.github.com/users/albertzaharovits","html_url":"https://github.com/albertzaharovits","followers_url":"https://api.github.com/users/albertzaharovits/followers","following_url":"https://api.github.com/users/albertzaharovits/following{/other_user}","gists_url":"https://api.github.com/users/albertzaharovits/gists{/gist_id}","starred_url":"https://api.github.com/users/albertzaharovits/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/albertzaharovits/subscriptions","organizations_url":"https://api.github.com/users/albertzaharovits/orgs","repos_url":"https://api.github.com/users/albertzaharovits/repos","events_url":"https://api.github.com/users/albertzaharovits/events{/privacy}","received_events_url":"https://api.github.com/users/albertzaharovits/received_events","type":"User","site_admin":false},"created_at":"2019-12-16T15:32:09Z","updated_at":"2019-12-16T15:32:09Z","author_association":"CONTRIBUTOR","body":"I would like to float an idea which is a bit on the wilder side:\r\n\r\nInstead of having the `kibana_system` have the privilege to generate API Keys for other users (given their credentials, which could be a short lived token in the SAML/OIDC realm case), could the user be able to generate API Keys for himself without requiring any privilege? In essence, could we be deprecating the `manage_own_api_key` privilege and grant the permission to everyone?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/566224614","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-566224614","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":566224614,"node_id":"MDEyOklzc3VlQ29tbWVudDU2NjIyNDYxNA==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-12-16T20:15:54Z","updated_at":"2019-12-16T23:13:59Z","author_association":"CONTRIBUTOR","body":"> could we be deprecating the manage_own_api_key privilege and grant the permission to everyone?\r\n\r\nNo, we absolutely don't want to do that.\r\n\r\nIf everyone can create API Keys then they become a backdoor for avoiding the authentication controls that the admin has put in place (MFA/PKI). We have intentionally made them an opt-in feature per user.\r\n\r\nAs an example, if you configure your cluster to require SAML in order to satisfy certain security policies (MFA, password policies, account locking, etc) but your SAML users are allowed to create API Keys, then they can simply by-pass all of those protections.\r\nThe only option to solve that is to turn off API-keys across the board, but then you can't use alerting.\r\n\r\nThe option proposed here is safe because the user never gets access to the API key secret. Alerting actually \"owns\" the API key and protects it so that the user doesn't have direct access to the cluster, but Alerting can run tasks on their behalf.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/573840485","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-573840485","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":573840485,"node_id":"MDEyOklzc3VlQ29tbWVudDU3Mzg0MDQ4NQ==","user":{"login":"peterschretlen","id":7903188,"node_id":"MDQ6VXNlcjc5MDMxODg=","avatar_url":"https://avatars1.githubusercontent.com/u/7903188?v=4","gravatar_id":"","url":"https://api.github.com/users/peterschretlen","html_url":"https://github.com/peterschretlen","followers_url":"https://api.github.com/users/peterschretlen/followers","following_url":"https://api.github.com/users/peterschretlen/following{/other_user}","gists_url":"https://api.github.com/users/peterschretlen/gists{/gist_id}","starred_url":"https://api.github.com/users/peterschretlen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peterschretlen/subscriptions","organizations_url":"https://api.github.com/users/peterschretlen/orgs","repos_url":"https://api.github.com/users/peterschretlen/repos","events_url":"https://api.github.com/users/peterschretlen/events{/privacy}","received_events_url":"https://api.github.com/users/peterschretlen/received_events","type":"User","site_admin":false},"created_at":"2020-01-13T19:52:44Z","updated_at":"2020-01-13T19:52:44Z","author_association":"CONTRIBUTOR","body":"Perhaps the scope of this needs to be both `create` and  `invalidate` ?  \r\n\r\nWhen we update an alert, we also update the API key on the alert to reflect any changes in the user's privileges. To prevent a lot of 'dangling' API keys we'd also like to invalidate the old key, or at least prevent it from cluttering the API key UI view in Kibana.  \r\n\r\nSee https://github.com/elastic/kibana/issues/54525 for an example of this, where the alerts for SIEM detection engine in 7.6 can be updated, but they leave behind 'dangling' keys when the user has only the `manage_own_api_key` privilege.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/574342888","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-574342888","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":574342888,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NDM0Mjg4OA==","user":{"login":"peterschretlen","id":7903188,"node_id":"MDQ6VXNlcjc5MDMxODg=","avatar_url":"https://avatars1.githubusercontent.com/u/7903188?v=4","gravatar_id":"","url":"https://api.github.com/users/peterschretlen","html_url":"https://github.com/peterschretlen","followers_url":"https://api.github.com/users/peterschretlen/followers","following_url":"https://api.github.com/users/peterschretlen/following{/other_user}","gists_url":"https://api.github.com/users/peterschretlen/gists{/gist_id}","starred_url":"https://api.github.com/users/peterschretlen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peterschretlen/subscriptions","organizations_url":"https://api.github.com/users/peterschretlen/orgs","repos_url":"https://api.github.com/users/peterschretlen/repos","events_url":"https://api.github.com/users/peterschretlen/events{/privacy}","received_events_url":"https://api.github.com/users/peterschretlen/received_events","type":"User","site_admin":false},"created_at":"2020-01-14T19:50:19Z","updated_at":"2020-01-14T19:50:19Z","author_association":"CONTRIBUTOR","body":"> @tvernum from our previous conversation a few weeks ago, you were waiting to know what time frame we would be able to test this feature and ensure what is built is suitable for our needs. I have an answer for this now which would be late January (7.7 scope). This will give us enough time to also implement the feature on our side within the same release. Let me know what you think and we will reserve time for testing / validating.\r\n\r\n@tvernum @bytebilly since we're about to start 7.7, I wanted to make sure this is still part of your 7.7 plans? We still expect to be able to test this by late January. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/574469167","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-574469167","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":574469167,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NDQ2OTE2Nw==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2020-01-15T02:40:42Z","updated_at":"2020-01-15T02:40:42Z","author_association":"CONTRIBUTOR","body":"@peterschretlen Yes, this is still at the top of our 7.7 plans, and I haven't heard of anything coming down the pipeline that is likely to push it out.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/574531126","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-574531126","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":574531126,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NDUzMTEyNg==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2020-01-15T07:24:47Z","updated_at":"2020-01-15T07:24:47Z","author_association":"CONTRIBUTOR","body":"## Proposal\r\n\r\nAdd new endpoint\r\n```\r\nPOST /_security/oauth2/api_key\r\n```\r\nThe body will mimic the body for /_security/oauth2/token, with the following changes:\r\n- The `grant_type` may be `password` or `access_token`, no other grant types are supported\r\n- Depending on the grant type, the body should have `username` and `password` fields, or an `access_token` field.\r\n- The `scope` may optionally be provided validated according to the same rules as the existing token endpoint.\r\n- A new `api_key` nested object with the same content as the body of the `POST /_security/api_key` endpoint.\r\n\r\nInternally this API will call a new Action with a name of `cluster:admin/xpack/security/api_key/grant`. That action will work like the `CreateTokenAction`, but generate API keys instead of short lived tokens\r\n\r\nA new cluster privilege called `grant_api_key` will be added that allows the user to call this new action.\r\nWe _may_ decide to exclude the new action from the existing `manage_api_key` privilege, but I'm leaning towards not doing that. (**TBC**).\r\nThe `manage_own_api_key` privilege will _not_ allow access to the new action.\r\n\r\nThe `kibana_system` role will be given the new `grant_api_key` system privilege and the `cluster:admin/xpack/security/api_key/invalidate` privilege.\r\nThis will allow Kibana to:\r\n- create new api keys on behalf of users when it has access to their credentials (username/password, or an access token)\r\n- get information about an API key by authenticating with that API key\r\n- invalidate any API key\r\n\r\nWe can discuss alternatives for those last 2 if anyone sees an issue, but I think we're comfortable with Kibana being able to invalidate all API keys. At a worse case it's a DoS risk, but there's no privilege escalation risk.\r\n\r\n---\r\n\r\n@elastic/es-security , @peterschretlen , @elastic/kibana-security \r\nCan you review and provide feedback on the proposal above?\r\n\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/575252969","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-575252969","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":575252969,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NTI1Mjk2OQ==","user":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"created_at":"2020-01-16T17:13:51Z","updated_at":"2020-01-16T17:13:51Z","author_association":"CONTRIBUTOR","body":"I like Tim's proposal in general and I'd like to suggest some changes. If these look like implementation details we can defer discussion to the actual PR, I just noted what I thought about. In general, it's a +1 from me.  \r\n\r\n- I don't see a reason to overload the `_security/oauth2` namespace since there is nothing oauth2-like or oauth2-specific about this API. I propose we use `/_security/api_key/grant` or `/_security/api_key/user` ( and we could also allow introduce `/_security/api_key/self` as an alias to `/_security/api_key` ). I hold no strong opinions for this, we could go with a totally new endpoint under `_security` too . \r\n\r\n- I don't think we need scope for something. IIRC we added to the token endpoint to be closer to the oAuth2 standard but we don't use it anyhow.   \r\n\r\n> We may decide to exclude the new action from the existing manage_api_key privilege, but I'm leaning towards not doing that. \r\n\r\n++ I see no reason to exclude this. Given that the knowledge/possession of valid credentials/token is required either way to call the new API, there is no additional permission a user with `manage_api_key` gets with the inclusion of `grant_api_key`.  User A with `manage_api_key` could already authenticate as user B and get an API key for user B by calling `_security/api_key`.  \r\n\r\n> The kibana_system role will be given the new `grant_api_key` system privilege and the cluster:admin/xpack/security/api_key/invalidate privilege.\r\n\r\nIf we  don't exclude `grant_api_key` from `manage_api_key` wouldn't it be equivalent to give `manage_api_key` to kibana_system role ? With the difference that the latter will allow `kibana_system` to get information about API keys without the user's credentials. I don't think this is problematic but argument can be made in favor of least privilege principle. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/575286955","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-575286955","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":575286955,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NTI4Njk1NQ==","user":{"login":"kobelb","id":627123,"node_id":"MDQ6VXNlcjYyNzEyMw==","avatar_url":"https://avatars0.githubusercontent.com/u/627123?v=4","gravatar_id":"","url":"https://api.github.com/users/kobelb","html_url":"https://github.com/kobelb","followers_url":"https://api.github.com/users/kobelb/followers","following_url":"https://api.github.com/users/kobelb/following{/other_user}","gists_url":"https://api.github.com/users/kobelb/gists{/gist_id}","starred_url":"https://api.github.com/users/kobelb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kobelb/subscriptions","organizations_url":"https://api.github.com/users/kobelb/orgs","repos_url":"https://api.github.com/users/kobelb/repos","events_url":"https://api.github.com/users/kobelb/events{/privacy}","received_events_url":"https://api.github.com/users/kobelb/received_events","type":"User","site_admin":false},"created_at":"2020-01-16T18:38:32Z","updated_at":"2020-01-16T18:38:32Z","author_association":"CONTRIBUTOR","body":"@tvernum's proposal with or without the changes that @jkakavas suggested look great to me! I I don't have much to add besides that. All of the current auth providers in Kibana are either token based or username/password based, so we should be able to use this for all authenticated users.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/575748891","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-575748891","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":575748891,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NTc0ODg5MQ==","user":{"login":"peterschretlen","id":7903188,"node_id":"MDQ6VXNlcjc5MDMxODg=","avatar_url":"https://avatars1.githubusercontent.com/u/7903188?v=4","gravatar_id":"","url":"https://api.github.com/users/peterschretlen","html_url":"https://github.com/peterschretlen","followers_url":"https://api.github.com/users/peterschretlen/followers","following_url":"https://api.github.com/users/peterschretlen/following{/other_user}","gists_url":"https://api.github.com/users/peterschretlen/gists{/gist_id}","starred_url":"https://api.github.com/users/peterschretlen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peterschretlen/subscriptions","organizations_url":"https://api.github.com/users/peterschretlen/orgs","repos_url":"https://api.github.com/users/peterschretlen/repos","events_url":"https://api.github.com/users/peterschretlen/events{/privacy}","received_events_url":"https://api.github.com/users/peterschretlen/received_events","type":"User","site_admin":false},"created_at":"2020-01-17T18:48:30Z","updated_at":"2020-01-17T18:48:30Z","author_association":"CONTRIBUTOR","body":"Thanks @tvernum, the proposal looks good to me, it covers the requirements Kibana has.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/575749995","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-575749995","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":575749995,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NTc0OTk5NQ==","user":{"login":"albertzaharovits","id":4568420,"node_id":"MDQ6VXNlcjQ1Njg0MjA=","avatar_url":"https://avatars2.githubusercontent.com/u/4568420?v=4","gravatar_id":"","url":"https://api.github.com/users/albertzaharovits","html_url":"https://github.com/albertzaharovits","followers_url":"https://api.github.com/users/albertzaharovits/followers","following_url":"https://api.github.com/users/albertzaharovits/following{/other_user}","gists_url":"https://api.github.com/users/albertzaharovits/gists{/gist_id}","starred_url":"https://api.github.com/users/albertzaharovits/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/albertzaharovits/subscriptions","organizations_url":"https://api.github.com/users/albertzaharovits/orgs","repos_url":"https://api.github.com/users/albertzaharovits/repos","events_url":"https://api.github.com/users/albertzaharovits/events{/privacy}","received_events_url":"https://api.github.com/users/albertzaharovits/received_events","type":"User","site_admin":false},"created_at":"2020-01-17T18:51:36Z","updated_at":"2020-01-17T18:51:36Z","author_association":"CONTRIBUTOR","body":"@tvernum your proposal LGTM .\r\nTwo questions:\r\n\r\n- Who \"owns\" the API Key, the target user or the caller of the API (the system user)? I am leaning for the user, because in the end this is a core aspect that distinguishes long lived API keys from authn tokens, that the user has a view of the sessions impersonating him.\r\n\r\n- From https://github.com/elastic/elasticsearch/issues/48716#issuecomment-566224614 I agree creating your own API key is undesirable, but how about invalidating own API keys? Can we grant the privilege to invalidate owned API keys to every user? In this case, if the kibana system creates api keys from credentials under the ownership of the user, the user is aware of them and can invalidate them? Related, if API keys can invalidate themselves, then I don't believe kibana system requires the privilege to invalidate all.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/577205852","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-577205852","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":577205852,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NzIwNTg1Mg==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2020-01-22T14:26:41Z","updated_at":"2020-01-22T14:26:41Z","author_association":"NONE","body":"I like the overall plan!\r\n\r\n> I don't see a reason to overload the _security/oauth2 namespace since there is nothing oauth2-like or oauth2-specific about this API.\r\n\r\nI agree on this point, if it's not an \"extension\" of OAuth2 we should not use that namespace","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/590686816","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-590686816","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":590686816,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDY4NjgxNg==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2020-02-25T05:10:11Z","updated_at":"2020-02-25T05:10:11Z","author_association":"CONTRIBUTOR","body":">   Who \"owns\" the API Key, the target user or the caller of the API (the system user)? \r\n\r\nThe target user. It holds their privileges, and is operating on their behalf. That is the user that we want to show in audit logs, etc. \r\n\r\n> but how about invalidating own API keys? Can we grant the privilege to invalidate owned API keys to every user? \r\n\r\nWe debated this when adding the `manage_own_api_key` privilege, and my recollection is that we didn't have a compelling reason either way, except least privilege is better, so we opted for a model where it was possible to define an API key that cannot invalidate itself (but they typically _can_ because the owning user would have that privilege and would pass it on to the key).\r\n\r\nIf we reversed that, it would solve this problem, but it would also be a backwards incompatible change to security which bothers me.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/590737285","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-590737285","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":590737285,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDczNzI4NQ==","user":{"login":"jowiho","id":2202391,"node_id":"MDQ6VXNlcjIyMDIzOTE=","avatar_url":"https://avatars3.githubusercontent.com/u/2202391?v=4","gravatar_id":"","url":"https://api.github.com/users/jowiho","html_url":"https://github.com/jowiho","followers_url":"https://api.github.com/users/jowiho/followers","following_url":"https://api.github.com/users/jowiho/following{/other_user}","gists_url":"https://api.github.com/users/jowiho/gists{/gist_id}","starred_url":"https://api.github.com/users/jowiho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowiho/subscriptions","organizations_url":"https://api.github.com/users/jowiho/orgs","repos_url":"https://api.github.com/users/jowiho/repos","events_url":"https://api.github.com/users/jowiho/events{/privacy}","received_events_url":"https://api.github.com/users/jowiho/received_events","type":"User","site_admin":false},"created_at":"2020-02-25T08:08:24Z","updated_at":"2020-02-25T08:08:24Z","author_association":"CONTRIBUTOR","body":"The cloud platform team would be very happy with this feature. We will be rolling out our \"public API\" feature in the near future, that allows user to manage their ESS deployments through our API while authenticating with API keys.\r\n\r\nWe'll be managing all users and their API keys in our \"security cluster\". We use a system user to interact with the security cluster (not unlike Kibana). Users don't get direct access to that cluster, but we still try to lock down things as much as possible. So ideally the system user could create API keys for users without us having to grant those users the `manage_own_api_key` role. Same for invalidating API keys.\r\n\r\nWould this feature also allow us to create API keys on behalf of users from external realms like SAML, assuming that we explicitly specify the desired permissions when creating a key?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/604184364","html_url":"https://github.com/elastic/elasticsearch/issues/48716#issuecomment-604184364","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48716","id":604184364,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNDE4NDM2NA==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2020-03-26T02:00:49Z","updated_at":"2020-03-26T02:00:49Z","author_association":"CONTRIBUTOR","body":"This was implemented in\r\n- #52886\r\n- #53527\r\n- #53824","performed_via_github_app":null}]