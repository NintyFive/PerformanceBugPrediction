{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/25708","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25708/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25708/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25708/events","html_url":"https://github.com/elastic/elasticsearch/issues/25708","id":242700140,"node_id":"MDU6SXNzdWUyNDI3MDAxNDA=","number":25708,"title":"Percentiles deathspin scenario","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":176784422,"node_id":"MDU6TGFiZWwxNzY3ODQ0MjI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/won't%20fix","name":"won't fix","color":"f7c6c7","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-07-13T13:25:26Z","updated_at":"2017-08-08T09:03:16Z","closed_at":"2017-08-04T13:52:31Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Percentiles perform very poorly when run on a large index with a low-cardinality field. In my case it was an index of 25 million tweets and an integer field for \"hashtagCount\" with only 5 unique values (0 to 4 because I dumped tweets with 5 or more hashtags). 75% of documents had zero hashtags.\r\n\r\nPercentiles ran OK on a high cardinality field in this index (e.g. tweetID) with a response time of 5 seconds. However, when running on the low-cardinality `tagCount` field Kibana would timeout and the request would continue running in the background for what seemed like minutes. Hot threads showed this:\r\n\r\n\t::: {EIFEeAA}{EIFEeAAAQAC2LXDX_____w}{lCpDe9Y3SPyetjUB5KaWBA}{127.0.0.1}{127.0.0.1:9300}\r\n\t   Hot threads at 2017-07-13T13:12:27.523Z, interval=500ms, busiestThreads=3, ignoreIdleThreads=true:\r\n   \r\n\t   99.9% (499.7ms out of 500ms) cpu usage by thread 'elasticsearch[EIFEeAA][search][T#12]'\r\n\t\t 2/10 snapshots sharing following 33 elements\r\n\t\t   com.tdunning.math.stats.AVLTreeDigest.add(AVLTreeDigest.java:82)\r\n\t\t   com.tdunning.math.stats.AVLTreeDigest.add(AVLTreeDigest.java:65)\r\n\t\t   com.tdunning.math.stats.AbstractTDigest.add(AbstractTDigest.java:118)\r\n\t\t   org.elasticsearch.search.aggregations.metrics.percentiles.tdigest.AbstractTDigestPercentilesAggregator$1.collect(AbstractTDigestPercentilesAggregator.java:93)\r\n\t\t   org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\r\n\t\t   org.apache.lucene.search.MultiCollector$MultiLeafCollector.collect(MultiCollector.java:174)\r\n\t\t   org.apache.lucene.search.MatchAllDocsQuery$1$1.score(MatchAllDocsQuery.java:56)\r\n\t\t   org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\r\n\t\t   org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:658)\r\n\t\t   org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\r\n\t\t   org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:228)\r\n\t\t   org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:102)\r\n\t\t   org.elasticsearch.indices.IndicesService.lambda$16(IndicesService.java:1129)\r\n\t\t   org.elasticsearch.indices.IndicesService$$Lambda$1744/1658220583.accept(Unknown Source)\r\n\t\t   org.elasticsearch.indices.IndicesService.lambda$18(IndicesService.java:1210)\r\n\t\t   org.elasticsearch.indices.IndicesService$$Lambda$1745/921742116.get(Unknown Source)\r\n\t\t   org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:160)\r\n\t\t   org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:1)\r\n\t\t   org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:401)\r\n\t\t   org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:116)\r\n\t\t   org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1216)\r\n\t\t   org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1128)\r\n\t\t   org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:245)\r\n\t\t   org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:262)\r\n\t\t   org.elasticsearch.action.search.SearchTransportService$6.messageReceived(SearchTransportService.java:314)\r\n\t\t   org.elasticsearch.action.search.SearchTransportService$6.messageReceived(SearchTransportService.java:1)\r\n\t\t   org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:66)\r\n\t\t   org.elasticsearch.transport.TransportService$7.doRun(TransportService.java:650)\r\n\t\t   org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:638)\r\n\t\t   org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\t\t   java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\t\t   java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\t\t   java.lang.Thread.run(Thread.java:745)\r\n\t\t 8/10 snapshots sharing following 33 elements\r\n\t\t   com.tdunning.math.stats.AVLTreeDigest.add(AVLTreeDigest.java:97)\r\n\t\t   com.tdunning.math.stats.AVLTreeDigest.add(AVLTreeDigest.java:65)\r\n\t\t   com.tdunning.math.stats.AbstractTDigest.add(AbstractTDigest.java:118)\r\n\t\t   org.elasticsearch.search.aggregations.metrics.percentiles.tdigest.AbstractTDigestPercentilesAggregator$1.collect(AbstractTDigestPercentilesAggregator.java:93)\r\n\t\t   org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\r\n\t\t   org.apache.lucene.search.MultiCollector$MultiLeafCollector.collect(MultiCollector.java:174)\r\n\t\t   org.apache.lucene.search.MatchAllDocsQuery$1$1.score(MatchAllDocsQuery.java:56)\r\n\t\t   org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\r\n\t\t   org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:658)\r\n\t\t   org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\r\n\t\t   org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:228)\r\n\t\t   org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:102)\r\n\t\t   org.elasticsearch.indices.IndicesService.lambda$16(IndicesService.java:1129)\r\n\t\t   org.elasticsearch.indices.IndicesService$$Lambda$1744/1658220583.accept(Unknown Source)\r\n\t\t   org.elasticsearch.indices.IndicesService.lambda$18(IndicesService.java:1210)\r\n\t\t   org.elasticsearch.indices.IndicesService$$Lambda$1745/921742116.get(Unknown Source)\r\n\t\t   org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:160)\r\n\t\t   org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:1)\r\n\t\t   org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:401)\r\n\t\t   org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:116)\r\n\t\t   org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1216)\r\n\t\t   org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1128)\r\n\t\t   org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:245)\r\n\t\t   org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:262)\r\n\t\t   org.elasticsearch.action.search.SearchTransportService$6.messageReceived(SearchTransportService.java:314)\r\n\t\t   org.elasticsearch.action.search.SearchTransportService$6.messageReceived(SearchTransportService.java:1)\r\n\t\t   org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:66)\r\n\t\t   org.elasticsearch.transport.TransportService$7.doRun(TransportService.java:650)\r\n\t\t   org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:638)\r\n\t\t   org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\t\t   java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\t\t   java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\t\t   java.lang.Thread.run(Thread.java:745)\r\n\r\n\r\nWhen the percentiles agg did complete these were the values:\r\n\r\n<img width=\"595\" alt=\"console_-_kibana\" src=\"https://user-images.githubusercontent.com/170925/28168150-100a9e34-67d6-11e7-90ae-d2a4a7d20097.png\">\r\n\r\nA cardinality agg on the same field took 2 seconds.\r\n\r\nIt might seem strange to perform percentiles on such a low-cardinality field but I was running a generic piece of analysis to find fields that had extreme outliers e.g. min or max values vastly different to their 1st or 99th percentile extremes. This was to help discover data quality issues like non-sensical dates or people ages that otherwise mess up bar charts.","closed_by":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"performed_via_github_app":null}