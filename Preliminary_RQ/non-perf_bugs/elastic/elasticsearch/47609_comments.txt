[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/538575411","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-538575411","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":538575411,"node_id":"MDEyOklzc3VlQ29tbWVudDUzODU3NTQxMQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2019-10-04T22:07:11Z","updated_at":"2019-10-04T22:07:11Z","author_association":"MEMBER","body":"Is it expected that this API would be called in bulk (i.e., with more than a few)? If not, what's the overhead of sending multiple requests, or sending multiple requests in parallel? We aim to keep our APIs and the surface areas of our APIs small, otherwise we bloat how much that we have to maintain.\r\n\r\n*If* we were to enhance this API to allow deleting multiple at once, I wouldn't be in favor using a comma to separate values. We should be explicit that multiple keys are being deleted, something like:\r\n\r\n```\r\n{\r\n  \"ids\" : [ \"key1\", \"key2\", \"key3\" ]\r\n}\r\n```\r\n\r\nThis makes it so much clearer and easier to work with, for clients and us internally.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/538878259","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-538878259","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":538878259,"node_id":"MDEyOklzc3VlQ29tbWVudDUzODg3ODI1OQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-10-07T07:44:21Z","updated_at":"2019-10-07T07:44:21Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security (:Security/Security)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/585911241","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-585911241","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":585911241,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NTkxMTI0MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-02-13T18:46:51Z","updated_at":"2020-02-13T18:46:51Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-ui (:ES-UI)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696164406","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-696164406","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":696164406,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjE2NDQwNg==","user":{"login":"jen-huang","id":1965714,"node_id":"MDQ6VXNlcjE5NjU3MTQ=","avatar_url":"https://avatars0.githubusercontent.com/u/1965714?v=4","gravatar_id":"","url":"https://api.github.com/users/jen-huang","html_url":"https://github.com/jen-huang","followers_url":"https://api.github.com/users/jen-huang/followers","following_url":"https://api.github.com/users/jen-huang/following{/other_user}","gists_url":"https://api.github.com/users/jen-huang/gists{/gist_id}","starred_url":"https://api.github.com/users/jen-huang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jen-huang/subscriptions","organizations_url":"https://api.github.com/users/jen-huang/orgs","repos_url":"https://api.github.com/users/jen-huang/repos","events_url":"https://api.github.com/users/jen-huang/events{/privacy}","received_events_url":"https://api.github.com/users/jen-huang/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T14:47:51Z","updated_at":"2020-09-21T14:51:18Z","author_association":"NONE","body":"Hi Security team, the Ingest Management team has a need for bulk invalidate API keys. We expose a UI for taking [bulk actions](https://github.com/elastic/kibana/pull/77690) on agents, including bulk unenroll and bulk force unenroll. During force unenrollment, we invalidate two API keys per agent. The user can potentially unenroll up to 10,000 agents at a time using this UI, resulting in the need to invalidate 20,000 keys. As you can probably imagine, sending 20,000 invalidate requests in parallel doesn't work too well today :) Can the team consider re-prioritizing this feature request with this use case in mind? In the meantime I will experiment with batching the requests as our workaround.\r\n\r\ncc @ruflin @ph ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696782151","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-696782151","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":696782151,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njc4MjE1MQ==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T15:05:53Z","updated_at":"2020-09-22T15:05:53Z","author_association":"NONE","body":"Thanks for raising your use case for this feature.\r\nI think we could reconsider if we want to do that, and which are the implications if we decide to go with it.\r\nOr just see if there is a different solution to solve the problem.\r\n\r\nPinging @elastic/es-security to get more feedback on the technical side of the proposal.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/697747944","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-697747944","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":697747944,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Nzc0Nzk0NA==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2020-09-23T17:29:02Z","updated_at":"2020-09-23T17:29:02Z","author_association":"NONE","body":"We discussed with the team, and we have a few questions about the end to end flow that you expect to see in Fleet.\r\n\r\nGiven the designs in https://github.com/elastic/kibana/issues/72712, I guess that you expect users to request any possible bulk combination, not just related on policy, or creator. So, existing selectors for bulk invalidate in the [invalidate API](https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-api-key.html) don't solve the problem.\r\nIs that correct?\r\n\r\nAnother question is how you get the list of IDs for the selected agents. Is it something that is attached to the agent information? Do you need to fetch them from Elasticsearch? It could be useful to check if there is some optimization for the end to end flow rather than just the invalidate action.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/697769936","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-697769936","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":697769936,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Nzc2OTkzNg==","user":{"login":"ph","id":640,"node_id":"MDQ6VXNlcjY0MA==","avatar_url":"https://avatars0.githubusercontent.com/u/640?v=4","gravatar_id":"","url":"https://api.github.com/users/ph","html_url":"https://github.com/ph","followers_url":"https://api.github.com/users/ph/followers","following_url":"https://api.github.com/users/ph/following{/other_user}","gists_url":"https://api.github.com/users/ph/gists{/gist_id}","starred_url":"https://api.github.com/users/ph/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ph/subscriptions","organizations_url":"https://api.github.com/users/ph/orgs","repos_url":"https://api.github.com/users/ph/repos","events_url":"https://api.github.com/users/ph/events{/privacy}","received_events_url":"https://api.github.com/users/ph/received_events","type":"User","site_admin":false},"created_at":"2020-09-23T17:42:07Z","updated_at":"2020-09-23T17:42:07Z","author_association":"MEMBER","body":"@bytebilly I think it could be possible in some cases to optimize the unenrollment, let's say we want to revoke all Agent linked to a specific configuration, maybe we could attach that information as metadata and have the possibility to _delete by query_, or we could use the \"realm_name\" for that.\r\n\r\nWe have to assume that in theory, we could do partial unenroll of Agent from a configuration.\r\n\r\nI will let @jen-huang comment on how we get the list of IDs.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/697807654","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-697807654","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":697807654,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzgwNzY1NA==","user":{"login":"jen-huang","id":1965714,"node_id":"MDQ6VXNlcjE5NjU3MTQ=","avatar_url":"https://avatars0.githubusercontent.com/u/1965714?v=4","gravatar_id":"","url":"https://api.github.com/users/jen-huang","html_url":"https://github.com/jen-huang","followers_url":"https://api.github.com/users/jen-huang/followers","following_url":"https://api.github.com/users/jen-huang/following{/other_user}","gists_url":"https://api.github.com/users/jen-huang/gists{/gist_id}","starred_url":"https://api.github.com/users/jen-huang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jen-huang/subscriptions","organizations_url":"https://api.github.com/users/jen-huang/orgs","repos_url":"https://api.github.com/users/jen-huang/repos","events_url":"https://api.github.com/users/jen-huang/events{/privacy}","received_events_url":"https://api.github.com/users/jen-huang/received_events","type":"User","site_admin":false},"created_at":"2020-09-23T18:05:27Z","updated_at":"2020-09-23T18:05:27Z","author_association":"NONE","body":"Hi, you can look at this code branch for the flow: [forceUnenrollAgents()](https://github.com/elastic/kibana/blob/master/x-pack/plugins/ingest_manager/server/services/agents/unenroll.ts#L92)\r\n\r\nA few key points:\r\n- Agent objects have references to two API key IDs\r\n- Those API keys are always created by the `fleet_enroll` user (a system user we create) using `default_native` realm. Thus, it's not possible to invalidate by user or realm because that will invalidate other keys that the user didn't choose.\r\n- The user selection can be done by list of agent IDs, or by query. Regardless, we first fetch all agent objects and from that information, extract all their API key IDs.\r\n\r\nSince I last commented, I was able to improve the performance here by batching invalidate requests by ID to 500 keys at a time. This worked well in my local testing and was sufficient for our upper limit of 10,000 agents/20,000 keys.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/700976598","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-700976598","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":700976598,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDk3NjU5OA==","user":{"login":"bytebilly","id":52658645,"node_id":"MDQ6VXNlcjUyNjU4NjQ1","avatar_url":"https://avatars0.githubusercontent.com/u/52658645?v=4","gravatar_id":"","url":"https://api.github.com/users/bytebilly","html_url":"https://github.com/bytebilly","followers_url":"https://api.github.com/users/bytebilly/followers","following_url":"https://api.github.com/users/bytebilly/following{/other_user}","gists_url":"https://api.github.com/users/bytebilly/gists{/gist_id}","starred_url":"https://api.github.com/users/bytebilly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bytebilly/subscriptions","organizations_url":"https://api.github.com/users/bytebilly/orgs","repos_url":"https://api.github.com/users/bytebilly/repos","events_url":"https://api.github.com/users/bytebilly/events{/privacy}","received_events_url":"https://api.github.com/users/bytebilly/received_events","type":"User","site_admin":false},"created_at":"2020-09-29T20:45:57Z","updated_at":"2020-09-29T20:45:57Z","author_association":"NONE","body":"> Since I last commented, I was able to improve the performance here by batching invalidate requests by ID to 500 keys at a time. This worked well in my local testing and was sufficient for our upper limit of 10,000 agents/20,000 keys.\r\n\r\nCould you please share what your improvements are? How did you implement batching for invalidate by ID? Are you still doing individual invalidate requests for each key, or do you access the security index directly? Thanks!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/700979390","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-700979390","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":700979390,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDk3OTM5MA==","user":{"login":"jen-huang","id":1965714,"node_id":"MDQ6VXNlcjE5NjU3MTQ=","avatar_url":"https://avatars0.githubusercontent.com/u/1965714?v=4","gravatar_id":"","url":"https://api.github.com/users/jen-huang","html_url":"https://github.com/jen-huang","followers_url":"https://api.github.com/users/jen-huang/followers","following_url":"https://api.github.com/users/jen-huang/following{/other_user}","gists_url":"https://api.github.com/users/jen-huang/gists{/gist_id}","starred_url":"https://api.github.com/users/jen-huang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jen-huang/subscriptions","organizations_url":"https://api.github.com/users/jen-huang/orgs","repos_url":"https://api.github.com/users/jen-huang/repos","events_url":"https://api.github.com/users/jen-huang/events{/privacy}","received_events_url":"https://api.github.com/users/jen-huang/received_events","type":"User","site_admin":false},"created_at":"2020-09-29T20:51:56Z","updated_at":"2020-09-29T20:51:56Z","author_association":"NONE","body":"The improvements still do individual requests for each key through @elastic/kibana-security's [`authc.invalidateAPIKey`](https://github.com/elastic/kibana/blob/master/x-pack/plugins/security/server/authentication/index.ts#L172) interface. The batching simply sends up to [500 invalidate requests to ES in parallel](https://github.com/elastic/kibana/blob/master/x-pack/plugins/ingest_manager/server/services/agents/unenroll.ts#L130-L136), instead of 20,000.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/701117255","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-701117255","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":701117255,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMTExNzI1NQ==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-09-30T02:16:02Z","updated_at":"2020-09-30T02:22:02Z","author_association":"MEMBER","body":"I'd like to have agreement on a small design for this issue here. The payload of [current API](https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-api-key.html#security-api-invalidate-api-key-request-body) has a field `id` that expects a single API key ID to be provided. To support multiple IDs, I can see following three options:\r\n\r\n1. Add a new field `ids` to takes a list of IDs, e.g. `{ \"ids\": [\"abcd\", \"efgh\"] }`.\r\n2. Make the existing `id` field accept comma separated IDs so it can work with either a single ID or multiple ones, e.g. `{ \"id\": \"abcd,efgh\" }`\r\n3. Make the existing `id` field accept either a string or a list, e.g. both these are acceptable, `{ \"id\": \"abcd\" }` and `{ \"id\":[\"abcd\",\"efgh\"] }`\r\n\r\nI prefer option 1 because:\r\n* Option 2 makes sense only if it is a URL path parameter, not for payload.\r\n* Option 3 has some complexities in terms of code, API spec and client side code (especially for clients in a statically typed language, e.g. Java). It also feels inconsistent. I don't believe we have any other payload field behave like this and I don't want to introduce the first one.\r\n* The name `id` in both option 2 & 3 is slightly confusing when it can take multiple IDs.\r\n\r\nWith above said, option 1 also has its own overhead:\r\n* What will be the long term story for these two fields, `id` and `ids`? It's not urgent but I don't think we want to keep both of them forever? If we want to deprecate `id`, it will incur deprecation and BWC cost.\r\n* Client side code needs to be updated to accept new field and tests need to be udpated as well\r\n\r\nSome common overhead for changing request/response entities:\r\n* API spec update and releveant tests\r\n* Doc update and relevant tests","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/701239572","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-701239572","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":701239572,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMTIzOTU3Mg==","user":{"login":"albertzaharovits","id":4568420,"node_id":"MDQ6VXNlcjQ1Njg0MjA=","avatar_url":"https://avatars2.githubusercontent.com/u/4568420?v=4","gravatar_id":"","url":"https://api.github.com/users/albertzaharovits","html_url":"https://github.com/albertzaharovits","followers_url":"https://api.github.com/users/albertzaharovits/followers","following_url":"https://api.github.com/users/albertzaharovits/following{/other_user}","gists_url":"https://api.github.com/users/albertzaharovits/gists{/gist_id}","starred_url":"https://api.github.com/users/albertzaharovits/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/albertzaharovits/subscriptions","organizations_url":"https://api.github.com/users/albertzaharovits/orgs","repos_url":"https://api.github.com/users/albertzaharovits/repos","events_url":"https://api.github.com/users/albertzaharovits/events{/privacy}","received_events_url":"https://api.github.com/users/albertzaharovits/received_events","type":"User","site_admin":false},"created_at":"2020-09-30T08:18:56Z","updated_at":"2020-09-30T08:18:56Z","author_association":"CONTRIBUTOR","body":"@ywangd I also prefer option **1.** and deprecate `id` .\r\n\r\nShould we do the same for the `name` parameter, i.e. deprecate it and have it replaced by a `names` one that is an array? I think so.\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/702131046","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-702131046","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":702131046,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMjEzMTA0Ng==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-01T13:22:20Z","updated_at":"2020-10-01T13:22:20Z","author_association":"MEMBER","body":"After team discussion, we agreed to overload the existing `id` field to take both string or array of strings (option 3 in above comment). Introducing a new `ids` field has not only BWC implications, but also raises consistent questions about other fields, e.g. `name` or the same field of `GetApiKeyRequest`. Addressing each of the consistency issue will also need take care BWC. In short, it could incur a lot more work while the sheer value is low. Overall, reusing the existing `id` is a more practical solution. Also I was mistaken that we don't have existing code for a field to take either string or array of string. The `AbstractObjectParser#declareStringArray` by default accepts both a single string or an array of string. So it is an existing pattern.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/702238909","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-702238909","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":702238909,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMjIzODkwOQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2020-10-01T16:07:28Z","updated_at":"2020-10-01T16:07:48Z","author_association":"MEMBER","body":"I'm concerned with the suggestion here, because what we're ending up with is a field that can take on two different forms. That's additional mental overhead, and it complicates the specification and high-level clients. It's also confusing that `id` can be multi-valued (because it's not plural). I think we should take an iterative approach towards what we want our APIs to look like. One suggestion that I can offer here would be to keep the existing `id` field as-is, add an `ids` field that is an array of IDs of API keys to remove, and also enforce that only one of `id` or `ids` is in the request. This gives us the option to later remove the `id` field if we feel that is the right thing to do.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/702557320","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-702557320","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":702557320,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMjU1NzMyMA==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-02T06:43:23Z","updated_at":"2020-10-02T06:43:23Z","author_association":"MEMBER","body":"Thanks for chime in @jasontedor. I did share the same concerns for reusing the exising `id` field in my [previous comment](https://github.com/elastic/elasticsearch/issues/47609#issuecomment-701117255). But the BWC complexities of adding a new `ids` field got me think otherwise. Honestly, if we do not consider effort, adding a new `ids` field and remove existing `id` field is the way to go because it is clean and unambigous. So if we are aiming for long term, we should go with adding a new `ids` field.  \r\n\r\nI like the idea of iterative approach. To me it means we can have this new field to fleet to use without having to pay bwc immediately. We will have to pay the price, but it is amortized (before version 8). ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/704192045","html_url":"https://github.com/elastic/elasticsearch/issues/47609#issuecomment-704192045","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47609","id":704192045,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNDE5MjA0NQ==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-06T10:58:45Z","updated_at":"2020-10-06T10:58:45Z","author_association":"MEMBER","body":"@jen-huang A new `ids` field is added to the invalidate API key API (#63224). Could you please update your side to leverage this new field for bulk invalidation? For each API key invalidation call, there is now an internal call to clear it out from the cache as well. So it would be great if these operations can be batched, i.e. using the new `ids` field to bulk invalidation, which incurs only a single cache clearing call. Thanks!","performed_via_github_app":null}]