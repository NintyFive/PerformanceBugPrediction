[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/504084142","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504084142","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":504084142,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA4NDE0Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-06-20T16:00:40Z","updated_at":"2019-06-20T16:00:40Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/504085275","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504085275","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":504085275,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA4NTI3NQ==","user":{"login":"gingerwizard","id":12695796,"node_id":"MDQ6VXNlcjEyNjk1Nzk2","avatar_url":"https://avatars0.githubusercontent.com/u/12695796?v=4","gravatar_id":"","url":"https://api.github.com/users/gingerwizard","html_url":"https://github.com/gingerwizard","followers_url":"https://api.github.com/users/gingerwizard/followers","following_url":"https://api.github.com/users/gingerwizard/following{/other_user}","gists_url":"https://api.github.com/users/gingerwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/gingerwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gingerwizard/subscriptions","organizations_url":"https://api.github.com/users/gingerwizard/orgs","repos_url":"https://api.github.com/users/gingerwizard/repos","events_url":"https://api.github.com/users/gingerwizard/events{/privacy}","received_events_url":"https://api.github.com/users/gingerwizard/received_events","type":"User","site_admin":false},"created_at":"2019-06-20T16:03:36Z","updated_at":"2019-06-20T16:03:36Z","author_association":"NONE","body":"First one..\r\nI commonly find myself checking types of fields - mainly as data is noisy and sometimes just gets sent as strings. Consider the following just to to check if a field is really an ip:\r\n\r\n```\r\nboolean isvalid(def i) {  try { def val = Integer.parseInt(i); return  (val >= 0 && val <=255)  } catch (Exception e) { return false; }   }\r\n        \r\n          def ip = ctx?.source?.ip; if (ip != null) { def groups = Arrays.asList(/\\./.split(ip));  def is_ip = groups.stream().filter(s -> isvalid(s)).count() == groups.size(); if (!is_ip) { ctx.source.remove('ip'); ctx.source.domain = ip; }   }\r\n```\r\n\r\nwhilst im sure this could be improved (iterating over chars and using isDigit()) it remains cumbersome for what is a pretty common check.\r\n\r\nProposing field level methods which allow us to check if a field contains an underlying ES datatype e.g.\r\n\r\n`ctx.ip.isIP()`\r\n`ctx.location.isGeoPoint()`\r\n\r\netc.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/504086076","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504086076","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":504086076,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA4NjA3Ng==","user":{"login":"gingerwizard","id":12695796,"node_id":"MDQ6VXNlcjEyNjk1Nzk2","avatar_url":"https://avatars0.githubusercontent.com/u/12695796?v=4","gravatar_id":"","url":"https://api.github.com/users/gingerwizard","html_url":"https://github.com/gingerwizard","followers_url":"https://api.github.com/users/gingerwizard/followers","following_url":"https://api.github.com/users/gingerwizard/following{/other_user}","gists_url":"https://api.github.com/users/gingerwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/gingerwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gingerwizard/subscriptions","organizations_url":"https://api.github.com/users/gingerwizard/orgs","repos_url":"https://api.github.com/users/gingerwizard/repos","events_url":"https://api.github.com/users/gingerwizard/events{/privacy}","received_events_url":"https://api.github.com/users/gingerwizard/received_events","type":"User","site_admin":false},"created_at":"2019-06-20T16:05:51Z","updated_at":"2019-06-20T16:15:13Z","author_association":"NONE","body":"Hashing fields,\r\nto get a simple sha256 this was needed https://gist.github.com/gingerwizard/ed7e0ee8ab271c1dbb203532d4813d9a\r\n\r\nA simple set of message digest utils would be great - especially since MessageDigest is not whitelisted.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/504088929","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504088929","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":504088929,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA4ODkyOQ==","user":{"login":"gingerwizard","id":12695796,"node_id":"MDQ6VXNlcjEyNjk1Nzk2","avatar_url":"https://avatars0.githubusercontent.com/u/12695796?v=4","gravatar_id":"","url":"https://api.github.com/users/gingerwizard","html_url":"https://github.com/gingerwizard","followers_url":"https://api.github.com/users/gingerwizard/followers","following_url":"https://api.github.com/users/gingerwizard/following{/other_user}","gists_url":"https://api.github.com/users/gingerwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/gingerwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gingerwizard/subscriptions","organizations_url":"https://api.github.com/users/gingerwizard/orgs","repos_url":"https://api.github.com/users/gingerwizard/repos","events_url":"https://api.github.com/users/gingerwizard/events{/privacy}","received_events_url":"https://api.github.com/users/gingerwizard/received_events","type":"User","site_admin":false},"created_at":"2019-06-20T16:14:00Z","updated_at":"2019-06-20T16:14:00Z","author_association":"NONE","body":"I commonly find myself needing to have parameters detailing fields for a script processor to operate on. Mainly for flexibility. A simple example, consider the following i use to shift data my a time period (i do this far too often):\r\n\r\n```\r\nPUT _ingest/pipeline/timeshift-data\r\n{\r\n  \"description\": \"Time shifts data by X for a field Y\",\r\n  \"processors\": [\r\n    {\r\n      \"script\": {\r\n        \"lang\": \"painless\",\r\n        \"source\": \"if (ctx[params.field] != null) { def formatter = DateTimeFormatter.ofPattern(params.date_format); def current_time = ZonedDateTime.parse(ctx[params.field], formatter); current_time = current_time.plusSeconds(params.time_shift_seconds);  ctx[params.field] = current_time.format(formatter);  }\",\r\n        \"params\": {\r\n          \"field\": \"created_on\",\r\n          \"time_shift_seconds\": -259200,\r\n          \"date_format\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis approach works well until fields are under objects. Currently there is no easy way to access nested fields if the field name is passed as a parameter e.g. how do i parameterise `source.ip` given i access the field like:\r\n\r\n`ctx['source']['ip']`\r\n\r\nMany ways to solve this one, but maybe:\r\n\r\n`ctx['source.ip']`\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/504092879","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504092879","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":504092879,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA5Mjg3OQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2019-06-20T16:25:28Z","updated_at":"2019-06-20T16:25:28Z","author_association":"CONTRIBUTOR","body":"A safe add/remove from a Map/List structure would be useful to follow up on the getByPath work.  This would take a String as a path and safely create or delete existing elements along the path as necessary.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/504095740","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504095740","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":504095740,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDA5NTc0MA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2019-06-20T16:33:50Z","updated_at":"2019-06-20T16:33:50Z","author_association":"CONTRIBUTOR","body":"Request for random methods: https://github.com/elastic/elasticsearch/issues/39080","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/614903270","html_url":"https://github.com/elastic/elasticsearch/issues/43442#issuecomment-614903270","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43442","id":614903270,"node_id":"MDEyOklzc3VlQ29tbWVudDYxNDkwMzI3MA==","user":{"login":"stu-elastic","id":24232742,"node_id":"MDQ6VXNlcjI0MjMyNzQy","avatar_url":"https://avatars0.githubusercontent.com/u/24232742?v=4","gravatar_id":"","url":"https://api.github.com/users/stu-elastic","html_url":"https://github.com/stu-elastic","followers_url":"https://api.github.com/users/stu-elastic/followers","following_url":"https://api.github.com/users/stu-elastic/following{/other_user}","gists_url":"https://api.github.com/users/stu-elastic/gists{/gist_id}","starred_url":"https://api.github.com/users/stu-elastic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stu-elastic/subscriptions","organizations_url":"https://api.github.com/users/stu-elastic/orgs","repos_url":"https://api.github.com/users/stu-elastic/repos","events_url":"https://api.github.com/users/stu-elastic/events{/privacy}","received_events_url":"https://api.github.com/users/stu-elastic/received_events","type":"User","site_admin":false},"created_at":"2020-04-16T21:22:15Z","updated_at":"2020-04-16T21:22:15Z","author_association":"CONTRIBUTOR","body":"For: https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504088929 \r\n> e.g. how do i parameterise source.ip given i access the field like:\r\n> ctx['source']['ip']\r\n> Many ways to solve this one, but maybe:\r\n> ctx['source.ip']\r\n\r\nTry using `getByPath`. \r\n\r\nFor: https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504085275\r\n> Proposing field level methods which allow us to check if a field contains an underlying ES datatype e.g.\r\n> ctx.ip.isIP()\r\n> ctx.location.isGeoPoint()\r\n\r\nTry `ctx.ip instanceof IpFieldMapper.IpFieldType.IpScriptDocValues` but we need to fix that: https://github.com/elastic/elasticsearch/issues/55351\r\nTry `ctx.location instanceof ScriptDocValues.GeoPoints`.\r\n\r\nFor: https://github.com/elastic/elasticsearch/issues/43442#issuecomment-504086076\r\n> A simple set of message digest utils would be great - especially since MessageDigest is not whitelisted.\r\n\r\nMoved to https://github.com/elastic/elasticsearch/issues/55352\r\n\r\n","performed_via_github_app":null}]