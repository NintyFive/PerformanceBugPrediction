{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/29823","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29823/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29823/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29823/events","html_url":"https://github.com/elastic/elasticsearch/issues/29823","id":317448324,"node_id":"MDU6SXNzdWUzMTc0NDgzMjQ=","number":29823,"title":"[meta] Index Lifecycle Management Plan","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"labels":[{"id":912828538,"node_id":"MDU6TGFiZWw5MTI4Mjg1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/ILM+SLM","name":":Core/Features/ILM+SLM","color":"0e8a16","default":false,"description":"Index and Snapshot lifecycle management"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"assignees":[{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2017-10-30T04:20:16Z","updated_at":"2018-12-13T12:53:52Z","closed_at":"2018-12-13T12:53:51Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"## Tasks\r\n\r\n- [x] Write LifecycleAction for each type of action\r\n  - [x] delete\r\n  - [x] forcemerge EMAIL REDACTED LINK REDACTED)\r\n  - [x] rollover EMAIL REDACTED LINK REDACTED)\r\n  - [x] allocate EMAIL REDACTED LINK REDACTED)\r\n  - [x] shrink EMAIL REDACTED LINK REDACTED)\r\n  - [x] replica EMAIL REDACTED LINK REDACTED)\r\n  - ~snapshot~ (will implement snapshotting as a separate solution)\r\n- [x] Create concept of a lifecycle type which will: EMAIL REDACTED LINK REDACTED)\r\n  - [x] Constrain the available phase names\r\n  - [x] Set the order in which the phases are executed\r\n- [x] Create concept of Phase types which will:\r\n  - [x] Set the actions that are available in each phase (LINK REDACTED)\r\n  - [x] Set the order in which the actions are executed within each phase\r\n  - [x] Remove shuffled fields exception for phases field in unit tests (IndexLifecycleMetadataTests, LifecyclePolicyTests, PutLifecycleRequestTests)\r\n- [x] Create the first lifecycle type `timeseries`, which will allow the following phases (in order): EMAIL REDACTED LINK REDACTED LINK REDACTED LINK REDACTED)\r\n  - [x] Hot - Actions:\r\n    - [x] rollover\r\n  - [x] Warm - Actions:\r\n    - [x] allocate\r\n    - [x] shrink\r\n    - [x] forcemerge\r\n    - [x] replicas\r\n  - [x] Cold - Actions:\r\n    - [x] allocate\r\n    - [x] replicas\r\n  - [x] Delete - Actions:\r\n    - [x] delete\r\n- [x] Verify Master election re-initialization strategy. Once a Master with an existing in-memory schedule is dropped, the new master needs to be able to re-initialize all the state and relaunch to-be launched tasks. It helps that all time is to be relative to the index.creation.date\r\n- [x] Add ability to change the poll interval through cluster settings EMAIL REDACTED LINK REDACTED)\r\n- [x] stop using `IndexMetaData.getCreationDate` and use a custom setting so that it can be inherited across shrink and other operations EMAIL REDACTED LINK REDACTED)\r\n- [x] Clean up logging\r\n- [x] Allow the scheduled job to be added and removed while the node is still running when it is elected and un-elected as master. EMAIL REDACTED LINK REDACTED)\r\n- [x] Introduce `index.lifecycle.phase_time` and `index.lifecycle.action_time` to help track\r\n- [x] update Shrink Action to properly support self-allocation to specific node from specified attributes\r\n  - [x] related: https://github.com/elastic/elasticsearch/issues/28347\r\n\r\n## tracking Steps progress\r\n\r\n- [x] PhaseAfterStep\r\n- [x] InitializationPolicyContextStep\r\n- [x] TerminalPolicyStep\r\n- [x] AllocateAction\r\n    - [x] EnoughShardsWaitStep\r\n    - [x] UpdateAllocationSettingsStep\r\n    - [x] AllocationRoutedStep\r\n- [x] DeleteAction\r\n    - [x] DeleteStep\r\n- [x] ForceMergeAction\r\n    - [x] UpdateBestCompressionSettingsStep\r\n    - [x] ForceMergeStep (upgrade?)\r\n    - [x] SegmentCountStep\r\n- [x] ReadOnlyAction\r\n    - [x] ReadOnlyStep\r\n- [x] ReplicasAction\r\n    - [x] UpdateReplicaSettingsStep\r\n    - [x] EnoughShardsWaitStep\r\n- [x] RolloverAction\r\n    - [x] RolloverStep\r\n- [x] ShrinkAction\r\n    - [x] ShrinkStep\r\n    - [x] ShrunkShardsAllocatedStep\r\n    - [x] AliasStep\r\n    - [x] ShrunkenIndexCheckStep\r\n\r\n\r\n## Remaining Tasks\r\n\r\n### Completed\r\n\r\n- [x] Make phase after step have the phase name of the current phase not the next phase (i.e. when the warm actions are done the phase after step should have a phase of `warm`) @colings86 https://github.com/elastic/elasticsearch/pull/30756\r\n- [x] Add `index.lifecycle.skip` setting to allow indexes to be put into a \"maintenance\" mode where index lifecycle will not touch them @talevy #30766\r\n- [x] Get Index lifecycle working with security (at the moment if security is disabled setting the phase and action fails because we are trying to modify settings with a system user which is not allowed) @colings86 https://github.com/elastic/elasticsearch/pull/30657\r\n- [x] Add Lifecycle Explain API @colings86\r\n    - [x] internal state management\r\n    - [x] write REST/transport actions\r\n- [x] Update `index.lifecycle.date` in Rollover for rolled over indices @talevy https://github.com/elastic/elasticsearch/pull/30853\r\n- [x] Handle policy updates and changes to `index.lifecycle.name`: @colings86\r\n    - [x] Remove shard and replica setting checks from wait steps @talevy https://github.com/elastic/elasticsearch/pull/30855\r\n    - [x] Add new setting property to prevent updating `index.lifecycle.name` using the Update Settings API @jasontedor #31286\r\n    - [x] Do not allow deleting lifecycle policies that are in-use by one or more indexes\r\n    - [x] Allow PUT index lifecycle API to update an existing policy  @colings86 https://github.com/elastic/elasticsearch/pull/31361\r\n        - [x] Only succeeds if there is no change to the shrink action OR no affected indices are in the shrink action  @colings86 https://github.com/elastic/elasticsearch/pull/32002\r\n    - [x] Add assign policy to index API (REST endpoint `PUT {index}/_lifecycle/{policy}` and `POST {index}/_lifecycle/{policy}`) @colings86 https://github.com/elastic/elasticsearch/pull/31277\r\n    - [x] Add remove policy from index API (REST endpoint `DELETE {index}/_lifecycle`) @colings86 https://github.com/elastic/elasticsearch/pull/31358\r\n    - [x] Add change policy for index API (REST endpoint `PUT {index}/_lifecycle/{policy}`) @colings86 https://github.com/elastic/elasticsearch/pull/31277\r\n        - [x] Will not move the policy for an index (and will report this rejection) if there is a change to the shrink action AND the index is in the shrink action @colings86 https://github.com/elastic/elasticsearch/pull/32002\r\n        - [x] Will succeed on other indexes even if some indexes fail the condition @colings86 https://github.com/elastic/elasticsearch/pull/31277\r\n- [x] Changes to Rollover Action to support `is_write_index`\r\n- [x]  Add API to force set to an explicit step\r\n- [x] Add API that can be run when the index is in an error state and will force execution to retry the step that caused the error @talevy #30769\r\n- [x] Add ability to put ILM in maintenance mode which will stop processing any indexes which are not in the shrink action and wait for all other indices to complete the shrink action before stopping processing them (@talevy)\r\n- [x] Fix Exception wrapping code in Explain API to properly render exception's messages @talevy https://github.com/elastic/elasticsearch/pull/31284\r\n- [x] ~Update ForceMergeAction to update max segment size before merging due to: https://github.com/elastic/elasticsearch/issues/31742~ (for 6.x there is nothing to do here as we will maintain the current behaviour in the ForceMerge API\r\n- [x] Remove best_compression option from ForceMerge Action @dakrone #32373\r\n- [x] make lifecycle name, phase, action, step settings Property.INTERNAL @dakrone #32381 #32518\r\n- [x] Fix remaining NOCOMMITS\r\n    - [x] Get rid of ObjectParserUtils @colings86 https://github.com/elastic/elasticsearch/pull/32427 *\r\n    - [x] Change default poll interval setting (need to decide what it should be) https://github.com/elastic/elasticsearch/pull/32521\r\n    - [x] Investigate changing core to get rid of UpdateSettingsHelper and RolloverIndexTestHelper ** @dakrone #32557 #32559\r\n    - [x] Remove NORELEASE on randomising policy and phase names in tests as no longer relevant @colings86 https://github.com/elastic/elasticsearch/pull/32427 *\r\n- [x] Remove replica action and add ability to set replicas to allocate action @talevy https://github.com/elastic/elasticsearch/pull/32523\r\n- [x] Leverage `is_write_index` for managing indices/aliases in  ILM: https://github.com/elastic/elasticsearch/issues/31959 @talevy *** \r\n- [x] Check concurrency safety\r\n   - [x] Check MoveToStepAction/RetryAction and its guards against invalid steps and metadata states (need to check if there is anything to do here) @talevy *\r\n   - [x] Clear up the thread-safety of updating/bootstrapping the local policyStepsRegistry https://github.com/elastic/elasticsearch/issues/32181 @talevy *\r\n- ~~Handle policy updates and changes to `index.lifecycle.name`: @colings86~~ \r\n    - ~~Allow PUT index lifecycle API to update an existing policy~~ \r\n        - ~~If current step no longer exists in the policy and instead move to the next action that exists (or the next phase after step) @colings86 ***~~ \r\n    - ~~Add change policy for index API (REST endpoint `PUT {index}/_lifecycle/{policy}`)~~ \r\n        - ~~If current step no longer exists in the policy and instead move to the next action that exists (or the next phase after step) https://github.com/elastic/elasticsearch/pull/32283 @colings86 ***~~ \r\n- [x] Security tests\r\n     - [x] Create \"ilm-tests-with-security\" qa module and run YAML tests we have https://github.com/elastic/elasticsearch/pull/32218 *\r\n    - [x] Create tests which have two users, one who creates the policy and another who assigns the policy to an index. ** https://github.com/elastic/elasticsearch/pull/32826\r\n     - [x] Then check the policy works if the user who created the policy has all the permissions needed **\r\n    - [x] Check that if the user who created the policy doesn't have the correct permissions for an action we move to the error step ** https://github.com/elastic/elasticsearch/pull/32826\r\n- [x] Master failover tests\r\n    - [x] Test failover of master while on a cluster state wait step https://github.com/elastic/elasticsearch/pull/32108 @talevy **\r\n- [x] Create Client-Side copies of classes LifecyclePolicy so Client can put/get policies to/from json @talevy\r\n   - [x] LifecycleActions\r\n      - [x] Allocate Action https://github.com/elastic/elasticsearch/pull/32853\r\n      - [x] Delete, ForceMerge, ReadOnly, Rollover, Shrink https://github.com/elastic/elasticsearch/pull/32892\r\n   - [x] LifecyclePolicy/Phase https://github.com/elastic/elasticsearch/pull/32915\r\n- [x]  Backport to 6.x * [index-lifecycle-6.x](https://github.com/elastic/elasticsearch/tree/index-lifecycle-6.x)\r\n- [x] Change lifecycle name to ILM? https://github.com/elastic/elasticsearch/issues/33265\r\n- [x] Add support in transport client for ILM APIs @colings86 https://github.com/elastic/elasticsearch/pull/33357\r\n- [x] fix rendering of `after` @colings86 https://github.com/elastic/elasticsearch/issues/33282\r\n- [x] add LifecyclePolicy version and creation_date metadata @talevy https://github.com/elastic/elasticsearch/pull/33450\r\n\r\n### Blockers to merging into master in priority order from most to least (items are marked in difficulty using *, **, ***)\r\n\r\n\r\n- [x] Store phase JSON in index metadata when an index moves to a new phase and use that version to drive execution until the end of the phase regardless of changes to the underlying policy @dakrone \r\n    - [x] PolicyStepsRegistry will need to store the JSON for the current phase as it is in the lifecycle policy per index (for the current phase the index is on) (ie `Phase.toXContent()`). Instead of holding on to all of the compiled steps PolicyStepsRegistry should have a map of index to the steps of the current phase. #32926\r\n    - [x] Remove the PhaseAfterStep in favour of having the execution flow itself determine when the index should move to the next phase (based on the after parameter in the next phase from the IndexLifecycleMetadata) @dakrone #33140 #33398 ***\r\n    - [x] When a new index appears or when an index moves to a new phases the registry will need to compile the steps for the new phases and store them in memory in the PolicyStepsRegistry\r\n    - [x] Store the JSON for the current phase in the index settings (to be metadata later on), the policy steps registry should use this as the source of truth for how to execute the current phase for that index @talevy https://github.com/elastic/elasticsearch/pull/33289\r\n    - [x] Update lifecycle Explain API to return the information for the phase that is stored in the index metadata (including the policy name for that phase and the version of the policy) @talevy https://github.com/elastic/elasticsearch/pull/33488 *\r\n    - [x] Move client to be a class variable in PolicyStepsRegistry so don't have to pass it in @dakrone \r\n    - [x] When getStep is called compile steps from phase definition and get the step from that list @dakrone \r\n    - [x] Make phase transition and phase definition storing synchronous     ?\r\n- [x] use Custom Index MetaData to store lifecycle state of action/phase/step info for a managed index @gwbrown  ** (#33783)\r\n    - [x] depends on https://github.com/elastic/elasticsearch/pull/32749\r\n- [x] 4-node all-actions in all phases test @talevy #33402 **\r\n- [x] Make read only step only added if the warm phase contains forcemerge or shrink #33485 @gwbrown\r\n- [x] Step locking: Only one step executes at a time per index. prevent step execution pile-up from occurring. @dakrone #34126\r\n    - Tests IT:\r\n        - [x] timeseries async race condition: verify that rollover/shrink/delete can be called twice before the first action's onResponse is called @talevy #33402\r\n\r\n\r\n### Blockers to first release in priority order from most to least (items are marked in difficulty using *, **, ***)\r\n\r\n- [x] Write Documentation **** @colings86 @talevy \r\n- [x] High level REST client support https://github.com/elastic/elasticsearch/issues/33100 **** (Remaining task @gwbrown)\r\n- [x] clean up experience when invalid policy is used by index https://github.com/elastic/elasticsearch/issues/33074 * @gwbrown\r\n- [x] Rolling Upgrade Tests @talevy https://github.com/elastic/elasticsearch/pull/32828 **\r\n- [x] Rename \"after\" field to `minimnum_age` @dakrone #32624 *\r\n- [x] [Issues labelled `:Core/Features/ILM` and `blocker`](https://github.com/elastic/elasticsearch/issues?utf8=%E2%9C%93&q=is%3Aopen+label%3A%3ACore%2FFeatures%2FILM+label%3Ablocker+)\r\n- [x] Manual Testing @dakrone \r\n\r\n### Optional (but would be really good to have)\r\n\r\n- [x]  ILM usage stats (using xpack usage API) @colings86 https://github.com/elastic/elasticsearch/pull/33377 **","closed_by":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"performed_via_github_app":null}