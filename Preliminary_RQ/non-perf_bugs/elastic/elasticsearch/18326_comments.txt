[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219031070","html_url":"https://github.com/elastic/elasticsearch/issues/18326#issuecomment-219031070","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18326","id":219031070,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTAzMTA3MA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-05-13T12:37:21Z","updated_at":"2016-05-13T12:37:21Z","author_association":"MEMBER","body":"Relates #18310\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219229109","html_url":"https://github.com/elastic/elasticsearch/issues/18326#issuecomment-219229109","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18326","id":219229109,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTIyOTEwOQ==","user":{"login":"nilsga","id":42919,"node_id":"MDQ6VXNlcjQyOTE5","avatar_url":"https://avatars0.githubusercontent.com/u/42919?v=4","gravatar_id":"","url":"https://api.github.com/users/nilsga","html_url":"https://github.com/nilsga","followers_url":"https://api.github.com/users/nilsga/followers","following_url":"https://api.github.com/users/nilsga/following{/other_user}","gists_url":"https://api.github.com/users/nilsga/gists{/gist_id}","starred_url":"https://api.github.com/users/nilsga/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nilsga/subscriptions","organizations_url":"https://api.github.com/users/nilsga/orgs","repos_url":"https://api.github.com/users/nilsga/repos","events_url":"https://api.github.com/users/nilsga/events{/privacy}","received_events_url":"https://api.github.com/users/nilsga/received_events","type":"User","site_admin":false},"created_at":"2016-05-14T16:20:28Z","updated_at":"2016-05-14T16:20:28Z","author_association":"NONE","body":"I have not fully understood the logic yet, but It seems odd that the rounding logic is implemented by actually shifting the time according to local \"calendar\" time. All duration fields in `DateTimeUnit` seems to be UTC based. If one instead looked up the `DateTimeField` with the correct timezone of the chronology, it seems to me like the rounding should be provided \"out of the box\" by Joda.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219676437","html_url":"https://github.com/elastic/elasticsearch/issues/18326#issuecomment-219676437","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18326","id":219676437,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTY3NjQzNw==","user":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"created_at":"2016-05-17T10:15:38Z","updated_at":"2016-05-17T10:15:38Z","author_association":"MEMBER","body":"@nilsga great catch, I'm looking into this and think I found the glitch in the rounding logic of `TimeZoneRounding.nextRoundingInterval`. The conversion from UTC to local time is necessary there for day or month intervals, otherwise we would end up cases where `TimeZoneRounding.nextRoundingInterval` is not on the correct start of day/month when crossing dst transitions. But I think for smaller durations (hours in your case, minutes and seconds also) we should not do this. I will need to look a bit closer and add some test to be sure though.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219727555","html_url":"https://github.com/elastic/elasticsearch/issues/18326#issuecomment-219727555","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18326","id":219727555,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTcyNzU1NQ==","user":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"created_at":"2016-05-17T14:04:28Z","updated_at":"2016-05-17T14:04:28Z","author_association":"MEMBER","body":"This is how this behaviour presents itself outside of unit-tests: create an empty index, add any document with a date field, then do a histogram query with extended bounds covering the last DST end (e.g. Oslo/Europe 2015-10-25, 2015-10-25T02:00:00.000+02:00):\n\n```\nDELETE /_all\n\nPUT /test/type/1\n{\n  \"dateField\" : \"2000-01-01\"\n}\n\nGET /test/type/_search\n{\n  \"query\": {\n    \"match_none\": {}\n  },\n  \"aggs\": {\n    \"events_by_date\": {\n      \"date_histogram\": {\n        \"field\": \"dateField\",\n        \"interval\": \"1h\",\n        \"time_zone\": \"Europe/Oslo\",\n        \"min_doc_count\": 0,\n        \"extended_bounds\": {\n          \"min\": \"2015-10-25T02:00:00.000+02:00\",\n          \"max\": \"2015-10-25T04:00:00.000+01:00\"\n        }\n      }\n    }\n  }\n}\n\n\"aggregations\": {\n    \"events_by_date\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2015-10-25T02:00:00.000+02:00\",\n          \"key\": 1445731200000,\n          \"doc_count\": 0\n        },\n        {\n          \"key_as_string\": \"2015-10-25T03:00:00.000+01:00\",\n          \"key\": 1445738400000,\n          \"doc_count\": 0\n        },\n        {\n          \"key_as_string\": \"2015-10-25T04:00:00.000+01:00\",\n          \"key\": 1445742000000,\n          \"doc_count\": 0\n        }\n      ]\n    }\n  }\n```\n\nThe problem is that when looking at the bucket keys (utc), the first bucket covers two hours (1445738400000 - 1445731200000 = 7200000) whereas the other buckets are one hour(3600000 ms) wide.\n\nIn the other direction (start of DST) we dont have the same problem. Since local time is advanced by one hour, we still have 1h buckets, but you can see the jump in \"key_as_string\":\n\n```\nGET /test/type/_search\n{\n  \"query\": {\n    \"match_none\": {}\n  },\n  \"aggs\": {\n    \"events_by_date\": {\n      \"date_histogram\": {\n        \"field\": \"dateField\",\n        \"interval\": \"1h\",\n        \"time_zone\": \"Europe/Oslo\",\n        \"min_doc_count\": 0,\n        \"extended_bounds\": {\n          \"min\": \"2016-03-27T01:00:00.000+01:00\",\n          \"max\": \"2016-03-27T04:00:00.000+02:00\"\n        }\n      }\n    }\n  }\n}\n\n\"aggregations\": {\n    \"events_by_date\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2016-03-27T01:00:00.000+01:00\",\n          \"key\": 1459036800000,\n          \"doc_count\": 0\n        },\n        {\n          \"key_as_string\": \"2016-03-27T03:00:00.000+02:00\",\n          \"key\": 1459040400000,\n          \"doc_count\": 0\n        },\n        {\n          \"key_as_string\": \"2016-03-27T04:00:00.000+02:00\",\n          \"key\": 1459044000000,\n          \"doc_count\": 0\n        }\n      ]\n    }\n  } \n```\n\nI think we should have equally spaced date histogram buckets for hour and sub-hour time units and will open a PR for that.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219846854","html_url":"https://github.com/elastic/elasticsearch/issues/18326#issuecomment-219846854","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18326","id":219846854,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTg0Njg1NA==","user":{"login":"nilsga","id":42919,"node_id":"MDQ6VXNlcjQyOTE5","avatar_url":"https://avatars0.githubusercontent.com/u/42919?v=4","gravatar_id":"","url":"https://api.github.com/users/nilsga","html_url":"https://github.com/nilsga","followers_url":"https://api.github.com/users/nilsga/followers","following_url":"https://api.github.com/users/nilsga/following{/other_user}","gists_url":"https://api.github.com/users/nilsga/gists{/gist_id}","starred_url":"https://api.github.com/users/nilsga/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nilsga/subscriptions","organizations_url":"https://api.github.com/users/nilsga/orgs","repos_url":"https://api.github.com/users/nilsga/repos","events_url":"https://api.github.com/users/nilsga/events{/privacy}","received_events_url":"https://api.github.com/users/nilsga/received_events","type":"User","site_admin":false},"created_at":"2016-05-17T20:41:01Z","updated_at":"2016-05-18T06:43:46Z","author_association":"NONE","body":"Thanks for looking into it. I understand that you need to have correctly aligned buckets for all time units. But I don't understand why this could not be handled by the JodaTime library by using `ISOChronology.getInstance(timeZone)` instead of `ISOChronology.getInstanceUTC()`, which would yield time zone adjusted \"floor\" values for `DateTimeField.roundFloor`?\n\n```\nDateTime time = new DateTime(1445731200000L, DateTimeZone.UTC);\nDateTimeField fieldUtc = ISOChronology.getInstanceUTC().dayOfMonth(); // As in DateTimeUnit enum\nDateTimeField field = ISOChronology.getInstance(DateTimeZone.forID(\"Europe/Oslo\")).dayOfMonth(); // Time zone \"enabled\" version of the same field.\nDateTime rounded = new DateTime(field.roundFloor(time.getMillis()), DateTimeZone.forID(\"Europe/Oslo\"));\nDateTime roundedUtc = new DateTime(fieldUtc.roundFloor(time.getMillis()), DateTimeZone.UTC);\nSystem.out.println(rounded);\nSystem.out.println(roundedUtc);\nSystem.out.println(rounded.withZone(DateTimeZone.UTC));\n```\n\nOutput:\n\n```\n2015-10-25T00:00:00.000+02:00\n2015-10-25T00:00:00.000Z\n2015-10-24T22:00:00.000Z\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/220042173","html_url":"https://github.com/elastic/elasticsearch/issues/18326#issuecomment-220042173","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18326","id":220042173,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMDA0MjE3Mw==","user":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"created_at":"2016-05-18T14:24:10Z","updated_at":"2016-05-18T14:24:10Z","author_association":"MEMBER","body":"@nilsga thanks for pointing this out. As far as I see, this will do the same thing in ZonedChronology#roundFloor() that we are currently do in our TimeZoneRounding#roundKey(), namely converting UTC to local and back. It might be worth looking into whether using Joda directly for this would simplify our code base or not.\n","performed_via_github_app":null}]