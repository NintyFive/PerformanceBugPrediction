[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450987664","html_url":"https://github.com/elastic/elasticsearch/issues/37090#issuecomment-450987664","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37090","id":450987664,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDk4NzY2NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-01-02T21:16:48Z","updated_at":"2019-01-02T21:16:48Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451577258","html_url":"https://github.com/elastic/elasticsearch/issues/37090#issuecomment-451577258","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37090","id":451577258,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTU3NzI1OA==","user":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"created_at":"2019-01-04T21:43:41Z","updated_at":"2019-01-04T21:43:41Z","author_association":"CONTRIBUTOR","body":"I did some investigation here and came up with the following. \r\n\r\nif we just use a new exception, you end up seeing sync throwing that exception and async returning the following\r\n```\r\nUncategorizedExecutionException[Failed execution\r\n]; nested: ExecutionException[org.elasticsearch.client.DeprecationException: method [POST], host [http://localhost:9200], URI [/foo/bar?timeout=1m], status line [HTTP/1.1 201 Created]\r\nWarnings: [[types removal] Specifying types in document index requests is deprecated, use the typeless endpoints instead (/{index}/_doc/{id}, /{index}/_doc, or /{index}/_create/{id}).]\r\n---\r\n_index: \"foo\"\r\n_type: \"bar\"\r\n_id: \"rDesGmgBurilfGV8-Oll\"\r\n_version: 1\r\nresult: \"created\"\r\n_shards:\r\n  total: 2\r\n  successful: 1\r\n  failed: 0\r\n_seq_no: 0\r\n_primary_term: 1\r\n]; nested: DeprecationException[method [POST], host [http://localhost:9200], URI [/foo/bar?timeout=1m], status line [HTTP/1.1 201 Created]\r\nWarnings: [[types removal] Specifying types in document index requests is deprecated, use the typeless endpoints instead (/{index}/_doc/{id}, /{index}/_doc, or /{index}/_create/{id}).]\r\n---\r\n_index: \"foo\"\r\n_type: \"bar\"\r\n_id: \"rDesGmgBurilfGV8-Oll\"\r\n_version: 1\r\nresult: \"created\"\r\n_shards:\r\n  total: 2\r\n  successful: 1\r\n  failed: 0\r\n_seq_no: 0\r\n_primary_term: 1\r\n];\r\n```\r\n\r\nI do not think this is optimal as we have the entity there as well. we can parse the entity if it comes back valid, and I would like to give that back to the user. We cannot create an exception with the generic Response `Resp` from the HLRC api `performRequest...` requests as it is Throwable. \r\n\r\nSo we could 1) do what I have done above w/ just a new exception w/o any parsing of the response entity, 2) make all of our responses extend something that we can pull out warnings and return that instead of throwing an exception (this is the opposite of strict), or 3) we can throw an exception that just has an `Object` that holds the entity, as well as the `List<String>` of warnings, which requires casting. \r\n\r\nor hopefully 4) something i have not yet seen that makes this easier. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452029191","html_url":"https://github.com/elastic/elasticsearch/issues/37090#issuecomment-452029191","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37090","id":452029191,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MjAyOTE5MQ==","user":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"created_at":"2019-01-07T18:15:29Z","updated_at":"2019-01-07T18:15:29Z","author_association":"CONTRIBUTOR","body":"After discussing with the team, a new option was presented. the new option, which would require some rework in the LLRC, is to have the HLRC be in charge of warnings handling if you are using the HLRC. So if someone who is using the HLRC wants to set strict, they would set it in the HLRC and not in the LLRC. This would mean requiring the final value set in the LLRC to be mutable, or the HLRC constructor that takes in a LLRC will fail in this case. \r\n\r\nThe advantages are that LLRC would not throw exceptions and that HLRC can handle them without throwing this `UncategorizedExcecutionException`.\r\n\r\nDisadvantage is that you can still get the LLRC from `HLRC.getLowLevelClient()` and it would not have the same behavior as the HLRC youve instantiated.\r\n\r\nI will do a bit of coding on this to see if its worth investigating further because im still not 100% sold on it, and it does not really make the \"throw exception but still hold the state of the response\" portion of the original issue any easier. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452418089","html_url":"https://github.com/elastic/elasticsearch/issues/37090#issuecomment-452418089","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37090","id":452418089,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MjQxODA4OQ==","user":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"created_at":"2019-01-08T19:15:41Z","updated_at":"2019-01-08T19:15:41Z","author_association":"CONTRIBUTOR","body":"after looking things over and more discussion, this still does not solve the issue of \"should we be parsing the response *and* throwing the exception.\" If we want to call `onFailure` and throw an exception for async/sync in HLRC, then we do not parse. I dont necessarily like this, and I would propose that instead, all of our HLRC's should extend a common response which holds info like warnings. The problem with this is that it cannot be done now, as we are using response classes from server, as well as some local to the client. So I guess for now, we need to throw this and fix it properly once we separate server from HLRC.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452546184","html_url":"https://github.com/elastic/elasticsearch/issues/37090#issuecomment-452546184","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37090","id":452546184,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MjU0NjE4NA==","user":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"created_at":"2019-01-09T02:12:26Z","updated_at":"2019-01-09T02:12:26Z","author_association":"CONTRIBUTOR","body":"ok, lots of chatting with myself and I end up just throwing the original ElasticsearchStatusException wrapped with the new exception such that it does not try to parse it and blow up. This is the best that I could do given the constraints.","performed_via_github_app":null}]