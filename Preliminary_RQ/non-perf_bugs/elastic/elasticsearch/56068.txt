{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/56068","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56068/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56068/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56068/events","html_url":"https://github.com/elastic/elasticsearch/issues/56068","id":610541172,"node_id":"MDU6SXNzdWU2MTA1NDExNzI=","number":56068,"title":"NPE from Netty4Transport#stopInternal if eventLoopGroup == null","user":{"login":"trejkaz","id":43236,"node_id":"MDQ6VXNlcjQzMjM2","avatar_url":"https://avatars2.githubusercontent.com/u/43236?v=4","gravatar_id":"","url":"https://api.github.com/users/trejkaz","html_url":"https://github.com/trejkaz","followers_url":"https://api.github.com/users/trejkaz/followers","following_url":"https://api.github.com/users/trejkaz/following{/other_user}","gists_url":"https://api.github.com/users/trejkaz/gists{/gist_id}","starred_url":"https://api.github.com/users/trejkaz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/trejkaz/subscriptions","organizations_url":"https://api.github.com/users/trejkaz/orgs","repos_url":"https://api.github.com/users/trejkaz/repos","events_url":"https://api.github.com/users/trejkaz/events{/privacy}","received_events_url":"https://api.github.com/users/trejkaz/received_events","type":"User","site_admin":false},"labels":[{"id":146854632,"node_id":"MDU6TGFiZWwxNDY4NTQ2MzI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/Network","name":":Distributed/Network","color":"0e8a16","default":false,"description":"Http and internode communication implementations"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null},{"id":1967496670,"node_id":"MDU6TGFiZWwxOTY3NDk2Njcw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Distributed","name":"Team:Distributed","color":"fef2c0","default":false,"description":"Meta label for distributed team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-05-01T03:43:39Z","updated_at":"2020-05-04T16:43:06Z","closed_at":"2020-05-04T16:43:06Z","author_association":"NONE","active_lock_reason":null,"body":"<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`): 6.8.0\r\n\r\n**Plugins installed**: [parent-join-client, analysis-icu-client, lang-mustache-client, transport-netty4-client, percolator-client, reindex-client, x-pack-transport]\r\n\r\n**JVM version** (`java -version`): 1.8.0_191 (Oracle)\r\n\r\n**OS version** (`uname -a` if on a Unix-like system): Windows Server 2016\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nAn end user reported getting failures to connect to Elasticsearch. I see no errors coming from the code which should be opening the transport, but I do see many errors about closing it:\r\n\r\n```lang-none\r\njava.lang.NullPointerException: null\r\n\tat org.elasticsearch.transport.netty4.Netty4Transport.lambda$stopInternal$2(Netty4Transport.java:255) ~[transport-netty4-client-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.core.internal.io.IOUtils.close(IOUtils.java:103) ~[elasticsearch-core-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.core.internal.io.IOUtils.close(IOUtils.java:85) ~[elasticsearch-core-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.common.lease.Releasables.close(Releasables.java:36) ~[elasticsearch-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.common.lease.Releasables.close(Releasables.java:46) ~[elasticsearch-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.common.lease.Releasables.close(Releasables.java:51) ~[elasticsearch-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.transport.netty4.Netty4Transport.stopInternal(Netty4Transport.java:254) ~[transport-netty4-client-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.transport.TcpTransport.lambda$doStop$11(TcpTransport.java:578) ~[elasticsearch-6.8.0.jar:6.8.0]\r\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:681) ~[elasticsearch-6.8.0.jar:6.8.0]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_172]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_172]\r\n\tat java.lang.Thread.run(Thread.java:748) [?:1.8.0_172]\r\n```\r\n\r\nOn inspecting code in the area, I see:\r\n\r\n```java\r\n    @Override\r\n    @SuppressForbidden(reason = \"debug\")\r\n    protected void stopInternal() {\r\n        Releasables.close(() -> {\r\n            Future<?> shutdownFuture = eventLoopGroup.shutdownGracefully(0, 5, TimeUnit.SECONDS);\r\n            // ... omitting rest of method ...\r\n        });\r\n    }\r\n```\r\n\r\nSo `eventLoopGroup` must be `null` for some reason, but isn't being checked here.\r\n\r\nI assume that under _normal_ conditions, it must _never_ be null during this method, but that something failed during startup in this case. However, there is nothing in the logs about an error starting the transport.\r\n\r\nOn further investigation, this turns out to be because doStop() is called from a finally block, so the exception from doStop() is guaranteed to clobber any exception which it's cleaning up after:\r\n\r\n```java\r\n    @Override\r\n    protected void doStart() {\r\n        boolean success = false;\r\n        try {\r\n            ðŸ‘‡Exception is either thrown from here\r\n            ThreadFactory threadFactory = daemonThreadFactory(settings, TRANSPORT_WORKER_THREAD_NAME_PREFIX);\r\n\r\n            ðŸ‘‡Or from here\r\n            eventLoopGroup = new NioEventLoopGroup(workerCount, threadFactory);\r\n\r\n            // ... omitting further startup code ...\r\n            success = true;\r\n        } finally {\r\n            if (success == false) {\r\n                doStop(); ðŸ‘ˆbut exception from here clobbers any stack traces we wanted\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Steps to reproduce**:\r\n\r\nThe best idea I have at the moment is that I see us creating the client 258 times in the logs. Could there possibly be a hard limit of 256 clients in the same JVM, or on the same system? It seems crazy though, I'm used to macOS limiting things like that, but Windows?\r\n\r\n**Provide logs (if relevant)**:\r\n\r\n","closed_by":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"performed_via_github_app":null}