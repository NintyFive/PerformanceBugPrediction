[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/287064049","html_url":"https://github.com/elastic/elasticsearch/issues/23610#issuecomment-287064049","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23610","id":287064049,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NzA2NDA0OQ==","user":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"created_at":"2017-03-16T13:56:21Z","updated_at":"2017-03-16T13:56:21Z","author_association":"MEMBER","body":"@mrec thanks for your feedback. You are right that this might be one of the cases where it will be hard to provide the same functionality that we currently have in the Java API when going through the REST layer. @javanna i will label this accordingly so we can track this when we get to parsing the aggregations on the client side.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/294850245","html_url":"https://github.com/elastic/elasticsearch/issues/23610#issuecomment-294850245","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23610","id":294850245,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NDg1MDI0NQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2017-04-18T13:49:51Z","updated_at":"2017-04-18T13:49:51Z","author_association":"MEMBER","body":"Thanks for opening this @mrec . Good find, the transport client ends up exposing internal objects and state that is not available otherwise through REST.\r\n\r\nOnce you move to REST, we will only be able to return what we get back via the REST layer, hence the java REST client will only return what all the other REST language clients do. \r\n\r\nWe are making the effort to reuse the same request and response objects as the transport client to ease migration, but we will not be able to return part of objects that are not returned through REST.\r\n\r\nIn particular for aggregations, we are reusing the interfaces and adding client classes that implement the same interfaces. I understand that you are casting to the internal object at the moment in your application; once you'll move to the high level REST client that cast will throw `ClassCastException`. \r\n\r\nI don't think I can do more than acknowledging this issue and closing it. Those internal objects are exposed as a side-effect of using the same code for internal stuff and the Java api, something that we have been addressing by developing a Java REST client.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/294955854","html_url":"https://github.com/elastic/elasticsearch/issues/23610#issuecomment-294955854","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23610","id":294955854,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NDk1NTg1NA==","user":{"login":"mrec","id":4206148,"node_id":"MDQ6VXNlcjQyMDYxNDg=","avatar_url":"https://avatars0.githubusercontent.com/u/4206148?v=4","gravatar_id":"","url":"https://api.github.com/users/mrec","html_url":"https://github.com/mrec","followers_url":"https://api.github.com/users/mrec/followers","following_url":"https://api.github.com/users/mrec/following{/other_user}","gists_url":"https://api.github.com/users/mrec/gists{/gist_id}","starred_url":"https://api.github.com/users/mrec/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrec/subscriptions","organizations_url":"https://api.github.com/users/mrec/orgs","repos_url":"https://api.github.com/users/mrec/repos","events_url":"https://api.github.com/users/mrec/events{/privacy}","received_events_url":"https://api.github.com/users/mrec/received_events","type":"User","site_admin":false},"created_at":"2017-04-18T19:35:21Z","updated_at":"2017-04-18T19:35:21Z","author_association":"NONE","body":"> In particular for aggregations, we are reusing the interfaces and adding client classes that implement the same interfaces. I understand that you are casting to the internal object at the moment in your application; once you'll move to the high level REST client that cast will throw `ClassCastException`.\r\n\r\nI'm not sure what interface you'll be reusing in this case. `SearchResponse.getAggregations()` doesn't type things beyond the uselessly vague `Aggregation`, so you need to cast it to *something*. Currently I'm casting it to `Percentiles` which is already an interface and exhibits the behaviour described. I'm not casting to or otherwise relying on `InternalTDigestPercentiles` outside of unit test setup.\r\n\r\nI suspect the root problem here is that `Percentiles.percentile(double percent)` was only ever intended to support querying for one of the exact values you'd requested, but that this has never been documented or enforced.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/294977695","html_url":"https://github.com/elastic/elasticsearch/issues/23610#issuecomment-294977695","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23610","id":294977695,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NDk3NzY5NQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2017-04-18T20:49:19Z","updated_at":"2017-04-18T20:49:19Z","author_association":"MEMBER","body":"Of course some casting will be needed, `Percentiles` is the interface that we are implementing, so casting to it will be ok. But we will only be able to return what gets returned via REST through its `Percentiles.percentile(double percent)` as you figured, rather than anything that is exposed through the internal state that is only serialized back via transport layer and not available when using REST. SO yes, in this specific case the issue is more subtle than a class cast exception, the behaviour of the `percentile` method will not be exactly the same as before once switched to REST.","performed_via_github_app":null}]