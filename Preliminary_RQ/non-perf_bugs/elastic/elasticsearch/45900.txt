{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/45900","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/45900/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/45900/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/45900/events","html_url":"https://github.com/elastic/elasticsearch/issues/45900","id":484475319,"node_id":"MDU6SXNzdWU0ODQ0NzUzMTk=","number":45900,"title":"Add a min_docs parameter for rollover action in ILM","user":{"login":"raf64flo","id":133268,"node_id":"MDQ6VXNlcjEzMzI2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/133268?v=4","gravatar_id":"","url":"https://api.github.com/users/raf64flo","html_url":"https://github.com/raf64flo","followers_url":"https://api.github.com/users/raf64flo/followers","following_url":"https://api.github.com/users/raf64flo/following{/other_user}","gists_url":"https://api.github.com/users/raf64flo/gists{/gist_id}","starred_url":"https://api.github.com/users/raf64flo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raf64flo/subscriptions","organizations_url":"https://api.github.com/users/raf64flo/orgs","repos_url":"https://api.github.com/users/raf64flo/repos","events_url":"https://api.github.com/users/raf64flo/events{/privacy}","received_events_url":"https://api.github.com/users/raf64flo/received_events","type":"User","site_admin":false},"labels":[{"id":163824881,"node_id":"MDU6TGFiZWwxNjM4MjQ4ODE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Indices%20APIs","name":":Core/Features/Indices APIs","color":"0e8a16","default":false,"description":"APIs to create and manage indices"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-08-23T11:14:37Z","updated_at":"2020-02-14T23:09:05Z","closed_at":"2019-08-29T23:12:47Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nThis feature request is related to this forum thread: https://discuss.elastic.co/t/what-about-a-min-docs-parameter-for-rollover-action-in-index-lifecycle-management/195242\r\n\r\nThis issue precises further the request and the use cases discussed in the forum.\r\n\r\nThe [rollover action currently](https://www.elastic.co/guide/en/elasticsearch/reference/7.3/_actions.html#ilm-rollover-action) allows for triggering a new index using 3 parameters: \r\n\r\nName | Required | Default | Description\r\n-- | -- | -- | --\r\nmax_size | no | - | max primary shard index storage size. See Byte Units for formatting\r\nmax_docs | no | - | max number of documents an index is to contain before rolling over.\r\nmax_age | no | - | max time elapsed from index creation. See Time Units for formatting\r\n\r\n## Use cases\r\n\r\nThe Rollover action currently is really useful in time series indices, but can also be used for indices (named below _datastore indices_) which are not time series (by avoiding the `max_age` condition). \r\n\r\nFor both contexts there are cases for which we can end with lots of empty or very small indices when using the `max_age` condition, if the indexing throughput is low or null during some period of time. This can lead to a very big number of shards in the cluster and makes potentially its stability at risk. \r\n\r\nThe `delete` action could be used to balance this risk, but there are contexts where the index deletion is not related to the index lifecycle directly, and could be related to an external condition (unrelated to the index age nor its size). Hence, we should be able to use safely the rollover action without the need to implement a delete action.\r\n\r\n### Time series indices\r\n\r\nIn the case of time series indices, we can have some period of very low throughput, or even no throughput at all, so using `max_age` makes a new index created each hour (in the example below), even if no documents have been added in the given period, leading to a series of useless very small or empty indices.\r\n\r\n### Datastore indices\r\n\r\nDuring an heavy indexing load, we are able to use the ILM policy, in order to keep index size in safe limits, automatically. We can do this by using the `max_docs` or `max_size` condition to trigger the rollover. But for the last X documents (X being lower than `max_docs` and having size lower than `max_size`), they will stay indefinitely in the hot phase, even if we know the indexing process is finished, so they cannot benefit of the next cleaning processes (such as shrink, forcemerge and so on) in the warm phase of the defined policy.\r\n\r\nThen, if we use the `max_age` condition to prevent the last indexed documents from staying in the hot index, the number of empty indices will increase over time, unnecessary, after the indexing process is finished.\r\n\r\n## Feature request\r\n\r\nTo prevent the creation of any empty (or too small) index, we could add a `min_docs` condition to be used in conjunction with the other conditions, as following: \r\n\r\nName | Required | Default | Description\r\n-- | -- | -- | --\r\nmin_docs | no | 0 | min number of documents an index is to contain before rolling over. This condition is considered in conjunction with any other condition.\r\n\r\nExample:\r\n```\r\nPUT _ilm/policy/my_policy\r\n{\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"hot\": {\r\n        \"actions\": {\r\n          \"rollover\": {\r\n            \"conditions\": {\r\n              \"max_age\":   \"1h\",\r\n              \"min_docs\":   \"1000\",\r\n              \"max_docs\":  100000,\r\n              \"max_size\":  \"5gb\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Constraints on the new condition\r\n\r\n- 0 <= `min_docs` < `max_docs`\r\n- default value = 0, in order to keep compatibility with previous behavior\r\n- contrary to the other conditions which trigger the action as soon as they are met (according to the `indices.lifecycle.poll_interval`), this one should be considered in conjunction with the others and could not be used alone.\r\n- as a consequence, using `min_docs` as a unique condition should be invalid and throw an exception.\r\n\r\n### API definition\r\n\r\nTo reflect this requirement, we could change the way the conditions are declared in several manners, in addition to the example above: \r\n```\r\nPUT _ilm/policy/my_policy\r\n{\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"hot\": {\r\n        \"actions\": {\r\n          \"rollover\": {\r\n            \"conditions\": {\r\n              \"or\": {\r\n                \"max_age\": \"1h\",\r\n                \"max_docs\": 100000,\r\n                \"max_size\": \"5gb\"\r\n              },\r\n              \"and\": {\r\n                \"min_docs\": \"1000\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThis way is clearer in my mind to explicit how the triggers are met, but it has the cons to change the API.\r\n\r\nTo keep compatibility, we could move to something like:\r\n```\r\nPUT _ilm/policy/my_policy\r\n{\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"hot\": {\r\n        \"actions\": {\r\n          \"rollover\": {\r\n            \"conditions\": {\r\n              \"max_age\": \"1h\",\r\n              \"max_docs\": 100000,\r\n              \"max_size\": \"5gb\",\r\n              \"and_min_docs\": \"1000\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nUsing an explicit `and_min_docs` condition that could not be met alone, without at least one other condition.","closed_by":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"performed_via_github_app":null}