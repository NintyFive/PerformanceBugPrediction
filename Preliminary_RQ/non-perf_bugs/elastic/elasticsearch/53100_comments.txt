[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/594481513","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-594481513","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":594481513,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NDQ4MTUxMw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-03-04T12:02:30Z","updated_at":"2020-03-04T12:02:30Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features (:Core/Features/Indices APIs)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/603862551","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-603862551","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":603862551,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMzg2MjU1MQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2020-03-25T14:13:31Z","updated_at":"2020-03-25T14:13:31Z","author_association":"MEMBER","body":"I've updated the create data stream api section. The first backing index is now created as part of the create data stream api call and no longer created lazily. The assumption for this api, is that if data streams are explicitly created then the new data stream should be ready to be used. Index templates v2 will provide the ability to lazily create a data stream.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607159815","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-607159815","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":607159815,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzE1OTgxNQ==","user":{"login":"lizozom","id":3016806,"node_id":"MDQ6VXNlcjMwMTY4MDY=","avatar_url":"https://avatars1.githubusercontent.com/u/3016806?v=4","gravatar_id":"","url":"https://api.github.com/users/lizozom","html_url":"https://github.com/lizozom","followers_url":"https://api.github.com/users/lizozom/followers","following_url":"https://api.github.com/users/lizozom/following{/other_user}","gists_url":"https://api.github.com/users/lizozom/gists{/gist_id}","starred_url":"https://api.github.com/users/lizozom/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lizozom/subscriptions","organizations_url":"https://api.github.com/users/lizozom/orgs","repos_url":"https://api.github.com/users/lizozom/repos","events_url":"https://api.github.com/users/lizozom/events{/privacy}","received_events_url":"https://api.github.com/users/lizozom/received_events","type":"User","site_admin":false},"created_at":"2020-04-01T10:09:36Z","updated_at":"2020-04-01T10:12:11Z","author_association":"NONE","body":"@martijnvg Thank you for posting such a detailed meta issue!\r\nI have some questions on this - \r\n * Will responses from data stream APIs be compatible with the ones returned from index APIs?\r\n * Will there be any additional information on the response?\r\n * Do you have any thoughts on whether Kibana users be aware of data streams? Or should this concept be abstracted away? \r\n * In ES, will there be a common API that retrieves data either from an index or a data stream **by name**? Or should an API consumer that only knows the name of his index always query both? \r\n * If it's the latter, who's to prevent someone from creating an index with an identical name to the datastream?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/608264542","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-608264542","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":608264542,"node_id":"MDEyOklzc3VlQ29tbWVudDYwODI2NDU0Mg==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2020-04-03T06:57:08Z","updated_at":"2020-04-03T06:57:08Z","author_association":"MEMBER","body":"Hey @lizozom apologies for my slow response.\r\n\r\n> Will responses from data stream APIs be compatible with the ones returned from index APIs?\r\n\r\nCurrently the get data stream returns zero or more data stream, and for each data stream it contains the name, timestamp field, current generation (still needs to be added) and a list of index name/uuid tuples (indices that are part of the data stream). For additional information about these indices the get index api needs to be used.\r\n\r\n> Will there be any additional information on the response?\r\n\r\nNot beyond what I have described in the second question. However if more information is required then we will add it.\r\n\r\n> Do you have any thoughts on whether Kibana users be aware of data streams? Or should this concept be abstracted away?\r\n\r\nI think when using Kibana the user shouldn't have to be aware about data streams. It should make setting up index patterns easier. Users can use the name of the data stream to start querying and building dashboards. \r\n\r\n> In ES, will there be a common API that retrieves data either from an index or a data stream by name? Or should an API consumer that only knows the name of his index always query both?\r\n\r\nAPIs will be able to support resolving data streams to the backing indices. Just like APIs can resolve aliases today.\r\n\r\n> If it's the latter, who's to prevent someone from creating an index with an identical name to the datastream?\r\n\r\nThe name of an index, alias or data stream has to be unique within the collection of all data streams, aliases and indices. Otherwise creation of a data stream/alias/index fails.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/616779189","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-616779189","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":616779189,"node_id":"MDEyOklzc3VlQ29tbWVudDYxNjc3OTE4OQ==","user":{"login":"alexh97","id":1932664,"node_id":"MDQ6VXNlcjE5MzI2NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/1932664?v=4","gravatar_id":"","url":"https://api.github.com/users/alexh97","html_url":"https://github.com/alexh97","followers_url":"https://api.github.com/users/alexh97/followers","following_url":"https://api.github.com/users/alexh97/following{/other_user}","gists_url":"https://api.github.com/users/alexh97/gists{/gist_id}","starred_url":"https://api.github.com/users/alexh97/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexh97/subscriptions","organizations_url":"https://api.github.com/users/alexh97/orgs","repos_url":"https://api.github.com/users/alexh97/repos","events_url":"https://api.github.com/users/alexh97/events{/privacy}","received_events_url":"https://api.github.com/users/alexh97/received_events","type":"User","site_admin":false},"created_at":"2020-04-20T20:04:42Z","updated_at":"2020-04-20T20:04:42Z","author_association":"NONE","body":"@mattkime will be the central point of contact for all Kibana integration discussion/questions on this topic.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/630411604","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-630411604","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":630411604,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMDQxMTYwNA==","user":{"login":"ericsampson","id":1183853,"node_id":"MDQ6VXNlcjExODM4NTM=","avatar_url":"https://avatars2.githubusercontent.com/u/1183853?v=4","gravatar_id":"","url":"https://api.github.com/users/ericsampson","html_url":"https://github.com/ericsampson","followers_url":"https://api.github.com/users/ericsampson/followers","following_url":"https://api.github.com/users/ericsampson/following{/other_user}","gists_url":"https://api.github.com/users/ericsampson/gists{/gist_id}","starred_url":"https://api.github.com/users/ericsampson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ericsampson/subscriptions","organizations_url":"https://api.github.com/users/ericsampson/orgs","repos_url":"https://api.github.com/users/ericsampson/repos","events_url":"https://api.github.com/users/ericsampson/events{/privacy}","received_events_url":"https://api.github.com/users/ericsampson/received_events","type":"User","site_admin":false},"created_at":"2020-05-18T20:14:55Z","updated_at":"2020-05-18T20:14:55Z","author_association":"NONE","body":"Thanks for working on this Martijn!\r\n* \"Searches and other multi-index APIs forward requests to all indices that are part of a data stream\". Would it be possible for these cases to only forward requests to the indices that contain the date-ranged data in question, instead of every index in the data stream? \r\n* document update and delete are not permitted; what is the suggested API workflow to perform these operations then?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/631325330","html_url":"https://github.com/elastic/elasticsearch/issues/53100#issuecomment-631325330","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53100","id":631325330,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMTMyNTMzMA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2020-05-20T08:31:33Z","updated_at":"2020-05-20T08:31:33Z","author_association":"MEMBER","body":"> Would it be possible for these cases to only forward requests to the indices that contain the date-ranged data in question, instead of every index in the data stream?\r\n\r\nYes, but this isn't a data stream feature. Elasticsearch relies on the `can_match` search phase to filter out shards and indices that are never going to match with a date filter in a query. This is something that Elasticsearch already makes use of today in queries on a single index or multiple indices.\r\n\r\n> what is the suggested API workflow to perform these operations then?\r\n\r\nThe idea currently is that updates and deletes are allowed if executed on a backing index directly. Updates and deletes are currently ignored if performed via the data stream.","performed_via_github_app":null}]