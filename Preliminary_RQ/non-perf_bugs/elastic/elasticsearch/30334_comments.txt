[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/385971734","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-385971734","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":385971734,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NTk3MTczNA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T13:08:35Z","updated_at":"2018-05-02T13:08:35Z","author_association":"CONTRIBUTOR","body":"cc @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386018576","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-386018576","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":386018576,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjAxODU3Ng==","user":{"login":"mveitas","id":439521,"node_id":"MDQ6VXNlcjQzOTUyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/439521?v=4","gravatar_id":"","url":"https://api.github.com/users/mveitas","html_url":"https://github.com/mveitas","followers_url":"https://api.github.com/users/mveitas/followers","following_url":"https://api.github.com/users/mveitas/following{/other_user}","gists_url":"https://api.github.com/users/mveitas/gists{/gist_id}","starred_url":"https://api.github.com/users/mveitas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mveitas/subscriptions","organizations_url":"https://api.github.com/users/mveitas/orgs","repos_url":"https://api.github.com/users/mveitas/repos","events_url":"https://api.github.com/users/mveitas/events{/privacy}","received_events_url":"https://api.github.com/users/mveitas/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T15:28:27Z","updated_at":"2018-05-02T15:29:09Z","author_association":"NONE","body":"I ran into a similar behavior the exception reporting is inconsistent. I ended up putting in some logic to extract the details of the exceptions and still working to tweak this a bit:\r\n\r\n```\r\npublic void handleException(ActionRequest actionRequest, Exception e) {\r\n        // Some exceptions are suppressed due to try-with-resources\r\n        for (Throwable t : e.getSuppressed()) {\r\n            if (t instanceof ResponseException) {\r\n                ResponseException responseException = (ResponseException) t;\r\n                try {\r\n                    JsonNode exceptionNode =\r\n                            objectMapper.readTree(responseException.getResponse().getEntity().getContent());\r\n\r\n                    Optional<JsonNode> rootCause = Optional.ofNullable(exceptionNode.get(\"error\"))\r\n                            .map(errorNode -> errorNode.get(\"root_cause\"));\r\n\r\n                    Optional<JsonNode> causedBy = searchForEntity(exceptionNode, \"caused_by\");\r\n\r\n                    String type = getNodeTextValue(causedBy, rootCause, \"type\");\r\n                    String reason = getNodeTextValue(causedBy, rootCause, \"reason\");\r\n\r\n                    LOG.error(\"Error executing action - cause type: {}, reason: {}, action: {}\",\r\n                            type, reason, actionRequest.getClass(), e);\r\n\r\n                    throw new SearchException(responseException.getResponse().getStatusLine().getStatusCode(), t);\r\n                } catch (IOException ioe) {\r\n                    LOG.warn(\"Unable to convert response exception content\", ioe);\r\n                }\r\n            }\r\n        }\r\n\r\n        LOG.error(\"Error executing elasticsearch action {}\", actionRequest.getClass(), e);\r\n        throw new SearchException(HttpStatus.INTERNAL_SERVER_ERROR.value(), e);\r\n    }\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386076508","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-386076508","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":386076508,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjA3NjUwOA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T18:31:34Z","updated_at":"2018-05-02T18:31:34Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386080977","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-386080977","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":386080977,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjA4MDk3Nw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T18:46:13Z","updated_at":"2018-05-02T18:46:13Z","author_association":"CONTRIBUTOR","body":"> The method search of the RestHighLevelClient throws a checked IOException which needs to be caught and handled by the caller. However, an invalid query or any problem along the way can also trigger a runtime exception ElasticsearchException.\r\n\r\nSo, in theory, the `IOException` in general and the `ResponseException` in particular are meant to communicate that the remote Elasticsearch cluster failed. The `ElasticsearchException` is kind of a side effect of reusing the Request objects from the transport client which are in turn reused from the server code. I think it is fairly reasonable for us to throw it if you build the request in an invalid way. Or for us to throw *some* unchecked exception. It'd probably be better if it were more specific but `ElasticsearchException` is what we have right now.\r\n\r\nIf we're throwing `ElasticsearchException` when the server does something wrong that seems like something we should fix sooner rather than later.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386081354","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-386081354","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":386081354,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjA4MTM1NA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T18:47:24Z","updated_at":"2018-05-02T18:47:24Z","author_association":"CONTRIBUTOR","body":"@javanna, what do you think?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386090562","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-386090562","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":386090562,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjA5MDU2Mg==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T19:19:29Z","updated_at":"2018-05-02T19:19:29Z","author_association":"MEMBER","body":"To clarify the behaviour:  `ResponseException` is what the low-level client throws whenever a `4xx` or `5xx` error code is returned. In such cases, the high-level client also tries to parse the response body, as Elasticsearch returns the error details, into a generic `ElasticsearchException` and throws that one, hence suppresses the original `ResponseException`. This is done consciously, I do not see it as a bug but I am curious to hear what we could do differently.\r\n\r\nAlthough `ResponseException` will always appear as suppressed and an `ElasticsearchException` will be thrown instead, `IOException` can still be thrown in case the request times out and similar cases where we don't have a response coming back from Elasticsearch.\r\n\r\nWe may also rarely throw `IOException` in case we fail parsing the response back in the high-level REST client code, which is to be considered a bug if it happens against the supported Elasticsearch versions.\r\n\r\n@mveitas I don't follow why you need to parse the response body returned with the suppressed `ResponseException`, that is info that should already be returned with the `ElasticsearchException`, the idea is that the parsing is all done in the high-level REST client, that is why we suppress the low-level `ResponseException` and return a new exception in its place. Can you clarify?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386091070","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-386091070","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":386091070,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjA5MTA3MA==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T19:21:17Z","updated_at":"2018-05-02T19:21:17Z","author_association":"MEMBER","body":"on having to catch two different exceptions, I actually find this good, as they are thrown in two very different cases like I explained above. On `ElasticsearchException` being unchecked, we just went with what we had in the transport client while for communication errors we went with what the low-level REST client and underlying apache http client already throw.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/588084502","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-588084502","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":588084502,"node_id":"MDEyOklzc3VlQ29tbWVudDU4ODA4NDUwMg==","user":{"login":"r862","id":9695213,"node_id":"MDQ6VXNlcjk2OTUyMTM=","avatar_url":"https://avatars2.githubusercontent.com/u/9695213?v=4","gravatar_id":"","url":"https://api.github.com/users/r862","html_url":"https://github.com/r862","followers_url":"https://api.github.com/users/r862/followers","following_url":"https://api.github.com/users/r862/following{/other_user}","gists_url":"https://api.github.com/users/r862/gists{/gist_id}","starred_url":"https://api.github.com/users/r862/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r862/subscriptions","organizations_url":"https://api.github.com/users/r862/orgs","repos_url":"https://api.github.com/users/r862/repos","events_url":"https://api.github.com/users/r862/events{/privacy}","received_events_url":"https://api.github.com/users/r862/received_events","type":"User","site_admin":false},"created_at":"2020-02-19T07:58:22Z","updated_at":"2020-02-19T07:58:22Z","author_association":"NONE","body":"@javanna The ResponseException is thrown whenever the status is not 2xx (from https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-responses.html), as opposed to only for 4xx and 5xx as you have mentioned.\r\nThe reason why we need to parse the ResponseException is because that is the place where you get the status code (2xx, 3xx, 4xx, etc.), which is not passed on directly as a retrievable field in ElasticsearchException(?).\r\n\r\nI need to read the status codes to understand when to retry the call (ElasticsearchException isn't categorised into Retryable or Non-Retryable exception). One recommendation I am following for retrying is from here: https://discuss.elastic.co/t/knowing-when-and-when-not-to-retry-a-request-based-on-elasticsearchexception-or-ioexception-with-the-resthighlevelclient/183779/2\r\n\r\nOther than parsing the Low level client's ResponseException, I don't think there is any other way to read the status (error) codes?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/588129656","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-588129656","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":588129656,"node_id":"MDEyOklzc3VlQ29tbWVudDU4ODEyOTY1Ng==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2020-02-19T09:48:21Z","updated_at":"2020-02-19T09:48:21Z","author_association":"MEMBER","body":"> The ResponseException is thrown whenever the status is not 2xx (from https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low-usage-responses.html), as opposed to only for 4xx and 5xx as you have mentioned.\r\n\r\nThat is what I meant, but for simplicity I only mentioned the most common categories of status codes: 2xx. 4xx and 5xx.\r\n\r\n\r\nI see what you mean: ElasticsearchException allows you  to retrieve the status but it's not the correct one. Though you should be able to retrieve the original ResponseException from the suppressed exceptions, without needing to parse any json?\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597714947","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-597714947","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":597714947,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzcxNDk0Nw==","user":{"login":"r862","id":9695213,"node_id":"MDQ6VXNlcjk2OTUyMTM=","avatar_url":"https://avatars2.githubusercontent.com/u/9695213?v=4","gravatar_id":"","url":"https://api.github.com/users/r862","html_url":"https://github.com/r862","followers_url":"https://api.github.com/users/r862/followers","following_url":"https://api.github.com/users/r862/following{/other_user}","gists_url":"https://api.github.com/users/r862/gists{/gist_id}","starred_url":"https://api.github.com/users/r862/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r862/subscriptions","organizations_url":"https://api.github.com/users/r862/orgs","repos_url":"https://api.github.com/users/r862/repos","events_url":"https://api.github.com/users/r862/events{/privacy}","received_events_url":"https://api.github.com/users/r862/received_events","type":"User","site_admin":false},"created_at":"2020-03-11T15:54:16Z","updated_at":"2020-03-11T15:54:16Z","author_association":"NONE","body":"@javanna Yes. That is what I meant! Also, is there any plan to add the same error codes to the HighLevelRestClient as well, to have the correctness?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601353111","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-601353111","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":601353111,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTM1MzExMQ==","user":{"login":"r862","id":9695213,"node_id":"MDQ6VXNlcjk2OTUyMTM=","avatar_url":"https://avatars2.githubusercontent.com/u/9695213?v=4","gravatar_id":"","url":"https://api.github.com/users/r862","html_url":"https://github.com/r862","followers_url":"https://api.github.com/users/r862/followers","following_url":"https://api.github.com/users/r862/following{/other_user}","gists_url":"https://api.github.com/users/r862/gists{/gist_id}","starred_url":"https://api.github.com/users/r862/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/r862/subscriptions","organizations_url":"https://api.github.com/users/r862/orgs","repos_url":"https://api.github.com/users/r862/repos","events_url":"https://api.github.com/users/r862/events{/privacy}","received_events_url":"https://api.github.com/users/r862/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T18:45:42Z","updated_at":"2020-03-19T18:45:42Z","author_association":"NONE","body":"Just to clarify, there exists a status() method in the ElasticsearchException. But, the status is set in code, rather than passing on the status from the underlying Low Level Client (?) (which is present in the suppressed ResponseException). So, this is not the exact status which ES is passing on.\r\nFor reference, this is the status method, where the status codes are implied through custom logic: https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/ElasticsearchException.java#L224\r\n\r\n@javanna Do you think the actual status code should also be a part of the ElasticsearchException, for correctness? I think that there maybe be some reason for the current behaviour, which the original contributors must have thought about. But, I am not able to arrive at that reason! Would love to hear those reasons!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601641267","html_url":"https://github.com/elastic/elasticsearch/issues/30334#issuecomment-601641267","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","id":601641267,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTY0MTI2Nw==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2020-03-20T10:58:25Z","updated_at":"2020-03-20T10:58:25Z","author_association":"MEMBER","body":"@r862 I don't follow, if a `ResponseException` is thrown you should be getting back an `ElasticsearchStatusException`, like in the stacktrace above, hence calling `status()` should return the proper status code. If that is not the case, would you mind opening a new issue and post more info about what happens in your case please. including your stacktrace? Thanks! ","performed_via_github_app":null}]