{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/6355","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6355/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6355/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6355/events","html_url":"https://github.com/elastic/elasticsearch/issues/6355","id":34649622,"node_id":"MDU6SXNzdWUzNDY0OTYyMg==","number":6355,"title":"Indexing: DocumentMissingException is uncaught if thrown during retry of update request","user":{"login":"peschlowp","id":1713347,"node_id":"MDQ6VXNlcjE3MTMzNDc=","avatar_url":"https://avatars1.githubusercontent.com/u/1713347?v=4","gravatar_id":"","url":"https://api.github.com/users/peschlowp","html_url":"https://github.com/peschlowp","followers_url":"https://api.github.com/users/peschlowp/followers","following_url":"https://api.github.com/users/peschlowp/following{/other_user}","gists_url":"https://api.github.com/users/peschlowp/gists{/gist_id}","starred_url":"https://api.github.com/users/peschlowp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peschlowp/subscriptions","organizations_url":"https://api.github.com/users/peschlowp/orgs","repos_url":"https://api.github.com/users/peschlowp/repos","events_url":"https://api.github.com/users/peschlowp/events{/privacy}","received_events_url":"https://api.github.com/users/peschlowp/received_events","type":"User","site_admin":false},"labels":[{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null},{"id":112658225,"node_id":"MDU6TGFiZWwxMTI2NTgyMjU=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.2.3","name":"v1.2.3","color":"DDDDDD","default":false,"description":null},{"id":95090930,"node_id":"MDU6TGFiZWw5NTA5MDkzMA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.3.0","name":"v1.3.0","color":"DDDDDD","default":false,"description":null},{"id":76184120,"node_id":"MDU6TGFiZWw3NjE4NDEyMA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v2.0.0-beta1","name":"v2.0.0-beta1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2014-05-30T14:24:18Z","updated_at":"2014-07-16T12:27:27Z","closed_at":"2014-07-15T12:57:42Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"This issue is about the same behavior as described in #4663 but identifies a server bug as the root cause and suggests a possible fix. It replaces #4663 because the title of that issue is misleading as it points to client-side logic. Here is the scenario:\n\nAn update request always checks if the document exists. If the document does not exist, a DocumentMissingException is thrown ([UpdateHelper.java](https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/update/UpdateHelper.java):91). Everything is fine if this happens on the first try of the request: The exception is caught ([TransportInstanceSingleOperationAction.java](https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java):194) and an HTTP response is sent accordingly.\n\nHowever, if the update request is retried because of a version conflict, and DocumentMissingException is thrown only then, the exception will not be caught because there is no exception handling in the Runnable executing the retry ([TransportUpdateAction.java](https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java):246). The exception will just show up in the server log of the Elasticsearch node and no further action is taken. In particular, no HTTP response is sent to the client. In my view, a response should be sent to the client in this situation as well, indicating that the document is missing.\n\nWe discovered this behavior in integration tests that hung forever because the test client was blocking on a future waiting for the response that was not to happen. A possible scenario how this can happen (in fact, how it happened to us in our tests) is as follows:\n- A delete request for document A is made.\n- At roughly the same time, an update request for document A is made.\n- The timing is such that both requests reach their respective methods in [InternalEngine.java](https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java) concurrently, i.e., the update call reaches InternalEngine.innerIndex() and the delete call reaches InternalEngine.innerDelete().\n- Let the delete call happen first. It will delete the document and update its version.\n- After the delete call has finished, the update call proceeds. It then notices that a version conflict exists and retries.\n- The retry will detect that the document is missing, throwing the exception that will not be caught.\n\n[This gist](https://gist.github.com/peschlowp/df952b5900ff9d1279e3) is a self-contained java program that will provoke the behavior with some probability. The test program inserts 100 documents into an index, then starts two threads which concurrently try to update or delete these 100 documents. When the bug manifests, the exception will show in the server log and the updating thread will block forever. On my local machine, the bug manifests every time I run the program.\n\nAlternatively, you can reproduce the behavior simply by performing a concurrent delete and update request for the same document and setting breakpoints in InternalEngine to force the timing as sketched above.\n\nA possible fix for this scenario would be to wrap the call in [TransportUpdateAction.java](https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java):246 in a try-catch block like this. If you feel this solution is adequate, I have already tested the fix and can provide a pull request:\n\n```\ntry {\n    shardOperation(request, listener, retryCount + 1);\n} catch (DocumentMissingException e){\n    listener.onFailure(e);\n}\n```\n\nOn the other hand, if there are similar cases maybe a more generic solution is more appropriate?\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}