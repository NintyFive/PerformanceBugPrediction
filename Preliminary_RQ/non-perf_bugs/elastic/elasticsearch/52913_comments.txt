[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/592106126","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-592106126","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":592106126,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjEwNjEyNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-02-27T18:24:16Z","updated_at":"2020-02-27T18:24:16Z","author_association":"MEMBER","body":"Pinging @tsg again for awareness as users of the API above.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/592106552","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-592106552","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":592106552,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjEwNjU1Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-02-27T18:25:18Z","updated_at":"2020-02-27T18:25:18Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/592223907","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-592223907","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":592223907,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjIyMzkwNw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2020-02-27T23:08:24Z","updated_at":"2020-02-27T23:08:24Z","author_association":"MEMBER","body":"> However when it comes to sequences and joins, this seems inadequate to handle the information needed to resume a query plus it requires the initial query to be sent again (which is unfortunate).\r\n\r\nCan you elaborate on that ? I don't see why `search_after` is not adequate to resume a query. It's a nice way in my opinion to move the state of the search to the client so that you **can** resume a query. I understand that for sequences, more work is needed to handle the state of individual queries but I don't see why we shouldn't use `search_after` as the basis to provide sorted streams.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/592430646","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-592430646","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":592430646,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjQzMDY0Ng==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-02-28T09:35:50Z","updated_at":"2020-02-28T09:35:50Z","author_association":"MEMBER","body":"`search_after` at Elasticsearch query level is great for pagination.\r\nBut a similar parameter at EQL level is likely to not contain all the information needed to resume a sequence or join page. Internally EQL would use `search_after` to continue individual queries but assembling them into a next page is likely to extra information such the join key type, value in each query.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/595985301","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-595985301","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":595985301,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NTk4NTMwMQ==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-06T22:06:29Z","updated_at":"2020-03-06T22:06:29Z","author_association":"MEMBER","body":"On the high level pagination means an ability to continue executing the physical plan where we left off. The physical plan for EQL in general consists of a set of one or more DSL queries and a state machine that walks (and leapfrogs) the results of the queries generating the results that  can be then post processed. In other words for each consecutive execution we need:\r\n\r\n- Elasticsearch DSL queries\r\n- Elasticsearch queries state (search_after keys or scroll_id)\r\n- State machine configuration\r\n- State machine state (unless we can always assume initial state)\r\n- Postprocessing configuration\r\n\r\nWhile designing the solution we would like to address the following concerns:\r\n\r\n- Simple API\r\n- Robustness (how should we react if the user doesnâ€™t use API correctly)\r\n- Server-side state (we would like to eliminate the server side state if possible)\r\n- Upgradability or at least robustness error handling in case the the state sent to the user is no longer compatible with the current version of elasticsearch\r\n\r\nFor a multi page responses we will need to send a state of execution to a client so the client can send us this state back. There are 2 main approaches here. We can either encode all necessary information as a mega state key and send it to a client (similar to scroll API or SQL API) or we can encode only a minimal amount of information and ask a client to resent a complete request again for the next page so we can recreate necessary state (similar to search_after API). \r\n\r\nIn case of a mega state approach we would parse EQL once and then encode all 5 elements ( elasticsearch queries, search_after keys, state machine state and configuration, postprocessing configuration)  into a key. \r\n\r\nIn the second approach with a minimal key, we would recreate elasticsearch queries, state machine configuration and postprocessing configuration from re-supplied EQL and we will store elasticearch search_after keys and the state machine state if needed as the state key. \r\n\r\nThe biggest issue with the first approach is that the key might be much bigger since EQL tends to be much less verbose compared to the DSL that results from it. The biggest issue with minimal state sent to the client is to deal with possibly inconsistent state. The inconsistency can be caused by changes into EQL between invocations or changes to optimization logic of EQL that will result in different DSL queries due to hitting a different ES version. \r\n\r\nI have been thinking about both approaches for a while, and I think I prefer the second approach primarily because it will involve much less serialization code that will have to be written. The consistency issue could be addressed by fingerprinting the resulted queries and verifying that EQL is still parsed into the same queries that the client supplied state was generated for. \r\n\r\nTo summarize, unless I hear otherwise, I am planning to recreate the physical plan for every page from supplied EQL, and only send search_after keys and potentially small executor state back to the client. The consistency will be verified by fingerprinting the DSL queries.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/596668904","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-596668904","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":596668904,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NjY2ODkwNA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-03-09T17:27:31Z","updated_at":"2020-03-09T17:27:31Z","author_association":"MEMBER","body":"I prefer the former approach, fully serialized form, and I think it has some distinct advantages over the latter.\r\n\r\n1. Usability wise, sending the request again on each page plus some \"internal state\" is leaky as it's a mixture of public API which is user-defined and internal state, which is server-defined.\r\n\r\n2. Recreating the plans of the same query is wasteful - the field resolution means retrieving the mapping every time to check its correctness before creating the actual search queries. Index templates and aliases can lead to large mappings which need to be processed over and over. \r\nIn metrics and SIEM case, mappings with close to thousands of fields are common a pattern making that number even higher. For cross-cluster search, the effect is amplified.\r\n\r\n3. A nice effect of doing the planning once, during the initial request is not having to worry about further inconsistencies during pagination. Even if the query is the same, the state of cluster can change which can lead to breaking pagination due to incorrect planning.\r\nThe semantics become either as well - once a query has been planned, the follow-up is just search.\r\n\r\n4. Serialization wise, this would apply to the internal state anyway so the difference between the two approaches would be on the executing queries. As these are actual Elastic queryDSL, they are already serializeable(`Writable`) and manageable in size.\r\nAre there any components in particular that you're concerned about?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/596705838","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-596705838","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":596705838,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NjcwNTgzOA==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-09T18:30:41Z","updated_at":"2020-03-09T18:30:41Z","author_association":"MEMBER","body":"> Are there any components in particular that you're concerned about?\r\n\r\nFieldExtractions and Attributes are probably my main concerns here. At the moment I don't see clearly how to limit the serialization concern here so it doesn't spill from EQL into the QL land. But if we go this way, I am sure we can figure it out.\r\n\r\nI agree with all your concerns here except the first one. I was actually hoping that we can make interface cleaner with an approach modelled after \"search_after\", it's basically the same request with a small addon, especially if we can avoid base64 serialization for this addon. With scroll_id approach, it is basically one very structured and easy to understand request followed by the same request that only contains one field with a huge base64 string in it. So, I think there is opportunity to make this interface \"transparent\" rather than \"leaky\". \r\n\r\nUltimately, I can see benefits of both approaches, and can easily argue both sides. I am ok with going with full plan serialization route, but I want to make sure that we are all ok with consequences of that path, which is more serialization work and uglier (in my eyes, subject to a debate) API.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597017086","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597017086","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597017086,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzAxNzA4Ng==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-03-10T10:37:28Z","updated_at":"2020-03-10T10:37:28Z","author_association":"MEMBER","body":"> FieldExtractions and Attributes are probably my main concerns here\r\n\r\n`Attribute`s should not be serialized - they are used only for the plan output which is then converted into `FieldExtractor`s, that is the structure that knows how to extract the needed information from the response.\r\nIn EQL since the `_source` is returned as is, the field extraction should be minimal and occur only for some fields (like join key) which should simplify things further. In SQL only `FieldExtractor`s are serialized and the query dsl - the plans are not since they are not needed once the query has been transpiled.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597096341","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597096341","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597096341,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzA5NjM0MQ==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-10T13:50:36Z","updated_at":"2020-03-10T13:50:36Z","author_association":"MEMBER","body":"> Attributes should not be serialized\r\n\r\nWould that mean that we will have half initialized plans on the second page, or your plan is to have a specialized second page plans that will only exist on the second and the following pages?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597202303","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597202303","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597202303,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzIwMjMwMw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-03-10T17:06:50Z","updated_at":"2020-03-10T17:06:50Z","author_association":"MEMBER","body":"The implementation is not yet done so nothing is certain however my expectation is that one the query plan is decided upon, the initial page and the rest will contain ES queries plus some metadata to compute the actual result.\r\nThere would be no need for the Logical or Physical plan and their dependencies in place - they served their purpose. The actual execution plan would consist of `ActionListener`s and `FieldExtractor`s (or something similar, essentially a manipulation of the response itself).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597250466","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597250466","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597250466,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzI1MDQ2Ng==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-10T18:44:14Z","updated_at":"2020-03-10T18:44:14Z","author_association":"MEMBER","body":"OK, just to make sure I understand the plan (no pun intended). So the `PhysicalPlan` will not implement `execute(...)` anymore. Instead it will produce some other \"action execution plan\" that will implement `execute(...)` and upon execution will produce `Results` for the first page which will contain a serializable state that can be later rehydrated into a new \"action execution plan\" for the second page, which can be executed again and so on?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597567124","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597567124","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597567124,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzU2NzEyNA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-03-11T10:56:18Z","updated_at":"2020-03-11T10:56:18Z","author_association":"MEMBER","body":"`PhysicalPlan`s `execute` is not called universally - in fact most plans are `Unplanned`.\r\nThat's because there are plans that can only be executed locally (in SQL in particular the `SYS` commands or `LocalRelation` meaning you can return the results without hitting ES) or plans that are only available in ES - these get removed as they are folded into a `EsQueryPlan` which internally builds the query and as execute, triggers the query to ES.\r\n\r\nHowever none of the above matter for pagination in SQL as once the query plan gets executed it returns the page results plus a cursor that contains the next ES query to be executed plus the deserialization of the results.\r\nMeaning SQL and the trees have done their job - from this point on it's just about running normal ES queries and parsing the response.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597640226","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597640226","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597640226,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzY0MDIyNg==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-11T13:38:26Z","updated_at":"2020-03-11T13:38:26Z","author_association":"MEMBER","body":"So what are you proposing?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/597736888","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-597736888","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":597736888,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzczNjg4OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-03-11T16:33:44Z","updated_at":"2020-03-11T16:33:44Z","author_association":"CONTRIBUTOR","body":"Is my assumption correct that this discussion is only about the case when we return data to the client, and they later ask for the next page? The case when we need to consume all matches of an EQL query in order to feed a pipe for instance is not in the scope of this discussion?\r\n\r\nIf the above assumption is correct, I like Igor's proposal of having a minimal key better, requiring the client to re-send the query, and recreating the state on the server side. This would be consistent with the `_search` API and its `search_after` parameter. I also believe it would be a bit simpler, which I care about because I don't think that pagination is going to be a very common use-case.\r\n\r\nComplex state keys also worry me backward-compatibility-wise. For instance think of the case of a 8.x coordinating node handling the initial request, and then the client asking for the next page to a 7.x coordinating node. Changing the format of this key is going to be challenging, so I'd rather follow the approach that would require the simplest state key.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/598313850","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-598313850","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":598313850,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODMxMzg1MA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-03-12T17:25:26Z","updated_at":"2020-03-12T17:25:26Z","author_association":"MEMBER","body":"@tsg could you please take a look at the discussion above?\r\nWe'd like to know whether, for the most part, SIEM would typically navigate across multiple pages or be interested mainly in the first set of results. Especially if returning the results might not be immediate (think 10-20s or more for complicated queries or large datasets).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/600002413","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-600002413","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":600002413,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDAwMjQxMw==","user":{"login":"tsg","id":101817,"node_id":"MDQ6VXNlcjEwMTgxNw==","avatar_url":"https://avatars1.githubusercontent.com/u/101817?v=4","gravatar_id":"","url":"https://api.github.com/users/tsg","html_url":"https://github.com/tsg","followers_url":"https://api.github.com/users/tsg/followers","following_url":"https://api.github.com/users/tsg/following{/other_user}","gists_url":"https://api.github.com/users/tsg/gists{/gist_id}","starred_url":"https://api.github.com/users/tsg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tsg/subscriptions","organizations_url":"https://api.github.com/users/tsg/orgs","repos_url":"https://api.github.com/users/tsg/repos","events_url":"https://api.github.com/users/tsg/events{/privacy}","received_events_url":"https://api.github.com/users/tsg/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T10:46:24Z","updated_at":"2020-03-17T10:46:24Z","author_association":"NONE","body":"I'm thinking of two potential use-cases:\r\n\r\n* When you create a new rule (backed by an EQL search) you might want to execute this rule historically to see what matches you get. A sub-case here, you might want to also generate signals for the historical results. So you might want to run a complex EQL for the last 1 month or so potentially returning a large number of hits (>1000).  I expect this rule will execute fully in the background. I'm not sure if async search and intermediate results have us covered there, or if we'd need to combine it with paging.\r\n\r\n* For normal searches (Timeline or Discover when it will eventually support EQL) we'd want to allow pagination. My ideal UX for it would be automatic/infinite scrolling for the queries that are fast and an explicit \"load more\" button for queries that are slow + the option to put in background when needed. For the infinite scroll, it helps when we can have a reasonable guarantee that the results don't contain duplicates or gaps, otherwise the client code gets more complex.\r\n\r\nEspecially for the first use case, I'd be curious to learn how it mixes with async search. Do we need pagination at all in that case?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/600092474","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-600092474","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":600092474,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDA5MjQ3NA==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T14:10:07Z","updated_at":"2020-03-17T14:10:07Z","author_association":"MEMBER","body":"@tsg do you have any guesstimates on on how often we expect to paginate byong the first page of results across all use cases? Like is it 50% overall cases? 10%? 1%? \r\n\r\n> Especially for the first use case, I'd be curious to learn how it mixes with async search. Do we need pagination at all in that case?\r\n\r\nI don't think we have finalized design for that yet. Do you have any particular preferences? What are you planning to do with 1000s of results in the first scenario?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601241533","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-601241533","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":601241533,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTI0MTUzMw==","user":{"login":"tsg","id":101817,"node_id":"MDQ6VXNlcjEwMTgxNw==","avatar_url":"https://avatars1.githubusercontent.com/u/101817?v=4","gravatar_id":"","url":"https://api.github.com/users/tsg","html_url":"https://github.com/tsg","followers_url":"https://api.github.com/users/tsg/followers","following_url":"https://api.github.com/users/tsg/following{/other_user}","gists_url":"https://api.github.com/users/tsg/gists{/gist_id}","starred_url":"https://api.github.com/users/tsg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tsg/subscriptions","organizations_url":"https://api.github.com/users/tsg/orgs","repos_url":"https://api.github.com/users/tsg/repos","events_url":"https://api.github.com/users/tsg/events{/privacy}","received_events_url":"https://api.github.com/users/tsg/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T15:24:32Z","updated_at":"2020-03-19T15:24:32Z","author_association":"NONE","body":"> I don't think we have finalized design for that yet. Do you have any particular preferences? What are you planning to do with 1000s of results in the first scenario?\r\n\r\nWe would be re-indexing them as \"signals\", maybe with some filtering / enhancement. I _think_ it would be nice if the async API could send partial results, so we alleviate the need for paging in that case. But I don't know if that adds a lot of complexity on the ES side.\r\n\r\n>@tsg do you have any guesstimates on on how often we expect to paginate byong the first page of results across all use cases? Like is it 50% overall cases? 10%? 1%?\r\n\r\nAcross use cases, it's hard to say because it depends on the other question. On UX use cases, I'd expect pagination to be needed ~ 20% of time.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601270386","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-601270386","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":601270386,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTI3MDM4Ng==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T16:14:12Z","updated_at":"2020-03-19T16:14:12Z","author_association":"MEMBER","body":"Thanks for the feedback. Based on our discussion it sounds like the pagination might not be as critical for the first release as we originally thought. So, we are going to deprioritized this issue for now in favour of to asynchronous execution.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/700166997","html_url":"https://github.com/elastic/elasticsearch/issues/52913#issuecomment-700166997","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52913","id":700166997,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDE2Njk5Nw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T17:12:23Z","updated_at":"2020-09-28T17:12:23Z","author_association":"MEMBER","body":"So far there hasn't been any request for pagination. Further more pagination is currently possible through the `filter` parameter. As such, I'm closing this ticket since it's clear this functionality is *not* required for GA.","performed_via_github_app":null}]