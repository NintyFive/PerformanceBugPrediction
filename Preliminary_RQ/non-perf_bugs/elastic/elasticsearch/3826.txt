{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/3826","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3826/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3826/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3826/events","html_url":"https://github.com/elastic/elasticsearch/issues/3826","id":20430411,"node_id":"MDU6SXNzdWUyMDQzMDQxMQ==","number":3826,"title":"Snapshot/Restore API - Phase I","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":64607794,"node_id":"MDU6TGFiZWw2NDYwNzc5NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.0.0.Beta2","name":"v1.0.0.Beta2","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"assignees":[{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false}],"milestone":null,"comments":19,"created_at":"2013-10-03T00:04:48Z","updated_at":"2014-09-30T14:13:32Z","closed_at":"2013-11-11T00:59:54Z","author_association":"MEMBER","active_lock_reason":null,"body":"## Snapshot And Restore\n\nThe snapshot and restore module will allow to create snapshots of individual indices or an entire cluster into a remote repository and restore these indices back to the same or a different cluster afterwards. The phase I will only support shared file system repository and S3 repository.\n### Repositories\n\nBefore any snapshot or restore operation can be performed a snapshot repository should be registered in Elasticsearch. The following command registers a shared file system repository with the name `my_backup` that will use location `/mount/backups/my_backup` to store snapshots.\n\n```\n$ curl -XPUT 'http://localhost:9200/_snapshot/my_backup' -d '{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"/mount/backups/my_backup\",\n        \"compress\": true\n    }\n}'\n```\n\nOnce repository is registered, its information can be obtained using the following command:\n\n```\n$ curl -XGET 'http://localhost:9200/_snapshot/my_backup?pretty'\n```\n\n```\n{\n  \"my_backup\" : {\n    \"type\" : \"fs\",\n    \"settings\" : {\n      \"compress\" : \"false\",\n      \"location\" : \"/mount/backups/my_backup\"\n    }\n  }\n}\n```\n\nIf a repository name is not specified, or `_all` is used as repository name Elasticsearch will return information about all repositories currently registered in the cluster:\n\n```\n$ curl -XGET 'http://localhost:9200/_snapshot'\n```\n\nor\n\n```\n$ curl -XGET 'http://localhost:9200/_snapshot/all'\n```\n##### Shared File System Repository\n\nThe shared file system repository (`\"type\": \"fs\"`) is using shared file system to store snapshot. The path specified in the `location` parameter should point to the same location in the shared filesystem and be accessible on all data and master nodes. The following settings are supported:\n\n`location` - Location of the snapshots. Mandatory\n`compress` - Turns on compression of the snapshot files. Defaults to `true\n`concurrent_streams`- Throttles the number of streams (per node) preforming snapshot operation. Defaults to 5\n`chunk_size` - Big files can be broken down into chunks during snapshotting if needed. Defaults to unlimited.\n### Snapshot\n\nA repository can contain multiple snapshots of the same cluster. Snapshot are identified by unique names within the cluster. A snapshot with the name `snapshot_1` in the repository `my_backup` can be created by executing the following command:\n\n```\n$ curl -XPUT \"localhost:9200/_snapshot/my_backup/snapshot_1?wait_for_completion=true\"\n```\n\nThe `wait_for_completion` parameter specifies whether or not the request should return immediately or wait for snapshot completion. By default snapshot of all open and started indices in the cluster is created. This behavior can be changed by specifying the list of indices in the body of the snapshot request.\n\n```\n$ curl -XPUT \"localhost:9200/_snapshot/my_backup/snapshot_1\" -d '{\n    \"indices\": \"index_1,index_2\",\n    \"ignore_indices\": \"missing\"\n}'\n```\n\nThe list of indices that should be included into the snapshot can be specified using the `indices` parameter that supports multi index syntax. The snapshot request also supports the `ignore_indices` option. Setting it to `missing` will cause indices that do not exists to be ignored during snapshot creation. By default, when `ignore_indices` option is not set and an index is missing the snapshot request will fail.\n\nThe index snapshot process is incremental. In the process of making the index snapshot Elasticsearch analyses the list of the index files that are already stored in the repository and copies only files that were created or changed since the last snapshot. That allows multiple snapshots to be preserved in the repository in a compact form. Snapshotting process is executed in non-blocking fashion. All indexing and searching operation can continue to be executed against the index that is being snapshotted. However, a snapshot represents the point-in-time view of the index at the moment when snapshot was created, so no records that were added to the index after snapshot process had started will be present in the snapshot.\n\nBesides creating a copy of each index the snapshot process can also store global cluster metadata, which includes persistent cluster settings and templates. The transient settings and registered snapshot repositories are not stored as part of the snapshot.\n\nOnly one snapshot process can be executed in the cluster at any time. While snapshot of a particular shard is being created this shard cannot be moved to another node, which can interfere with rebalancing process and allocation filtering. Once snapshot of the shard is finished Elasticsearch will be able to move shard to another node according to the current allocation filtering settings and rebalancing algorithm.\n\nOnce a snapshot is created information about this snapshot can be obtained using the following command:\n\n```\n$ curl -XGET \"localhost:9200/_snapshot/my_backup/snapshot_1\"\n```\n\nAll snapshots currently stored in the repository can be listed using the following command:\n\n```\n$ curl -XGET \"localhost:9200/_snapshot/my_backup/_all\"\n```\n\nA snapshot can be deleted from the repository using the following command:\n\n```\n$ curl -XDELETE \"localhost:9200/_snapshot/my_backup/snapshot_1\"\n```\n\nWhen a snapshot is deleted from a repository, Elasticsearch deletes all files that are associated with the deleted snapshot and not used by any other snapshots. If the deleted snapshot operation is executed while the snapshot is being created the snapshotting process will be aborted and all files created as part of the snapshotting process will be cleaned. Therefore, the delete snapshot operation can be used to cancel long running snapshot operations that were started by mistake.\n### Restore\n\nA snapshot can be restored using this following command:\n\n```\n$ curl -XPOST \"localhost:9200/_snapshot/my_backup/snapshot_1/_restore\"\n```\n\nBy default, all indices in the snapshot as well as cluster state are restored. It's possible to select indices that should be restored as well as prevent global cluster state from being restored by using `indices` and `restore_global_state` options in the restore request body. The list of indices supports multi index syntax. The `rename_pattern` and `rename_replacement` options can be also used to rename index on restore using regular expression that supports referencing the original text as explained [here](http://docs.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#appendReplacement%28java.lang.StringBuffer,%20java.lang.String%29).\n\n```\n$ curl -XPOST \"localhost:9200/_snapshot/my_backup/snapshot_1/_restore\" -d '{\n    \"indices\": \"index_1,index_2\",\n    \"ignore_indices\": \"missing\",\n    \"restore_global_state\": false,\n    \"rename_pattern\": \"index_(.)+\",\n    \"rename_replacement\": \"restored_index_$1\"\n}'\n```\n\nThe restore operation can be performed on a functioning cluster. However, an existing index can be only restored if it's closed. The restore operation automatically opens restored indices if they were closed and creates new indices if they didn't exist in the cluster. If cluster state is restored, the restored templates that don't currently exist in the cluster are added and existing templates with the same name are replaced by the restored templates. The restored persistent settings are added to the existing persistent settings.\n","closed_by":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"performed_via_github_app":null}