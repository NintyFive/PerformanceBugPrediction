{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/23978","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23978/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23978/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23978/events","html_url":"https://github.com/elastic/elasticsearch/issues/23978","id":220268882,"node_id":"MDU6SXNzdWUyMjAyNjg4ODI=","number":23978,"title":"termvector endpoint does not require id","user":{"login":"PortaltechGithub","id":11871912,"node_id":"MDQ6VXNlcjExODcxOTEy","avatar_url":"https://avatars2.githubusercontent.com/u/11871912?v=4","gravatar_id":"","url":"https://api.github.com/users/PortaltechGithub","html_url":"https://github.com/PortaltechGithub","followers_url":"https://api.github.com/users/PortaltechGithub/followers","following_url":"https://api.github.com/users/PortaltechGithub/following{/other_user}","gists_url":"https://api.github.com/users/PortaltechGithub/gists{/gist_id}","starred_url":"https://api.github.com/users/PortaltechGithub/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PortaltechGithub/subscriptions","organizations_url":"https://api.github.com/users/PortaltechGithub/orgs","repos_url":"https://api.github.com/users/PortaltechGithub/repos","events_url":"https://api.github.com/users/PortaltechGithub/events{/privacy}","received_events_url":"https://api.github.com/users/PortaltechGithub/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-04-07T16:48:21Z","updated_at":"2017-04-18T09:31:59Z","closed_at":"2017-04-10T07:50:13Z","author_association":"NONE","active_lock_reason":null,"body":"As you can read in the ES docs, it's also possible to use artificial documents to look up term stats. In my case i want to determine the \"quality\" of a word a user searched for. If i search for \r\n**Example:**\r\nI searched for: `Produktivitätsmanagement` decompounds in `produktivität` and `management` and `produkt`. From the termvectors component i got `doc_freq` and so on. The doc_freq for `produkt` is very high, so i can skip this term in my query.\r\n\r\n**ES Docs:**\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html#docs-termvectors-artificial-doc\r\n\r\nI'am using this method: `\\Elasticsearch\\Client::termvectors()` \r\n\r\n```\r\n$parameter = [\r\n    'index' => $index,\r\n    'type' => ['document'],\r\n    'body' => [\r\n        'doc' => [\r\n            'title_stemmed' => $term,\r\n            'text_stemmed' => $term,\r\n            'title_decompounded' => $term,\r\n            'text_decompounded' => $term,        \r\n        ],\r\n        'term_statistics' => true,\r\n        'field_statistics' => false,\r\n        'filter' => [\r\n            'min_doc_freq' => 1,\r\n            'min_word_length' => 4,\r\n        ],\r\n        'per_field_analyzer' => [\r\n            'title_stemmed' => 'default_analyzer',\r\n            'text_stemmed' => 'default_analyzer',\r\n            'title_decompounded' => 'default_analyzer',\r\n            'text_decompounded' => 'default_analyzer',\r\n        ]\r\n    ]\r\n];\r\n\r\n$response = $client->termvectors($parameter);\r\n```\r\nI think the code must be changed to require only type and index parameter, but not the ID parameter, in `\\Elasticsearch\\Endpoints\\TermVectors` i changed the `getUri()` method:\r\n\r\n```\r\n/**\r\n * @throws \\Elasticsearch\\Common\\Exceptions\\RuntimeException\r\n * @return string\r\n */\r\npublic function getURI()\r\n{\r\n    $id = '';\r\n    if (isset($this->index) !== true) {\r\n        throw new Exceptions\\RuntimeException(\r\n            'index is required for TermVectors'\r\n        );\r\n    }\r\n    if (isset($this->type) !== true) {\r\n        throw new Exceptions\\RuntimeException(\r\n            'type is required for TermVectors'\r\n        );\r\n    }\r\n    if (isset($this->id) && strlen($this->id) > 0) {\r\n        $id    = '/' . $this->id;\r\n    }\r\n\r\n    $index = '/' . $this->index;\r\n    $type  = '/' . $this->type;\r\n    $uri   = $index . $type . $id . '/_termvectors';\r\n\r\n    return $uri;\r\n}\r\n```","closed_by":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"performed_via_github_app":null}