[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424553897","html_url":"https://github.com/elastic/elasticsearch/issues/34067#issuecomment-424553897","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067","id":424553897,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDU1Mzg5Nw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-09-26T01:26:31Z","updated_at":"2018-09-26T01:26:31Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424612914","html_url":"https://github.com/elastic/elasticsearch/issues/34067#issuecomment-424612914","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067","id":424612914,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDYxMjkxNA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2018-09-26T07:24:09Z","updated_at":"2018-09-26T07:24:20Z","author_association":"MEMBER","body":"> Is this behavior intentional?\r\n\r\nYes and it always existed. What changed in 6x is that we don't index the `_type` field anymore for index created in this version. The `_type` field was used for two purposes: \r\n  * Separate root documents of different types in a single index when multiple types were allowed per mapping.\r\n  * Index the path of nested document.\r\n\r\nWhen we run a query against a specific index we need to ensure that only root documents are returned. To achieve this we used to rely on the `_type` field, if multiple types are present in the index and the query is against a specific type then we are sure that only root document can match. If the query targets all `_type` then we need to filter nested document from the response, this was done with the `#*:* -_type:__*` query which removes any document with a _type that starts with `__` (this is the prefix we use for nested document path). However this query is quite expensive since it can only work as a negative clause (all documents but...) so in 6.1.0 we made a small change to allow fast filtering of nested documents. This is #27469 which relies on the fact that we don't need to index a metadata field in the nested documents and that this absence can be used to build an efficient filter for removing nested documents (the `DocValuesExists` query).\r\n\r\n> The performance impacts for us are the following:\r\nFor our smaller recommendations index, we are getting avg response times of 100+ ms vs 50 ms without the extra query.\r\nFor one of our bigger indices (300 million docs), our avg response times are 700 ms vs 350 ms.\r\n\r\nWhich version did you test ? `6.1.0` with the `DocValuesExists` query or the old version with the negative clause ? I suspect that it's the latter which is expensive compared to a simple `DocValuesExists` query. I would expect a small overhead when the `DocValuesExists` query is used so can you please clarify what you tested.\r\n\r\n> Some extra findings - the extra DocValuesFieldExistsQuery only surfaces when there is a nested mapping and all the filter arguments are \"terms\" which means all array-type. For example - if I change language to be a term-query which filters on just 1, the extra Lucene query does not fire.\r\n\r\nIn 6x we have a new optimization that checks if the query can match nested documents and if not we don't add the nested filter query. The check looks for mandatory `term` or `range` query that target a root document field. If we find one we can safely assume that no nested documents can match the main query. We can add support for `terms` query as well but as I said above if you reindex your data in 6.1.0 you should be able to use the fast version (`DocValuesExistsQuery`) and the overhead should be small.\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424625462","html_url":"https://github.com/elastic/elasticsearch/issues/34067#issuecomment-424625462","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067","id":424625462,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDYyNTQ2Mg==","user":{"login":"jeffreynscrbdee","id":43590168,"node_id":"MDQ6VXNlcjQzNTkwMTY4","avatar_url":"https://avatars1.githubusercontent.com/u/43590168?v=4","gravatar_id":"","url":"https://api.github.com/users/jeffreynscrbdee","html_url":"https://github.com/jeffreynscrbdee","followers_url":"https://api.github.com/users/jeffreynscrbdee/followers","following_url":"https://api.github.com/users/jeffreynscrbdee/following{/other_user}","gists_url":"https://api.github.com/users/jeffreynscrbdee/gists{/gist_id}","starred_url":"https://api.github.com/users/jeffreynscrbdee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeffreynscrbdee/subscriptions","organizations_url":"https://api.github.com/users/jeffreynscrbdee/orgs","repos_url":"https://api.github.com/users/jeffreynscrbdee/repos","events_url":"https://api.github.com/users/jeffreynscrbdee/events{/privacy}","received_events_url":"https://api.github.com/users/jeffreynscrbdee/received_events","type":"User","site_admin":false},"created_at":"2018-09-26T08:10:12Z","updated_at":"2018-09-26T08:11:04Z","author_association":"NONE","body":"Hey @jimczi , thanks for the quick response!\r\n\r\nThe difference in response times I mentioned above were specifically for version 6.3.2. To further clarify, we were getting faster times by changing the `terms` to `term` which used the new optimization you mentioned in your last paragraph. The problem I see is that this might not always be a feasible solution. For example, we might have filters that are all array-based which means we will always fire this additional query.\r\n\r\nSo there is a considerable difference for us. We are noticing heavy overhead with the additional `DocValuesExistsQuery`. I only mentioned `#*:* -_type:__*` as an extra finding because I was comparing 6.0.0, 6.0.1, and 6.1.0 to see when this new Lucene query was introduced.\r\n\r\nIt would be really great if we can add the optimization to check for `terms` to ignore the nested filter query. This would improve our performance considerably.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424631111","html_url":"https://github.com/elastic/elasticsearch/issues/34067#issuecomment-424631111","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067","id":424631111,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDYzMTExMQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-09-26T08:29:53Z","updated_at":"2018-09-26T08:29:53Z","author_association":"CONTRIBUTOR","body":"+1 to make it work with `terms` as well.","performed_via_github_app":null}]