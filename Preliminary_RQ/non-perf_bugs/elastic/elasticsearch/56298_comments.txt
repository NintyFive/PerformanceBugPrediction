[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/624823233","html_url":"https://github.com/elastic/elasticsearch/issues/56298#issuecomment-624823233","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56298","id":624823233,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDgyMzIzMw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-05-06T18:45:41Z","updated_at":"2020-05-06T18:45:41Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed (:Distributed/Distributed)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/625678340","html_url":"https://github.com/elastic/elasticsearch/issues/56298#issuecomment-625678340","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56298","id":625678340,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNTY3ODM0MA==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2020-05-08T07:24:29Z","updated_at":"2020-05-08T07:44:46Z","author_association":"MEMBER","body":"The problem here is the new `TransportSimulateIndexTemplateAction` that adds an index to the `IndicesService` that isn't properly tracked in the cluster state and thus trips the assertion about being properly tracked in the cluster state. I was able to reproduce this reliably by writing a `EsIntegTestCase` that concurrently deletes indices and runs the simulate action ... I'm looking into how we can solve this better (seems we already have cleaner facilities for creating a temporary index service that we can use here).","performed_via_github_app":null}]