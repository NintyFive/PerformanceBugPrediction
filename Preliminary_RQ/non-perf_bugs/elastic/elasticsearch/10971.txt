{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/10971","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10971/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10971/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10971/events","html_url":"https://github.com/elastic/elasticsearch/issues/10971","id":73238654,"node_id":"MDU6SXNzdWU3MzIzODY1NA==","number":10971,"title":"Mapping: Improve date handling","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2015-05-05T07:42:29Z","updated_at":"2018-02-13T20:48:10Z","closed_at":"2016-08-25T10:04:07Z","author_association":"MEMBER","active_lock_reason":null,"body":"The current date mapping code treats unix timestamps differently from other date formats. We should unify this, even though this requires changing our defaults and requires the user to explicitely configure the unix timestamp usecase.\n\nToday we parse dates as follows:\n\nMapped fields with a format (defaults to dateOptionalTime)\n- If number, treat as epoch ms\n- If string, try to parse with defined format(s)\n- If it fails and is purely numeric, treat as epoch ms\n- Else fail\n\nDynamic date detection\n- If string, \n- and contains at least two `:`, `-`, or `/`\n- and matches dynamic date formats (defaults to `dateOptionalTime || yyyy/MM/dd HH:mm:ss || yyyy/MM/dd` )\n- then `date`, else `string`\n\nThere are a few issues which can surprise users:\n- Joda dates are not strict, so `\"1/1/1\"` is detected as a date, and `\"1\"` would be interpreted as `0001-01-01 00:00:00`\n- The distinction between numeric and string values is not always possible, eg query string params are always strings (`_timestamp`), a date in the `query_string` query is always a string, and even in the JSON body some languages can render a number as a string and vice versa\n- Dates such as `2015.01.01` (german) or `20150101T000000` (iso8601) can never be detected dynamically\n# Proposals\n\nMake date parsing as unambiguous as possible.  Where there is ambiguity, it is because the user chose ambiguous options (which we can warn about in the docs).  \n## For indices created in 2.0:\n- Add two formats for parsing epoch: `epoch_ms` and `epoch_seconds` #11453\n- Add strict Joda formats, where eg the year must have 4 digits  #6227\n- Remove `numeric_resolution` (not needed with above)\n\nFor mapped `date` field:\n- only check the specified formats, which default to `strictDateOptionalTime || epoch_ms`\n- No distinction between numeric and string values for date fields - always parsed as strings (ie coerce from numeric)\n\nFor dynamic date detection:\n- only check string values (don't coerce numerics)\n- accept any formats except `epoch_ms` and `epoch_seconds`\n- mapping should add just the matching format  (optionally append `epoch_ms`?)\n## For indices created before 2.0:\n\nWe need to keep bwc on older indices, so we follow the same rules as specified at the beginning of this comment\n## Query time\n\nTypically users will always use the same format at index time - they don't mix epoch timestamps with formatted dates, which is why we should only parse the specified formats.\n\nHowever, at query time it is quite possible that (eg) Kibana may query with epoch timestamps, even though the date field only accepts a formatted date.  Today, in the `range` query we accept a `format` parameter which is used to parse dates at query time.\n\nThere are two options to deal with this situation:\n- Add a `format` parameter to the `term`, `terms`, `query_string`, and `simple_query_string` queries, and to the `range` aggregation\n- Add a special format for epoch timestamps which is always recognised, eg `epoch_ms:123456789`\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}