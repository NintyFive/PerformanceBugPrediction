[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/460800373","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-460800373","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":460800373,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MDgwMDM3Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-02-05T20:56:43Z","updated_at":"2019-02-05T20:56:43Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/460801426","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-460801426","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":460801426,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MDgwMTQyNg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-02-05T20:59:58Z","updated_at":"2019-02-05T20:59:58Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/474402793","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-474402793","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":474402793,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NDQwMjc5Mw==","user":{"login":"AlexP-Elastic","id":19776583,"node_id":"MDQ6VXNlcjE5Nzc2NTgz","avatar_url":"https://avatars3.githubusercontent.com/u/19776583?v=4","gravatar_id":"","url":"https://api.github.com/users/AlexP-Elastic","html_url":"https://github.com/AlexP-Elastic","followers_url":"https://api.github.com/users/AlexP-Elastic/followers","following_url":"https://api.github.com/users/AlexP-Elastic/following{/other_user}","gists_url":"https://api.github.com/users/AlexP-Elastic/gists{/gist_id}","starred_url":"https://api.github.com/users/AlexP-Elastic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AlexP-Elastic/subscriptions","organizations_url":"https://api.github.com/users/AlexP-Elastic/orgs","repos_url":"https://api.github.com/users/AlexP-Elastic/repos","events_url":"https://api.github.com/users/AlexP-Elastic/events{/privacy}","received_events_url":"https://api.github.com/users/AlexP-Elastic/received_events","type":"User","site_admin":false},"created_at":"2019-03-19T14:45:13Z","updated_at":"2019-03-19T17:00:48Z","author_association":"NONE","body":"@dakrone asked the cloud team to discuss our requirements, with a view to potentially replacing our snapshot logic down the road. I'm going to talk about how it currently works and then very quickly summarize in a list of (high level) requirements at the bottom:\r\n\r\n* We take snapshots at user-specified periods\r\n   * _actually an oft-requested user requirement (that we _haven't_ implemented, but should definitely be part of any \"blank sheet of paper\" approach) is the ability to make it a schedule, eg \"*:30\" instead of \"every 30 minutes\"_\r\n* Our retention policy is quite (over!) complicated, a simplified summary is:\r\n   * The user decides how many snapshots to keep (default is 100) and the snapshot period (30 mins)\r\n   * If a snapshot fails or partially fails a minimum number of good snapshots is retained, regardless of any other considerations\r\n   * (there are some other retention params, but these are not currently exposed to the cluster admin)\r\n   * Purging of \"expired\" snapshots is handled as follows:\r\n      * After a snapshot has been taken (ie at the user specified interval), we look for the oldest snapshots that do not satisfy the \"retain\" rules and delete 1+ of them up to an admin-configurable maximum, which defaults to 2\r\n         * (the reason for this max number is because you can't cancel a snapshot deletion, which results in some complications described below)\r\n         * _(there's some logic to increase this number where it is safe to do so that I haven't looked at yet!)_\r\n* The previous two operations (snapshot and delete) are performed by (a sidecar attached to) _one_ of the nodes\r\n* One of the complications is that when a user (or admin or bot) performs a configuration change to an Elasticsearch cluster (handled by a service called the \"constructor\"), it takes a \"safety\" snapshot first.\r\n   * If the \"snapshotter service\" described above is taking a snapshot, the \"constructor\" will wait for that to complete and use that instead. \r\n   * If the \"snapshotter service\" is in the middle of deleting a snapshot then the \"safety snapshot\" will fail after a few (3) retries, causing the entire configuration to fail (this is obviously highly undesirable)\r\n   * Before starting, the \"constructor service\" will write a flag telling the \"snapshotter service\" to pause\r\n* We don't currently have any ability to control _which_ indices are included in the snapshot (though that gets asked for a decent amount)\r\n\r\nThe Cloud requirements I infer:\r\n* Configurable snapshot schedule and retention policy\r\n* The ability to pause the SLM process (during cluster configuration)\r\n* The ability to control time spent deleting snapshots (ie to avoid conflicts with cluster configuration)\r\n\r\ncc @nordbergm / @paulcoghlan - feel free to add/correct/amend anything you think is useful. Don't reply, just edit the comment directly.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/474418757","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-474418757","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":474418757,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NDQxODc1Nw==","user":{"login":"nordbergm","id":706644,"node_id":"MDQ6VXNlcjcwNjY0NA==","avatar_url":"https://avatars1.githubusercontent.com/u/706644?v=4","gravatar_id":"","url":"https://api.github.com/users/nordbergm","html_url":"https://github.com/nordbergm","followers_url":"https://api.github.com/users/nordbergm/followers","following_url":"https://api.github.com/users/nordbergm/following{/other_user}","gists_url":"https://api.github.com/users/nordbergm/gists{/gist_id}","starred_url":"https://api.github.com/users/nordbergm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nordbergm/subscriptions","organizations_url":"https://api.github.com/users/nordbergm/orgs","repos_url":"https://api.github.com/users/nordbergm/repos","events_url":"https://api.github.com/users/nordbergm/events{/privacy}","received_events_url":"https://api.github.com/users/nordbergm/received_events","type":"User","site_admin":false},"created_at":"2019-03-19T15:18:37Z","updated_at":"2019-03-19T16:57:20Z","author_association":"NONE","body":"#### Snapshot Resiliency\r\nOne of the major things for me is the snapshot resiliency work we've been doing for the past 6 months or more. This effectively boils down to the challenges S3 eventual consistency has caused us with corrupt snapshots, and the cool down periods we've had to introduce as a result.\r\n\r\n* Every write operation to the repository (create snapshot, delete snapshot) has to be followed by a cool down period (currently 10 minutes, we might experiment with reducing this to 5), to allow S3 caches to expire between operations.\r\n* The constructor also adheres to these cool down periods and won't create a safety snapshot until the period has passed (this is still behind feature flag, but will be enabled once we've worked out a couple of issues).\r\n* We now use a ZK leader latch to coordinate this as well as shared snapshot task state in ZK. This allows the constructor and snapshot sidecar to coordinate operations against the repository and adhere to the cool down period. The flag @AlexP-Elastic mentioned will be superseded by this once the feature flag is enabled.\r\n* Because of cool down periods, a strict *:30 schedule is difficult to guarantee (unless you're willing to skip an interval if you run over)\r\n\r\nThese are very specific Cloud/S3 challenges. I don't believe GCP necessarily has the same issues because GCS is way more consistent. Still, if we don't consider it I worry we'll suffer more snapshot corruption again.\r\n\r\n#### Access Control\r\nAnother area I've been thinking about is access control. Snapshots in Cloud today are controlled by cloud admins, and can't easily be meddled with by the cluster admin. They can reduce the retention to minimum 2 snapshots, and they can disable snapshots if they go through support and understand the risks etc.\r\n\r\nWith ILM/SLM it would be good to understand what kind of access the cluster admins would have to configuration and how we could restrict access. In case of disaster we want to be sure the cluster has snapshots and the cluster admin hasn't broken the configuration by accident.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/477667810","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-477667810","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":477667810,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzY2NzgxMA==","user":{"login":"yaronp68","id":1367657,"node_id":"MDQ6VXNlcjEzNjc2NTc=","avatar_url":"https://avatars2.githubusercontent.com/u/1367657?v=4","gravatar_id":"","url":"https://api.github.com/users/yaronp68","html_url":"https://github.com/yaronp68","followers_url":"https://api.github.com/users/yaronp68/followers","following_url":"https://api.github.com/users/yaronp68/following{/other_user}","gists_url":"https://api.github.com/users/yaronp68/gists{/gist_id}","starred_url":"https://api.github.com/users/yaronp68/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yaronp68/subscriptions","organizations_url":"https://api.github.com/users/yaronp68/orgs","repos_url":"https://api.github.com/users/yaronp68/repos","events_url":"https://api.github.com/users/yaronp68/events{/privacy}","received_events_url":"https://api.github.com/users/yaronp68/received_events","type":"User","site_admin":false},"created_at":"2019-03-28T16:20:30Z","updated_at":"2019-03-28T16:20:30Z","author_association":"NONE","body":"@dakrone Would it be possible to add some meta-data argument to the create policy API that would help the user figure which policy created the snapshot . two options come to mind:\r\n1. policy have a unique name and the snapshot will have a created by which will either \"API_call\" or [policy name]\r\n2. Alternatively a metadata field with max x chars that the user fill as optional description when creating the policy and the policy adds to each snapshot as metadata field\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/477674996","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-477674996","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":477674996,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzY3NDk5Ng==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-03-28T16:38:11Z","updated_at":"2019-03-28T16:38:11Z","author_association":"MEMBER","body":"@yaronp68 interesting suggestion, I do think that would be useful.\r\n\r\n@original-brownbear what do you think about us adding something like that to the `CreateSnapshotRequest`? I'm not sure exactly what the backwards compatibility issues could be (I assume nothing too difficult to work around).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/477711848","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-477711848","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":477711848,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzcxMTg0OA==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2019-03-28T18:11:16Z","updated_at":"2019-03-28T18:11:16Z","author_association":"MEMBER","body":"@dakrone @yaronp68 \r\n\r\ntechnically speaking there is no reason not to add a metadata field to the snapshot in cluster-state and stored in the repository as far as I can see.\r\nThe question is, whether it's worth the added complexity I guess :) I'm not against it, but if we can do it without adding more complexity to the cluster state and repository that may be better.\r\n => my question: If you're already planning to \"Persist a history of successful/failed snapshots in an ES index\", why not just add the metadata for each snapshot to the history in that index?\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478018193","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478018193","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478018193,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAxODE5Mw==","user":{"login":"yaronp68","id":1367657,"node_id":"MDQ6VXNlcjEzNjc2NTc=","avatar_url":"https://avatars2.githubusercontent.com/u/1367657?v=4","gravatar_id":"","url":"https://api.github.com/users/yaronp68","html_url":"https://github.com/yaronp68","followers_url":"https://api.github.com/users/yaronp68/followers","following_url":"https://api.github.com/users/yaronp68/following{/other_user}","gists_url":"https://api.github.com/users/yaronp68/gists{/gist_id}","starred_url":"https://api.github.com/users/yaronp68/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yaronp68/subscriptions","organizations_url":"https://api.github.com/users/yaronp68/orgs","repos_url":"https://api.github.com/users/yaronp68/repos","events_url":"https://api.github.com/users/yaronp68/events{/privacy}","received_events_url":"https://api.github.com/users/yaronp68/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:29:31Z","updated_at":"2019-03-29T14:29:31Z","author_association":"NONE","body":"@dakrone maybe it's possible to persist to a metadata file in the repository and not in cluster state to avoid changes to cluster state ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478020192","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478020192","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478020192,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAyMDE5Mg==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:34:56Z","updated_at":"2019-03-29T14:34:56Z","author_association":"MEMBER","body":"> my question: If you're already planning to \"Persist a history of successful/failed snapshots in an ES index\", why not just add the metadata for each snapshot to the history in that index?\r\n\r\n@original-brownbear I believe the idea is that when listing snapshots for a repository, you could then tell which snapshot came from what (manually triggered, triggered via `policyA`, `policyB`, etc). We will have something on the other side (for a policy, what's the last snapshot taken), I think the desire was for something the other direction.\r\n\r\n> @dakrone maybe it's possible to persist to a metadata file in the repository and not in cluster state to avoid changes to cluster state\r\n\r\n@yaronp68 we need to persist at least one end state in the cluster state, because in the event of a snapshot failure, we wouldn't be able to persist it in a metadata file in the repo, because the snapshot failed :) so we have to have a place to have something like \"your snapshot failed because of XYZ\" for users to see.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478020211","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478020211","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478020211,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAyMDIxMQ==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:35:01Z","updated_at":"2019-03-29T14:35:01Z","author_association":"MEMBER","body":"@yaronp68 \r\n\r\n> maybe it's possible to persist to a metadata file in the repository and not in cluster state to avoid changes to cluster state\r\n\r\nI would rather we not do this, sorry. The repository is currently undergoing some redesign to resolve issues like https://github.com/elastic/elasticsearch/issues/38941.\r\nIf we start putting custom blobs in the repo that's gonna be one more thing to worry about when we make changes there. Plus, the eventually consistent nature of some blob-stores like s3 will also create problems for a metadata file/blob that would be read and updated I would assume?\r\n\r\n-> the private index for the snapshot history seems like the safest bet to me still. If that's not an option for some reason the cluster state is still the better option compared to a custom repository blob.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478020614","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478020614","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478020614,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAyMDYxNA==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:36:04Z","updated_at":"2019-03-29T14:36:04Z","author_association":"MEMBER","body":"> the private index for the snapshot history seems like the safest bet to me still. If that's not an option for some reason the cluster state is still the better option compared to a custom repository blob.\r\n\r\nWe are planning to store the latest success and failure in the cluster state (only one of each), and store the result for every snapshot invocation into an index for history/alerting purposes.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478021267","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478021267","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478021267,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAyMTI2Nw==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:37:47Z","updated_at":"2019-03-29T14:37:47Z","author_association":"MEMBER","body":"> I believe the idea is that when listing snapshots for a repository, you could then tell which snapshot came from what (manually triggered, triggered via policyA, policyB, etc). We will have something on the other side (for a policy, what's the last snapshot taken), I think the desire was for something the other direction\r\n\r\nI see. In that case I think adding this information to the cluster state (and then as a result to the snapshot metadata we store in the repository) may be an option. In the end, the repository is the only place we can store that metadata to if we want to be able to use it with the snapshot list.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478022125","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478022125","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478022125,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAyMjEyNQ==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:40:04Z","updated_at":"2019-03-29T14:40:11Z","author_association":"MEMBER","body":"> I think adding this information to the cluster state (and then as a result to the snapshot metadata we store in the repository) may be an option.\r\n\r\nThis is unclear to me; I think the original desire was for something in `CreateSnapshotRequest` (perhaps an `origin` String) so when SLM issued the request it could specify the policy name, which is then stored with the snapshot's metadata (just like the list of indices, start time, end time, etc). How does that involve the cluster state?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478027580","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478027580","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478027580,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAyNzU4MA==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T14:54:38Z","updated_at":"2019-03-29T14:54:38Z","author_association":"MEMBER","body":"@dakrone \r\n\r\n> How does that involve the cluster state?\r\n\r\nSorry that was needlessly confusing :) Just by virtue of how this is implemented we'd have to add that information to the ephemeral cluster state. It's not important for the feasibility though :) -> I'm fine with adding this to the request and then storing it to the snapshot meta in the repo. That we should be able to do in a BwC manner.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/478033059","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-478033059","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":478033059,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODAzMzA1OQ==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-03-29T15:08:52Z","updated_at":"2019-03-29T15:08:52Z","author_association":"MEMBER","body":"> I'm fine with adding this to the request and then storing it to the snapshot meta in the repo. That we should be able to do in a BwC manner.\r\n\r\nGreat! I'll open a separate issue for that so we can track it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/516463929","html_url":"https://github.com/elastic/elasticsearch/issues/38461#issuecomment-516463929","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38461","id":516463929,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNjQ2MzkyOQ==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-07-30T15:13:34Z","updated_at":"2019-07-30T15:13:34Z","author_association":"MEMBER","body":"Going to close this as SLM has been merged to master and 7.x and will be in the 7.4 release.\r\n\r\nFurther work on retention can be found at https://github.com/elastic/elasticsearch/issues/43663","performed_via_github_app":null}]