{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/14961","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14961/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14961/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14961/events","html_url":"https://github.com/elastic/elasticsearch/issues/14961","id":118567419,"node_id":"MDU6SXNzdWUxMTg1Njc0MTk=","number":14961,"title":"Make Java Client API composable","user":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"labels":[{"id":146829143,"node_id":"MDU6TGFiZWwxNDY4MjkxNDM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Transport%20API","name":":Core/Infra/Transport API","color":"0e8a16","default":false,"description":"Transport client API"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null},{"id":110557212,"node_id":"MDU6TGFiZWwxMTA1NTcyMTI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/high%20hanging%20fruit","name":"high hanging fruit","color":"fc6149","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-11-24T09:39:06Z","updated_at":"2015-11-28T11:04:29Z","closed_at":"2015-11-27T10:01:29Z","author_association":"MEMBER","active_lock_reason":null,"body":"### Background / High Level Goal\n\nWhile working on #14620 I noticed that the current listener-based client API does not compose, i.e. I cannot build processing pipelines based on a response future.\n\nFor example, in the Java client implementation classes, I want to write code like:\n\n```\n// 'X' is some not yet specified interface potentially extending ActionFuture \n// for backwards compatibility\npublic X<BulkRequest> bulk(BulkRequest request) {\n   return Retry.withBackoff(() -> client.bulk(request))\n     // not important here what #doCleanup does exactly\n    .onCompletion((response) -> doCleanup()) \n    .onException((ex) -> doCleanup());\n}\n```\n\nAnd I want to do all that without knowing what any potential caller of the Java client API is doing. The caller should just be able to add its operations on top, i.e. we want to build a pipeline of operations, e.g.:\n\n```\nclient()\n  .bulk(request)\n  .onCompletion((response) -> updateUI())\n  .onException((ex) -> showErrorMessage(ex));\n```\n### Current Status\n\nChaining of listeners is currently also doable but listeners need to delegate explicitly and the code gets very tightly coupled and ugly.\n### Possible Solution Approach\n\nStarting with Java 8, the JDK provides `CompletableFuture` which allows to create processing pipelines. However, the `CompletableFuture` API is very hard to understand and I doubt we need its whole complexity for our use case.\n\nNevertheless, it could be worthwhile to base the internal implementation on `CompletableFuture` and just expose parts the API.\n### Necessary Steps\n1. Start investigating whether `CompletableFuture` is a good fit for our requirements and flesh out an updated client API (ideally without breaking backwards compatibility, even on master)\n2. Deprecate `ActionListener` and all methods in the Java client API that take one as parameter (to be removed with next major version)\n3. Add new methods to `ActionFuture` to allow for chaining. This way, the current API methods that return an `ActionFuture` will stay but we can get rid of all `ActionListener` methods. Deprecated methods based on `ActionListener` can be simply reimplemented internally on top of the new API.\n4. Revisit implementations of ActionFuture (whether we still need them at all) and provide a new default implementation that delegates to `CompletableFuture`\n5. Update the client documentation with hints on how to migrate the API\n6. (As separate PRs) Adapt internal implementation to take advantage of pipelining.\n","closed_by":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"performed_via_github_app":null}