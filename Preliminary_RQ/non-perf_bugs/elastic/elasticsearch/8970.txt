{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/8970","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8970/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8970/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8970/events","html_url":"https://github.com/elastic/elasticsearch/issues/8970","id":52046613,"node_id":"MDU6SXNzdWU1MjA0NjYxMw==","number":8970,"title":"Add visitor and accessor support to the Java Query DSL","user":{"login":"btiernay","id":2717578,"node_id":"MDQ6VXNlcjI3MTc1Nzg=","avatar_url":"https://avatars3.githubusercontent.com/u/2717578?v=4","gravatar_id":"","url":"https://api.github.com/users/btiernay","html_url":"https://github.com/btiernay","followers_url":"https://api.github.com/users/btiernay/followers","following_url":"https://api.github.com/users/btiernay/following{/other_user}","gists_url":"https://api.github.com/users/btiernay/gists{/gist_id}","starred_url":"https://api.github.com/users/btiernay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btiernay/subscriptions","organizations_url":"https://api.github.com/users/btiernay/orgs","repos_url":"https://api.github.com/users/btiernay/repos","events_url":"https://api.github.com/users/btiernay/events{/privacy}","received_events_url":"https://api.github.com/users/btiernay/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2014-12-15T22:16:58Z","updated_at":"2015-11-21T22:48:29Z","closed_at":"2015-11-21T22:48:29Z","author_association":"NONE","active_lock_reason":null,"body":"## Visitors\n\nWhen creating dynamic [query engines](http://hillside.net/europlop/HillsideEurope/Papers/EuroPLoP2004/2004_Wellhausen_QueryEngine.pdf) that use Elasticsearch as a storage / search backend, it would be incredibly useful to provide [visitor](http://en.wikipedia.org/wiki/Visitor_pattern) support for `FilterBuilder`, `QueryBuilder`, et al. to iterate over the query structure. This would allow general purpose AST transformations for a number of use cases:\n- query translation from a custom language recognizer (e.g. from an ANTLR visitor / [listener](https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parse+Tree+Listeners))\n- query canonicalization (standard forms for readability and debugging)\n- query simplification (pruning semantically useless nodes (ex: `match_all: {}`, degenerate `should` / `must` clauses) for readability and debugging)\n- query optimization (recognizing common patterns that could be transformed [using best practices](http://www.elasticsearch.org/blog/all-about-elasticsearch-filter-bitsets/))\n## Accessors\n\nCurrently the `FilterBuilder`, `QueryBuilder`, etc. classes are \"write only\" in the sense that their contents cannot be accessed once built. It would be very useful to be able to access the various properties specific to each AST node as well as children and parent. This would enhance navigation / introspection of AST nodes while performing the types of processing  described in the \"Visitors\" section.\n## Applications\n### CQL\n\nOne known example of this type of application is the [elasticsearch-sru](https://github.com/xbib/elasticsearch-sru) plugin by @jprante which translates [CQL](http://en.wikipedia.org/wiki/Contextual_Query_Language) into Elasticsearch queries. However, it seems as though this approach requires that the application create a [parallel AST](https://github.com/xbib/elasticsearch-sru/tree/master/src/main/java/org/xbib/query/cql/elasticsearch/ast) in order to support query translation.\n### RQL\n\nIn our particular use case, we are intending to use a dialect of [RQL](http://www.sitepen.com/blog/2010/11/02/resource-query-language-a-query-language-for-the-web-nosql/) as a basis for encapsulating our query engine, insulating the user from the full power and complexity of the Elasticsearch Query DSL while protecting our infrastructure from resource intensive queries.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}