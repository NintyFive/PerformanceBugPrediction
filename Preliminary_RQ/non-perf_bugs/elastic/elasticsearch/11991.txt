{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/11991","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11991/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11991/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11991/events","html_url":"https://github.com/elastic/elasticsearch/issues/11991","id":92585194,"node_id":"MDU6SXNzdWU5MjU4NTE5NA==","number":11991,"title":"Completion suggester payload is not being updated","user":{"login":"leonardehrenfried","id":151346,"node_id":"MDQ6VXNlcjE1MTM0Ng==","avatar_url":"https://avatars3.githubusercontent.com/u/151346?v=4","gravatar_id":"","url":"https://api.github.com/users/leonardehrenfried","html_url":"https://github.com/leonardehrenfried","followers_url":"https://api.github.com/users/leonardehrenfried/followers","following_url":"https://api.github.com/users/leonardehrenfried/following{/other_user}","gists_url":"https://api.github.com/users/leonardehrenfried/gists{/gist_id}","starred_url":"https://api.github.com/users/leonardehrenfried/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leonardehrenfried/subscriptions","organizations_url":"https://api.github.com/users/leonardehrenfried/orgs","repos_url":"https://api.github.com/users/leonardehrenfried/repos","events_url":"https://api.github.com/users/leonardehrenfried/events{/privacy}","received_events_url":"https://api.github.com/users/leonardehrenfried/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-07-02T08:51:02Z","updated_at":"2015-07-02T12:07:12Z","closed_at":"2015-07-02T12:07:11Z","author_association":"NONE","active_lock_reason":null,"body":"I noticed a potential problem with the Java client and/or ES itself when updating completion suggestion payloads. My update to the payload is not being propagated to the suggestion index while using ES 1.6.0.\n\nIn order to illustrate the problem I've written a test case using the official driver and put it into a git repo: https://github.com/lenniboy/es-suggest-reproduction/tree/master/java\n\nThe actual code is repeated here:\n\n``` java\nimport org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;\nimport org.elasticsearch.action.admin.indices.delete.DeleteIndexRequestBuilder;\nimport org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse;\nimport org.elasticsearch.action.get.GetResponse;\nimport org.elasticsearch.action.index.IndexRequestBuilder;\nimport org.elasticsearch.action.suggest.SuggestRequestBuilder;\nimport org.elasticsearch.action.suggest.SuggestResponse;\nimport org.elasticsearch.action.update.UpdateRequestBuilder;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\nimport org.elasticsearch.common.xcontent.XContentBuilder;\nimport org.elasticsearch.search.suggest.Suggest;\nimport org.elasticsearch.search.suggest.completion.CompletionSuggestion;\nimport org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder;\nimport org.junit.Test;\n\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.Map;\n\nimport static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\n\npublic class SuggestionsTest{\n\n    String indexName = \"suggestions-bug\";\n    String documentType = \"band\";\n    String documentId = \"1\";\n\n    @Test\n    public void testSuggestions() throws Exception {\n\n        Client client = new TransportClient()\n                .addTransportAddress(new InetSocketTransportAddress(\"localhost\", 9300));\n\n        final IndicesExistsResponse res = client.admin().indices().prepareExists(indexName).execute().actionGet();\n        if (res.isExists()) {\n            final DeleteIndexRequestBuilder delIdx = client.admin().indices().prepareDelete(indexName);\n            delIdx.execute().actionGet();\n        }\n\n        final CreateIndexRequestBuilder createIndexRequestBuilder = client.admin().indices().prepareCreate(indexName);\n\n        final XContentBuilder mappingBuilder = jsonBuilder().prettyPrint()\n                .startObject()\n                    .startObject(\"properties\")\n                        .startObject(\"name\")\n                            .field(\"type\", \"string\")\n                        .endObject()\n                        .startObject(\"suggest\")\n                            .field(\"type\", \"completion\")\n                            .field(\"payloads\", true)\n                        .endObject()\n                    .endObject()\n                .endObject();\n\n        System.out.println(\"Adding mapping\");\n        System.out.println(mappingBuilder.string());\n        createIndexRequestBuilder.addMapping(documentType, mappingBuilder);\n\n        createIndexRequestBuilder.execute().actionGet();\n\n        // Index document\n        final IndexRequestBuilder indexRequestBuilder = client.prepareIndex(indexName, documentType, documentId);\n        // build json object\n        final XContentBuilder indexContentBuilder = jsonBuilder().prettyPrint()\n                .startObject()\n                    .field(\"name\", \"Queen\")\n                    .startObject(\"suggest\")\n                        .field(\"input\", Collections.singletonList(\"Queen\"))\n                        .field(\"output\", \"Queen\")\n                        .startObject(\"payload\")\n                            .field(\"country\", \"GB\")\n                        .endObject()\n                    .endObject()\n                .endObject();\n\n        System.out.println(\"Indexing document\");\n        System.out.println(indexContentBuilder.string());\n\n        indexRequestBuilder.setSource(indexContentBuilder);\n        indexRequestBuilder.execute().actionGet();\n\n        // Update payload\n        final UpdateRequestBuilder updateRequestBuilder = client.prepareUpdate(indexName, documentType, documentId);\n        // build json object\n        final XContentBuilder updateContentBuilder = jsonBuilder().prettyPrint()\n                .startObject()\n                    .startObject(\"doc\")\n                        .startObject(\"suggest\")\n                            .startObject(\"payload\")\n                                .field(\"country\", \"DE\")\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject();\n\n        System.out.println(\"Updating document\");\n        System.out.println(updateContentBuilder.string());\n\n        updateRequestBuilder.setSource(updateContentBuilder);\n        updateRequestBuilder.execute().actionGet();\n\n        GetResponse getResponse = client.prepareGet(indexName, documentType, documentId)\n                .execute()\n                .actionGet();\n\n        System.out.println(\"Waiting one second for ES to finish indexing\");\n        Thread.sleep(1000);\n        System.out.println(\"Fetching document. Response is\");\n        System.out.println(getResponse.getSourceAsString());\n\n        Map suggest = (Map<String, Map<String, String>>)getResponse.getSourceAsMap().get(\"suggest\");\n        Map<String, String> payload = (Map<String, String>)suggest.get(\"payload\");\n        String getCountry = payload.get(\"country\");\n\n        System.out.println(\"The payload country in the document is \" + getCountry);\n\n        CompletionSuggestionBuilder suggestionsBuilder = new CompletionSuggestionBuilder(\"suggest\");\n        suggestionsBuilder.text(\"Queen\");\n        suggestionsBuilder.field(\"suggest\");\n        SuggestRequestBuilder suggestRequestBuilder = client.prepareSuggest(indexName).addSuggestion(suggestionsBuilder);\n        SuggestResponse suggestResponse = suggestRequestBuilder.execute().actionGet();\n\n        System.out.println(\"Suggestion response is\");\n        System.out.println(suggestResponse.getSuggest());\n\n        CompletionSuggestion.Entry.Option option = (CompletionSuggestion.Entry.Option)\n            suggestResponse.getSuggest().getSuggestion(\"suggest\").getEntries().get(0).getOptions().get(0);\n        String suggestCountry = (String) option.getPayloadAsMap().get(\"country\");\n\n        assertThat(getCountry, is(suggestCountry));\n    }\n}\n```\n\nSo, you can see that I change the `payload.country` value from `GB` to `DE`. This is correctly applied to the \"main\" document but the suggestions index is not being updated. I cannot get the new payload into the suggestions index with out calling `_optimize?max_num_segments=1`.\n\nHere comes the weird part. If you do the exact same steps through the HTTP API (Sense), it works!\n\n```\nDELETE /t \nPUT /t\nPUT /t/_mapping/t\n{\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"suggestions\": {\n      \"type\": \"completion\",\n      \"payloads\": true\n    }\n  }\n}\n\nGET /t/_search\nPUT /t/t/1\n{\n  \"name\": \"Queen\",\n  \"suggestions\": {\n    \"input\": [\n      \"Queen\"\n    ],\n    \"output\": \"Queen\",\n    \"payload\": {\n      \"country\": \"old\"\n    }\n  }\n}\n\nPOST /t/t/1/_update\n{\n  \"doc\": {\n    \"suggestions\": {\n      \"payload\": {\n        \"country\": \"new\"\n      }\n    }\n  }\n}\n\nGET /t/_search\nGET /t/_suggest\n{\n  \"s1\": {\n    \"text\": \"Queen\",\n    \"completion\": {\n      \"field\": \"suggestions\"\n    }\n  }\n}\n```\n\nI am very puzzled by this.\n\nIs the HTTP API doing something differently than the Java API? I presume that Java uses some binary protocol but could this be the culprit?\n\nThis was originally discovered in https://github.com/sksamuel/elastic4s/issues/343\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}