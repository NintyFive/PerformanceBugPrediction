[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18556705","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18556705","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18556705,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NTU2NzA1","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2013-05-28T15:07:39Z","updated_at":"2013-05-28T15:07:39Z","author_association":"CONTRIBUTOR","body":"Non string fields don't have positions.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18672576","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18672576","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18672576,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NjcyNTc2","user":{"login":"iksnalybok","id":3304227,"node_id":"MDQ6VXNlcjMzMDQyMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/3304227?v=4","gravatar_id":"","url":"https://api.github.com/users/iksnalybok","html_url":"https://github.com/iksnalybok","followers_url":"https://api.github.com/users/iksnalybok/followers","following_url":"https://api.github.com/users/iksnalybok/following{/other_user}","gists_url":"https://api.github.com/users/iksnalybok/gists{/gist_id}","starred_url":"https://api.github.com/users/iksnalybok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iksnalybok/subscriptions","organizations_url":"https://api.github.com/users/iksnalybok/orgs","repos_url":"https://api.github.com/users/iksnalybok/repos","events_url":"https://api.github.com/users/iksnalybok/events{/privacy}","received_events_url":"https://api.github.com/users/iksnalybok/received_events","type":"User","site_admin":false},"created_at":"2013-05-30T10:31:54Z","updated_at":"2013-05-30T10:31:54Z","author_association":"CONTRIBUTOR","body":"Ok. Sorry for the stupid question. Closing.\n\nNB: this question comes from the following use case:\nGiven doc1 = { str:foo, int:10 }, and doc2 = [ { str:foo, int:20 }, { str:bar, int:10 } ]\nthe query SpanNear( [ FieldMaskingSpan(str, foo), FieldMaskingSpan(int, 10) ] , slop=-1, false)\nselects only doc1. This works fine when int is a TextField, but fails when is an IntField.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18676379","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18676379","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18676379,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Njc2Mzc5","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2013-05-30T12:15:04Z","updated_at":"2013-05-30T12:15:04Z","author_association":"CONTRIBUTOR","body":"You can't use positional queries with non-string fields, so you would have to make your \"int\" field a string field.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18677224","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18677224","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18677224,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Njc3MjI0","user":{"login":"iksnalybok","id":3304227,"node_id":"MDQ6VXNlcjMzMDQyMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/3304227?v=4","gravatar_id":"","url":"https://api.github.com/users/iksnalybok","html_url":"https://github.com/iksnalybok","followers_url":"https://api.github.com/users/iksnalybok/followers","following_url":"https://api.github.com/users/iksnalybok/following{/other_user}","gists_url":"https://api.github.com/users/iksnalybok/gists{/gist_id}","starred_url":"https://api.github.com/users/iksnalybok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iksnalybok/subscriptions","organizations_url":"https://api.github.com/users/iksnalybok/orgs","repos_url":"https://api.github.com/users/iksnalybok/repos","events_url":"https://api.github.com/users/iksnalybok/events{/privacy}","received_events_url":"https://api.github.com/users/iksnalybok/received_events","type":"User","site_admin":false},"created_at":"2013-05-30T12:35:40Z","updated_at":"2013-05-30T12:35:40Z","author_association":"CONTRIBUTOR","body":"(Sorry, previously reopened without the comment)\n\nReopen: digging further, non string fields _can_ have positions.\n\nExample: IntField (cf http://lucene.apache.org/core/4_3_0/core/org/apache/lucene/document/IntField.html) has a constructor allowing to customize the FieldType: IntField(String name, int value, FieldType type).\nWe can then specify: type.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS).\nNB: LongField, FloatField, and DoubleField also get this constructor.\n\nHere is a small test (lucene code):\n\n``` java\n    FieldType MY_TYPE = new FieldType();\n    MY_TYPE.setIndexed(true);\n    MY_TYPE.setStored(true);\n    MY_TYPE.setTokenized(true);\n    MY_TYPE.setOmitNorms(false);\n    MY_TYPE.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    MY_TYPE.setNumericType(FieldType.NumericType.INT);\n    MY_TYPE.freeze();\n\n    StandardAnalyzer analyzer = new StandardAnalyzer(Version.LUCENE_43);\n    Directory index = new RAMDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_43, analyzer);\n    IndexWriter w = new IndexWriter(index, config);\n\n    Document doc;\n    doc = new Document(); // doc1\n    doc.add(new TextField(\"str\", \"foo\", Field.Store.YES)); doc.add(new IntField(\"int\", 10, MY_TYPE));\n    w.addDocument(doc);\n    doc = new Document(); // doc2\n    doc.add(new TextField(\"str\", \"foo\", Field.Store.YES)); doc.add(new IntField(\"int\", 20, MY_TYPE));\n    doc.add(new TextField(\"str\", \"bar\", Field.Store.YES)); doc.add(new IntField(\"int\", 10, MY_TYPE));\n    w.addDocument(doc);\n    w.close();\n\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"str\", \"foo\")), Occur.MUST);\n    q1.add(NumericRangeQuery.newIntRange(\"int\", 20, 20, true, true), Occur.MUST);\n    // => find doc2\n\n    Query q2 = new SpanNearQuery(new SpanQuery[] {\n          new FieldMaskingSpanQuery(new SpanTermQuery(new Term(\"str\", \"foo\")), \"span\")\n        , new FieldMaskingSpanQuery(new SpanMultiTermQueryWrapper<NumericRangeQuery>(NumericRangeQuery.newIntRange(\"int\", 10, 10, true, true)), \"span\")\n    }, -1, false);\n    // => find doc1\n```\n\nEspecially for use cases like q2 above (that emulates kind of nesting), it gives the possibility to make range queries instead of string comparisons.\n\nWould it be possible to include this in ES ?\nThanks.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18773985","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18773985","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18773985,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NzczOTg1","user":{"login":"iksnalybok","id":3304227,"node_id":"MDQ6VXNlcjMzMDQyMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/3304227?v=4","gravatar_id":"","url":"https://api.github.com/users/iksnalybok","html_url":"https://github.com/iksnalybok","followers_url":"https://api.github.com/users/iksnalybok/followers","following_url":"https://api.github.com/users/iksnalybok/following{/other_user}","gists_url":"https://api.github.com/users/iksnalybok/gists{/gist_id}","starred_url":"https://api.github.com/users/iksnalybok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iksnalybok/subscriptions","organizations_url":"https://api.github.com/users/iksnalybok/orgs","repos_url":"https://api.github.com/users/iksnalybok/repos","events_url":"https://api.github.com/users/iksnalybok/events{/privacy}","received_events_url":"https://api.github.com/users/iksnalybok/received_events","type":"User","site_admin":false},"created_at":"2013-05-31T22:01:28Z","updated_at":"2013-05-31T22:01:28Z","author_association":"CONTRIBUTOR","body":"I just tested again today (git/master branch), and ... you can specify positions for numeric fields (not only in lucene as said in my previous comment, but also in elasticsearch). Cf example 1 below.\n\nHowever, position_offset_gap is not taken into account: specifying \"position_offset_gap\" : 100 has no effect for numeric types (cf examples 2a and 2b).\nAccording to the fact that positions are supported, it would be nice to benefit from the position_offset_gap option. Could you please re-open the issue (I can't; github does not allow me to reopen it a second time) ?\n\n---\n\nExample 1 (positions for numeric fields):\nIn the following example, if you specify \"num\" : { \"type\" : \"long\" } without \"index_options\" : \"positions\" during the index creation, the last queries (span queries) will fail with an IllegalStateException ([field ... was indexed without position data). With it, they are successful. Also successfully tested for types integer and date.\n\n``` bash\n# to replay the test (with/without \"index_options\" : \"positions)\ncurl -XDELETE \"http://localhost:9200/spans\"\n\n# create the index\ncurl -XPOST \"http://localhost:9200/spans\" -d '\n{\n  \"settings\" : {\n    \"index\" : {\n      \"number_of_shards\" : 1,\n      \"number_of_replicas\" : 0\n    }\n  },\n  \"mappings\" : {\n    \"doc\" : {\n      \"properties\" : {\n        \"blocks\" : {\n          \"properties\" : {\n            \"str\" : { \"type\" : \"string\", \"index_options\" : \"positions\" },\n            \"num\" : { \"type\" : \"long\", \"index_options\" : \"positions\" }\n          }\n        }\n      }\n    }\n  }\n}\n'\n\n# create a first document (doc1)\ncurl -XPOST \"http://localhost:9200/spans/doc/1\" -d '\n{ \"blocks\" : [\n  { \"str\" : \"foo\", \"num\" : \"10\" },\n  { \"str\" : \"bar\", \"num\" : \"20\" }\n] }\n'\n\n# create a second document (doc2)\ncurl -XPOST \"http://localhost:9200/spans/doc/2\" -d '\n{ \"blocks\" : [\n  { \"str\" : \"foo\", \"num\" : \"20\" }\n] }\n'\n\n# normal query\ncurl -XPOST \"http://localhost:9200/spans/_search?format=yaml\" -d '\n{\n  \"query\" : {\n    \"bool\" : {\n      \"must\" : [\n         { \"term\" : { \"str\" : \"foo\" } },\n         { \"term\" : { \"num\" : \"20\" } }\n      ]\n    }\n  }\n}\n'\n\n# span query\ncurl -XPOST \"http://localhost:9200/spans/_search?format=yaml\" -d '\n{\n  \"query\" : {\n    \"span_near\" : {\n      \"clauses\" : [\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"str\" : \"foo\" } }, \"field\" : \"block\" } },\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"num\" : \"20\"  } }, \"field\" : \"block\" } }\n      ],\n      \"slop\" : -1,\n      \"in_order\" : false\n    }\n  }\n}\n'\n\n# span query (using span_multi)\ncurl -XPOST \"http://localhost:9200/spans/_search?format=yaml\" -d '\n{\n  \"query\" : {\n    \"span_near\" : {\n      \"clauses\" : [\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"str\" : \"foo\" } }, \"field\" : \"block\" } },\n        { \"field_masking_span\" : { \"query\" : { \"span_multi\" : { \"match\" : { \"range\" : { \"num\" : { \"from\" : \"15\", \"to\" : \"25\", \"include_lower\" : true, \"include_upper\": true } } } } }, \"field\" : \"block\" } }\n      ],\n      \"slop\" : -1,\n      \"in_order\" : false\n    }\n  }\n}\n'\n```\n\nNow, if you add position_offset_gap of 100 in the index defintion, and run a span query with a slop of 10, the document in incorrectly selected.\nExample 2a:\n\n``` bash\n# index (position_offset_gap on str)\n          \"properties\" : {\n            \"str\" : { \"type\" : \"string\", \"index_options\" : \"positions\", \"position_offset_gap\" : \"100\" },\n            \"num\" : { \"type\" : \"long\", \"index_options\" : \"positions\" }\n          }\n# query (between a str and a num)\ncurl -XPOST \"http://localhost:9200/spans/_search?format=yaml\" -d '\n{\n  \"query\" : {\n    \"span_near\" : {\n      \"clauses\" : [\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"str\" : \"foo\" } }, \"field\" : \"block\" } },\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"num\" : \"20\"  } }, \"field\" : \"block\" } }\n      ],\n      \"slop\" : 10,\n      \"in_order\" : false\n    }\n  }\n}\n'\n# result: select both docs, while doc1 should not be selected.\n```\n\nExample 2b:\n\n``` bash\n# index (position_offset_gap on num)\n          \"properties\" : {\n            \"str\" : { \"type\" : \"string\", \"index_options\" : \"positions\" },\n            \"num\" : { \"type\" : \"long\", \"index_options\" : \"positions\", \"position_offset_gap\" : \"100\" }\n          }\n# query (between two str)\ncurl -XPOST \"http://localhost:9200/spans/_search?format=yaml\" -d '\n{\n  \"query\" : {\n    \"span_near\" : {\n      \"clauses\" : [\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"str\" : \"foo\" } }, \"field\" : \"block\" } },\n        { \"field_masking_span\" : { \"query\" : { \"span_term\" : { \"str\" : \"bar\"  } }, \"field\" : \"block\" } }\n      ],\n      \"slop\" : 10,\n      \"in_order\" : false\n    }\n  }\n}\n'\n# result: select doc1, while it should not.\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18787832","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18787832","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18787832,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzg3ODMy","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2013-06-01T11:57:41Z","updated_at":"2013-06-01T11:57:41Z","author_association":"CONTRIBUTOR","body":"@s1monw What's your take on this? Do positions on numbers make sense?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18796753","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-18796753","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":18796753,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Nzk2NzUz","user":{"login":"iksnalybok","id":3304227,"node_id":"MDQ6VXNlcjMzMDQyMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/3304227?v=4","gravatar_id":"","url":"https://api.github.com/users/iksnalybok","html_url":"https://github.com/iksnalybok","followers_url":"https://api.github.com/users/iksnalybok/followers","following_url":"https://api.github.com/users/iksnalybok/following{/other_user}","gists_url":"https://api.github.com/users/iksnalybok/gists{/gist_id}","starred_url":"https://api.github.com/users/iksnalybok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iksnalybok/subscriptions","organizations_url":"https://api.github.com/users/iksnalybok/orgs","repos_url":"https://api.github.com/users/iksnalybok/repos","events_url":"https://api.github.com/users/iksnalybok/events{/privacy}","received_events_url":"https://api.github.com/users/iksnalybok/received_events","type":"User","site_admin":false},"created_at":"2013-06-01T20:47:35Z","updated_at":"2013-06-01T20:47:35Z","author_association":"CONTRIBUTOR","body":"If I may so, for my part, it does, with the slop=-1 trick described in https://lucene.apache.org/core/4_3_0/core/org/apache/lucene/search/spans/FieldMaskingSpanQuery.html. I don't know any other use case, but this one is quite interesting: it emulates simple nesting, without the need of using nested documents.\n\nFor example: let's say you want to index issues of github. A document can be the project name, a title, the issue number, and a list of tuples (author, date, comment). NB: date is a numeric field. The document is re-indexed each time someone updates the issue (a new tuple is added). To retrieve the issues a specific person has worked on during the last seven days, I can issue a span query, with slop -1, first clause being \"span_term : { author : somebody }\", and the second one  \"span_multi : { match : { range : { date : { from : today, to : today-7days } } } }\". Without positions, you retrieve issues for which the person has worked on and somebody (can be someone else) has worked on during the last seven days. Using a string instead of a date requires some custom code to correctly handle range queries.\nNot disclosing real-life business, but I have exactly this need to monitor events happening to an entity.\n\nThat's about positions, and ES currently supports them. To be honest, it's what I need for the moment; I can't remember why I focused on the offset_gap and not positions.\nThe example does not actually make use of the position_offset_gap, but at least for consistency, it makes sense to support it. A possible use of position_offset_gap I'm thinking of may be when a element of the tuple is it-self a bounded list of sth (ex: comment is a list of maximum 100 paragraphs), so using position_offset_gap=220 and searching with a slop of 104 allows to limit the span query to a paragraph instead of the full comment.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/48388354","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-48388354","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":48388354,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4Mzg4MzU0","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-07-08T19:28:22Z","updated_at":"2014-07-08T19:28:22Z","author_association":"CONTRIBUTOR","body":"Reading through this ticket again, it seems like nested docs are a much better solution for this, and likely will perform a lot better than span queries. Either way, it hasn't received any traction in the last year, so I'm going to close this.  If you feel that there is a use case here that I'm missing, please could you open another ticket with the details.  thanks\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50333116","html_url":"https://github.com/elastic/elasticsearch/issues/3096#issuecomment-50333116","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3096","id":50333116,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMzMzMTE2","user":{"login":"iksnalybok","id":3304227,"node_id":"MDQ6VXNlcjMzMDQyMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/3304227?v=4","gravatar_id":"","url":"https://api.github.com/users/iksnalybok","html_url":"https://github.com/iksnalybok","followers_url":"https://api.github.com/users/iksnalybok/followers","following_url":"https://api.github.com/users/iksnalybok/following{/other_user}","gists_url":"https://api.github.com/users/iksnalybok/gists{/gist_id}","starred_url":"https://api.github.com/users/iksnalybok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iksnalybok/subscriptions","organizations_url":"https://api.github.com/users/iksnalybok/orgs","repos_url":"https://api.github.com/users/iksnalybok/repos","events_url":"https://api.github.com/users/iksnalybok/events{/privacy}","received_events_url":"https://api.github.com/users/iksnalybok/received_events","type":"User","site_admin":false},"created_at":"2014-07-28T12:44:27Z","updated_at":"2014-07-28T12:44:27Z","author_association":"CONTRIBUTOR","body":"Thanks.\n","performed_via_github_app":null}]