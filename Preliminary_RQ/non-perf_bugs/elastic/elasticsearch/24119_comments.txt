[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/294521964","html_url":"https://github.com/elastic/elasticsearch/issues/24119#issuecomment-294521964","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24119","id":294521964,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NDUyMTk2NA==","user":{"login":"0xCAB","id":17009277,"node_id":"MDQ6VXNlcjE3MDA5Mjc3","avatar_url":"https://avatars2.githubusercontent.com/u/17009277?v=4","gravatar_id":"","url":"https://api.github.com/users/0xCAB","html_url":"https://github.com/0xCAB","followers_url":"https://api.github.com/users/0xCAB/followers","following_url":"https://api.github.com/users/0xCAB/following{/other_user}","gists_url":"https://api.github.com/users/0xCAB/gists{/gist_id}","starred_url":"https://api.github.com/users/0xCAB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/0xCAB/subscriptions","organizations_url":"https://api.github.com/users/0xCAB/orgs","repos_url":"https://api.github.com/users/0xCAB/repos","events_url":"https://api.github.com/users/0xCAB/events{/privacy}","received_events_url":"https://api.github.com/users/0xCAB/received_events","type":"User","site_admin":false},"created_at":"2017-04-17T16:30:01Z","updated_at":"2017-04-17T16:30:01Z","author_association":"NONE","body":"Looking at `MoreLikeThisQueryBuilder` and related classes, it seems the terms extracted from the `unlike` part are skipped from the final MLT query. The boost (if set) is applied to the remaining terms coming from the `like` part.\r\nCould you elaborate on your idea? Do you suggest leaving \"skipTerms\" in the query and applying a different boost to them?\r\nMaybe another approach would be to add terms from `unlike` via `Occur.MUST_NOT` to the BooleanQuery.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/294532991","html_url":"https://github.com/elastic/elasticsearch/issues/24119#issuecomment-294532991","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24119","id":294532991,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NDUzMjk5MQ==","user":{"login":"davidklebanoff","id":7867074,"node_id":"MDQ6VXNlcjc4NjcwNzQ=","avatar_url":"https://avatars3.githubusercontent.com/u/7867074?v=4","gravatar_id":"","url":"https://api.github.com/users/davidklebanoff","html_url":"https://github.com/davidklebanoff","followers_url":"https://api.github.com/users/davidklebanoff/followers","following_url":"https://api.github.com/users/davidklebanoff/following{/other_user}","gists_url":"https://api.github.com/users/davidklebanoff/gists{/gist_id}","starred_url":"https://api.github.com/users/davidklebanoff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidklebanoff/subscriptions","organizations_url":"https://api.github.com/users/davidklebanoff/orgs","repos_url":"https://api.github.com/users/davidklebanoff/repos","events_url":"https://api.github.com/users/davidklebanoff/events{/privacy}","received_events_url":"https://api.github.com/users/davidklebanoff/received_events","type":"User","site_admin":false},"created_at":"2017-04-17T17:19:23Z","updated_at":"2017-04-17T18:22:59Z","author_association":"NONE","body":"My initial intent was to allow a configurable balancing act between documents matching a combination of `like` and `unlike` ids specified in the query. However, if terms in the documents specified in the `unlike` section are skipped altogether like you describe, this raises an even bigger divergence from my desired/expected behavior.\r\n\r\nI would expect 'unlike' documents to simply have an opposite effect to the `like` documents, perhaps with a negative or fractional boost to lower their ranking, not filtering them out all together.\r\n\r\nLet's use Netflix movies as a crude example. Suppose we have three movies with a genre field and a simple like/dislike field:\r\n\r\nA - Like - [Action, Comedy]\r\nB - Like - [Action, Drama]\r\nC - Dislike - [Action, Comedy]\r\n\r\nUsing these in a `MoreLikeThisQuery`, I would put documents `[A,B]` as input into the `like` parameter and `[C]` as input into the unlike `parameter`. As a result, I would expect Action movies (2 likes vs 1 dislike) and Drama movies (1 like) to be returned... and who knows about Comedy movies (1 like vs 1 dislike).\r\n\r\nAlthough, it sounds like given your explanation of how it currently works, we would not see any Action movies, because that term would be skipped. I think that should change. Additionally, If boosting per `like` vs `unlike` was available in the given scenario, one could change the balance of impact a like or dislike has on the final results. For example, if it was configured that a `like` was given twice the boost of a `dislike`, Comedy movies would be returned in the example above.\r\n\r\nI hope my above examples clarify my desired/expected behavior. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/296174444","html_url":"https://github.com/elastic/elasticsearch/issues/24119#issuecomment-296174444","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24119","id":296174444,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NjE3NDQ0NA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-04-21T12:12:02Z","updated_at":"2017-04-21T12:12:02Z","author_association":"CONTRIBUTOR","body":"As @0xCAB said, the `unlike` terms are stripped from the `like` terms before querying.  For the example you use, you could combine the MLT query with either the function score query or use negative boosting in the boosting query.","performed_via_github_app":null}]