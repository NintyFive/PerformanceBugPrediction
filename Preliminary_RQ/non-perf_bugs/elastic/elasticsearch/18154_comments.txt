[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217132461","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217132461","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217132461,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzEzMjQ2MQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-05T11:40:42Z","updated_at":"2016-05-05T11:40:42Z","author_association":"CONTRIBUTOR","body":"Would this also make the choice for which doc values implementation(https://github.com/elastic/elasticsearch/issues/11887)  to use more obvious? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217142990","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217142990","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217142990,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzE0Mjk5MA==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2016-05-05T12:42:31Z","updated_at":"2016-05-05T12:42:31Z","author_association":"CONTRIBUTOR","body":"> Would this also make the choice for which doc values implementation(#11887) to use more obvious?\n\nWell, both sorted and binary doc values in Lucene accept full binary terms, so this change shouldn't favor one over another.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217223344","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217223344","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217223344,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzIyMzM0NA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-05T17:45:41Z","updated_at":"2016-05-05T17:45:41Z","author_association":"CONTRIBUTOR","body":"@mikemccand I'm curious why you added the discuss label. Can you foresee any potential problem if we do that?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217242455","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217242455","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217242455,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzI0MjQ1NQ==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2016-05-05T18:55:09Z","updated_at":"2016-05-05T18:55:09Z","author_association":"CONTRIBUTOR","body":"> @mikemccand I'm curious why you added the discuss label\n\nWell, just because this seems like a biggish change (for me!)... there are so many places in ES where we pass around `String id` now.\n\nI would change them all to `byte[]` (I think `BytesRef` is overkill?).  But this is mutable (vs `String` today) ... is that dangerous?\n\nUid values would also need to be represented as `byte[]` everywhere.\n\nShould we allow users to also pass binary id values in indexing/bulk/get requests?  I think yes, but then we need to accept either incoming `String` or `byte[]` (encoded via base64?) via rest and Java client APIs?  Actually, it seems like we must allow this, since with auto-ids, the binary ids will come back in search results, and the user can then e.g. do a get or update from there.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217245764","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217245764","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217245764,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzI0NTc2NA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-05-05T19:06:39Z","updated_at":"2016-05-05T19:06:39Z","author_association":"CONTRIBUTOR","body":"as a first step couldn't it just be an internal encoding thing? e.g. just make sure we base64-encode before putting it in the terms dict and decode before doing anything with it. this seems like it would require less api changes but would give us the smaller index.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217259422","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217259422","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217259422,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzI1OTQyMg==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2016-05-05T19:54:02Z","updated_at":"2016-05-05T19:54:02Z","author_association":"CONTRIBUTOR","body":"Ooh that's a great idea!\n\nIt would require that down in `InternalEngine` we can know that an incoming `String id` was in fact base64 encoded (because it was auto-gen'd) vs not base64 encoded (because user passed in their own id).  We used to record this as a `autoGeneratedId` boolean in `Engine.Create` but looks like we removed it.\n\nHmm but then what would happen if a user does auto-generated IDs at first, then adds some documents with their own IDs?  This is allowed today right?  At search time we wouldn't know whether we're supposed to base64 encode it or not?  Maybe we could disallow this?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217646286","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217646286","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217646286,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzY0NjI4Ng==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-07T15:49:06Z","updated_at":"2016-05-07T15:49:06Z","author_association":"CONTRIBUTOR","body":"Currently the uids have the following format: `${utf8-encoded type}#${utf8-encoded id}`. Maybe we could do the following: if the id looks like an url-safe base64 string, then we would use a different separator (maybe `\\0`?) so that:\n- either the id looks like a base 64 string (like our auto-generated ids) and the uid would be `${utf8-encoded type}\\0${base64-decoded id}`\n- otherwise, the uid would remain `${utf8-encoded type}#${utf8-encoded id}`\n\nI think we could keep everything working while saving space for auto-generated ids and not modifying the API. Actually users could even use binary ids themselves by providing base64 strings as ids. A side-effect would be that numeric ids (eg. auto-increment ids generated by a database) would also require less space since elasticsearch would base64-decode them.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217671467","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217671467","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217671467,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzY3MTQ2Nw==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2016-05-07T22:07:52Z","updated_at":"2016-05-07T22:07:52Z","author_association":"CONTRIBUTOR","body":"That's a clever solution @jpountz!  I think the mapping is safe, because \\0 is not a character that is allowed as a `type` field value, right (no utf-8 encoded string has the 0 byte)?  So then to users it just appears that we are particularly compact at storing ID values that are valid `base64` encoded strings.\n\nThis would also mean we cannot represent uid values in the code as `String` anymore.\n\nHmm, you can also query `_uid` right?  So we would have to munge the incoming query to match the binary form?  For e.g. `TermsQuery` that's easy, but what about e.g. `PrefixQuery` or others ... hmm? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217727745","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217727745","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217727745,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzcyNzc0NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-08T15:44:56Z","updated_at":"2016-05-08T15:44:56Z","author_association":"CONTRIBUTOR","body":"Right: range, prefix and fuzzy queries would not work anymore. But maybe it is not something that should be supported on a uid field as it reduces our freedom to improve its efficiency for indexing and get operations (there was a similar discussion on #17994 about ip fields)? I also suspect that performance of ranges and prefixes (maybe fuzzy too) is terrible due to the cardinality of the field and the length of the terms (in the auto-generated case), so it is not something you can really rely on anyway?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217747827","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217747827","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217747827,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzc0NzgyNw==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2016-05-08T21:39:39Z","updated_at":"2016-05-08T21:39:39Z","author_association":"CONTRIBUTOR","body":"OK I think it makes sense to restrict the queries you can run on `_uid`, so this will be a breaking change, but it's unlikely users really do this heavily.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217796032","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217796032","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217796032,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzc5NjAzMg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-09T07:39:18Z","updated_at":"2016-05-09T07:39:18Z","author_association":"CONTRIBUTOR","body":"I think the main reason one would use a range query on `_uid` is to partition an index for reindexing purposes.  This requirement is obviated by the changes proposed in https://github.com/elastic/elasticsearch/issues/13494#issuecomment-217054402 so +1 to restricting the queries that you can run on `_uid`\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/217892322","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-217892322","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":217892322,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNzg5MjMyMg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-09T15:08:51Z","updated_at":"2016-05-09T15:08:51Z","author_association":"CONTRIBUTOR","body":"I ran some simulations to check whether this would actually save space. For an app that would index 1M docs at a rate of about 100 docs per second per shard (the rate is important, since faster rates mean that ids have longer common prefixes and vice-versa), disk space used by the `_uid` field goes from 25429976 bytes to 21608441 (-15%).\n\nThis is substantial, but the reduction drops to 7% if we put the mac address before the timestamp as discussed in #18209 (17794115 bytes to 16540472), which gets quickly drowned if you have other fields. I am unsure whether the gain is worth the complexity so I will probably wait to see what we do on #18209 and whether this change would have a positive impact on indexing speed in addition to disk space.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/218105732","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-218105732","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":218105732,"node_id":"MDEyOklzc3VlQ29tbWVudDIxODEwNTczMg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-10T09:28:59Z","updated_at":"2016-05-10T09:28:59Z","author_association":"CONTRIBUTOR","body":"I did the same changes as Mike did in #18209 to simulate 100 docs per second. The classic benchmark reported the same indexing speed and the index was about 0.5% smaller. I am not sure this is worth the complexity of this change.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222104229","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-222104229","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":222104229,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjEwNDIyOQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-27T09:38:39Z","updated_at":"2016-05-27T09:38:39Z","author_association":"CONTRIBUTOR","body":"I think we should revisit this once we somehow remove types and enforce ids to be unique per index (rather than per type).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222384015","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-222384015","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":222384015,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjM4NDAxNQ==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2016-05-29T21:32:10Z","updated_at":"2016-05-29T21:32:10Z","author_association":"MEMBER","body":"@jpountz I'm not sure exactly why types are in the way but if it's because their stringy nature, we can also assign each type a numerical id? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222418865","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-222418865","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":222418865,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjQxODg2NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-30T06:15:43Z","updated_at":"2016-05-30T06:15:43Z","author_association":"CONTRIBUTOR","body":"@bleskes They are not exactly in the way, but prepending types to the ids makes lookups slower since the FST still needs to walk the bytes of the type before reaching bytes that make a difference. It is tempting to put them in the end but then the compression of the terms dictionary degrades considerably given that the terms dict only performs prefix-based compression (https://issues.apache.org/jira/browse/LUCENE-4702 might help a bit from that perspective but the compression ratio would still be worse than if prepending _type to the _uid). We could make things a bit better by assigning ids to types as you suggest, but I have the feeling that we reached a point where gettig rid of types, or at least decoupling them from mappings and treating them as index partitions, has become an acceptable path. Then we could directly use the _id as a primary key and I think we should reevaluate this since the space/speed benefit of not base64-ing the ids might become more interesting and worth the complexity of the change.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/237851085","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-237851085","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":237851085,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNzg1MTA4NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-08-05T13:32:49Z","updated_at":"2016-08-05T13:32:49Z","author_association":"CONTRIBUTOR","body":"I have been working on a super hacky patch (tests don't even compile) to try to estimate how much we could win by doing this: https://github.com/jpountz/elasticsearch/tree/enhancement/optional_type. This branch has an index setting called `index.mapping.single_type`, which when set does several things:\n- it forbids you from configuring another type than the value of this setting\n- it does not prepend `<typename>#` to the `_uid`\n- it expects ids to be base64 strings and encodes them in binary form (so that eg. auto-generated ids would use 15 bytes rather than 20)\n\n@mikemccand  helped me benchmark the change and this resulted in a 13% improvement in indexing throughput with the NYC taxi rides dataset.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/237854570","html_url":"https://github.com/elastic/elasticsearch/issues/18154#issuecomment-237854570","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18154","id":237854570,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNzg1NDU3MA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-08-05T13:47:05Z","updated_at":"2016-08-05T13:47:05Z","author_association":"CONTRIBUTOR","body":"> @mikemccand helped me benchmark the change and this resulted in a 13% improvement in indexing throughput with the NYC taxi rides dataset.\n\nVery cool!\n","performed_via_github_app":null}]