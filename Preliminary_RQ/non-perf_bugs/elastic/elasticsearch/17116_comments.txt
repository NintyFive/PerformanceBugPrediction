[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/198312467","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-198312467","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":198312467,"node_id":"MDEyOklzc3VlQ29tbWVudDE5ODMxMjQ2Nw==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-03-18T11:16:10Z","updated_at":"2016-03-18T11:16:10Z","author_association":"CONTRIBUTOR","body":"Just discussed this in fixit friday and now we think it should be differently structured, more like in #10049:\n\nEach function produces a variable which can be named with some parameter (var_name?).\n\nWe add an additional option `scrore_mode: script` that has the results of the functions as variables. The final score is then the result of the script.\n\nIn addition, we need a different function `query_function` which returns the result of a query. We thought that the above approach (make the filters we have now together with functions score) would be confusing and convolute stuff too much.\n\nSomething like:\n\n```\nPOST _search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        // same as before, score will be accessible via _score\n      },\n      \"functions\": [\n        {\n          \"query_function\": {\n            \"query\": {\n              // here be any query, can also be function_score\n            },\n            \"var_name\": \"score_a\"\n          }\n        },\n        {\n          \"random_score\": {\n            \"var_name\": \"score_a\",\n            ...\n          }\n        },\n        ...\n      ],\n      \"score_mode\": \"script\",\n      \"combine_script\": \"score_a * score_b + _score\"\n    }\n  }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/201971045","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-201971045","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":201971045,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMTk3MTA0NQ==","user":{"login":"babadofar","id":379628,"node_id":"MDQ6VXNlcjM3OTYyOA==","avatar_url":"https://avatars2.githubusercontent.com/u/379628?v=4","gravatar_id":"","url":"https://api.github.com/users/babadofar","html_url":"https://github.com/babadofar","followers_url":"https://api.github.com/users/babadofar/followers","following_url":"https://api.github.com/users/babadofar/following{/other_user}","gists_url":"https://api.github.com/users/babadofar/gists{/gist_id}","starred_url":"https://api.github.com/users/babadofar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/babadofar/subscriptions","organizations_url":"https://api.github.com/users/babadofar/orgs","repos_url":"https://api.github.com/users/babadofar/repos","events_url":"https://api.github.com/users/babadofar/events{/privacy}","received_events_url":"https://api.github.com/users/babadofar/received_events","type":"User","site_admin":false},"created_at":"2016-03-27T01:51:37Z","updated_at":"2016-03-27T01:51:37Z","author_association":"NONE","body":"Cool! \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/213853949","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-213853949","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":213853949,"node_id":"MDEyOklzc3VlQ29tbWVudDIxMzg1Mzk0OQ==","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","site_admin":false},"created_at":"2016-04-23T23:52:14Z","updated_at":"2016-04-23T23:52:14Z","author_association":"CONTRIBUTOR","body":"I'm the OP of #10049 and #17820 - both seem to be satisfied by the proposed solution, so looking forward to this implementation.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221871852","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-221871852","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":221871852,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTg3MTg1Mg==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-05-26T13:34:16Z","updated_at":"2016-05-26T13:34:16Z","author_association":"CONTRIBUTOR","body":"I guess best would be to split this in two: 1. implement query function and 2. implement custom combine. I'll start working on this unless anyone else calls dibs. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222546021","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-222546021","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":222546021,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjU0NjAyMQ==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-05-30T19:43:46Z","updated_at":"2016-05-30T19:43:46Z","author_association":"CONTRIBUTOR","body":"@JnBrymn-EB and I discussed a little  about the combine script parts and we thought that we should probably change the above syntax. The variable name per function could be on the same level as the filter, weight and function instead of being a parameter inside the function definition because each function score can be assigned to a variable just like every function can have a weight or a filter. Also, the script should probably follow the same script syntax we have elsewhere. The query would then look like this:\n\n```\nPOST _search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        // same as before, score will be accessible via _score\n      },\n      \"functions\": [\n        {\n          \"query_function\": {\n            \"query\": {\n              // here be any query, can also be function_score\n            }\n          },\n          \"var_name\": \"score_a\",\n          \"filter\": {\n               // some filter\n          }\n        },\n        {\n          \"random_score\": {\n            ...\n          },\n          \"var_name\": \"score_a\",\n          \"weight\": 3.33\n        },\n        ...\n      ],\n      \"score_mode\": \"script\",\n      \"combine_script\": {\n          \"lang\": \"groovy\",\n          \"inline\": \"score_a * score_b + _score\"\n      }\n    }\n  }\n}\n\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223044222","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-223044222","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":223044222,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzA0NDIyMg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T16:13:28Z","updated_at":"2016-06-01T16:13:28Z","author_association":"CONTRIBUTOR","body":"I'd suggest changing `query_function` to `query_score`, and `combine_script` to `score_script`.  otherwise looks great!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223854049","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-223854049","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":223854049,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzg1NDA0OQ==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2016-06-06T02:03:15Z","updated_at":"2016-06-06T02:03:15Z","author_association":"NONE","body":"I'm building the combine part as we speak. Should we go with `var_name` as stated above or should we use `_name` as I've seen in other places?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/229036772","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-229036772","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":229036772,"node_id":"MDEyOklzc3VlQ29tbWVudDIyOTAzNjc3Mg==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-06-28T12:39:20Z","updated_at":"2016-06-28T12:39:20Z","author_association":"CONTRIBUTOR","body":"We settled for `var_name`. \n\nIn addition, another question came up: A function might be associated with a filter that does not match. What value do we assign to the variable in this case? I have the feeling we need a default value here. Something like:\n\n```\n...\n\"functions\": [\n        {\n          \"script_variable\": {\n             \"name\": \"score_a\",\n             \"default\": 123\n          },\n          \"filter\": {\n               // some filter\n          },\n          \"field_value_factor\": {...}\n        }\n....\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/229170394","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-229170394","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":229170394,"node_id":"MDEyOklzc3VlQ29tbWVudDIyOTE3MDM5NA==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2016-06-28T20:20:24Z","updated_at":"2016-06-28T20:22:12Z","author_association":"NONE","body":"Could we add a `missing` field here just with the [field_value_factor](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor) and make it default to 0 for the sake of a `score_script`? We'd have to be careful not to affect existing functionality like `score_mode=avg` which just assumes that the value doesn't exist. -- It might be a bit misleading.\n\nMaybe another take would be adding a `default_vals` key to the `combine_script` that would enumerate the value of each clause that might be missing.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/229935282","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-229935282","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":229935282,"node_id":"MDEyOklzc3VlQ29tbWVudDIyOTkzNTI4Mg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-07-01T12:33:23Z","updated_at":"2016-07-01T12:33:23Z","author_association":"CONTRIBUTOR","body":"I'd go with `missing`, and in fact we should probably apply this to all functions (this has come up before).  I'm wondering if the change to `score_mode:avg` is a problem?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/229950089","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-229950089","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":229950089,"node_id":"MDEyOklzc3VlQ29tbWVudDIyOTk1MDA4OQ==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-01T13:43:57Z","updated_at":"2016-07-01T13:43:57Z","author_association":"CONTRIBUTOR","body":"Just to be clear: I meant to add a default if the `\"filter\"` doesn't not match. In case the field is missing it would still be up to the function to decide what to do. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/229992494","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-229992494","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":229992494,"node_id":"MDEyOklzc3VlQ29tbWVudDIyOTk5MjQ5NA==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-01T16:38:17Z","updated_at":"2016-07-01T16:38:17Z","author_association":"CONTRIBUTOR","body":"I'll explain in more detail what I mean.\nWe have two cases: \n1. the field is missing in the document\n2. the filter associated with the function does not match\n\nIn the first case, we have three functions that have to deal with it: `field_value_factor` (takes a `missing` parameter and if the value is missing uses that instead of an actual value), `decay_function` (assumes the value is perfectly at the `origin`, which has greatly annoyed many users and might change, see https://github.com/elastic/elasticsearch/issues/18892) and `script_score` where everyone has to adjust the script to deal with it.\n\nIn the second case currently `function_score` acts for this document as if the function would not exist at all. \n\nI was only talking about 2., filter not matching. \n\nWe could add a `score_missing` or `default` parameter that would do the following: If the filter for a function does not match then we always return this value.\n\nThis would have also the advantage that it would allow everyone to control not only input to individual functions in case field is missing (with the `missing` parameter) but also to control the output like so:\n\n```\n\"function_score\": {\n      \"functions\": [\n        {\n          \"filter\": {\n            \"exists\": {\n              \"field\": \"age\"\n            }\n          },\n          \"field_value_factor\": {\n            \"field\": \"age\",\n            \"modifier\": \"ln\"\n          },\n          \"score_missing\": 5 \n        }\n      ]\n    }\n```\n\nAlso, it would allow people to control what  `score_mode: avg` means in case a filter is not matching, which is awkward right now.\n\nFor example in this case:\n\n```\n\"function_score\": {\n      \"score_mode\": \"avg\", \n      \"functions\": [\n        {\n          \"filter\": {\n            \"term\": {\n              \"skill\": \"codes_java\"\n            }\n          },\n          \"weight\": 5, \n          \"score_missing\": 0\n        },\n        {\n          \"filter\": {\n            \"term\": {\n              \"skill\": \"speaks_human\"\n            }\n          },\n          \"weight\": 2, \n          \"score_missing\": 0\n        }\n      ]\n    }\n```\n\nin case the term `codes_java` is not in field `skills`, the score would be computed as `(0+2)/(5+2)` instead of just `2/2` which is the default right now and might not be desirable.\n\nFor the `script_combine` we should then enforce that this parameter exists if a function is associated with a filter.\n\nI would not call it `missing` because I at least might mix that up with the `missing` in case the field does not exist in the doc. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/230300086","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-230300086","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":230300086,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMDMwMDA4Ng==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-07-04T14:14:29Z","updated_at":"2016-07-04T14:14:29Z","author_association":"CONTRIBUTOR","body":"This makes sense to me.  What about calling it `no_match_score` or `default_score`?  I think I prefer the former because it is more explicit.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233304006","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-233304006","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":233304006,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzMwNDAwNg==","user":{"login":"mckinnovations","id":17956787,"node_id":"MDQ6VXNlcjE3OTU2Nzg3","avatar_url":"https://avatars1.githubusercontent.com/u/17956787?v=4","gravatar_id":"","url":"https://api.github.com/users/mckinnovations","html_url":"https://github.com/mckinnovations","followers_url":"https://api.github.com/users/mckinnovations/followers","following_url":"https://api.github.com/users/mckinnovations/following{/other_user}","gists_url":"https://api.github.com/users/mckinnovations/gists{/gist_id}","starred_url":"https://api.github.com/users/mckinnovations/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mckinnovations/subscriptions","organizations_url":"https://api.github.com/users/mckinnovations/orgs","repos_url":"https://api.github.com/users/mckinnovations/repos","events_url":"https://api.github.com/users/mckinnovations/events{/privacy}","received_events_url":"https://api.github.com/users/mckinnovations/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T11:26:11Z","updated_at":"2016-07-18T11:26:11Z","author_association":"NONE","body":"Any timeline for this feature ? when is it going to be released?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/236495488","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-236495488","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":236495488,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNjQ5NTQ4OA==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2016-08-01T05:55:50Z","updated_at":"2016-08-01T05:55:50Z","author_association":"NONE","body":"@mckinnovations https://github.com/elastic/elasticsearch/pull/19710\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/283636464","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-283636464","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":283636464,"node_id":"MDEyOklzc3VlQ29tbWVudDI4MzYzNjQ2NA==","user":{"login":"serj-p","id":2565455,"node_id":"MDQ6VXNlcjI1NjU0NTU=","avatar_url":"https://avatars0.githubusercontent.com/u/2565455?v=4","gravatar_id":"","url":"https://api.github.com/users/serj-p","html_url":"https://github.com/serj-p","followers_url":"https://api.github.com/users/serj-p/followers","following_url":"https://api.github.com/users/serj-p/following{/other_user}","gists_url":"https://api.github.com/users/serj-p/gists{/gist_id}","starred_url":"https://api.github.com/users/serj-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/serj-p/subscriptions","organizations_url":"https://api.github.com/users/serj-p/orgs","repos_url":"https://api.github.com/users/serj-p/repos","events_url":"https://api.github.com/users/serj-p/events{/privacy}","received_events_url":"https://api.github.com/users/serj-p/received_events","type":"User","site_admin":false},"created_at":"2017-03-02T12:06:59Z","updated_at":"2017-03-02T12:10:11Z","author_association":"NONE","body":"Have `query_score ` or `query_function` keywords been added?\r\nI am trying to compute max scores for docs from two queries, one calculating `field_value_factor` for `updated` field from a child doc and other is a `field_value_factor` for parent's `updated` value.  So doc score I need is `max(child.updated, doc.updated)`. I see no way to tell elasticsearch  to return such max `updated` currently.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/283766160","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-283766160","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":283766160,"node_id":"MDEyOklzc3VlQ29tbWVudDI4Mzc2NjE2MA==","user":{"login":"erebus1","id":7998757,"node_id":"MDQ6VXNlcjc5OTg3NTc=","avatar_url":"https://avatars1.githubusercontent.com/u/7998757?v=4","gravatar_id":"","url":"https://api.github.com/users/erebus1","html_url":"https://github.com/erebus1","followers_url":"https://api.github.com/users/erebus1/followers","following_url":"https://api.github.com/users/erebus1/following{/other_user}","gists_url":"https://api.github.com/users/erebus1/gists{/gist_id}","starred_url":"https://api.github.com/users/erebus1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erebus1/subscriptions","organizations_url":"https://api.github.com/users/erebus1/orgs","repos_url":"https://api.github.com/users/erebus1/repos","events_url":"https://api.github.com/users/erebus1/events{/privacy}","received_events_url":"https://api.github.com/users/erebus1/received_events","type":"User","site_admin":false},"created_at":"2017-03-02T20:12:10Z","updated_at":"2017-03-02T20:12:10Z","author_association":"NONE","body":"I think you can use dis_max query of 2 function_score queries\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/283766530","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-283766530","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":283766530,"node_id":"MDEyOklzc3VlQ29tbWVudDI4Mzc2NjUzMA==","user":{"login":"erebus1","id":7998757,"node_id":"MDQ6VXNlcjc5OTg3NTc=","avatar_url":"https://avatars1.githubusercontent.com/u/7998757?v=4","gravatar_id":"","url":"https://api.github.com/users/erebus1","html_url":"https://github.com/erebus1","followers_url":"https://api.github.com/users/erebus1/followers","following_url":"https://api.github.com/users/erebus1/following{/other_user}","gists_url":"https://api.github.com/users/erebus1/gists{/gist_id}","starred_url":"https://api.github.com/users/erebus1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erebus1/subscriptions","organizations_url":"https://api.github.com/users/erebus1/orgs","repos_url":"https://api.github.com/users/erebus1/repos","events_url":"https://api.github.com/users/erebus1/events{/privacy}","received_events_url":"https://api.github.com/users/erebus1/received_events","type":"User","site_admin":false},"created_at":"2017-03-02T20:13:31Z","updated_at":"2017-03-02T20:13:31Z","author_association":"NONE","body":"But the question about timeline for query_score is really important.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/290468652","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-290468652","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":290468652,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MDQ2ODY1Mg==","user":{"login":"erebus1","id":7998757,"node_id":"MDQ6VXNlcjc5OTg3NTc=","avatar_url":"https://avatars1.githubusercontent.com/u/7998757?v=4","gravatar_id":"","url":"https://api.github.com/users/erebus1","html_url":"https://github.com/erebus1","followers_url":"https://api.github.com/users/erebus1/followers","following_url":"https://api.github.com/users/erebus1/following{/other_user}","gists_url":"https://api.github.com/users/erebus1/gists{/gist_id}","starred_url":"https://api.github.com/users/erebus1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erebus1/subscriptions","organizations_url":"https://api.github.com/users/erebus1/orgs","repos_url":"https://api.github.com/users/erebus1/repos","events_url":"https://api.github.com/users/erebus1/events{/privacy}","received_events_url":"https://api.github.com/users/erebus1/received_events","type":"User","site_admin":false},"created_at":"2017-03-30T16:39:03Z","updated_at":"2017-03-30T16:39:03Z","author_association":"NONE","body":"Guys, do you plan to implement this feature?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/290553261","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-290553261","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":290553261,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MDU1MzI2MQ==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2017-03-30T21:41:20Z","updated_at":"2017-03-30T21:41:20Z","author_association":"NONE","body":"This is becoming more important for upcoming work at Eventbrite.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/290714153","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-290714153","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":290714153,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MDcxNDE1Mw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T13:38:12Z","updated_at":"2017-03-31T13:38:12Z","author_association":"CONTRIBUTOR","body":"We've been rethinking this approach.  Apparently, according to research, the best way to combine scores is to add them together (which the bool query does, now that coordination and query norm are gone).\r\n\r\nSo we're looking at better ways of exposing primitives for incorporating non-textual scores into the overall score.\r\n\r\nClosing in favour of https://github.com/elastic/elasticsearch/issues/23850","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/290740081","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-290740081","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":290740081,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MDc0MDA4MQ==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T15:13:37Z","updated_at":"2017-03-31T15:13:37Z","author_association":"NONE","body":"\"coordination and query norm are gone\" - do you have any documentation on that @clintongormley ?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/291165969","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-291165969","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":291165969,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MTE2NTk2OQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-04-03T14:48:06Z","updated_at":"2017-04-03T14:48:06Z","author_association":"CONTRIBUTOR","body":"@JnBrymn-EB they've been removed in Lucene 7 https://issues.apache.org/jira/browse/LUCENE-7347\r\n\r\nquery coordination was a hack to make TF/IDF work better in the face of poor TF saturation, and query norm (i believe) was essentially a failed experiment to try to make the scores from different queries comparable.\r\n\r\nwith those removed, the bool query now just does a simple sum, and boosting clauses is a much simpler calculation than before.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/291193611","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-291193611","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":291193611,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MTE5MzYxMQ==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2017-04-03T16:18:03Z","updated_at":"2017-04-03T16:18:03Z","author_association":"NONE","body":"Fascinating! I'll have to soak this in.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384591036","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-384591036","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":384591036,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDU5MTAzNg==","user":{"login":"marcusklaas","id":1255413,"node_id":"MDQ6VXNlcjEyNTU0MTM=","avatar_url":"https://avatars3.githubusercontent.com/u/1255413?v=4","gravatar_id":"","url":"https://api.github.com/users/marcusklaas","html_url":"https://github.com/marcusklaas","followers_url":"https://api.github.com/users/marcusklaas/followers","following_url":"https://api.github.com/users/marcusklaas/following{/other_user}","gists_url":"https://api.github.com/users/marcusklaas/gists{/gist_id}","starred_url":"https://api.github.com/users/marcusklaas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcusklaas/subscriptions","organizations_url":"https://api.github.com/users/marcusklaas/orgs","repos_url":"https://api.github.com/users/marcusklaas/repos","events_url":"https://api.github.com/users/marcusklaas/events{/privacy}","received_events_url":"https://api.github.com/users/marcusklaas/received_events","type":"User","site_admin":false},"created_at":"2018-04-26T10:27:02Z","updated_at":"2018-04-26T10:27:02Z","author_association":"NONE","body":"For any one else struggling with the absence of a way to multiply scores directly, note that it is possible to take logarithms using `function_score`/`script_score` or using a `modifier` field. The addition of logarithms is equivalent to multiplication for scoring.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/385437203","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-385437203","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":385437203,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NTQzNzIwMw==","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"created_at":"2018-04-30T15:37:54Z","updated_at":"2018-04-30T15:37:54Z","author_association":"NONE","body":"@marcusklaas, I understand the math of logarithms( `score=A * B * C` sorts the same as `score=log(A * B * C)` and `log(A * B * C) = log(A) + log(B) + log(C))`) but I'm unclear how this helps. Do you have an example? For instance - if I want to multiply field values 3 fields together, then I would just use `score_mode=multiply`. But if I wanted to make an interesting combination of  field values like `A*B + C` then the logarithm trick doesn't help me because that isn't a bunch of products.\r\n\r\nAnd if you want to get to arbitrary polynomials of the fields and if you want to incorporate the text score in the mix, then all the more what do I do?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/525200602","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-525200602","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":525200602,"node_id":"MDEyOklzc3VlQ29tbWVudDUyNTIwMDYwMg==","user":{"login":"PeledYuval","id":50297862,"node_id":"MDQ6VXNlcjUwMjk3ODYy","avatar_url":"https://avatars1.githubusercontent.com/u/50297862?v=4","gravatar_id":"","url":"https://api.github.com/users/PeledYuval","html_url":"https://github.com/PeledYuval","followers_url":"https://api.github.com/users/PeledYuval/followers","following_url":"https://api.github.com/users/PeledYuval/following{/other_user}","gists_url":"https://api.github.com/users/PeledYuval/gists{/gist_id}","starred_url":"https://api.github.com/users/PeledYuval/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PeledYuval/subscriptions","organizations_url":"https://api.github.com/users/PeledYuval/orgs","repos_url":"https://api.github.com/users/PeledYuval/repos","events_url":"https://api.github.com/users/PeledYuval/events{/privacy}","received_events_url":"https://api.github.com/users/PeledYuval/received_events","type":"User","site_admin":false},"created_at":"2019-08-27T08:35:34Z","updated_at":"2019-08-27T08:35:34Z","author_association":"NONE","body":"@JnBrymn-EB \r\nI agree. The Math.log method doesn't help in the case you presented. It only helps when you want to just _multiply_ scores from several different queries.\r\n\r\nFor reference for future readers, the example we used in our company:\r\n```\r\n{\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"must\": {\r\n        [\r\n          {\r\n            \"function_score\": {\r\n              \"query\": someQueryA,\r\n              \"script_score\": {\r\n                \"source\": \"Math.log(_score)\"            \r\n              }\r\n            }\r\n          },\r\n          {\r\n            \"function_score\": {\r\n              \"query\": someQueryB,\r\n              \"script_score\": {\r\n                \"source\": \"Math.log(_score)\"            \r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/526629957","html_url":"https://github.com/elastic/elasticsearch/issues/17116#issuecomment-526629957","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17116","id":526629957,"node_id":"MDEyOklzc3VlQ29tbWVudDUyNjYyOTk1Nw==","user":{"login":"JnBrymn","id":566533,"node_id":"MDQ6VXNlcjU2NjUzMw==","avatar_url":"https://avatars3.githubusercontent.com/u/566533?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn","html_url":"https://github.com/JnBrymn","followers_url":"https://api.github.com/users/JnBrymn/followers","following_url":"https://api.github.com/users/JnBrymn/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn/orgs","repos_url":"https://api.github.com/users/JnBrymn/repos","events_url":"https://api.github.com/users/JnBrymn/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn/received_events","type":"User","site_admin":true},"created_at":"2019-08-30T14:46:58Z","updated_at":"2019-08-30T14:46:58Z","author_association":"CONTRIBUTOR","body":"This is a neat example @PeledYuval . I really hadn't through through how I'd implement text score multiplication. I might use this at some point. But I think you'll agree that it's awkward and inflexible. (Can't do `A*B+C`.)\r\n\r\nNow the thing I would really like to see is with the introduction of [script score query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-script-score-query.html), it would be spectacular if I could use the [`_name`d query clause functionality](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#request-body-search-queries-and-filters) to refer to the scores for those clauses inside of a script score query and combine them as I please. \r\n\r\nSomething like:\r\n```\r\n{\r\n    \"query\" : {\r\n        \"script_score\" : {\r\n            \"query\" : {\r\n                \"bool\" : {\r\n                    \"should\": [\r\n                        {\"match\": { \"message\": \"elasticsearch\" }, \"_name\": \"A\"}\r\n                        {\"match\": { \"message.trigrammed\": \"elasticsearch\" }, \"_name\": \"B\"}\r\n                    ]\r\n                }\r\n            },\r\n            \"script\" : {\r\n                \"source\" : \"_subscore['A'] + _subscore['B'] + 0.1*_subscore['A']*_subscore['B']\"\r\n            }\r\n        }\r\n     }\r\n}\r\n```","performed_via_github_app":null}]