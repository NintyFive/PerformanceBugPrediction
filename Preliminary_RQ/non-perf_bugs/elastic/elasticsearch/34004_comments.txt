[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424012153","html_url":"https://github.com/elastic/elasticsearch/issues/34004#issuecomment-424012153","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34004","id":424012153,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDAxMjE1Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-09-24T15:16:48Z","updated_at":"2018-09-24T15:16:48Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424013094","html_url":"https://github.com/elastic/elasticsearch/issues/34004#issuecomment-424013094","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34004","id":424013094,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDAxMzA5NA==","user":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"created_at":"2018-09-24T15:19:01Z","updated_at":"2018-09-24T15:19:01Z","author_association":"MEMBER","body":"A quick search shows a small number of similar looking failures, but all from last year when 6.x was still before current 6.4. No recent failures on 6.x or master, so this might not be a current issue anymore. Just filing for awareness.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/425120787","html_url":"https://github.com/elastic/elasticsearch/issues/34004#issuecomment-425120787","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34004","id":425120787,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNTEyMDc4Nw==","user":{"login":"vladimirdolzhenko","id":209440,"node_id":"MDQ6VXNlcjIwOTQ0MA==","avatar_url":"https://avatars0.githubusercontent.com/u/209440?v=4","gravatar_id":"","url":"https://api.github.com/users/vladimirdolzhenko","html_url":"https://github.com/vladimirdolzhenko","followers_url":"https://api.github.com/users/vladimirdolzhenko/followers","following_url":"https://api.github.com/users/vladimirdolzhenko/following{/other_user}","gists_url":"https://api.github.com/users/vladimirdolzhenko/gists{/gist_id}","starred_url":"https://api.github.com/users/vladimirdolzhenko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladimirdolzhenko/subscriptions","organizations_url":"https://api.github.com/users/vladimirdolzhenko/orgs","repos_url":"https://api.github.com/users/vladimirdolzhenko/repos","events_url":"https://api.github.com/users/vladimirdolzhenko/events{/privacy}","received_events_url":"https://api.github.com/users/vladimirdolzhenko/received_events","type":"User","site_admin":false},"created_at":"2018-09-27T14:46:15Z","updated_at":"2018-09-27T14:46:15Z","author_association":"CONTRIBUTOR","body":"test looks bogus: race condition (esp. under the load on CI) could happens between count down latch reaches 0 and actual task cancellation","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/426947819","html_url":"https://github.com/elastic/elasticsearch/issues/34004#issuecomment-426947819","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34004","id":426947819,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNjk0NzgxOQ==","user":{"login":"vladimirdolzhenko","id":209440,"node_id":"MDQ6VXNlcjIwOTQ0MA==","avatar_url":"https://avatars0.githubusercontent.com/u/209440?v=4","gravatar_id":"","url":"https://api.github.com/users/vladimirdolzhenko","html_url":"https://github.com/vladimirdolzhenko","followers_url":"https://api.github.com/users/vladimirdolzhenko/followers","following_url":"https://api.github.com/users/vladimirdolzhenko/following{/other_user}","gists_url":"https://api.github.com/users/vladimirdolzhenko/gists{/gist_id}","starred_url":"https://api.github.com/users/vladimirdolzhenko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladimirdolzhenko/subscriptions","organizations_url":"https://api.github.com/users/vladimirdolzhenko/orgs","repos_url":"https://api.github.com/users/vladimirdolzhenko/repos","events_url":"https://api.github.com/users/vladimirdolzhenko/events{/privacy}","received_events_url":"https://api.github.com/users/vladimirdolzhenko/received_events","type":"User","site_admin":false},"created_at":"2018-10-04T09:23:57Z","updated_at":"2018-10-04T09:29:41Z","author_association":"CONTRIBUTOR","body":"I was able to reproduce it adding some _trolls_ (who intensively eats cpu)\r\n\r\n```java\r\n    public void testRunnableRunsAtMostOnceAfterCancellation() throws Exception {\r\n/////////// troll part starts\r\n        final int trolls = 32;\r\n        final CountDownLatch trollStart = new CountDownLatch(1);\r\n        final AtomicBoolean trollRun = new AtomicBoolean(true);\r\n        final AtomicInteger trollBlackhole = new AtomicInteger();\r\n        final CountDownLatch trollEnd = new CountDownLatch(trolls);\r\n        IntStream.range(0, trolls).mapToObj(i -> new Thread(() -> {\r\n            try {\r\n                double v = 1.0 + randomDouble();\r\n                double v2 = 1.0 + randomDouble();\r\n                trollStart.await();\r\n\r\n                // some stupid CPU intensive operations\r\n                while (trollRun.get()) {\r\n                    v *= 1 + v2;\r\n                }\r\n                // it has to be `consumed` somehow - via volatile write is enough\r\n                trollBlackhole.addAndGet((int) v);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                trollEnd.countDown();\r\n            }\r\n\r\n        },\"troll\" + i)).forEach(Thread::start);\r\n\r\n        trollStart.countDown();\r\n/////////// troll part ends\r\n\r\n        final int iterations = scaledRandomIntBetween(1, 12);\r\n        final AtomicInteger counter = new AtomicInteger();\r\n        final CountDownLatch doneLatch = new CountDownLatch(iterations);\r\n        final Runnable countingRunnable = () -> {\r\n            counter.incrementAndGet();\r\n            doneLatch.countDown();\r\n        };\r\n\r\n        final long timoutMs = 10L;\r\n        final Cancellable cancellable = threadPool.scheduleWithFixedDelay(countingRunnable, TimeValue.timeValueMillis(timoutMs), Names.GENERIC);\r\n        doneLatch.await();\r\n        cancellable.cancel();\r\n        final int counterValue = counter.get();\r\n        trollRun.set(false);\r\n        trollEnd.await();\r\n\r\n        assertThat(counterValue, isOneOf(iterations, iterations + 1));\r\n\r\n        if (rarely()) {\r\n            awaitBusy(() -> {\r\n                final int value = counter.get();\r\n                return value == iterations || value == iterations + 1;\r\n            }, 5 * timoutMs, TimeUnit.MILLISECONDS);\r\n        }\r\n    }\r\n```\r\n\r\ndefinitely the reason is in a heavily loaded environment like CI could be due to parallel tasks\r\n```\r\nexecution line \r\n// ++ is for counter.incrementAndGet()\r\n// cd is for doneLatch.countDown();\r\n\r\n ----- [ ++ cd ] ----- [ ++ cd ] ----- [ ++ cd ] ----- [ ++ cd ] ----- [ ++ cd ] -----\r\n                                     ^^ doneLatch.await                        ^^ cancel\r\n``` \r\n\r\nOut of 200 runs it fails in ~10 cases, even with ``` Expected: one of {<1>, <2>}     but: was <8>``` \r\n\r\nIt never fails (out of 2000 runs) with `timeout = 50 ms` with a strong check that task has been executed exactly expected number of times.\r\n\r\nWe can increase timeout to let's say `100 ms` to be even more safe. \r\n\r\nAnother approach is to track timings of last run and actual cancellation time - it makes test a way ugly.\r\n","performed_via_github_app":null}]