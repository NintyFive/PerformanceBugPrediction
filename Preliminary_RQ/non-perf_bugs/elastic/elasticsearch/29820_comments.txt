[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130715","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130715","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130715,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcxNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2017-10-20T13:51:56Z","updated_at":"2018-04-25T01:22:52Z","author_association":"COLLABORATOR","body":"*Original comment by @skearns64:*\n\n> If other applications in the stack need the ability to get a view of the current user's combined privileges, we would need an API to render this combined view\r\n\r\nI'm +1 to an \"effective privileges\" API (LINK REDACTED), but would it be possible to also integrate these custom privileges with the `has_privileges` API?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130716","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130716","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130716,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcxNg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2017-12-13T19:29:57Z","updated_at":"2018-04-25T01:22:52Z","author_association":"COLLABORATOR","body":"*Original comment by @joshbressers:*\n\nAfter a chat with the Kibana folks they're going to want this feature to enable Spaces properly (they can live without OLS for now). We will probably want to bump the priority of this feature.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130718","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130718","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130718,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcxOA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2017-12-18T18:21:54Z","updated_at":"2018-04-25T01:22:52Z","author_association":"COLLABORATOR","body":"*Original comment by @jaymode:*\n\n@epixa do you have an idea of what you would need from us in terms of API/capabilities?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130720","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130720","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130720,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcyMA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2017-12-20T18:18:47Z","updated_at":"2018-04-25T01:22:52Z","author_association":"COLLABORATOR","body":"*Original comment by @epixa:*\n\n@jaymode At this point, I think we just need the ability to specify new privileges as strings and then have those privileges assigned to roles and returned via the has_privileges api.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130721","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130721","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130721,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcyMQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T01:37:56Z","updated_at":"2018-04-25T01:22:53Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n@epixa (and @jordansissel / @andrewvc if this is going to be useful to Logstash) \r\n\r\nI've started implementing this, and there are 2 potential features that have a big impact on the implementation complexity. They're both achievable if they're truly useful (I have a prototype already), but I don't want to do them unless we actually need them.\r\n\r\n1. pre-defined privileges\r\n2. privileges on resources\r\n\r\n### pre-defined privileges\r\nWe have a choice, either privileges are _just a string_, or they are _pre-defined objects_.\r\n\r\nI'll do my best to explain as succintly as possible.\r\n\r\nIf we have \"just a string\", then a role can have:\r\n```\r\n\"custom\": [ \"kibana:read\", \"kibana:write\" ]\r\n```\r\nAnd that's easy. But it means that `\"kibana:write\"` doesn't imply `\"kibana:create\"` because they're just strings, and they don't mean anything inside ES.\r\n\r\nSo\r\n```\r\nGET /_xpack/security/user/_has_privileges\r\n{\r\n   \"custom\": [ \"kibana:write\", \"kibana:create\" ]\r\n}\r\n```\r\nwould return \r\n```\r\n\"kibana:write\": true,\r\n\"kibana:create\" false\r\n```\r\n\r\nAnd, likewise, `kibana:all` doesn't _mean_ anything special to ES.\r\n\r\nSo, if Kibana (or Logstash, etc) wants to have a rich set of privileges like `all` implies `read`+`write` and `write` implies `create`+`update`+`delete`, then there would be 3 choices for implementing that on top of the \"just a string\" model, none of which are great.\r\n\r\n1. expand them at role creation time, so if a role is supposed to have \"kibana:all\", you actually write it with \r\n   ```\r\n   \"custom\" : [ \"kibana:all\", \"kibana:read\", \"kibana:write\", \"kibana:create\", \"kibana:update\", \"kibana:delete\" ]\r\n   ```\r\n   and then when Kibana 7.0 adds a new `\"kibana:admin\"`, you find all the roles with `kibana:all` and add `kibana:admin` into the list.\r\n2. implement the _implies_ logic at read time, so if you want to check \"delete\" access, you need to ask: \r\n   ```\r\n   GET /_xpack/security/user/_has_privileges\r\n   {\r\n       \"custom\": [ \"kibana:all\", \"kibana:write\", \"kibana:delete\" ]\r\n   }\r\n   ```\r\n   and then the user has \"delete\" if it any of those privileges are true.\r\n3. try and solve it with patterns instead of names. Instead of storing `\"kibana:all\"`, you store `\"kibana:*\"` and \"write\" becomes `\"kibana:write/*` and delete is `\"kibana:write/delete\"`. Then ES can handle the `all` implies `write` implies `delete` logic by evaluating Automata, which we already support. But it means roles have seemingly artibrary magic patterns in them, and every kibana privilege needs to be planned out to fit into a perfect tree.\r\n\r\nAll of those end up trying to replicate functionality that ES already has for cluster and index privileges, because we treat those privileges as objects rather than strings.\r\n\r\nWe can do that for custom privileges, but it requires creating a full API to CRUD a custom privilege, and it means that resolving a user's custom privileges depends on reading them in from security index, so it's not just implementation effort, it's also runtime complexity.\r\nBut it would mean you could do something like\r\n\r\n```\r\nPUT /_xpack/security/privilege/kibana:all\r\n{   \"actions\": [ \"kibana:*\" ] }\r\n\r\nPUT /_xpack/security/privilege/kibana:read\r\n{   \"actions\": [ \"kibana:read/*\" ] }\r\n\r\nPUT /_xpack/security/privilege/kibana:write\r\n{   \"actions\": [ \"kibana:write/*\" ] }\r\n\r\nPUT /_xpack/security/privilege/kibana:delete\r\n{   \"actions\": [ \"kibana:write/delete/*\" ] }\r\n```\r\n\r\nAnd then \r\n```\r\nGET /_xpack/security/user/_has_privileges\r\n{\r\n    \"custom\": [ \"kibana:delete\" ]\r\n}\r\n```\r\nwould work correctly for users with \"all\", \"write\" or \"delete\"  \r\nas would\r\n```\r\nGET /_xpack/security/user/_has_privileges\r\n{\r\n    \"custom\": [ \"kibana:delete/dashboard\" ]\r\n}\r\n```\r\n\r\n_I've elected to use a tree based model for custom actions there because it's worked well for ES, and it seems logical to do the same thing for custom privileges if we go down the _pre-defined objects_ path, but it's certainly open for discussion._\r\n\r\n### privileges on resources\r\n\r\nCluster privileges are all or nothing - you have \"monitor\" for the whole cluster, or none of it.\r\nIndex privileges are tied to a resource - you have \"read\" for index-a, and \"write\" for index-b, but nothing on \"index-c\".\r\n\r\nI can make custom privileges work like cluster privileges, or like index privileges (with the latter being added complexity).\r\nModeling a whole-application permission with a resource-bound privilege is easy, you can just assign the `*` resource and it will behave correctly (although it's could lead to confusion with customers).\r\nIt's very hard to get resource-level permissions using non-resourced privileges, so if you _need_ them, ES should support them properly, but we get a simpler model if we can avoid it.\r\n\r\n## Side Note: Naming\r\n\r\nDuring my prototype, I found myself getting the words \"cluster\" and \"custom\" confused a lot in my typing. I'd like to name \"custom\" privileges something else. My suggestions would be (in order of my preference)\r\n- application\r\n- external\r\n- bespoke\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130723","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130723","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130723,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcyMw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-14T13:30:55Z","updated_at":"2018-04-25T01:22:53Z","author_association":"COLLABORATOR","body":"*Original comment by @epixa:*\n\ncc @kobelb as he'll be doing or coordinating most of the work around this stuff on Kibana's end.\r\n\r\n### Implementation\r\n\r\nKibana will need the ability to manage a role hierarchy, and I think from an end-user perspective it should behave similarly to ES.\r\n\r\n> it's also runtime complexity.\r\n\r\nOther than the existence of additional REST endpoints, how does the complexity of this implementation differ from the way ES privileges are handled today? It seems like we need to implement the complexity somewhere one way or another, so to me it's a question of whether we do it in ES or in Kibana, so understanding exactly what would be new complexity to ES is important here.\r\n\r\n> privileges on resources\r\n\r\nThis is a little tricky for Kibana. On the surface, we want kibana-wide privileges which are sort of like cluster level privileges. There wouldn't be any concept of \"write\" for .kibana but only \"read\" for .reporting, for example. You'd simply have the \"write\" privilege for all of kibana.\r\n\r\nThe challenge here is that some people run multiple different kibana apps on a single cluster.  I can only think of one way to support this: we do index-level permissions and then hang all of the permissions for a single kibana install off of its corresponding .kibana index. Kibana then always check privileges on its index regardless of whether it ultimately accesses somewhere else like .reporting.\r\n\r\nI'm open to ideas here, though!\r\n\r\n### Naming\r\n\r\nI don't have strong opinions about this, but if we do cluster-level privileges, calling them \"application\" privileges doesn't seem accurate. If we did index level privileges or if ES somehow tracked the notion of external applications, then application privileges would make a lot of sense to me.  External privileges seems fine either way.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130726","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130726","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130726,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcyNg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-14T16:03:44Z","updated_at":"2018-04-25T01:22:53Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nCourt's done a good job, like usual, summarizing Kibana's usage/needs. \r\n\r\n>The challenge here is that some people run multiple different kibana apps on a single cluster. I can only think of one way to support this: we do index-level permissions and then hang all of the permissions for a single kibana install off of its corresponding .kibana index. Kibana then always check privileges on its index regardless of whether it ultimately accesses somewhere else like .reporting.\r\n\r\nI think this makes sense, and I can't think of a better alternative. The only other option I can think of would be to keep the reporting custom privileges/roles in the .reporting index, but then we'd have to enumerate all of the application indices when allowing users to choose custom roles for users, making this process more complicated. I don't see any downsides to putting all of these roles/privileges in the .kibana index that corresponds to the .reporting index.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130728","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130728","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130728,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcyOA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-15T02:58:24Z","updated_at":"2018-04-25T01:22:53Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n> Other than the existence of additional REST endpoints, how does the complexity of this implementation differ from the way ES privileges are handled today?\r\n\r\nThe main difference is that the existing privileges are all fixed in code, and available with zero-lookup.\r\n\r\nAPI-defined privileges need to be stored in an index (technically there's other places, but it would be an index) which means we need to do I/O and async lookups and deal with unavailable shards, etc.\r\n\r\nAll of which is totally fine - we do it for users, roles, role mappings, etc etc. But it's overhead that we don't want to pay for if no one needs it.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130729","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130729","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130729,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDcyOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-15T13:07:30Z","updated_at":"2018-04-25T01:22:53Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\n> The main difference is that the existing privileges are all fixed in code, and available with zero-lookup.\r\n\r\n> API-defined privileges need to be stored in an index (technically there's other places, but it would be an index) which means we need to do I/O and async lookups and deal with unavailable shards, etc.\r\n\r\n> All of which is totally fine - we do it for users, roles, role mappings, etc etc. But it's overhead that we don't want to pay for if no one needs it.\r\n\r\nIt'll definitely be used by Kibana, and would provide a more consistent approach, so I'd also prefer it was added on the Elasticsearch side of things.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130731","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130731","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130731,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczMQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T06:58:08Z","updated_at":"2018-04-25T01:22:54Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n> The challenge here is that some people run multiple different kibana apps on a single cluster. I can only think of one way to support this: we do index-level permissions and then hang all of the permissions for a single kibana install off of its corresponding .kibana index. Kibana then always check privileges on its index regardless of whether it ultimately accesses somewhere else like .reporting\r\n\r\nIn my examples above, I name spaced all the Kibana privileges, e.g. `kibana:read` (or maybe `kibana:reporting` is more representative). I plan on enforcing that _external-bespoke-application_ privileges have an application prefix.\r\nIf you had some system for enforcing unique \"kibana-name\" across the kibana instances, the you could put the privileges into separate namespaces - `kibana-sales:reporting`, `kibana-soc:reporting` etc. \r\nI suspect that would get messy with renaming, and uniqueness. But it would make version upgrades easier (upgrading 1 kibana wouldn't change the privilege set for another kibana).\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130732","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130732","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130732,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczMg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T15:58:19Z","updated_at":"2018-04-25T01:22:54Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\nI think before we can answer a question about how to structure these privileges, we should make a big list of all the privileges that we need.  The answer should fall out of that","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130733","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130733","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130733,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczMw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T15:35:05Z","updated_at":"2018-04-25T01:22:54Z","author_association":"COLLABORATOR","body":"*Original comment by @epixa:*\n\nWe don't know all of the privileges we'll need, but I can give an example that includes some that we do know.  For the sake of not conflating our needs with any specific implementation, I'm just going to describe intentions here rather than actually giving each privilege a specific name. Nesting is represented with indents, so to give access to all children, you'd only need to give access to the parent.\r\n\r\n```\r\ncan access kibana (can they login and have a user profile?)\r\ndeveloper access (can they use dev tools?)\r\nmonitoring access (can they access monitoring?)\r\nreporting access (own reports only, may not actually be necessary if we apply OLS to reporting)\r\nmanagement access (can they access the management app?)\r\n    manage active user sessions\r\nadmin access\r\n    read global kibana data (e.g. user profiles, system health, installed plugins)\r\n    execute global kibana actions (e.g. changing settings)\r\n    reporting admin\r\n        can see all reports\r\n        can delete any report\r\n```\r\n\r\nThis is just a straw man. I can envision a totally different approach to privilege hierarchy that breaks down privileges by the [core_]plugins that they are relevant to alongside a single set of \"global\" admin level privileges. From an ES perspective, the two approaches are identical.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130734","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130734","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130734,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczNA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-20T16:31:36Z","updated_at":"2018-04-25T01:22:54Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\n> If you had some system for enforcing unique \"kibana-name\" across the kibana instances, the you could put the privileges into separate namespaces - kibana-sales:reporting, kibana-soc:reporting etc.\r\nI suspect that would get messy with renaming, and uniqueness. But it would make version upgrades easier (upgrading 1 kibana wouldn't change the privilege set for another kibana).\r\n\r\nJust to clarify how this will likely work, when we create a specific role that has the custom Kibana privileges it will be scoped to specific indices, as this is the way that Elasticsearch roles work currently.  By default we'd created the role that grants privileges to the default `.kibana` index. If the user wished to create a separate instance of Kibana that used a different index, they'd have to duplicate this role with the custom privileges and assign it to the different index. \r\n\r\nWithin Kibana's server, we'd be verifying that the user has a role with specific custom privileges on the index. By convention, we'd be requiring users to create these namespaces themselves.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130736","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130736","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130736,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczNg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-07T19:33:25Z","updated_at":"2018-04-25T01:22:54Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nAfter the discussion at engineering all hands, @legrego and I discussed how custom privileges on roles could be used by RBAC, and it's something we'd like to use. Additionally, the ability to specify the privilege tree would be greatly beneficial.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130737","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130737","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130737,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczNw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-08T03:37:36Z","updated_at":"2018-04-25T01:22:54Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n@kobelb I'll draft something about how I think you could model the privileges described in epixa's LINK REDACTED, and then we can flesh out the details.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130738","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130738","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130738,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczOA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-08T13:07:58Z","updated_at":"2018-04-25T01:22:55Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nFantastic, thanks @tvernum.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130739","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130739","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130739,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDczOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-13T20:18:31Z","updated_at":"2018-04-25T01:22:55Z","author_association":"COLLABORATOR","body":"*Original comment by @jaymode:*\n\nI had a chat today with @AlexP-Elastic @swallez @zanbel about the future use of x-pack security in ECE. One thing that they are looking at is using x-pack roles as the basis for authorization; currently they are only doing it at the role name if I understood correctly. I asked them to take a look at this issue and provide feedback if this is something that they would envision using.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130742","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130742","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130742,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-14T05:25:18Z","updated_at":"2018-04-25T01:22:55Z","author_association":"COLLABORATOR","body":"*Original comment by @jordansissel:*\n\n/cc @andrewvc @tsg @monicasarbu -- I don't think anyone from Logstash has chimed in yet about custom privilege needs. Background for Logstash: Having custom privileges may enable more powerful API in Logstash by allowing API calls to be authenticated by x-pack security in Elasticsearch. In the past, I have rejected requests for things like a step debugger, simulate api, etc, for lack of any security in the Logstash API.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130743","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130743","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130743,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-15T03:09:45Z","updated_at":"2018-04-25T01:22:55Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n@kobelb Here's the draft proposal I promised\r\n\r\n----\r\n\r\n### Background\r\n\r\nElasticsearch implements `Privileges` as a management layer on top of `Actions`. My proposal continues that model to custom privileges for 3 reasons:\r\n\r\n1. That's the code we have, and part of the reasoning for building this inside ES is to take advantage of what we already have (working, tested, maintained).\r\n2. It works quite well for ES\r\n3. It mimics some of the systems that I've had the best experiences with in previous roles. One of the common mistakes that happen in systems that try to model & manage security rights is that there is tight coupling between the concepts that are used to on the management side (features that exist for customers to work with) and the concepts that are used to verify a user's access at runtime.\r\n\r\nAn example of where that goes wrong is with a naive implementation of roles, whereby \r\n- Users have roles\r\n- The security layer checks for the existence of a role before granting access to a function.\r\n\r\nBut if the role is `security_manager`, then the same runtime checks will exist in _reset user's password_ , _create user_, and _grant role to user_.\r\nBut now if you want to implement an organisational separation where the Helpdesk can reset passwords, but only Security Operations can create users, you need break that apart and change the runtime checks to test for a new `reset_password` role that is separate to `setup_users`.\r\n\r\nThe problem is that the _runtime security checks_ really ought to be testing for access to \"functions\" (aka \"features\", \"capabilities\", or \"actions\")  rather than checking for specific roles.\r\n\r\nIn the ES security model, \"Privileges\" are on the user-management side, and \"Actions\" are on the runtime-checking side, and the linkage is that a Privilege defines all the Actions that it grants (with support for wildcards and regexp).\r\n\r\n### Actions\r\n\r\nSo, step 1 is to define the _Actions_ that represented the Kibana features that need security checks.\r\nAs a constraint, I'm proposing that \r\n1. All actions needs a namespace prefix that represents the app they belong to: e.g. `kibana:`\r\n2. All actions need to have a `/` in them (to distinguish between action names and privilege names).\r\n\r\nAs a recommendation, actions should exist in a logical tree, separated by `/` so that it is simple to use wildcards to imply a set of related actions.\r\n\r\nSo, I took a stab at some proposed actions from what @epixa described, and what I know of Kibana:\r\n```\r\nkibana:/login\r\nkibana:/tools/developer\r\nkibana:/tools/monitoring\r\nkibana:/tools/reporting\r\nkibana:/tools/management\r\nkibana:/manage/security/sessions\r\nkibana:/manage/foo/bar\r\nkibana:/admin/read/users/profile\r\nkibana:/admin/read/system/health\r\nkibana:/admin/read/system/plugins\r\nkibana:/admin/write/settings\r\nkibana:/admin/reporting/view\r\nkibana:/admin/reporting/delete\r\n```\r\nI don't really know what the difference between `manage` and `admin` is, but it seems to fall out of the proposed privileges, so I just ran with it.  \r\nPerhaps `/manage/security/session` needs to move to be `/admin/security/sessions`.\r\n\r\nThis means that:\r\n- someone with `kibana:/admin/*` has access to view user profiles, view system health, update settings, delete reports, etc.\r\n- someone with `kibana:/admin/read/*` has access to view user profiles & view system health, but cannot update settings or access reports.\r\n- someone with `kibana:/admin/read/system/*` has access to view system health & plugins, but cannot view user profiles, update settings or access reports.\r\n- _etc._\r\n\r\n### Privileges\r\n\r\nPrivileges are how we can group multiple action together into something that makes sense for a customer to work with.\r\n\r\nThe constraints I'm proposing for privileges names are:\r\n1. They needs a namespace prefix that matches the actions they imply (so Kibana privileges can only grant Kibana actions)\r\n2. Other than the prefix separator (`:`), they can only be composed of `[a-zA-Z0-9_.-]` (which distinguishes them from action names which _must_ contains a `/`) \r\n\r\nI don't really know what the right names/breakdown for these are, but I've taken a rough guess:\r\n\r\n```\r\n# A terrible name\r\nkibana:basic = [ \"kibana:/login\" ] \r\nkibana:all = [ \"kibana:/*\" ]\r\nkibana:developer = [ \"kibana:/login\" , \"kibana:/tools/developer\" ]\r\nkibana:monitoring = [ \"kibana:/login\" , \"kibana:/tools/monitoring\" ]\r\nkibana:reporting = [ \"kibana:/login\" , \"kibana:/tools/reporting\" ]\r\nkibana:management = [ \"kibana:/login\" , \"kibana:/tools/management\" ]\r\nkibana:security = [\r\n  \"kibana:/login\" , \"kibana:/tools/management\", \"kibana:/manage/security/*\"\r\n]\r\nkibana:monitor = [ \"kibana:/login\" , \"kibana:/admin/read/*\" ]\r\nkibana:configure = [\r\n  \"kibana:/login\" , \"kibana:/admin/read/*\", \"kibana:/admin/write/*\"\r\n]\r\nkibana:reporting_admin = [ \r\n  \"kibana:/login\" , \"kibana:/tools/reporting\", \"kibana:/admin/reporting/*\"\r\n]\r\n```\r\n\r\n### Runtime checks\r\n\r\nWhen you call the `_has_privileges` API, you'd typically pass in an action.\r\ne.g.\r\n```\r\nGET /_xpack/security/user/_has_privileges\r\n{\r\n   \"custom\": [ \"kibana:/admin/read/system/health\" ]\r\n}\r\n```\r\nIf a user has `kibana:all`, `kibana:monitor` or `kibana:configure` then this will return true, because those privileges all imply the `kibana:/admin/read/system/health` action.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130744","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130744","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130744,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-15T19:56:52Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nWhen discussing this functionality previously, I was pushing for us to be able to define these custom privileges on specific indexes in Elasticsearch so we could scope the privileges to a specific instance of Kibana by specifying the appropriate .kibana index. After further reflection, this approach of custom privileges on indieces isn't something that we wish to do any longer and instead we'd like to utilize the approach that @tvernum outlined here:\r\n\r\n> If you had some system for enforcing unique \"kibana-name\" across the kibana instances, the you could put the privileges into separate namespaces - kibana-sales:reporting, kibana-soc:reporting etc.\r\n\r\nFrom my understanding, using the namespacing approach would work nicely with your proposal. We'll have to figure out a way to get all of the custom privileges/actions into Elasticsearch, but that's a technical detail I'm sure we can figure out.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130745","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130745","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130745,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-21T19:30:39Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nI've been thinking through Kibana's usage of the custom privileges/actions, and how we'd initially create them and how upgrades would work. The way I'm envisioning it, the privileges themselves would be rather static and we'd only be adding privileges during a minor upgrade; however, I foresee us wanting to change the actions for the privileges themselves rather frequently as we add/remove/refactor functionality.\r\n\r\nThe following situation assumes that Kibana executes a series of PUT requests on startup to ensure the privileges and actions are persisted to Elasticsearch before we start up Kibana. The very first time that we deploy a version of Kibana that utilizes the custom privileges and actions, we can execute a PUT request for a custom privilege that is mapped to any number of actions. However, if we were to release a new version of Kibana that added to the list of actions, and one of the older instances of Kibana was to restart before we had a chance to upgrade all instances, it would overwrite the new list of actions.\r\n\r\nThe only thing that I've been able to come-up with to solve this situation is Elasticsearch's custom privileges/actions themselves implementing the concept of a \"version\" or the Kibana server code itself doing the privilege to action mappings (that way we can have multiple \"versions\" running concurrently). \r\n\r\nPerhaps the other teams that are considering utilizing the custom privileges/actions have an alternate solution?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130746","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130746","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130746,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0Ng==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-22T16:46:33Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\n>  (that way we can have multiple \"versions\" running concurrently).\r\n\r\nI think it would be a mistake to have two versions of kibana running against the same kibana index (and the same kibana privileges namespace).  Not just from the privileges side, but from the kibana objects side too.\r\n\r\nInstead, we should store a minimum version somewhere (perhaps kibana index? perhaps custom privileges namespace?), and earlier versions should not overwrite later versions.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130748","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130748","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130748,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0OA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-23T00:31:28Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n> Elasticsearch's custom privileges/actions themselves implementing the concept of a \"version\r\n\r\nWe can definitely support metadata on custom privileges - we have it for almost every other object type in security, so it's pretty easy to include here. But by itself that's not quite enough, you could still get a race condition if you always try and _update-privileges-unless-they-are-newer-than-my-version_.\r\nI think you want to do what we do for the `.security` index and store the version and then _update-privileges-if-older-than-the-kibana-version_. Then the race condition should only come into play if a user starts up both 6.3.0 and 6.4.0 against an index that still had 6.2.0 privileges. But then they're asking for trouble.  \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130749","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130749","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130749,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc0OQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-26T12:18:18Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\n> Instead, we should store a minimum version somewhere (perhaps kibana index? perhaps custom privileges namespace?), and earlier versions should not overwrite later versions.\r\n\r\nI like Clint's suggestion here of storing the version of Kibana in the `.kibana` index and using it to verify whether we should perform the startup-up logic that inserts the custom privileges/actions. I could also see it being beneficial to prevent older versions of Kibana continuing to interact with the `.kibana` index after any other migrations have occurred that could result in various other interesting race conditions.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130750","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130750","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130750,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc1MA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-26T12:29:17Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nAfter further thought, even if we were to check the version numbers against the .kibana index on startup, how would we ensure that multiple instances of Kibana with different versions wouldn't get past that check, both thinking they're the correct version, and then proceed to do the startup logic, leading to race conditions and inconsistent state?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130751","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130751","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130751,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc1MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-27T05:03:47Z","updated_at":"2018-04-25T01:22:56Z","author_association":"COLLABORATOR","body":"*Original comment by @tvernum:*\n\n> proceed to do the startup logic, leading to race conditions and inconsistent state\r\n\r\nMake your startup logic idempotent?\r\nI mean that as a serious answer. I don't imagine customers are running a dozen Kibana instances all pointing at the same `.kibana` index, so your best bet is to simply make it safe to run the startup logic twice. Then you get automatically retry-on-failure/timeout/etc.\r\n \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130752","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130752","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130752,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc1Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-27T11:54:29Z","updated_at":"2018-04-25T01:22:57Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\n> Make your startup logic idempotent?\r\n> I mean that as a serious answer. I don't imagine customers are running a dozen Kibana instances all pointing at the same .kibana index, so your best bet is to simply make it safe to run the startup logic twice. Then you get automatically retry-on-failure/timeout/etc.\r\n\r\nThat was the initial plan, until multiple versions came into play.\r\n\r\nAssuming the following situation where we're currently running Kibana 6.2, and then there are two \"new\" instances just coming up 6.3 and 6.4. If both 6.3 and 6.4 were to get past the update/check version and then both execute their series of idempotent PUTs of the privileges and actions, we end up in an inconsistent state.\r\n \r\nEven though this situation is rather unlikely, I'm not comfortable with it being possible if we're using the startup logic to essentially control who accesses what inside of Kibana.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130753","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130753","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130753,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc1Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-27T12:07:34Z","updated_at":"2018-04-25T01:22:57Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\nThe only way you're going to get around that is with locking, which then introduces the problem of refreshing and timing out the locks (combined with skewed clocks).\r\n\r\nI think we can safely put this into the realm of PEBKAC and just tell people not to do it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130755","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130755","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130755,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc1NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-27T12:38:19Z","updated_at":"2018-04-25T01:22:57Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nIf there isn't a good solution to synchronizing the privileges and actions into Elasticseach across versions, I'd rather keep the privileges in Elasticsearch but the actions that correspond to these privileges in Kibana source code. \r\n\r\nThe main advantage that we get from storing the actions and their mapping to privileges in Elasticsearch is the ability to call the \"hasPrivilege\" API in Elasticsearch and have ES handle the actions mapping to the actual granted privileges. However, if this comes at the expense of potentially allowing users to perform actions in Kibana that they aren't authorized to do so, it's really not worth it. \r\n\r\nIf we were talking about anything else besides security, accepting the PEBKAC would be just fine, but we're talking about authorization here. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384130757","html_url":"https://github.com/elastic/elasticsearch/issues/29820#issuecomment-384130757","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29820","id":384130757,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzMDc1Nw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-27T12:48:11Z","updated_at":"2018-04-25T01:22:57Z","author_association":"COLLABORATOR","body":"*Original comment by @kobelb:*\n\nWe might have a way to get around the mixed-versions problem... I believe there are restrictions in-place between which versions of Kibana can communicate with which versions of Elasticsearch, there's potential for us to utilize this functionality to prevent the scenarios that I've previously outlined. Let me track down whether this is a possible solution before anyone else wastes effort addressing this concern.","performed_via_github_app":null}]