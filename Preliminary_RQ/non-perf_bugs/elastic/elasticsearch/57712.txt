{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/57712","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57712/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57712/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57712/events","html_url":"https://github.com/elastic/elasticsearch/issues/57712","id":631402084,"node_id":"MDU6SXNzdWU2MzE0MDIwODQ=","number":57712,"title":"Conflicting behavior of data streams and querying for _aliases","user":{"login":"simitt","id":5555349,"node_id":"MDQ6VXNlcjU1NTUzNDk=","avatar_url":"https://avatars0.githubusercontent.com/u/5555349?v=4","gravatar_id":"","url":"https://api.github.com/users/simitt","html_url":"https://github.com/simitt","followers_url":"https://api.github.com/users/simitt/followers","following_url":"https://api.github.com/users/simitt/following{/other_user}","gists_url":"https://api.github.com/users/simitt/gists{/gist_id}","starred_url":"https://api.github.com/users/simitt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simitt/subscriptions","organizations_url":"https://api.github.com/users/simitt/orgs","repos_url":"https://api.github.com/users/simitt/repos","events_url":"https://api.github.com/users/simitt/events{/privacy}","received_events_url":"https://api.github.com/users/simitt/received_events","type":"User","site_admin":false},"labels":[{"id":1915711992,"node_id":"MDU6TGFiZWwxOTE1NzExOTky","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Data%20streams","name":":Core/Features/Data streams","color":"0e8a16","default":false,"description":""},{"id":1967496097,"node_id":"MDU6TGFiZWwxOTY3NDk2MDk3","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Core/Features","name":"Team:Core/Features","color":"fef2c0","default":false,"description":"Meta label for core/features team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-06-05T08:12:43Z","updated_at":"2020-07-03T04:53:32Z","closed_at":"2020-07-03T04:53:32Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\r\nGitHub is reserved for bug reports and feature requests; it is not the place\r\nfor general questions. If you have a question or an unconfirmed bug , please\r\nvisit the [forums](https://discuss.elastic.co/c/elasticsearch).  Please also\r\ncheck your OS is [supported](https://www.elastic.co/support/matrix#show_os).\r\nIf it is not, the issue is likely to be closed.\r\n\r\nFor security vulnerabilities please only send reports to security@elastic.co.\r\nSee https://www.elastic.co/community/security for more information.\r\n\r\nPlease fill in the following details to help us reproduce the bug:\r\n-->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`): master\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\nAs soon as some data stream exists, trying to query an alias with `GET /_alias/xyz` results in a `400` response. As pointed out by @martijnvg the request is equivalent to `GET /*/_alias/xyz` which includes all indices/alias/data streams for aliases with the name `xyz`. Based on currently implemented validations querying for an alias on data streams results in an error. \r\n\r\nThe way to prevent this issue is to query `GET xyz/_alias` instead. \r\n\r\nUnfortunately all beats and APM Server are currently impacted by this behavior. On startup or when running `beat setup` they send a request to check whether an alias exists or not in the above mentioned, conflicting way. As soon as any data stream exists, this results in an error and the beat can't start. While we could change the query for upcoming versions, this might still lead to compatibility issues with current beat versions. \r\n\r\n**Steps to reproduce**:\r\n\r\n1. Create index_template and send a document resulting in a data stream creation\r\n```\r\nPUT /_index_template/foo\r\n{\r\n  \"index_patterns\": [\"foo*\"],\r\n  \"priority\": 0,\r\n  \"data_stream\": {\r\n    \"timestamp_field\": \"@timestamp\"\r\n  },\r\n  \"composed_of\": []\r\n}\r\nPOST foo-test/_doc\r\n{\r\n  \"count\": 10\r\n}\r\n```\r\n\r\nCheck the data stream is created `GET _data_stream/*`\r\n\r\n2. Create an ILM alias\r\n```\r\nPUT bar-test-000001 \r\n{\r\n  \"aliases\": {\r\n    \"bar-test\":{\r\n      \"is_write_index\": true \r\n    }\r\n  }\r\n}\r\n```\r\n\r\n3. Check ILM alias with  \r\n* `GET /_alias/bar-test`: returns `400 - \"The provided expression [foo-test] matches a data stream, specify the corresponding concrete indices instead.\"`\r\n* `GET bar-test/_alias`: returns `200`, works as expected. \r\n\r\n\r\n","closed_by":{"login":"danhermann","id":22777892,"node_id":"MDQ6VXNlcjIyNzc3ODky","avatar_url":"https://avatars0.githubusercontent.com/u/22777892?v=4","gravatar_id":"","url":"https://api.github.com/users/danhermann","html_url":"https://github.com/danhermann","followers_url":"https://api.github.com/users/danhermann/followers","following_url":"https://api.github.com/users/danhermann/following{/other_user}","gists_url":"https://api.github.com/users/danhermann/gists{/gist_id}","starred_url":"https://api.github.com/users/danhermann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danhermann/subscriptions","organizations_url":"https://api.github.com/users/danhermann/orgs","repos_url":"https://api.github.com/users/danhermann/repos","events_url":"https://api.github.com/users/danhermann/events{/privacy}","received_events_url":"https://api.github.com/users/danhermann/received_events","type":"User","site_admin":false},"performed_via_github_app":null}