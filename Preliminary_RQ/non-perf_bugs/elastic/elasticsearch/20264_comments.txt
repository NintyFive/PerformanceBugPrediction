[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/243937753","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-243937753","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":243937753,"node_id":"MDEyOklzc3VlQ29tbWVudDI0MzkzNzc1Mw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-08-31T23:57:28Z","updated_at":"2016-08-31T23:57:28Z","author_association":"CONTRIBUTOR","body":"I'll take a look into adding this early next week.  I don't think it should be too difficult.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/243939029","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-243939029","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":243939029,"node_id":"MDEyOklzc3VlQ29tbWVudDI0MzkzOTAyOQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T00:06:00Z","updated_at":"2016-09-01T00:06:00Z","author_association":"CONTRIBUTOR","body":"Thinking out loud, will this asset be always on like groove's assert or\noptional like java's? What would that mean to scripts? It should probably\nthrow some exception/error that can't be caught be the scripts but is\ncaught by you so it doesn't take down the node or otherwise be weird. It'd\njust be a script error to the rest of elasticsearch?\n\nOn Aug 31, 2016 7:57 PM, \"Jack Conradson\" notifications@github.com wrote:\n\n> I'll take a look into adding this early next week. I don't think it should\n> be too difficult.\n> \n> â€”\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/elastic/elasticsearch/issues/20264#issuecomment-243937753,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AANLoiiDluada_fpbjN3HIYDjp21Z-_Lks5qlhTsgaJpZM4Jx3lY\n> .\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/243956854","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-243956854","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":243956854,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Mzk1Njg1NA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T02:13:19Z","updated_at":"2016-09-01T02:14:10Z","author_association":"MEMBER","body":"> It should probably throw some exception/error that can't be caught be the scripts but is caught by you so it doesn't take down the node or otherwise be weird.\n\nI think that's what `PainlessError` can be used for. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/243962925","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-243962925","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":243962925,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Mzk2MjkyNQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T03:01:09Z","updated_at":"2016-09-01T03:01:09Z","author_association":"CONTRIBUTOR","body":"@nik9000 @jasontedor Using `PainlessError` is probably the correct way to do this.  The only reservation I would have is if there is a reason for there to be a difference between something that is user generated versus something that is internal to Painless, but ultimately it would end up being identical code anyway if we made a second version of the error.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244117272","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-244117272","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":244117272,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDExNzI3Mg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T15:31:47Z","updated_at":"2016-09-01T15:31:47Z","author_association":"CONTRIBUTOR","body":"My instinct would be to make a `PainlessAssertionError` and a `PainlessExecutionError` (or something) and have them both extend `PainlessError`. But I wouldn't be surprised if my instincts were way off.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244149176","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-244149176","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":244149176,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDE0OTE3Ng==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T17:20:34Z","updated_at":"2016-09-01T17:20:47Z","author_association":"CONTRIBUTOR","body":"@nik9000 I'm good with this solution.  Thanks for the suggestion!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245451585","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245451585","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245451585,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTQ1MTU4NQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-07T23:34:13Z","updated_at":"2016-09-07T23:41:18Z","author_association":"CONTRIBUTOR","body":"Working through this -- after speaking with @rjernst ideally we need a way to disable asserts so they end up being no-ops.  I can see three ways of addressing options:\n1) add something to the beginning of Painless scripts that allows optional options such as <asserts=true,option=value,...> -- this is nice because it means minimal API changes to scripting in ES and easily allows new options to be added easily.\n2) Add options for scripts as both Settings and part of the REST calls.  More inline with current ES queries; however this is a lot of infrastructure work.\n3) Global settings that apply to all scripts.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245469889","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245469889","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245469889,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTQ2OTg4OQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T01:36:49Z","updated_at":"2016-09-08T01:36:49Z","author_association":"CONTRIBUTOR","body":"Yeah, I agree with the noop thing. Can it be done with the compilation\nparameters? I thought that was a thing you'd piped through a while back. I\nknow those still have to be piped through the API, but some of the\ninfrastructure is there?\n\nOn Sep 7, 2016 7:34 PM, \"Jack Conradson\" notifications@github.com wrote:\n\n> Working through this -- after speaking with @rjernst\n> https://github.com/rjernst ideally we need a way to disable asserts so\n> they end up being no-ops. I can see two ways of addressing options:\n> 1) add something to the beginning of Painless scripts that allows optional\n> options such as -- this is nice because it means minimal API changes to\n> scripting in ES and easily allows new options to be added easily.\n> 2) Add options for scripts as both Settings and part of the REST calls.\n> More inline with current ES queries; however this is a lot of\n> infrastructure work.\n> \n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245451585,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AANLotg8BxSFsjoWuwgJKrLKFtJ0ZCFwks5qn0n6gaJpZM4Jx3lY\n> .\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245648355","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245648355","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245648355,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTY0ODM1NQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T16:04:43Z","updated_at":"2016-09-08T16:04:43Z","author_association":"CONTRIBUTOR","body":"@nik9000 There is a <String,String> map in compile that we added to be able to remove a custom script engine that wasn't otherwise necessary.  There are a couple other issues that need to be solved depending on the route we go.  Global versus script-only options, are they all one or the other?  (Both even?) And, will there be any issues with caching since if we don't go with option one, something like asserts used versus being a no-op requires a re-compile.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245650073","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245650073","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245650073,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTY1MDA3Mw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T16:10:13Z","updated_at":"2016-09-08T16:10:13Z","author_association":"CONTRIBUTOR","body":"> something like asserts used versus being a no-op requires a re-compile.\n\nRight. That map probably needs to be part of the cache key in addition to any other plumbing we'd have to do if we used the map.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245711056","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245711056","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245711056,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTcxMTA1Ng==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T19:24:17Z","updated_at":"2016-09-08T19:24:17Z","author_association":"CONTRIBUTOR","body":"I really like the idea of being able to enable/disable asserts per script, eg with the options at the beginning of the script.  Typically you want to debug a single script, rather than turning on asserts for all scripts in your cluster.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245712517","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245712517","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245712517,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTcxMjUxNw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T19:29:16Z","updated_at":"2016-09-08T19:29:16Z","author_association":"CONTRIBUTOR","body":"> I really like the idea of being able to enable/disable asserts per script, eg with the options at the beginning of the script.\n\nRight. I was thinking something like:\n\n```\nGET hockey/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"script_score\": {\n        \"script\": {\n          \"lang\": \"painless\",\n          \"inline\": \"int total = 0; for (int i = 0; i < doc['goals'].length; ++i) { assert doc['goals'][i] < 1000: 'something'; total += doc['goals'][i]; } return total;\",\n          \"options\": {\n            \"assert\": true\n          }\n        }\n      }\n    }\n  }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245960927","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-245960927","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":245960927,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTk2MDkyNw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-09T16:13:16Z","updated_at":"2016-09-09T16:30:56Z","author_association":"CONTRIBUTOR","body":"I would prefer just adding the options to the beginning of the script because it requires no change to the REST API, and naturally fits the existing cache without modification.  This isolates the change to only Painless.\n\nI also understand there's a bit of plumbing for options (as I had done this work), but this was mostly so we could remove the customized Mustache engine and only have one.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246605554","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-246605554","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":246605554,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjYwNTU1NA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T08:02:01Z","updated_at":"2016-09-13T08:02:01Z","author_association":"CONTRIBUTOR","body":"> I would prefer just adding the options to the beginning of the script because it requires no change to the REST API, and naturally fits the existing cache without modification. This isolates the change to only Painless.\n\nto me this is all a question of how do we expose this. I had a chat with @jdconrad and @rjernst the other day about `asserts` and `println` in painless and there are a couple of concerns mainly around abuse. We are calling a script a gazillion times such that adding the slightest slow component has a huge impact. The design goal of this language was performance and security. I'm 100% convinced we should not make any compromises to this. We don't enable asserts in production code either unless the user specifies `-ea` to the JVM. We also don't log crazy stuff by default unless we are _debugging_ something. \nThat said, I really think we need to think about how to expose these _slow_ features. One scenario that I have in mind is to pass a `&debug_document={index}{type}/{id}` to the high level request and enable logging and assertions based on this:\n- we only apply this request to a single document which is what we should do anyway since it doesn't make sense to debug more than one?\n- it prevents people from _leaving it on_ in production and experiencing slowness (hard to misuse)\n- we would not even cache the compiled script but recompile every time so no need to add anything to the script or the json.\n- we would implicitly enable `asserts` and `println` logging (I hope with a limited buffer`512kb`maybe?)\n- we can transport this information with our thread context everywhere such a that we can leverage it else where. I was thinking about switching on logging per request in the future ie. just log all statements that this request hits (context wise) with debug. That would be a cool feature to have down the road.\n\nIf we'd do this we can develop these features in isolation, ie add asserts and logging to painless and expose it separately which I'd prefer.  \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246658422","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-246658422","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":246658422,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjY1ODQyMg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T11:58:11Z","updated_at":"2016-09-13T11:58:11Z","author_association":"CONTRIBUTOR","body":"> One scenario that I have in mind is to pass a &debug_document={index}{type}/{id} to the high level request and enable logging and assertions based on this:\n\nThis sounds like we'd need to add a new API for every script calling context. I think that dovetails well with the more strict registration of search contexts that came up in #20426 but I'm a bit weary of adding so many APIs.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/248055754","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-248055754","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":248055754,"node_id":"MDEyOklzc3VlQ29tbWVudDI0ODA1NTc1NA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-09-19T17:09:29Z","updated_at":"2016-09-19T17:09:29Z","author_association":"CONTRIBUTOR","body":"Discussed with @jdconrad, @s1monw , @rjernst, and @nik9000 - current plan is to add a `debug` flag to whichever APIs make sense.  The script would be recompiled  on each execution, enabling asserts (and maybe logging), and not cached. The search API would `terminate_after` 1 document, to ensure that you don't end up with millions of executions.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372783653","html_url":"https://github.com/elastic/elasticsearch/issues/20264#issuecomment-372783653","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20264","id":372783653,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Mjc4MzY1Mw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2018-03-13T19:08:30Z","updated_at":"2018-03-13T19:08:30Z","author_association":"CONTRIBUTOR","body":"Closing this as Debug.explain can serve this purpose.  Discussion around tools for Painless is proceeding in other issues.","performed_via_github_app":null}]