{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/6472","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6472/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6472/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6472/events","html_url":"https://github.com/elastic/elasticsearch/issues/6472","id":35521356,"node_id":"MDU6SXNzdWUzNTUyMTM1Ng==","number":6472,"title":"File-based in-memory index support in ES.","user":{"login":"markzlu","id":7863586,"node_id":"MDQ6VXNlcjc4NjM1ODY=","avatar_url":"https://avatars3.githubusercontent.com/u/7863586?v=4","gravatar_id":"","url":"https://api.github.com/users/markzlu","html_url":"https://github.com/markzlu","followers_url":"https://api.github.com/users/markzlu/followers","following_url":"https://api.github.com/users/markzlu/following{/other_user}","gists_url":"https://api.github.com/users/markzlu/gists{/gist_id}","starred_url":"https://api.github.com/users/markzlu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markzlu/subscriptions","organizations_url":"https://api.github.com/users/markzlu/orgs","repos_url":"https://api.github.com/users/markzlu/repos","events_url":"https://api.github.com/users/markzlu/events{/privacy}","received_events_url":"https://api.github.com/users/markzlu/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2014-06-11T20:08:28Z","updated_at":"2014-06-12T07:45:43Z","closed_at":"2014-06-12T07:45:43Z","author_association":"NONE","active_lock_reason":null,"body":"We used to use Lucene directly generate index and query the index. The use case is that we first use MmapDirectory the generate a index in a batch manner. After the index is generated and optimized, we deploy this index to a query fleet which use read-only MMapDirectory backed RAMDirectory (new RAMDirectory(new MMapDirectory(dir))) to serve the queries to optimize the query latency.\n\nOur index size (on one shard) is relatively small - at 1-3GB. We have observed significant (or very noticable) performance gains by using MMAPDirectory based RAMDirectory  instead of MMAPDirectory when query the index, the performance gain is 20% or much more in certain cases. And using G1 garbarge collector we are not seeing any issue with long pauses caused by GC.\n\nI've learned that ElasticSearch's 'memory' index is based on RAMDirectory but not reading the index from a file. And any update to this in-memory index is non-persistent.\n\nI think it's a worthwhile use case to support for ES. Use file-based store at batch indexing time, and switch to (optionally read-only) file-based memory store later at index querying time to optimize the query latency. I am actually wondering who would use a pure memory-based index store with the risk that you have to re-index every time the system crashed or restarted. This won't be practical especially when the index size is relatively large and takes time to re-index. There will be a loss of availability at time of re-indexing.\n\nCould ES to either slightly change the implementation of 'memory' store to read the index from the file-system initially when this index is initialized, it can keep the behavior of not persisting the updates thereafter? Or a new index type of 'file-based-memory'?\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}