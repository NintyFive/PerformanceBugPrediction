{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/2247","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2247/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2247/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2247/events","html_url":"https://github.com/elastic/elasticsearch/issues/2247","id":6830822,"node_id":"MDU6SXNzdWU2ODMwODIy","number":2247,"title":"Filtered query + type filter behaves differently than querying type directly","user":{"login":"jmwilson","id":655085,"node_id":"MDQ6VXNlcjY1NTA4NQ==","avatar_url":"https://avatars2.githubusercontent.com/u/655085?v=4","gravatar_id":"","url":"https://api.github.com/users/jmwilson","html_url":"https://github.com/jmwilson","followers_url":"https://api.github.com/users/jmwilson/followers","following_url":"https://api.github.com/users/jmwilson/following{/other_user}","gists_url":"https://api.github.com/users/jmwilson/gists{/gist_id}","starred_url":"https://api.github.com/users/jmwilson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jmwilson/subscriptions","organizations_url":"https://api.github.com/users/jmwilson/orgs","repos_url":"https://api.github.com/users/jmwilson/repos","events_url":"https://api.github.com/users/jmwilson/events{/privacy}","received_events_url":"https://api.github.com/users/jmwilson/received_events","type":"User","site_admin":false},"labels":[{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2012-09-12T20:30:51Z","updated_at":"2014-07-25T08:14:11Z","closed_at":"2014-07-25T08:14:11Z","author_association":"NONE","active_lock_reason":null,"body":"There are couple of issues behind the behavior I'm seeing.\n1. `filtered` query type + a `type` filter can return different results than a query directed to the type via the URL, if custom analyzers are used, mainly because of:\n2. the default analyzer for fields in an index, if not specified, depends on the order in which types were created\n\nReproducing the issue:\n\nLet's create an index with a custom analyzer:\n\n```\ncurl -XPUT http://localhost:9200/test -d '\n{\n  \"settings\" : {\n    \"index.analysis.filter.typeahead_ngram.max_gram\" : \"10\",\n    \"index.analysis.filter.typeahead_ngram.min_gram\" : \"1\",\n    \"index.analysis.filter.typeahead_ngram.type\" : \"edgeNGram\",\n    \"index.analysis.filter.typeahead_ngram.side\" : \"front\",\n    \"index.analysis.analyzer.name_prefix.tokenizer\" : \"standard\",\n    \"index.analysis.analyzer.name_prefix.filter.2\" : \"typeahead_ngram\",\n    \"index.analysis.analyzer.name_prefix.filter.0\" : \"standard\",\n    \"index.analysis.analyzer.name_prefix.filter.1\" : \"lowercase\",\n    \"index.analysis.analyzer.name_prefix.type\" : \"custom\"\n  }\n}'\n```\n\nNow create a couple of types, the order will matter:\n\n```\ncurl -XPUT http://localhost:9200/test/document/_mapping -d '\n{\n  \"document\": {\n    \"properties\": {\n      \"title\" : {\n        \"type\" : \"string\",\n        \"analyzer\" : \"standard\",\n        \"store\" : \"yes\"\n      }\n    }\n  }\n}'\n\ncurl -XPUT http://localhost:9200/test/user/_mapping -d '\n{\n  \"user\" : {\n    \"properties\" : {\n      \"title\" : {\n        \"type\" : \"string\",\n        \"analyzer\" : \"name_prefix\",\n        \"store\" : \"yes\"\n      }\n    }\n  }\n}'\n```\n\nInsert some data:\n\n```\ncurl -XPUT http://localhost:9200/test/user/1 -d '{\"title\": \"Will Jobs\"}'\ncurl -XPUT http://localhost:9200/test/user/2 -d '{\"title\": \"Steve Jobs\"}'\n```\n\nNow do a filtered query and limit the type:\n\n```\ncurl -XGET http://localhost:9200/test/_search?pretty=1 -d '\n{\n  \"query\": {\n    \"filtered\" : {\n      \"query\": {\n          \"text\": {\n            \"title\": {\n              \"operator\": \"and\",\n              \"query\": \"will jobs\"\n            }\n          }\n      },\n      \"filter\": {\n        \"type\": {\n          \"value\": \"user\"\n        }\n      }\n    }\n  },\n  \"fields\": [\n    \"title\"\n  ]\n}'\n```\n\nOutput:\n\n```\n{\n  \"took\" : 40,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 2,\n    \"max_score\" : 0.19178301,\n    \"hits\" : [ {\n      \"_index\" : \"test\",\n      \"_type\" : \"user\",\n      \"_id\" : \"1\",\n      \"_score\" : 0.19178301,\n      \"fields\" : {\n        \"title\" : \"Will Jobs\"\n      }\n    }, {\n      \"_index\" : \"test\",\n      \"_type\" : \"user\",\n      \"_id\" : \"3\",\n      \"_score\" : 0.19178301,\n      \"fields\" : {\n        \"title\" : \"Steve Jobs\"\n      }\n    } ]\n  }\n}\n```\n\nNow do a query restricted by type in the URL:\n\n```\ncurl -XGET http://localhost:9200/test/user/_search?pretty=1 -d '\n{\n \"query\": {\n    \"text\": {\n      \"title\": {\n        \"operator\": \"and\",\n        \"query\": \"will jobs\"\n      }\n    }\n  },\n  \"fields\": [\n    \"title\"\n  ]\n}'\n```\n\nResults:\n\n```\n{\n  \"took\" : 81,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : 1,\n    \"max_score\" : 0.5424442,\n    \"hits\" : [ {\n      \"_index\" : \"test\",\n      \"_type\" : \"user\",\n      \"_id\" : \"1\",\n      \"_score\" : 0.5424442,\n      \"fields\" : {\n        \"title\" : \"Will Jobs\"\n      }\n    } ]\n  }\n}\n```\n\nWhat happened? Looking at what happened with the analyzers tells the story:\n\n```\ncurl -XGET 'http://localhost:9200/test/_analyze?pretty=1&field=title' -d 'will jobs'\n{\n  \"tokens\" : [ {\n    \"token\" : \"jobs\",\n    \"start_offset\" : 5,\n    \"end_offset\" : 9,\n    \"type\" : \"<ALPHANUM>\",\n    \"position\" : 2\n  } ]\n}\n```\n\nSo the first query that did a `text` query on the `title` field got processed with the `standard` analyzer that is used by the field `document.title`. Since \"will\" is a stop word, it got removed in the analysis. We search only for the term \"jobs\" and get two results.\n\nWhat about if the type and field are specified?\n\n```\ncurl -XGET 'http://localhost:9200/test/_analyze?pretty=1&field=user.title' -d 'will jobs'\n{\n  \"tokens\" : [ {\n    \"token\" : \"w\",\n    \"start_offset\" : 0,\n    \"end_offset\" : 1,\n    \"type\" : \"word\",\n    \"position\" : 1\n  }, {\n    \"token\" : \"wi\",\n    \"start_offset\" : 0,\n    \"end_offset\" : 2,\n    \"type\" : \"word\",\n    \"position\" : 2\n  }, {\n    \"token\" : \"wil\",\n    \"start_offset\" : 0,\n    \"end_offset\" : 3,\n    \"type\" : \"word\",\n    \"position\" : 3\n  }, {\n    \"token\" : \"will\",\n    \"start_offset\" : 0,\n    \"end_offset\" : 4,\n    \"type\" : \"word\",\n    \"position\" : 4\n  }, {\n    \"token\" : \"j\",\n    \"start_offset\" : 5,\n    \"end_offset\" : 6,\n    \"type\" : \"word\",\n    \"position\" : 5\n  }, {\n    \"token\" : \"jo\",\n    \"start_offset\" : 5,\n    \"end_offset\" : 7,\n    \"type\" : \"word\",\n    \"position\" : 6\n  }, {\n    \"token\" : \"job\",\n    \"start_offset\" : 5,\n    \"end_offset\" : 8,\n    \"type\" : \"word\",\n    \"position\" : 7\n  }, {\n    \"token\" : \"jobs\",\n    \"start_offset\" : 5,\n    \"end_offset\" : 9,\n    \"type\" : \"word\",\n    \"position\" : 8\n  } ]\n}\n```\n\nNow we're using the `name_prefix` filter.\n\nIn the first query, the query is not being analyzed using the analyzer for `user.title` even though both the analyzer can be inferred from the index, type, and field from the query.\n\nAnother problem is that if the creation of the two types are reversed, things behave very differently! It appears the first type created sets the default analyzer for its field names. So if the `user` type is created before `document`, running the first example of the analyze API shows it's using the `name_prefix` analyzer instead of `standard`.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}