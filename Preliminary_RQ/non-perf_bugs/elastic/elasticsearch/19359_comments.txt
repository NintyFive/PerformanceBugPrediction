[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/232908194","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-232908194","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":232908194,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMjkwODE5NA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-07-15T09:44:22Z","updated_at":"2016-07-15T09:44:22Z","author_association":"CONTRIBUTOR","body":"Discussed in FixItFriday.  Given that:\n- this is a really advanced use case\n- it performs badly and would he hard (impossible?) to fix\n- it could be replaced by a similarity (or possibly a native Java script)\n\n... we're in favour of removing this functionality.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233300053","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233300053","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233300053,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzMwMDA1Mw==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T11:01:06Z","updated_at":"2016-07-18T11:01:06Z","author_association":"CONTRIBUTOR","body":"> it could be replaced by a similarity (or possibly a native Java script)\n\nWhen I wrote `scripts` I meant native script as well. I agree we can use a custom similarity instead of a script for scoring but in all other places where we can use scripts I do not see any way to for example access term frequencies even within native scripts. I at least used IndexLookup there as well. \nFor example I used it to get the term frequencies for text classification with naive bayes in an native script. I also used it to extract the term frequencies for a given list of terms to feed that information to an external tool.\n\n> when used within a script field and scroll it will be terribly slow because all the caching mechanisms to get for example document frequency are currently broken, see #17110\n\nTo clarify, #17110 applies to all lookups we have right now and is not just an inherent problem of just IndexLookup although it I think it hurts Index Lookup most. \nThere is one problem for IndexLookup that makes it slower than it was in 1.x even if not used within scan and scroll: IndexLookup currently computes document frequencies over the whole shard once per segment and not once per shard as it was on 1.x. While this decreases performance on 2.x it is not horrible and it is not impossible to fix that.\n\nAgain, I'd be willing to work on fixing the current problems or on an alternative implementation to IndexLookup but I would first like to hear why people think it is so important to remove it. Also, if there is a way to replace this functionality right now with a native script please point me to it, I might just be missing it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233358049","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233358049","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233358049,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzM1ODA0OQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T15:11:14Z","updated_at":"2016-07-18T15:11:14Z","author_association":"CONTRIBUTOR","body":"If we really want to use scripting to implement similarity, IMO the simplest approach would be:\n\n```\npublic class ExpressionSimilarity extends SimilarityBase {\n   public ExpressionSimilarity(String expression) { ... }\n   ...\n}\n```\n\nIt could just expose the simplified statistics of SimilarityBase via the ValueSource api, and should really be as fast as e.g. DFRSimilarity.\n\nIMO it doesn't necessarily make Similarity any easier, because the true challenges are elsewhere: its really hard to get this stuff right. Many published algorithms struggle with this: e.g. especially with ES not removing stopwords by default, actual distributions are very unlike the expected and can cause problems in some cases. Even the classic BM25 IDF had an issue with this, but its not the only instance.\n\nThe code comments in DFR basic models give examples of problems:\n\n```\n * WARNING: for terms that do not meet the expected random distribution\n * (e.g. stopwords), this model may give poor performance, such as\n * abnormally high or NaN scores for low tf values.\n```\n\nWhen possible we applied simple adjustments (e.g. BM25, DFR geometric model), but in other cases it is not obvious how or if things can even be fixed mathematically :) It is very expert stuff.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233363606","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233363606","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233363606,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzM2MzYwNg==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T15:28:55Z","updated_at":"2016-07-18T15:28:55Z","author_association":"CONTRIBUTOR","body":"++ to a scripted similarity (must be a fast script ie. expressions) \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233368546","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233368546","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233368546,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzM2ODU0Ng==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T15:44:25Z","updated_at":"2016-07-18T15:44:25Z","author_association":"CONTRIBUTOR","body":"@rmuir that works for the scoring aspect.  @brwe is also using these scripts to export term freq statistics for ML purposes.  That was the original purpose of this feature.  Any ideas how this part could be better implemented?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233378662","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233378662","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233378662,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzM3ODY2Mg==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T16:17:54Z","updated_at":"2016-07-18T16:17:54Z","author_association":"CONTRIBUTOR","body":"The only thing i can suggest is to see if we can avoid mixing all these concerns in one api. It sounds like we have our current scripting api trying to tackle 3 different concerns:\n- per-doc: (typical script field/script score)\n- per-term-per-doc: (Similarity)\n- per-term??? (ml-type stuff)\n  \n  Similarity is a per-term-per-doc api. Much other stuff like script-score functionality is per-doc api. These two are two different perspectives. Thats why i think e.g. ExpressionSimilarity would be simpler (i am playing around with it now), because it would be \"its own thing\", and removed from here. I think it will also be easier on the user, too.\n\n\"exporting frequencies for ML purposes\" isn't concrete enough for my understanding to know what would be needed (e.g. would it just be a proper per-term api or something more complicated?, would it go out to all shards and really return those correct numbers?), but it would be great to separate this too.\n\nI am suspicious of generic apis that claim to solve all ML problems.  Lets at least separate this concern from complex issues like term weighting and script-based ranking and fields, because its nothing like those two things, and those two things are nothing like each other :) \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233425296","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233425296","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233425296,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzQyNTI5Ng==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T19:01:16Z","updated_at":"2016-07-18T19:01:16Z","author_association":"CONTRIBUTOR","body":"> \"exporting frequencies for ML purposes\" isn't concrete enough for my understanding to know what would be needed (e.g. would it just be a proper per-term api or something more complicated?\n\nHere is what I did:\n- for a given list of terms, export per document the term frequencies as sparse vector (so for terms \"a\", \"b\", \"c\" you get something like [[0,2], [3,1]] if the doc is \"a c a a\" per document)\n- train some classifier outside elasticsearch\n- store the parameters back to elasticsearch somewhere\n- execute a native script that uses these parameters together with the term frequencies per document to get some classification going\n\nIn the export I used IndexLookup to get the frequencies for training documents. In the script execution I used the term frequencies for new documents to execute the classification. I hope that makes a little more sense. Not sure in how much detail I have to get here. \n\nBTW, this was a little bit of a hassle because in a way this is an intersection of terms in document and the list of terms I was interested in so I tried with a mixture of  fielddata and term vectors and IndexLookup. \nConceptually it seemed to me a similar problem to search just that the number of terms is huge and the \"score\" that is outputted can be several numbers as well. But I never got to convert that vague feeling into code.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233425694","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233425694","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233425694,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzQyNTY5NA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T19:02:40Z","updated_at":"2016-07-18T19:02:40Z","author_association":"CONTRIBUTOR","body":"i dont understand how this really scales. if the term is common it may need to transfer millions and billions of things across the wire.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233428401","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233428401","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233428401,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzQyODQwMQ==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T19:12:52Z","updated_at":"2016-07-18T19:12:52Z","author_association":"CONTRIBUTOR","body":"it would not be slower than scroll in general I think. or what do you mean?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233467720","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-233467720","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":233467720,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzQ2NzcyMA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T21:41:00Z","updated_at":"2016-07-18T21:41:00Z","author_association":"CONTRIBUTOR","body":"It doesn't lend itself to a top-N approach in any way, hence i think it makes sense to try to divorce it from the search API.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234214135","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234214135","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234214135,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIxNDEzNQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T10:18:17Z","updated_at":"2016-07-21T10:18:17Z","author_association":"CONTRIBUTOR","body":"so I think we are on the right path here, IMO what we are missing is:\n- a way to script similarities (that would be awesome)\n- a way to script a scorer\n\nlemme explain the latter, from my perspective the last remaining purpose of the index lookup was to have full control over the linear combination of the individual term scores. Now if you think about it its really a way to change what _BooleanScorer_ does but with added flexibility? I think if we add a dedicated query that calls a script to calculate the linear combination for each subqueries score we are at the point that @brwe has everything she needs. the input of the script can simply be a double array holding all score of the subqueries where the index is their ordinal of how they are specified?  \n\n@brwe @rmuir does this make sense to you?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234215685","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234215685","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234215685,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIxNTY4NQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T10:25:49Z","updated_at":"2016-07-21T10:25:49Z","author_association":"CONTRIBUTOR","body":"Why does a user need to change how scores are combined? Mathematically what else make sense? Users often ask for multiply because they think they want that, but that is supported via sum of logs.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234220044","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234220044","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234220044,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIyMDA0NA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T10:48:44Z","updated_at":"2016-07-21T10:48:44Z","author_association":"CONTRIBUTOR","body":"I think, and please correct me if I am wrong @brwe that the context here is for instance something like logistic regression where your score is the result of some sigmod function (I know negative scores might be a problem here but there is a way to model that). The result of this could be used in aggregations to see how many docs fall into a certain class. I am really just making things up but I can totally see the value for experiments like this.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234221085","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234221085","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234221085,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIyMTA4NQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T10:54:22Z","updated_at":"2016-07-21T10:54:22Z","author_association":"CONTRIBUTOR","body":"As i stated above, I don't think we should piggyback such things on our script search api... sorry, its not search to me at all.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234223491","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234223491","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234223491,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIyMzQ5MQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T11:06:56Z","updated_at":"2016-07-21T11:06:56Z","author_association":"CONTRIBUTOR","body":"> As i stated above, I don't think we should piggyback such things on our script search api... sorry, its not search to me at all.\n\nI think you misunderstood my comments, I am suggestion to remove the IndexLookup and extend ScirptQuery to also score. Since we already have a scorer on `LeafSearchScript` the script can just access it and call `Scorer#getChildren` and do whatever it wants? I mean all we need to guarantee is that the iteration order of this method is consistent?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234229126","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234229126","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234229126,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIyOTEyNg==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T11:37:19Z","updated_at":"2016-07-21T11:37:19Z","author_association":"CONTRIBUTOR","body":"I sense my concerns may not have been communicated very well either.\n\nScoring APIs (in both lucene and elasticsearch) are a sensitive part of the system, a real hotspot. Can we please not try to wedge things like document classification into the scoring system? It has a difficult job already: serious challenges especially in ES (e.g. very slow scripting language as the default).\n\nIf we want to support document classification, lets do that with some other API. I don't think it makes sense to use the search datastructures, algorithms, and apis for this problem: but if we want to do that, let's please make that an implementation detail, but expose a very simple api to the user.\n\nAs far as things being \"flexible\", it scares me to hear that term. Please, none of this is personal to any\ndevelopers, but this is like a raging infection in the elasticsearch codebase. There are far too many overcomplicated abstractions in this codebase, and despite that fact, a significant portion of our developers time is on refactoring. In my opinion, those abstractions are not helping out, instead they just make things complicated.\n\nI really like how the linux kernel explains the problem[1](you kinda gotta translate the gist of this from C to Java or REST api or whatever is relevant):\n\n```\n* Abstraction layers\n\nComputer Science professors teach students to make extensive use of\nabstraction layers in the name of flexibility and information hiding.\nCertainly the kernel makes extensive use of abstraction; no project\ninvolving several million lines of code could do otherwise and survive.\nBut experience has shown that excessive or premature abstraction can be\njust as harmful as premature optimization.  Abstraction should be used to\nthe level required and no further.\n\nAt a simple level, consider a function which has an argument which is\nalways passed as zero by all callers.  One could retain that argument just\nin case somebody eventually needs to use the extra flexibility that it\nprovides.  By that time, though, chances are good that the code which\nimplements this extra argument has been broken in some subtle way which was\nnever noticed - because it has never been used.  Or, when the need for\nextra flexibility arises, it does not do so in a way which matches the\nprogrammer's early expectation.  Kernel developers will routinely submit\npatches to remove unused arguments; they should, in general, not be added\nin the first place.\n```\n\n[1] https://www.kernel.org/doc/Documentation/development-process/4.Coding\n\nSo instead of making the search api \"flexible\" enough to also do document classification, and instead of trying to make it \"flexible\" enough to support vague, ill-defined concepts like \"ML purposes\", I would prefer instead we added smaller, simpler concrete apis that address those needs. For example an API around document classification could be added that is very simple and easy to use, and has minimal parameters. Because its been separated from scoring, its no longer stuck with a priority queue + DAAT approach, it can use whatever datastructures it wants.\n\nThe search api already has enough problems, its already doing enough \"dark magic\", its already overwhelmed. Can we please separate this stuff?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234237284","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234237284","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234237284,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDIzNzI4NA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T12:21:06Z","updated_at":"2016-07-21T12:21:06Z","author_association":"CONTRIBUTOR","body":"I am 100% behind that statement. I think we should try to simplify the entire scripting API etc. let detach this from vague statements and look at issues like https://github.com/elastic/elasticsearch/issues/17116 it's pretty much what I described above and if we say we go with #17116 to allow this flexibility on that issue then we can just move on. But apparently the ability to combine scores is something users would like to have. I am more than in favor to simplify the script API if we can to a minimum and use higher level APIs like in that issue to add flexibility that doesn't cost much of performance here\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234249010","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234249010","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234249010,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDI0OTAxMA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T13:13:54Z","updated_at":"2016-07-21T13:13:54Z","author_association":"CONTRIBUTOR","body":"I don't think we should do #17116 either. Instead of multiplying users can use the sum of logs.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234311173","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234311173","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234311173,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDMxMTE3Mw==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T16:38:55Z","updated_at":"2016-07-21T16:38:55Z","author_association":"CONTRIBUTOR","body":"> For example an API around document classification could be added that is very simple and easy to use, and has minimal parameters. Because its been separated from scoring, its no longer stuck with a priority queue + DAAT approach, it can use whatever datastructures it wants.\n\nJust to be sure: You mean an actual api like \n\nGET index/type/doc_id/_classify\n\n?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234319737","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234319737","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234319737,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDMxOTczNw==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T17:10:25Z","updated_at":"2016-07-21T17:10:25Z","author_association":"CONTRIBUTOR","body":"Sorry, I don't really have a concrete design for how classification should work: which algorithms are best or how we should expose it in our APIs.\n\nJust hypothetically, i would think of it as a document enrichment type of thing, so maybe we start from say an ingest processor or whatever, that adds a new field (the assigned \"classification\") to the document, and then figure out from there how it should work. That would imply classifying documents before they are indexed at all, based on some model, whatever that is. \n\nMaybe that model is something complicated, and based on a bunch of index statistics from a separate index (\"the training set\"). Maybe its just a decision tree based on a big pile of regular expressions. Or maybe its best to leave tasks outside of ES to tools like nltk. Honestly, I have no idea :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234328977","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234328977","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234328977,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDMyODk3Nw==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T17:43:52Z","updated_at":"2016-07-21T17:43:52Z","author_association":"CONTRIBUTOR","body":"> Maybe that model is something complicated, and based on a bunch of index statistics from a separate index (\"the training set\"). Maybe its just a decision tree based on a big pile of regular expressions. Or maybe its best to leave tasks outside of ES to tools like nltk. \n\nOk, so here is another approach: Say we had a \"scripting language\" that can do nothing but read model parameters for trained models (trees, logistic regression, whatever) that come from somewhere external  and then execute the read model on a document.\nSo it would not really a scripting language because the \"scripts\" are really just parameters and the execution is hard coded but it would use the scripting mechanism so it can be used in aggregation, ingest etc. \nWould that be far away enough from search? Could we make it so that at least this \"scripting language\" would have access to term statistics? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234389763","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234389763","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234389763,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDM4OTc2Mw==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-21T21:28:40Z","updated_at":"2016-07-21T21:28:40Z","author_association":"CONTRIBUTOR","body":"I don't understand the desire to use the scripting mechanism as the way to do this. Why wouldn't we just have the proper hooks in those apis (e.g. add an aggregation component, add an ingest component) to do this instead? e.g. bundled as a plugin.\n\nDoing it with the scripting api (and plumbing it via scoring) adds unnecessary complexity and pressure to those components.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234506387","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234506387","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234506387,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDUwNjM4Nw==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-22T10:06:45Z","updated_at":"2016-07-22T10:06:45Z","author_association":"CONTRIBUTOR","body":"ok given that we should scoring for scoring ;) and we have some really strong arguments towards not mixing concerns while rather minor arguments towards opening things up more for satisfy the usecase of _ML_ or _classification_ we should remove this API without a full replacement. I would still like us to explore the way of a scripted similarity, I think this could help quite a bit for experimenting with scoring. @rmuir WDYT?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234516722","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234516722","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234516722,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDUxNjcyMg==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-22T11:03:41Z","updated_at":"2016-07-22T11:03:41Z","author_association":"CONTRIBUTOR","body":"> ok given that we should scoring for scoring ;) and we have some really strong arguments towards not mixing concerns while rather minor arguments towards opening things up more for satisfy the usecase of ML or classification we should remove this API without a full replacement. I would still like us to explore the way of a scripted similarity, I think this could help quite a bit for experimenting with scoring. @rmuir WDYT?\n\nAre users of ES typically information retrieval researchers? I can't think of who else would need that.\n\nLike i said: if we really truly need it, then ExpressionSimilarity is the way to do it. However, I feel like all the time i would invest in such a feature may be wasted: nobody would ever use it :( \n\nIt really should not be so hard to remove things in elasticsearch. This issue is a classic example! That's why elasticsearch has half a million lines of code.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234532069","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234532069","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234532069,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDUzMjA2OQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-22T12:35:09Z","updated_at":"2016-07-22T12:35:09Z","author_association":"CONTRIBUTOR","body":"> Like i said: if we really truly need it, then ExpressionSimilarity is the way to do it. However, I feel like all the time i would invest in such a feature may be wasted: nobody would ever use it :(\n\ncan it be a lucene feature,  I could see some folks use it...\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234533130","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234533130","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234533130,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDUzMzEzMA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-07-22T12:40:34Z","updated_at":"2016-07-22T12:40:34Z","author_association":"CONTRIBUTOR","body":"well to begin with I think lets remove the IndexLookup and then we can have individual issues about improvements and then we can still decide if it makes sense to add such a similarity.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234668747","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234668747","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234668747,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDY2ODc0Nw==","user":{"login":"softwaredoug","id":629060,"node_id":"MDQ6VXNlcjYyOTA2MA==","avatar_url":"https://avatars0.githubusercontent.com/u/629060?v=4","gravatar_id":"","url":"https://api.github.com/users/softwaredoug","html_url":"https://github.com/softwaredoug","followers_url":"https://api.github.com/users/softwaredoug/followers","following_url":"https://api.github.com/users/softwaredoug/following{/other_user}","gists_url":"https://api.github.com/users/softwaredoug/gists{/gist_id}","starred_url":"https://api.github.com/users/softwaredoug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/softwaredoug/subscriptions","organizations_url":"https://api.github.com/users/softwaredoug/orgs","repos_url":"https://api.github.com/users/softwaredoug/repos","events_url":"https://api.github.com/users/softwaredoug/events{/privacy}","received_events_url":"https://api.github.com/users/softwaredoug/received_events","type":"User","site_admin":false},"created_at":"2016-07-22T22:06:50Z","updated_at":"2016-07-22T22:06:50Z","author_association":"CONTRIBUTOR","body":"Just want to chime into this issue as a practioner. I have used term statistics in scripts and find them  very handy. The use case that comes to mind is a small collection, hosted somewhere that doesn't allow plugins, that cares about relevance. \n\nSure In a larger scale system, scripting isn't a great answer. But many folks do search at a smaller scale. These orgs look at you sideways when you start talking about maintaining custom scorers and similarities for them. They are terrified of Java and Lucene. And they don't want to keep having to hire someone to maintain even a simple similarity. \n\nSecond Elasticsearch seems to be being used as a general purpose matching/ranking system in analytics solutions, not strictly a search engine. I'm not just speaking from my own experience at OSC, but from Elastics own marketing. Often when doing weird things like searching DNA or the predicting weather or building recommenders what a \"term\" is becomes a data modeling exercise. \n\nIn these cases erring towards a flexible \"frameworky\" approach IMO works best. Allowing several options to perform arbitrary scoring computations is really important for these users. I don't think the flexibility argument is merit less based on the very cool things I see folks doing in Lucene. \n\nSo my bias as a practitioner, not as someone steeped in the ES code base, would be to caution you against any change that didn't have an alternative for the folks that don't want to or can't maintain Java plugins. And something that let the non text use cases continue to do well with Elasticsearch. \n\nI really like the idea of scripting scorers and similarities. That removes a lot of Java code and adds a ton for relevance use cases. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234683946","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234683946","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234683946,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDY4Mzk0Ng==","user":{"login":"softwaredoug","id":629060,"node_id":"MDQ6VXNlcjYyOTA2MA==","avatar_url":"https://avatars0.githubusercontent.com/u/629060?v=4","gravatar_id":"","url":"https://api.github.com/users/softwaredoug","html_url":"https://github.com/softwaredoug","followers_url":"https://api.github.com/users/softwaredoug/followers","following_url":"https://api.github.com/users/softwaredoug/following{/other_user}","gists_url":"https://api.github.com/users/softwaredoug/gists{/gist_id}","starred_url":"https://api.github.com/users/softwaredoug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/softwaredoug/subscriptions","organizations_url":"https://api.github.com/users/softwaredoug/orgs","repos_url":"https://api.github.com/users/softwaredoug/repos","events_url":"https://api.github.com/users/softwaredoug/events{/privacy}","received_events_url":"https://api.github.com/users/softwaredoug/received_events","type":"User","site_admin":false},"created_at":"2016-07-22T23:54:43Z","updated_at":"2016-07-22T23:54:43Z","author_association":"CONTRIBUTOR","body":"Ive seen it mentioned a few times here uncertainty why why users should need to control how scores are combined. I think it's vital. Lucene based search has been successful compared to commercial offerings precisely because of how much you can customize its behavior. And the more of that I can do outside of Java, the easier it is for me to implement that power. (Otherwise these days I can just go plug in algolia or something and be done with it.)\n\nFor example a \"term\" in Lucene world as I'm sure everyone has seen may have nothing to do with text. It might have something to do with product affinities in a recommendation system. Or ngrams of DNA. Or identifiers in some taxonomy. Or something even more exotic. And who knows then what the term stats around it are supposed to mean and how they might be used? In this context, the more control one can have before having to deal with custom plugins the more successful ES can be at solving the meaty search probs out there. \n\nA high quality ES solution is still only as free as your time is (or as powerful as your time investment is). So while I do see more \"IR researchers\" in pure Lucene and Solr land, there's still quite a few using Elasticsearch precisely because it hits a nice sweet spot between control and ease of use compared to Solr or pure Lucene. \n\nSo again :+1: to scripted scorers and similarities. I see a lot of power there. \n\n(PS I'm just trying to offer a \"outside\" practitoners devils advocate for your efforts. Totally get you guys have a large complex code base to maintain and can empathize with the need to tidy things up and avoid bugs. Keep up the great work! :) )\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/234949848","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-234949848","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":234949848,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNDk0OTg0OA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-07-25T13:16:42Z","updated_at":"2016-07-25T13:16:42Z","author_association":"CONTRIBUTOR","body":"> For example a \"term\" in Lucene world as I'm sure everyone has seen may have nothing to do with text. It might have something to do with product affinities in a recommendation system. Or ngrams of DNA. Or identifiers in some taxonomy. Or something even more exotic. And who knows then what the term stats around it are supposed to mean and how they might be used? In this context, the more control one can have before having to deal with custom plugins the more successful ES can be at solving the meaty search probs out there.\n\nSorry this argument just does not hold. For example BM25 tells us exactly how to handle such \"non-textual relevance features\". Please read it. \n\nhttp://www.staff.city.ac.uk/~sb317/papers/foundations_bm25_review.pdf\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/235027422","html_url":"https://github.com/elastic/elasticsearch/issues/19359#issuecomment-235027422","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19359","id":235027422,"node_id":"MDEyOklzc3VlQ29tbWVudDIzNTAyNzQyMg==","user":{"login":"softwaredoug","id":629060,"node_id":"MDQ6VXNlcjYyOTA2MA==","avatar_url":"https://avatars0.githubusercontent.com/u/629060?v=4","gravatar_id":"","url":"https://api.github.com/users/softwaredoug","html_url":"https://github.com/softwaredoug","followers_url":"https://api.github.com/users/softwaredoug/followers","following_url":"https://api.github.com/users/softwaredoug/following{/other_user}","gists_url":"https://api.github.com/users/softwaredoug/gists{/gist_id}","starred_url":"https://api.github.com/users/softwaredoug/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/softwaredoug/subscriptions","organizations_url":"https://api.github.com/users/softwaredoug/orgs","repos_url":"https://api.github.com/users/softwaredoug/repos","events_url":"https://api.github.com/users/softwaredoug/events{/privacy}","received_events_url":"https://api.github.com/users/softwaredoug/received_events","type":"User","site_admin":false},"created_at":"2016-07-25T17:44:08Z","updated_at":"2016-07-25T17:44:08Z","author_association":"CONTRIBUTOR","body":"Great article Rob, I believe I've read it in the past. BM25 is pretty awesome for what it's built for (document search)\n\nThe area you cite provides a very general framework for a linear combination of scalars. It says\n\n> Here are some Vi functions that we have used with success in the past for different features \n> (lists sigmoid, log, etc)\n\nThe linear combination looks like the cosine similarity summation under the Bool query. But most of Elasticsearch's documentation (and my experience) points to multiplying text relevance by these scalar factors instead of trying to treat them as another \"boolean clause\" to optimize for as the first tool to reach for. Indeed, this is what Elasticsearch's function_score_query does by default. It's likely both approaches have their applications.\n\nAdditionally, like I said BM25 is proven at general document search. This is only one application of Elasticsearch. I still believe Lucene-based search's sweet spot is as a framework in that (1) it's focus is on deep configurability (2) it offers a variety of ways of thinking about and configure \"relevance\". People want to use Elasticsearch to build recommendations systems, perform image search, and search chemical structures. They have something unique to what they're doing, that's why they didn't grab an off the shelf product that did what they wanted.\n\nI don't want to derail this thread. I'm just trying to offer my support & perspective on where I see Elasticsearch in the marketplace when people are making the \"buying decision.\" Little features like tf in scripts seem like a small thing, but in some sense its these little bits of configurability that sell me Lucene-based search as opposed to a commercial \"plug and play\" model where all the decisions are made for me.\n","performed_via_github_app":null}]