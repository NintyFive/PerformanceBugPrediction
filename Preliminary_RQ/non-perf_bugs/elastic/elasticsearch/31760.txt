{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/31760","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31760/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31760/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31760/events","html_url":"https://github.com/elastic/elasticsearch/issues/31760","id":337895586,"node_id":"MDU6SXNzdWUzMzc4OTU1ODY=","number":31760,"title":"datehistogram sometimes ignores format when searching on multiple indexes","user":{"login":"plaarakkers","id":7659612,"node_id":"MDQ6VXNlcjc2NTk2MTI=","avatar_url":"https://avatars0.githubusercontent.com/u/7659612?v=4","gravatar_id":"","url":"https://api.github.com/users/plaarakkers","html_url":"https://github.com/plaarakkers","followers_url":"https://api.github.com/users/plaarakkers/followers","following_url":"https://api.github.com/users/plaarakkers/following{/other_user}","gists_url":"https://api.github.com/users/plaarakkers/gists{/gist_id}","starred_url":"https://api.github.com/users/plaarakkers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/plaarakkers/subscriptions","organizations_url":"https://api.github.com/users/plaarakkers/orgs","repos_url":"https://api.github.com/users/plaarakkers/repos","events_url":"https://api.github.com/users/plaarakkers/events{/privacy}","received_events_url":"https://api.github.com/users/plaarakkers/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"assignees":[{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2018-07-03T13:18:47Z","updated_at":"2018-11-13T09:36:43Z","closed_at":"2018-11-13T09:36:43Z","author_association":"NONE","active_lock_reason":null,"body":"**Elasticsearch version** (Version: 6.3.0 (docker image based on docker.elastic.co/elasticsearch/elasticsearch:6.3.0)):\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (client build 1.8.0_171-b11):\r\n\r\n**OS version** (Linux 4.15.0-23-generic):\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nThe [date histogram](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-datehistogram-aggregation.html) ignores the format of the aggregation or date field\r\nif the search is performed on multiple indexes where the alphabetically first index does not contain the date field. This results in an unexpected value for the key_as_string in the bucket\r\n\r\n\r\n**Steps to reproduce**:\r\nI created a unit test to reproduce the issue. This uses the following mappings:\r\nsearchIndexWithDateField.json\r\n```\r\n{\r\n  \"doc\": {\r\n    \"dynamic\": \"strict\",\r\n    \"properties\": {\r\n      \"title\": {\r\n        \"type\": \"keyword\",\r\n        \"index\": false\r\n      },\r\n      \"dateField\": {\r\n        \"type\": \"date\",\r\n        \"format\": \"yyyy-MM-dd\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nsearchIndexWithoutDateField.json\r\n```\r\n{\r\n  \"doc\": {\r\n    \"dynamic\": \"strict\",\r\n    \"properties\": {\r\n      \"title\": {\r\n        \"type\": \"keyword\",\r\n        \"index\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe unit test itself uses version 6.3.0 for the java client maven dependencies:\r\n```\r\npackage nl.gellygwin;\r\n\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.elasticsearch.action.search.SearchResponse;\r\nimport org.elasticsearch.client.transport.TransportClient;\r\nimport org.elasticsearch.common.settings.Settings;\r\nimport org.elasticsearch.common.transport.TransportAddress;\r\nimport org.elasticsearch.common.xcontent.XContentType;\r\nimport org.elasticsearch.search.aggregations.AggregationBuilders;\r\nimport org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\r\nimport org.elasticsearch.transport.client.PreBuiltTransportClient;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\n\r\npublic class DateHistogramFormatTest {\r\n\r\n    private static final String INDEX_TYPE = \"doc\";\r\n\r\n    private static final String AGGREGATION_NAME = \"dateTest\";\r\n\r\n    private static final String DATE_FIELD = \"dateField\";\r\n\r\n    private TransportClient transportClient;\r\n\r\n    @Before\r\n    public void before() throws UnknownHostException {\r\n        transportClient = new PreBuiltTransportClient(Settings.builder()\r\n                .put(\"cluster.name\", \"docker-cluster\")\r\n                .build())\r\n                .addTransportAddress(new TransportAddress(InetAddress.getByName(\"localhost\"), 9300));\r\n\r\n        transportClient.admin().indices().prepareDelete(\"_all\")\r\n                .get();\r\n    }\r\n\r\n    @Test\r\n    public void testDateFieldFormatIncorrect() throws IOException {\r\n        //setup indexes\r\n        final String indexNameWithDateField = \"b\";\r\n        final String indexNameWithoutDateField = \"a\";\r\n\r\n        setup(indexNameWithDateField, indexNameWithoutDateField);\r\n\r\n        final SearchResponse searchResponse = transportClient.prepareSearch(\"*\")\r\n                .addAggregation(AggregationBuilders.dateHistogram(AGGREGATION_NAME)\r\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\r\n                        .field(DATE_FIELD))\r\n                .get();\r\n\r\n        System.out.println(\"testDateFieldFormatIncorrect: \" + searchResponse.getAggregations().get(AGGREGATION_NAME));\r\n    }\r\n\r\n    @Test\r\n    public void testDateFieldFormatCorrect() throws IOException {\r\n        //setup indexes\r\n        final String indexNameWithDateField = \"a\";\r\n        final String indexNameWithoutDateField = \"b\";\r\n\r\n        setup(indexNameWithDateField, indexNameWithoutDateField);\r\n\r\n        final SearchResponse searchResponse = transportClient.prepareSearch(\"*\")\r\n                .addAggregation(AggregationBuilders.dateHistogram(AGGREGATION_NAME)\r\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\r\n                        .field(DATE_FIELD))\r\n                .get();\r\n\r\n        System.out.println(\"testDateFieldFormatCorrect: \" + searchResponse.getAggregations().get(AGGREGATION_NAME));\r\n    }\r\n\r\n    @Test\r\n    public void testAggregationFormatIncorrect() throws IOException {\r\n        //setup indexes\r\n        final String indexNameWithDateField = \"b\";\r\n        final String indexNameWithoutDateField = \"a\";\r\n\r\n        setup(indexNameWithDateField, indexNameWithoutDateField);\r\n\r\n        final SearchResponse searchResponse = transportClient.prepareSearch(\"*\")\r\n                .addAggregation(AggregationBuilders.dateHistogram(AGGREGATION_NAME)\r\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\r\n                        .format(\"yyyy-MM-dd\")\r\n                        .field(DATE_FIELD))\r\n                .get();\r\n\r\n        System.out.println(\"testAggregationFormatIncorrect: \" + searchResponse.getAggregations().get(AGGREGATION_NAME));\r\n    }\r\n\r\n    @Test\r\n    public void testAggregationFormatCorrect() throws IOException {\r\n        //setup indexes\r\n        final String indexNameWithDateField = \"a\";\r\n        final String indexNameWithoutDateField = \"b\";\r\n\r\n        setup(indexNameWithDateField, indexNameWithoutDateField);\r\n\r\n        final SearchResponse searchResponse = transportClient.prepareSearch(\"*\")\r\n                .addAggregation(AggregationBuilders.dateHistogram(AGGREGATION_NAME)\r\n                        .dateHistogramInterval(DateHistogramInterval.MONTH)\r\n                        .format(\"yyyy-MM-dd\")\r\n                        .field(DATE_FIELD))\r\n                .get();\r\n\r\n        System.out.println(\"testAggregationFormatCorrect: \" + searchResponse.getAggregations().get(AGGREGATION_NAME));\r\n    }\r\n\r\n    private void setup(String indexNameWithDateField, String indexNameWithoutDateField) throws IOException {\r\n        transportClient.admin().indices().prepareCreate(indexNameWithDateField)\r\n                .addMapping(INDEX_TYPE, readMappingWithDateField(), XContentType.JSON)\r\n                .get();\r\n\r\n        transportClient.admin().indices().prepareCreate(indexNameWithoutDateField)\r\n                .addMapping(INDEX_TYPE, readMappingWithoutDateField(), XContentType.JSON)\r\n                .get();\r\n\r\n        //create data\r\n        transportClient.prepareIndex(indexNameWithDateField, INDEX_TYPE, \"1\")\r\n                .setSource(\"{\\\"title\\\": \\\"1\\\", \\\"dateField\\\": \\\"2018-01-01\\\"}\", XContentType.JSON)\r\n                .get();\r\n\r\n        transportClient.prepareIndex(indexNameWithoutDateField, INDEX_TYPE, \"1\")\r\n                .setSource(\"{\\\"title\\\": \\\"1\\\"}\", XContentType.JSON)\r\n                .get();\r\n\r\n        transportClient.admin().indices().prepareRefresh(indexNameWithDateField)\r\n                .get();\r\n\r\n        transportClient.admin().indices().prepareRefresh(indexNameWithoutDateField)\r\n                .get();\r\n    }\r\n\r\n    private String readMappingWithDateField() throws IOException {\r\n        return IOUtils.toString(this.getClass().getResourceAsStream(\"/searchIndexWithDateField.json\"), \"UTF-8\");\r\n    }\r\n\r\n    private String readMappingWithoutDateField() throws IOException {\r\n        return IOUtils.toString(this.getClass().getResourceAsStream(\"/searchIndexWithoutDateField.json\"), \"UTF-8\");\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe output of these tests are:\r\n```\r\ntestAggregationFormatIncorrect: {\"dateTest\":{\"buckets\":[{\"key_as_string\":\"2018-01-01T00:00:00.000Z\",\"key\":1514764800000,\"doc_count\":1}]}}\r\ntestDateFieldFormatIncorrect: {\"dateTest\":{\"buckets\":[{\"key_as_string\":\"2018-01-01T00:00:00.000Z\",\"key\":1514764800000,\"doc_count\":1}]}}\r\ntestDateFieldFormatCorrect: {\"dateTest\":{\"buckets\":[{\"key_as_string\":\"2018-01-01\",\"key\":1514764800000,\"doc_count\":1}]}}\r\ntestAggregationFormatCorrect: {\"dateTest\":{\"buckets\":[{\"key_as_string\":\"2018-01-01\",\"key\":1514764800000,\"doc_count\":1}]}}\r\n```\r\n\r\nYou can see that the output for testAggregationFormatIncorrect and testDateFieldFormatIncorrect uses the default date format while the only difference is that the names of the indexes are switched.\r\nI would expect that the output would be the same for all test cases.","closed_by":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"performed_via_github_app":null}