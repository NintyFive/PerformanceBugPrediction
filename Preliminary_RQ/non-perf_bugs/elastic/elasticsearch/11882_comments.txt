[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/116144181","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-116144181","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":116144181,"node_id":"MDEyOklzc3VlQ29tbWVudDExNjE0NDE4MQ==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-06-27T21:14:29Z","updated_at":"2015-06-27T21:14:29Z","author_association":"MEMBER","body":"The problem is that the partial update will fetch the current document, which contains `\"_ttl\" : \"20s\"`, and update just the `text` field. Once done, it will reindex the _whole_ document and the `\"_ttl\" : \"20s\"` ends up being reset as a result.\n\nThis is why the TTL ends up restarting and, without special-casing TTL in the partial update process, which may be possible, there is not a very good solution to it.\n\nRegardless, I would encourage you to look at using time-based indices rather than TTL-based documents. It's _much_ easier to delete an entire index than it is to have the automatic background query deleting documents, which itself creates load on your index/node/cluster. Naturally this isn't really doable with a `20s` TTL, but hopefully that was just an example value for the demonstration of the issue.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/118969500","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-118969500","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":118969500,"node_id":"MDEyOklzc3VlQ29tbWVudDExODk2OTUwMA==","user":{"login":"ronlepper","id":13055650,"node_id":"MDQ6VXNlcjEzMDU1NjUw","avatar_url":"https://avatars0.githubusercontent.com/u/13055650?v=4","gravatar_id":"","url":"https://api.github.com/users/ronlepper","html_url":"https://github.com/ronlepper","followers_url":"https://api.github.com/users/ronlepper/followers","following_url":"https://api.github.com/users/ronlepper/following{/other_user}","gists_url":"https://api.github.com/users/ronlepper/gists{/gist_id}","starred_url":"https://api.github.com/users/ronlepper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ronlepper/subscriptions","organizations_url":"https://api.github.com/users/ronlepper/orgs","repos_url":"https://api.github.com/users/ronlepper/repos","events_url":"https://api.github.com/users/ronlepper/events{/privacy}","received_events_url":"https://api.github.com/users/ronlepper/received_events","type":"User","site_admin":false},"created_at":"2015-07-06T19:22:51Z","updated_at":"2015-07-06T19:23:30Z","author_association":"NONE","body":"Unfortunately, the time-based indices won't work for our use case.  The expiration date for each document has the potential to change so we'd need to delete from one index and insert into another index.  Since the documents being indexed are coming in through logstash, we'd rather use the update api and update the expiration date for the document based off the id.\n\nIt seems like most of our use cases can be handled with an update script to set the ttl properly, except when we want to set a ttl with an expiration to having no expiration.  If we set the ttl value to null, it will always use the existing calculated expiration time.  From the org.elasticsearch.action.update.UpdateHelper.java class, it looks like whenever ttl is null, it will attempt to pull the existing ttl expiration. Ideally, I would need some constant that could be used to reset a document to an infinite expiration.  \n\nFrom line 222 of UpdateHelper.java\n\n```\nif (ttl == null) {\n    ttl = getResult.getFields().containsKey(TTLFieldMapper.NAME) ?    (Long)getResult.field(TTLFieldMapper.NAME).getValue() : null;\n    if (ttl != null) {\n            ttl = ttl - TimeValue.nsecToMSec(System.nanoTime() - getDateNS); // It is an approximation of exact TTL value, could be improved\n     }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/118993939","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-118993939","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":118993939,"node_id":"MDEyOklzc3VlQ29tbWVudDExODk5MzkzOQ==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-07-06T20:48:28Z","updated_at":"2015-07-06T20:48:28Z","author_association":"MEMBER","body":"Hi @ronlepper, that's fine and often times unavoidable. However, I'm not convinced that the approach that you're suggesting is superior to the default reset option given the possibility (or likelihood?) of update-after-dead actions, which is particularly expensive alongside TTL functionality.\n\nIgnoring that behavior you _can_ use a Groovy script to imitate the functionality that you are looking for as part of an update (don't use dynamic scripting, but this is the example script to maintain it):\n\n``` json\n{\n  \"script\" : \"ctx._source.text = text; ctx._source._ttl = ctx._ttl\",\n  \"params\" : {\n    \"text\" : \"Upsert text\"\n  },\n  \"upsert\" : {\n    \"text\" : \"Upsert text\",\n    \"_ttl\" : \"20s\"\n  }\n}\n```\n\nThis uses the \"live\" TTL value and sets it over the current source value's, which means that it maintains the current TTL rather than resetting it. Note: If you use a script, then [you cannot use the `doc` (use script `params`)](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html#_updates_with_a_partial_document).\n\nI do wonder if another flag should be added for updates that allow automatic continuation of the document's TTL (effectively doing the `ctx._source._ttl = ctx._ttl` step of the above script), but I definitely don't think that it should be default.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/119001553","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-119001553","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":119001553,"node_id":"MDEyOklzc3VlQ29tbWVudDExOTAwMTU1Mw==","user":{"login":"ronlepper","id":13055650,"node_id":"MDQ6VXNlcjEzMDU1NjUw","avatar_url":"https://avatars0.githubusercontent.com/u/13055650?v=4","gravatar_id":"","url":"https://api.github.com/users/ronlepper","html_url":"https://github.com/ronlepper","followers_url":"https://api.github.com/users/ronlepper/followers","following_url":"https://api.github.com/users/ronlepper/following{/other_user}","gists_url":"https://api.github.com/users/ronlepper/gists{/gist_id}","starred_url":"https://api.github.com/users/ronlepper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ronlepper/subscriptions","organizations_url":"https://api.github.com/users/ronlepper/orgs","repos_url":"https://api.github.com/users/ronlepper/repos","events_url":"https://api.github.com/users/ronlepper/events{/privacy}","received_events_url":"https://api.github.com/users/ronlepper/received_events","type":"User","site_admin":false},"created_at":"2015-07-06T21:21:43Z","updated_at":"2015-07-06T21:21:43Z","author_association":"NONE","body":"Hi @pickypg, thanks for the feedback.  I've implemented a similar script to the one you mention above and had some luck with it for most of my cases. The one case that I can't seem to get working though is removing the expiration.  For example, if I had a document that has a ttl value set and  I want to update the document to have no ttl based expiration.  Setting ctx._ttl to null or ctx._source._ttl to null in the script will just result in the UpdateHelper.java class pulling the current calulated ttl value.  Any suggestions for that case?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/119027241","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-119027241","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":119027241,"node_id":"MDEyOklzc3VlQ29tbWVudDExOTAyNzI0MQ==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-07-06T23:32:19Z","updated_at":"2015-07-06T23:32:19Z","author_association":"MEMBER","body":"@ronlepper The only way to \"unset\" the `_ttl` is to reset or to completely replace (reindex) the document. You _can_ set it to `null`, but we're not checking for it, which I do consider to be a bug.\n\n``` json\n{\n  \"script\" : \"ctx_source._ttl = null\"\n}\n```\n\nThis does change the `_ttl` to `null`, but the code that you spotted assumes that `null` means that it's not set rather than that it's being _unset_. We need to check for the key if it's `null`, then remove it in that case.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/215888469","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-215888469","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":215888469,"node_id":"MDEyOklzc3VlQ29tbWVudDIxNTg4ODQ2OQ==","user":{"login":"nside","id":11653,"node_id":"MDQ6VXNlcjExNjUz","avatar_url":"https://avatars2.githubusercontent.com/u/11653?v=4","gravatar_id":"","url":"https://api.github.com/users/nside","html_url":"https://github.com/nside","followers_url":"https://api.github.com/users/nside/followers","following_url":"https://api.github.com/users/nside/following{/other_user}","gists_url":"https://api.github.com/users/nside/gists{/gist_id}","starred_url":"https://api.github.com/users/nside/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nside/subscriptions","organizations_url":"https://api.github.com/users/nside/orgs","repos_url":"https://api.github.com/users/nside/repos","events_url":"https://api.github.com/users/nside/events{/privacy}","received_events_url":"https://api.github.com/users/nside/received_events","type":"User","site_admin":false},"created_at":"2016-04-29T21:38:27Z","updated_at":"2016-04-29T21:38:27Z","author_association":"NONE","body":"I'm hitting a similar bug. Basically the _ttl doesn't get reset in the bulk update but does in the atomic one.\nHere's a script to reproduce\n\n```\nimport requests, time\n\ndef assert_success(r):\n  assert r.json()['acknowledged']\n\nINDEX = 'http://localhost:9200/test_ttl'\nprint 'delete index'\nrequests.delete(INDEX)\nprint 'create index'\nr = requests.put(INDEX, data=\"\"\"{\n  \"mappings\": {\n    \"my_type\": {\n      \"_ttl\": {\n        \"enabled\": true,\n        \"default\": \"5m\"\n      }\n    }\n  }\n}\"\"\")\n\nassert_success(r)\n\nprint 'read index'\nassert requests.get(INDEX).json()['test_ttl']['mappings']['my_type']['_ttl']['default'] == 300000\n\nprint 'insert record'\nr = requests.put(INDEX + '/my_type/1', data='{\"hello\": 1}')\n\nprint 'read record'\nttl1 = requests.get(INDEX + '/my_type/1').json()['_ttl']\n\ntime.sleep(1)\nprint 'read record'\nttl2 = requests.get(INDEX + '/my_type/1').json()['_ttl']\n\nassert ttl2 < ttl1\n\nprint 'update record by id'\nr = requests.put(INDEX + '/my_type/1', data='{\"hello\": 2}')\n\nttl3 = requests.get(INDEX + '/my_type/1').json()['_ttl']\n\nassert ttl3 > ttl2, \"TTL wasn't reset\"\n\nprint 'update record bulk'\nr = requests.put(INDEX + '/my_type/1/_bulk', data=\"\"\"{ \"update\" : {\"_id\" : \"1\"}}\n{\"doc\": {\"hello\" : 3} } }\"\"\")\nprint r.content\n\nttl4 = requests.get(INDEX + '/my_type/1').json()['_ttl']\nassert ttl4 > ttl3, \"TTL wasn't reset %f %f\" % (ttl4, ttl3)\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/218748463","html_url":"https://github.com/elastic/elasticsearch/issues/11882#issuecomment-218748463","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11882","id":218748463,"node_id":"MDEyOklzc3VlQ29tbWVudDIxODc0ODQ2Mw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-12T12:55:44Z","updated_at":"2016-05-12T12:55:44Z","author_association":"CONTRIBUTOR","body":"Closing in favour of #18280\n","performed_via_github_app":null}]