[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/3246593","html_url":"https://github.com/elastic/elasticsearch/issues/1560#issuecomment-3246593","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1560","id":3246593,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNDY1OTM=","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"created_at":"2011-12-22T08:18:58Z","updated_at":"2011-12-22T08:18:58Z","author_association":"CONTRIBUTOR","body":"Also \"multiply\" as a score_mode to multiply the values against each other.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/3277166","html_url":"https://github.com/elastic/elasticsearch/issues/1560#issuecomment-3277166","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1560","id":3277166,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNzcxNjY=","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"created_at":"2011-12-26T22:06:31Z","updated_at":"2011-12-26T22:06:31Z","author_association":"CONTRIBUTOR","body":"Working on another issue, but need clarification first.  What is the intended result when you have a custom_filters_score and you total or average the items.  Does it do this:\n- for all matching filters, and on each doc, calculate the aggregate boost\n- then apply resulting aggregate boost multiplied times document score\n\nOr does it do this:\n- for all matching filters, and on each doc, calculate the boost \\* the document score\n- then aggregate those calculations.\n\nFor total it doesn't matter as the net result is the same when min, max, total and average are used since the math works out that this doesn't matter.   For example, these don't care:\n\nFIRST:  B1 \\* score\nMIN:  B2 \\* score \nMAX:  B3 \\* score\nAVG:  (B1 + B2 + B3)/3 \\* score == (B1_score + B2_score + B3_score)/3\nTOTAL:  (B1 + B2 + B3) \\* score == B1_score + B2_score + B3_score\n\nbut, MULTIPLY would care.  Is it:\n\nB1 \\* B2 \\* B3 \\* score\n\nor is it:\n\nB1_score \\* B2_score \\* B3*score\n\nThe first answer seems right, so that you can do things like discount 10% for something using boost of 0.9 and discount further by 20% using another 0.8.\n\nThink I need to patch my previous #1560 patch to change how multiple works.  I think have a new patch now for #1561 and I can include it there, but in case that more complicated patch doesn't happen soon I should do this one on its own.  Advice?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/3277267","html_url":"https://github.com/elastic/elasticsearch/issues/1560#issuecomment-3277267","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1560","id":3277267,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNzcyNjc=","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"created_at":"2011-12-26T22:24:45Z","updated_at":"2011-12-26T22:24:45Z","author_association":"CONTRIBUTOR","body":"So multiply doesn't make sense in this context without a change to take the subquery score out of the picture until the end.  Might be sane to do that for all of the types, then multiply it in after.  Would clean up the explain plan a lot as well to do this.  Leaving Multiply broken while finishing patch for #1561 then will come back and fix this after so that I'm not on two conflicting versions of the same code.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/3277269","html_url":"https://github.com/elastic/elasticsearch/issues/1560#issuecomment-3277269","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1560","id":3277269,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNzcyNjk=","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2011-12-26T22:25:52Z","updated_at":"2011-12-26T22:25:52Z","author_association":"MEMBER","body":"I agree that the first option feels better, but its trickier to implement because of how `ScoreFunction` works. If you have a nice solution for it, then have a pull request only for it. #1561 is a different case and its good to separate the two.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/3277322","html_url":"https://github.com/elastic/elasticsearch/issues/1560#issuecomment-3277322","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1560","id":3277322,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNzczMjI=","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"created_at":"2011-12-26T22:38:10Z","updated_at":"2011-12-26T22:38:10Z","author_association":"CONTRIBUTOR","body":"doing #1561 first, I'm 95% done there and want to get it out of the way.  It'll need some feedback, as it is tricky as well, and causing more work and more code.  I don't know how things fit into your world yet (I am about to be trained by your feedback)...  It covers issues with query parsing and builders not present in the codebase so far (groups that aren't real queries or filters themselves).  So leaving this one for a bit and coming back to it.\n","performed_via_github_app":null}]