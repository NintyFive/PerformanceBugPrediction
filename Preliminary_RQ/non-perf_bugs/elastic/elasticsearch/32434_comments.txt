[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/408424622","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-408424622","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":408424622,"node_id":"MDEyOklzc3VlQ29tbWVudDQwODQyNDYyMg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-07-27T13:50:59Z","updated_at":"2018-07-27T13:50:59Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/565136805","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-565136805","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":565136805,"node_id":"MDEyOklzc3VlQ29tbWVudDU2NTEzNjgwNQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2019-12-12T18:55:09Z","updated_at":"2019-12-12T18:55:09Z","author_association":"MEMBER","body":"Just adding this note here for reference. \r\n\r\nWe ran into a use case for this in https://github.com/elastic/ecs/pull/673. The Windows registry only has a concept of unsigned numbers, so we saw two paths to take for numbers greater than 2<sup>63</sup> for u64. We either cast to s64, which is hard to enforce and too easy to do wrong. The other option was to only store the string representation. Since we have little need for math, we opted for a keyword string field in the interim.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/573843862","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-573843862","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":573843862,"node_id":"MDEyOklzc3VlQ29tbWVudDU3Mzg0Mzg2Mg==","user":{"login":"marshallmain","id":55718608,"node_id":"MDQ6VXNlcjU1NzE4NjA4","avatar_url":"https://avatars2.githubusercontent.com/u/55718608?v=4","gravatar_id":"","url":"https://api.github.com/users/marshallmain","html_url":"https://github.com/marshallmain","followers_url":"https://api.github.com/users/marshallmain/followers","following_url":"https://api.github.com/users/marshallmain/following{/other_user}","gists_url":"https://api.github.com/users/marshallmain/gists{/gist_id}","starred_url":"https://api.github.com/users/marshallmain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshallmain/subscriptions","organizations_url":"https://api.github.com/users/marshallmain/orgs","repos_url":"https://api.github.com/users/marshallmain/repos","events_url":"https://api.github.com/users/marshallmain/events{/privacy}","received_events_url":"https://api.github.com/users/marshallmain/received_events","type":"User","site_admin":false},"created_at":"2020-01-13T20:00:32Z","updated_at":"2020-01-13T20:00:32Z","author_association":"NONE","body":"Following up on @rw-access comment, there are a fair number of data fields coming from the Elastic Endpoint that we would like to store as u64 if possible.  Is this issue being actively worked on?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/632450853","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-632450853","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":632450853,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMjQ1MDg1Mw==","user":{"login":"ktetzlaff","id":1082960,"node_id":"MDQ6VXNlcjEwODI5NjA=","avatar_url":"https://avatars0.githubusercontent.com/u/1082960?v=4","gravatar_id":"","url":"https://api.github.com/users/ktetzlaff","html_url":"https://github.com/ktetzlaff","followers_url":"https://api.github.com/users/ktetzlaff/followers","following_url":"https://api.github.com/users/ktetzlaff/following{/other_user}","gists_url":"https://api.github.com/users/ktetzlaff/gists{/gist_id}","starred_url":"https://api.github.com/users/ktetzlaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ktetzlaff/subscriptions","organizations_url":"https://api.github.com/users/ktetzlaff/orgs","repos_url":"https://api.github.com/users/ktetzlaff/repos","events_url":"https://api.github.com/users/ktetzlaff/events{/privacy}","received_events_url":"https://api.github.com/users/ktetzlaff/received_events","type":"User","site_admin":false},"created_at":"2020-05-22T02:57:42Z","updated_at":"2020-05-22T02:57:42Z","author_association":"NONE","body":"Same problem here during processing of network performance data from routers as part of a network management system. This data contains counters (e.g. received octets) which are 64-bit unsigned values. It would be great if we could store them properly.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/667215899","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-667215899","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":667215899,"node_id":"MDEyOklzc3VlQ29tbWVudDY2NzIxNTg5OQ==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2020-07-31T16:32:40Z","updated_at":"2020-07-31T16:32:40Z","author_association":"CONTRIBUTOR","body":"We, within the search team, had discussion about the following points:\r\n\r\nI. How to represent unsigned long internally, in json, and the elasticsearch clients for:\r\n- Queries\r\n- Sort values\r\n- Aggs\r\n- Scripts\r\n\r\nSeveral options here are:\r\n1. Long for queries, sort values and scripts;  Double for aggs\r\n   - easy to handle\r\n   - as values > Long.MAX_VALUE are presented as negative, not a nice experience for users especially when unsigned long is used for IDs.\r\n2. BigInteger for query field values, sort values, scripts; Double for aggs\r\n     - difficult to handle internally\r\n     - some elasticsearch clients may not support them (need to confirm with the  lang-client team)\r\n3. String\r\n    - easy to handle\r\n    - easy to support\r\n    - no support for numeric metrics aggs (do we need them on unsigned long field?)\r\n  \r\n\r\nII. Should we accept mixing longs and unsigned longs when sorting on a field?\r\n    - Do we need this mixed sorting on longs and unsigned longs?\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/668783727","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-668783727","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":668783727,"node_id":"MDEyOklzc3VlQ29tbWVudDY2ODc4MzcyNw==","user":{"login":"robcowart","id":10326954,"node_id":"MDQ6VXNlcjEwMzI2OTU0","avatar_url":"https://avatars1.githubusercontent.com/u/10326954?v=4","gravatar_id":"","url":"https://api.github.com/users/robcowart","html_url":"https://github.com/robcowart","followers_url":"https://api.github.com/users/robcowart/followers","following_url":"https://api.github.com/users/robcowart/following{/other_user}","gists_url":"https://api.github.com/users/robcowart/gists{/gist_id}","starred_url":"https://api.github.com/users/robcowart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/robcowart/subscriptions","organizations_url":"https://api.github.com/users/robcowart/orgs","repos_url":"https://api.github.com/users/robcowart/repos","events_url":"https://api.github.com/users/robcowart/events{/privacy}","received_events_url":"https://api.github.com/users/robcowart/received_events","type":"User","site_admin":false},"created_at":"2020-08-04T19:31:44Z","updated_at":"2020-08-04T19:31:44Z","author_association":"NONE","body":"Option 3 is a non-starter for any use-cases that I have worked on. The most common scenario that I see is related to metrics which are counters. Besides the network equipment mentioned by @ktetzlaff, a significant amount of server and application monitoring data are unsigned 64-bit counters. For example, this is the package that Metricbeat uses to gather disk I/O stats (https://github.com/shirou/gopsutil/blob/master/disk/disk.go#L14) and as you can see there are a number of `uint64` values. Beats actually sends these to Elasticsearch as a `long`, which is technically wrong, but to date simply unavoidable. So this feature is needed to \"fix\" many Beats modules as well.\r\n\r\nGiven that counters will make up the majority of unsigned values, it is important (mandatory really) that at least the [derivative](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-derivative-aggregation.html) aggregation work well and accurately. Whether that is best achieved with option 1 or 2... I would say that 2 is probably preferred. However if 1 is the only way to get the necessary support, and it allows for `derivative` aggregations, I could live with it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/669139944","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-669139944","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":669139944,"node_id":"MDEyOklzc3VlQ29tbWVudDY2OTEzOTk0NA==","user":{"login":"Dumbaz","id":6582804,"node_id":"MDQ6VXNlcjY1ODI4MDQ=","avatar_url":"https://avatars2.githubusercontent.com/u/6582804?v=4","gravatar_id":"","url":"https://api.github.com/users/Dumbaz","html_url":"https://github.com/Dumbaz","followers_url":"https://api.github.com/users/Dumbaz/followers","following_url":"https://api.github.com/users/Dumbaz/following{/other_user}","gists_url":"https://api.github.com/users/Dumbaz/gists{/gist_id}","starred_url":"https://api.github.com/users/Dumbaz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dumbaz/subscriptions","organizations_url":"https://api.github.com/users/Dumbaz/orgs","repos_url":"https://api.github.com/users/Dumbaz/repos","events_url":"https://api.github.com/users/Dumbaz/events{/privacy}","received_events_url":"https://api.github.com/users/Dumbaz/received_events","type":"User","site_admin":false},"created_at":"2020-08-05T11:28:48Z","updated_at":"2020-08-05T11:28:48Z","author_association":"NONE","body":"I am in the same Situation as @robcowart : Option 3 would not achieve anything for me in my usecases. The main reason I want 64 bit integers is because sometimes metric values are greater than the maximum size the current data types offer (mostly long running tasks, counted in milliseconds).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/669868331","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-669868331","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":669868331,"node_id":"MDEyOklzc3VlQ29tbWVudDY2OTg2ODMzMQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2020-08-06T11:19:52Z","updated_at":"2020-08-06T11:19:52Z","author_association":"MEMBER","body":"I think we should eliminate option 1 from the picture. It's confusing to rely on a convention that requires to translate a signed long. Option 2 is more natural since we already have an abstraction for numerics in Scripts and sort values. They return a `Number` and the user can choose the resolution that he needs when consuming the value. Unsigned longs could for instance return a `BigInteger` for values greater than `Long.MAX_VALUE`.\r\n@elastic/es-clients would you be able to comment on the proposal ? The json specification accepts numbers without restrictions so we were wondering if we need to do anything special to ease the usage of these 64 bits numbers in clients ? ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/669976015","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-669976015","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":669976015,"node_id":"MDEyOklzc3VlQ29tbWVudDY2OTk3NjAxNQ==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2020-08-06T14:50:14Z","updated_at":"2020-09-15T20:25:26Z","author_association":"CONTRIBUTOR","body":"Thanks for comments everyone, very valuable.\r\n\r\n@jimczi I have chatted with the es-clients team, all the clients (php, perl, ruby, python, .NET) support BigInteger except JavaScript.  Also for some clients with 32bit platform (which should be quite outdated) don't support BigInteger, e.g. php, ruby.\r\n\r\nFor JavaScript,  the language does support BigInts, but the native json parser does not. But this should not be a blocker for us, the es-clients team are willing to write a custom json parser to handle this case.\r\n\r\nOne thing is left is to confirm with Kibana team if they can handle 64 bit integers.\r\n\r\n**Update**:\r\nI have chatted with the Kibana team, and Kibana has problems with handling big integers (relevant issue: https://github.com/elastic/kibana/issues/40183), and this is not going to be fixed any time soon. \r\nBut considering that currently Kibana also has issues with large longs, and citing @timroes  \"I don't think adding a new type to the list that will cause exactly the same issues will be a problem\", I guess we can still proceed with our option 2. \r\n @jimczi  what do you think?\r\n\r\nUpdated option 2:\r\n1. Sort: return long for values < 2^63, BigInteger for values >= 2^63\r\n2. Scrips:  return long for values < 2^63, BigInteger for values >= 2^63\r\n3. Aggregations:\r\n   - terms agg:  return long or BigInteger for buckets (if this field is used for \"ids\", it is valuable to have precise bucket keys)\r\n   - numeric metric aggs: return doubles ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/671954869","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-671954869","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":671954869,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTk1NDg2OQ==","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2020-08-11T13:42:57Z","updated_at":"2020-08-11T13:42:57Z","author_association":"MEMBER","body":"Just to confirm: are we planning a maximum of `64bits unsigned long` or any arbitrary number `BigInteger`? Implications to changes are the same but in terms of (de)serialization performance its good to know what to optimize for.\r\n\r\nThere are some potential client breaking changes. \r\n\r\n**Javascript client**: will need a dedicated generic serializer which is going to be slower for everything. The workaround here is that the default WON'T support ulong/bigints OOTB but the client can be injected with a serializer that supports it either globally or per request. \r\n\r\n\r\n**Java HLRC**: The java HLRC relies heavily on boxing, e.g the `to` and `from` on `RangeQueryBuilder` is an `Object` so is future proof 👍 (at the cost of boxing). Not sure if this is is the case everywhere the change is intended to be supported.\r\n\r\n\r\n**.NET NEST client**: In most cases we have dedicated types and interface e.g the range query is backed by an interface `IRangeQuery` with implementations like `LongRangeQuery`, `DateRangeQuery` that strongly type the `to/from` parameters. We can extend this with e.g a `BigIntegerRangeQuery` quite easily. In some cases (especially responses) that are now capped as `long` or `double` changing that to `BigInteger` or `BigDecimal` is technically a breaking change. \r\n\r\nI suggest we proceed with option 2 and:\r\n* try to solve any breaking changes as best as we can.\r\n* Accept a technical breaking change that in practice is hard to hit (e.g `long` implicitly converting to `BigInteger` and back might be good enough?).\r\n* If all else fails document the limitations of a particular client and set it up for success when `8.0` comes around.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/672752849","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-672752849","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":672752849,"node_id":"MDEyOklzc3VlQ29tbWVudDY3Mjc1Mjg0OQ==","user":{"login":"ezimuel","id":475967,"node_id":"MDQ6VXNlcjQ3NTk2Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/475967?v=4","gravatar_id":"","url":"https://api.github.com/users/ezimuel","html_url":"https://github.com/ezimuel","followers_url":"https://api.github.com/users/ezimuel/followers","following_url":"https://api.github.com/users/ezimuel/following{/other_user}","gists_url":"https://api.github.com/users/ezimuel/gists{/gist_id}","starred_url":"https://api.github.com/users/ezimuel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ezimuel/subscriptions","organizations_url":"https://api.github.com/users/ezimuel/orgs","repos_url":"https://api.github.com/users/ezimuel/repos","events_url":"https://api.github.com/users/ezimuel/events{/privacy}","received_events_url":"https://api.github.com/users/ezimuel/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T09:07:45Z","updated_at":"2020-08-12T09:07:45Z","author_association":"CONTRIBUTOR","body":"**PHP client**: it supports `64-bit` integer but not `unsigned`. We can support BigInteger using the [GMP](https://www.php.net/manual/en/book.gmp.php) extensions of PHP (not default in the language).\r\n**Perl**: it supports `64-bit` by default and BigInteger using [bigint](https://perldoc.perl.org/bigint.html).\r\n\r\nBecause some clients may need to support `64-bit` and `BigInteger` in different ways, I suggest to provide some facilitation, for instance:\r\n- add a `bigint_as_string=1` in the query string (0 by default) to return `64-bit` and `BigInteger` as string; this will prevent JSON decoder to throw errors if numeric > `32-bit`.\r\n- add a `numeric_type` field in the response that will alert the client for using `64` (bit) or `big` (as `BigInteger`). This alert will not have `32` (bit) value, as default. This alert will be triggered if at least one numeric value in the response is `64` or `big`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/672786750","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-672786750","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":672786750,"node_id":"MDEyOklzc3VlQ29tbWVudDY3Mjc4Njc1MA==","user":{"login":"delvedor","id":4865608,"node_id":"MDQ6VXNlcjQ4NjU2MDg=","avatar_url":"https://avatars0.githubusercontent.com/u/4865608?v=4","gravatar_id":"","url":"https://api.github.com/users/delvedor","html_url":"https://github.com/delvedor","followers_url":"https://api.github.com/users/delvedor/followers","following_url":"https://api.github.com/users/delvedor/following{/other_user}","gists_url":"https://api.github.com/users/delvedor/gists{/gist_id}","starred_url":"https://api.github.com/users/delvedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/delvedor/subscriptions","organizations_url":"https://api.github.com/users/delvedor/orgs","repos_url":"https://api.github.com/users/delvedor/repos","events_url":"https://api.github.com/users/delvedor/events{/privacy}","received_events_url":"https://api.github.com/users/delvedor/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T10:19:23Z","updated_at":"2020-08-12T10:19:23Z","author_association":"MEMBER","body":"I've been thinking a lot about this, and I fear that sending numbers above the interop range for json could cause problems to some implementations.\r\n\r\nFrom the json spec:\r\n\r\n```\r\n   This specification allows implementations to set limits on the range\r\n   and precision of numbers accepted.  Since software that implements\r\n   IEEE 754-2008 binary64 (double precision) numbers [IEEE754] is\r\n   generally available and widely used, good interoperability can be\r\n   achieved by implementations that expect no more precision or range\r\n   than these provide, in the sense that implementations will\r\n   approximate JSON numbers within the expected precision.  A JSON\r\n   number such as 1E400 or 3.141592653589793238462643383279 may indicate\r\n   potential interoperability problems, since it suggests that the\r\n   software that created it expects receiving software to have greater\r\n   capabilities for numeric magnitude and precision than is widely\r\n   available.\r\n\r\n   Note that when such software is used, numbers that are integers and\r\n   are in the range [-(2**53)+1, (2**53)-1] are interoperable in the\r\n   sense that implementations will agree exactly on their numeric\r\n   values.\r\n```\r\n\r\nFor instance, if JavaScript will get a value outside that range, it cannot longer guarantee arithmetic precision ([MDN docs](https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Number)).\r\nFurthermore, if JS will try to parse a JSON with a bigint value, it will round it without warn the user, causing a lot of pain to debug it.\r\n\r\nGiven that a custom serializer will introduce significant overhead, and it should be a user choice accept it or not, I agree with @ezimuel that introducing a query parameter such as `bigint_as_string` that will instruct Elasticsearch on how those values are being sent and read could be a good tradeoff.\r\nBy doing so, we can guarantee interoperability and still support all the use cases that need bigint as numeric values.\r\n\r\nThe JS client could use this query parameter as follows:\r\nSend it by default to all requests, so we are sure not to lose precision and let the user decide how to handle the bigint values, but also give the users the ability to disable this default option and use a custom serializer to handle Bigint automatically. (this cannot be a default for the JS client for two reasons, the json bigint parser is significantly slower and the number and bigint types are not compatible, so the user must know what they are doing).\r\n\r\nUnfortunately, this is not a JS problem only, this issue will happen also with other languages. For example if you use [`jq`](https://github.com/stedolan/jq), any value above `1.79E+308` will be rounded to `1.79E+308`.\r\n\r\n```\r\n$ echo '{\"n\":1.7976931348623157e+310}' | jq .\r\n\r\n{\r\n  \"n\": 1.7976931348623157e+308\r\n}\r\n```\r\n\r\nBy supporting something like `bigint_as_string`, we delegate to the user this choice, which they can take based on the platform they need to support.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/673607993","html_url":"https://github.com/elastic/elasticsearch/issues/32434#issuecomment-673607993","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32434","id":673607993,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MzYwNzk5Mw==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2020-08-13T17:28:26Z","updated_at":"2020-08-13T17:28:41Z","author_association":"CONTRIBUTOR","body":"@ezimuel @delvedor  Thanks a lot for comments and explanation.  We've discussed this and decided that we should find a systematic way for the REST layer to handle big integers (also big longs), and this should not be a part of this Issue/PR.  I have created a separate [issue](https://github.com/elastic/elasticsearch/issues/61109)  for this and put your ideas there.\r\n\r\nFor 64-bit unsigned integers, we have decided to proceed with our current plan to return Long/BigInteger.\r\n\r\n\r\n","performed_via_github_app":null}]