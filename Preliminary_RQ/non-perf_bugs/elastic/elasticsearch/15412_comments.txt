[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/165079728","html_url":"https://github.com/elastic/elasticsearch/issues/15412#issuecomment-165079728","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15412","id":165079728,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NTA3OTcyOA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-12-16T11:42:40Z","updated_at":"2015-12-16T11:42:40Z","author_association":"CONTRIBUTOR","body":"@polyfractal any thoughts?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/165138457","html_url":"https://github.com/elastic/elasticsearch/issues/15412#issuecomment-165138457","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15412","id":165138457,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NTEzODQ1Nw==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2015-12-16T15:19:10Z","updated_at":"2015-12-16T15:19:51Z","author_association":"MEMBER","body":"I don't know enough about the plugin architecture to comment on how easy/hard it'd be to expose this stuff for pluggability.  But I do like the idea of natively recording percentiles.\n\nNow that we have an implementation of HDRHistogram, that'd probably be the sketch to use here.  Relatively small memory footprint, large dynamic range.  Some open questions/problems though:\n- Like all other ES stats, the percentiles would be cumulative and probably lose value over time as they saturate (e.g. thousands of fast queries will, over time, move the 90th percentile up and mask real problems)\n- Memory usage: iirc a 2 sig-fig HDRHistogram uses around 30kb of memory in the worst case.  So 30kb \\* a dozen stats is only ~360kb.  But we'd want to put a maximum dynamic range so it doesn't grow unbounded (but I don't think that would be a problem).  3 sig-figs is a lot heavier, ~200kb per sketch\n- If we wanted smaller memory footprint, we could use much less accurate Frugal Streams (<1kb)\n- HDRHistogram is not thread-safe, and I think multiple threads can update these stats?  Might introduce some non-negligible contention locking the histograms, or have to maintain a histogram-per-thread and increase memory usage.\n- It would add a small constant time latency to requests, since any percentile recording/sketching will necessarily be slower than just bumping a cumulative time counter.  May be negligible though?\n- Practically speaking, adding percentiles will make the Stats output a lot more verbose\n\nAll said, it _would_ be very useful to see distributions in the stats.  All stats that expose a cumulative `time_in_millis` would benefit.\n\n/cc @colings86 who added HDRHistogram to the aggs...any gotchas that might trip this up?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/165297528","html_url":"https://github.com/elastic/elasticsearch/issues/15412#issuecomment-165297528","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15412","id":165297528,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NTI5NzUyOA==","user":{"login":"ebernhardson","id":558434,"node_id":"MDQ6VXNlcjU1ODQzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/558434?v=4","gravatar_id":"","url":"https://api.github.com/users/ebernhardson","html_url":"https://github.com/ebernhardson","followers_url":"https://api.github.com/users/ebernhardson/followers","following_url":"https://api.github.com/users/ebernhardson/following{/other_user}","gists_url":"https://api.github.com/users/ebernhardson/gists{/gist_id}","starred_url":"https://api.github.com/users/ebernhardson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ebernhardson/subscriptions","organizations_url":"https://api.github.com/users/ebernhardson/orgs","repos_url":"https://api.github.com/users/ebernhardson/repos","events_url":"https://api.github.com/users/ebernhardson/events{/privacy}","received_events_url":"https://api.github.com/users/ebernhardson/received_events","type":"User","site_admin":false},"created_at":"2015-12-17T00:19:02Z","updated_at":"2015-12-17T00:20:56Z","author_association":"NONE","body":"- I'm uncertain that cumulative percentiles will be as useful as something that provides recency. Most of the servers in my cluster have been up since mid September. Any change to query patterns made now will not show up in percentiles that take into account several months and several hundred million queries.\n- The search stats at least are updated by multiple threads.\n- If lock contention is an issue sampling of the query stats for use in the histogram could be viable. Getting the sampling level right could be difficult though. I might err on the side of histogram-per-thread, but i'm not sure how many threads are involved so I can't estimate the impact of that.\n\nI understand that providing recency is a much more difficult problem with stream data, but in my opinion it is paramount to these percentiles being useful. I'm not sure how it would be implemented, but some sort of decay may be sufficient to provide reasonable recency.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/165507877","html_url":"https://github.com/elastic/elasticsearch/issues/15412#issuecomment-165507877","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15412","id":165507877,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NTUwNzg3Nw==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2015-12-17T16:52:39Z","updated_at":"2015-12-17T16:52:39Z","author_association":"MEMBER","body":"Yep, I agree that recency is important.  The main problem is that compact/fast streaming sketches tend to be unable to deal with recency, since the relevant time information is lost as soon as the data is added to the sketch.\n\nWe could use something like windowing or resevoir sampling, which will naturally drift with the data over time.  Downside is that they require saving some amount of the data points and are therefore a fair amount heavier memory footprint.\n\nSome sketches naturally age data, like frugal streams.  But they aren't super accurate (in part because of their ability to drift over time).\n\nOr we could implement something like A<sup>2</sup> Bloom Filters, where you have two (or more) active copies of the sketch and rotate between them.  I haven't seen any literature for this, but I think you could actually rig something up with a triplet-ring buffer:\n\nIn pseudocode:\n\n``` rust\nhistos[] = new HdrHisto[3];\ncurrent = 0;\n\nfn addData(data) {\n  // Add data point to current and current + 1\n  histos[current % 2].add(data);\n  histos[(current + 1) % 2].add(data);\n\n  // After a predfined interval, rotate the histos\n  if (elapsed_time > interval) {\n    current += 1;\n    histos[(current - 1) % 2].clear();\n  }\n}\n\n// only return percentile estimates from the current sketch\nfn getPercentiles() {\n  return histos[current].percentiles();\n}\n```\n\nBasically, by rotating the sketch, you guarantee that `current` holds `2 * interval` worth of data.  The triplet is preferred over the A<sup>2</sup> setup because it avoids a \"cold\" sketch when it rolls over.\n\nAlternatively, the truly simplest way to solve this is an ability to reset all the stats, so you could just manually reset at the start of testing.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/228305796","html_url":"https://github.com/elastic/elasticsearch/issues/15412#issuecomment-228305796","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15412","id":228305796,"node_id":"MDEyOklzc3VlQ29tbWVudDIyODMwNTc5Ng==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-06-24T09:54:27Z","updated_at":"2016-06-24T09:54:27Z","author_association":"MEMBER","body":"> Alternatively, the truly simplest way to solve this is an ability to reset all the stats, so you could just manually reset at the start of testing.\n\nWe've already decided in #9693 that this will not be added.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/228317709","html_url":"https://github.com/elastic/elasticsearch/issues/15412#issuecomment-228317709","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15412","id":228317709,"node_id":"MDEyOklzc3VlQ29tbWVudDIyODMxNzcwOQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-06-24T11:02:32Z","updated_at":"2016-06-24T11:02:32Z","author_association":"MEMBER","body":"Closed by #17398\n","performed_via_github_app":null}]