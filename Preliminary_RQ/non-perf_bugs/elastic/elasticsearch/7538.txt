{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/7538","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7538/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7538/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7538/events","html_url":"https://github.com/elastic/elasticsearch/issues/7538","id":41707177,"node_id":"MDU6SXNzdWU0MTcwNzE3Nw==","number":7538,"title":"Not able to search in a recently opened index till some time.","user":{"login":"mgalande","id":7289560,"node_id":"MDQ6VXNlcjcyODk1NjA=","avatar_url":"https://avatars0.githubusercontent.com/u/7289560?v=4","gravatar_id":"","url":"https://api.github.com/users/mgalande","html_url":"https://github.com/mgalande","followers_url":"https://api.github.com/users/mgalande/followers","following_url":"https://api.github.com/users/mgalande/following{/other_user}","gists_url":"https://api.github.com/users/mgalande/gists{/gist_id}","starred_url":"https://api.github.com/users/mgalande/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mgalande/subscriptions","organizations_url":"https://api.github.com/users/mgalande/orgs","repos_url":"https://api.github.com/users/mgalande/repos","events_url":"https://api.github.com/users/mgalande/events{/privacy}","received_events_url":"https://api.github.com/users/mgalande/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2014-09-02T13:09:48Z","updated_at":"2014-09-06T15:12:30Z","closed_at":"2014-09-06T15:12:30Z","author_association":"NONE","active_lock_reason":null,"body":"To reduce the elasticsearch memory usage we keep only minimum number of indices open in ES, at any point in time. We close the  unwanted indices and then whenever the search is required to be executed against a closed index, we open it and then execute search.\n\nBut, it seems opening the index does not always return successful result and sometimes there is an exception `SearchPhaseExecutionException`. I tried to analyse the problem by enabling the ES debug and adding timestamps in the actual OPEN and SEARCH requests and it seems the index is actually opened on all shards after the SEARCH request is executed and hence  getting following exception.\n\nIs there any way to make sure that the index is fully opened, in ES, across all shards? Adding a delay after opening the index helps but that may slow down the search operations. And again the required delay can vary depending on the size of index and other activities in the ES. Are there any other alternatives to this approach?\n\n```\norg.elasticsearch.action.search.SearchPhaseExecutionException: Failed to execute phase [query], all shards failed\n        at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction.onFirstPhaseResult(TransportSearchTypeAction.java:272) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.action.search.type.TransportSearchTypeAction$BaseAsyncAction$3.onFailure(TransportSearchTypeAction.java:224) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.search.action.SearchServiceTransportAction$4.handleException(SearchServiceTransportAction.java:222) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.transport.netty.MessageChannelHandler.handleException(MessageChannelHandler.java:181) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.transport.netty.MessageChannelHandler.handlerResponseError(MessageChannelHandler.java:171) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:123) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:296) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:268) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:255) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:318) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108) ~[elasticsearch-1.0.0.jar:na]\n        at org.elasticsearch.common.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42) ~[elasticsearch-1.0.0.jar:na]\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) ~[na:1.7.0_65]\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) ~[na:1.7.0_65]\n        at java.lang.Thread.run(Thread.java:745) [na:1.7.0_65]\n```\n\nThanks.\n\nManish\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}