[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450175706","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450175706","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450175706,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDE3NTcwNg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-12-27T15:46:31Z","updated_at":"2018-12-27T15:46:31Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450176979","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450176979","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450176979,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDE3Njk3OQ==","user":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"created_at":"2018-12-27T15:52:47Z","updated_at":"2018-12-27T15:52:47Z","author_association":"CONTRIBUTOR","body":"There was a race condition issue in the same class a while ago, but the presentation looks different than this issue, and I don't think they're related.  Including a link for completeness: https://github.com/elastic/elasticsearch/issues/18121","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450311543","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450311543","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450311543,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDMxMTU0Mw==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2018-12-28T07:54:50Z","updated_at":"2018-12-28T07:54:50Z","author_association":"MEMBER","body":"The failure here comes from the fact that we fail to read the repo info:\r\n\r\n```\r\nERROR   1.14s J7 | SharedClusterSnapshotRestoreIT.testSnapshotCanceledOnRemovedShard <<< FAILURES!\r\n   > Throwable #1: NotSerializableExceptionWrapper[not_x_content_exception: Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes]\r\n   > \tat __randomizedtesting.SeedInfo.seed([BA465B36283F19D1:2BF74722441573D]:0)\r\n   > \tat org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:56)\r\n   > \tat org.elasticsearch.common.xcontent.XContentHelper.createParser(XContentHelper.java:70)\r\n   > \tat org.elasticsearch.repositories.blobstore.BlobStoreRepository.getRepositoryData(BlobStoreRepository.java:670)\r\n   > \tat org.elasticsearch.snapshots.SnapshotsService.getRepositoryData(SnapshotsService.java:148)\r\n   > \tat org.elasticsearch.action.admin.cluster.snapshots.get.TransportGetSnapshotsAction.masterOperation(TransportGetSnapshotsAction.java:96)\r\n   > \tat org.elasticsearch.action.admin.cluster.snapshots.get.TransportGetSnapshotsAction.masterOperation(TransportGetSnapshotsAction.java:54)\r\n   > \tat org.elasticsearch.action.support.master.TransportMasterNodeAction.masterOperation(TransportMasterNodeAction.java:127)\r\n   > \tat org.elasticsearch.action.support.master.TransportMasterNodeAction$AsyncSingleAction$2.doRun(TransportMasterNodeAction.java:208)\r\n   > \tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:759)\r\n   > \tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n   > \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n   > \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n   > \tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\na few lines up the log you can see:\r\n\r\n```\r\n  1> [2018-12-27T08:14:14,435][WARN ][o.e.r.b.BlobStoreRepository] [node_sm2] [index-0] index blob is not valid x-content [0 bytes]\r\n```\r\n\r\n=> apparently we run into an index gen file `index-0` that is of 0 length.\r\n\r\nI grepped the build logs and could find another such case here https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+6.6+matrix-java-periodic/ES_BUILD_JAVA=java11,ES_RUNTIME_JAVA=java8,nodes=virtual&&linux/3/consoleText in a unrelated test suit.\r\n\r\nThis test has a shared per suit cluster, the other example has a cluster per test case which imo rules out interference between tests.\r\n\r\nLooking at the implementation of `org.elasticsearch.common.blobstore.fs.FsBlobContainer#writeBlobAtomic` it is not immediately clear how we could end up with an empty blob here. Looking in to that now.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450314808","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450314808","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450314808,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDMxNDgwOA==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2018-12-28T08:14:21Z","updated_at":"2018-12-28T08:14:21Z","author_association":"MEMBER","body":"The problem seems to come from https://github.com/elastic/elasticsearch/blob/master/server/src/test/java/org/elasticsearch/snapshots/mockstore/MockRepository.java#L382 => the mock repository wrapped used in these tests randomly executes a non-atomic `writeBlob` when `writeBlobAtomic` is invoked.\r\nThat would allow a `0` length file to be read for `index-0` when no data has been fsynced to it yet.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450348924","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450348924","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450348924,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDM0ODkyNA==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2018-12-28T12:02:53Z","updated_at":"2018-12-28T12:02:53Z","author_association":"MEMBER","body":"Another failure: https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+release-tests/264/console","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450354953","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450354953","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450354953,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDM1NDk1Mw==","user":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"created_at":"2018-12-28T12:54:01Z","updated_at":"2018-12-28T12:54:01Z","author_association":"CONTRIBUTOR","body":"@original-brownbear mute the test for now?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450357057","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450357057","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450357057,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDM1NzA1Nw==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2018-12-28T13:10:58Z","updated_at":"2018-12-28T13:10:58Z","author_association":"MEMBER","body":"@ywelsch sure, will do in a sec.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450358905","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-450358905","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":450358905,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDM1ODkwNQ==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2018-12-28T13:25:28Z","updated_at":"2018-12-28T13:25:28Z","author_association":"MEMBER","body":"Muted in master (34d22f3) and 6.x (87d3aa70)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/456420904","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-456420904","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":456420904,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NjQyMDkwNA==","user":{"login":"abw333","id":1274347,"node_id":"MDQ6VXNlcjEyNzQzNDc=","avatar_url":"https://avatars2.githubusercontent.com/u/1274347?v=4","gravatar_id":"","url":"https://api.github.com/users/abw333","html_url":"https://github.com/abw333","followers_url":"https://api.github.com/users/abw333/followers","following_url":"https://api.github.com/users/abw333/following{/other_user}","gists_url":"https://api.github.com/users/abw333/gists{/gist_id}","starred_url":"https://api.github.com/users/abw333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abw333/subscriptions","organizations_url":"https://api.github.com/users/abw333/orgs","repos_url":"https://api.github.com/users/abw333/repos","events_url":"https://api.github.com/users/abw333/events{/privacy}","received_events_url":"https://api.github.com/users/abw333/received_events","type":"User","site_admin":false},"created_at":"2019-01-22T14:34:35Z","updated_at":"2019-01-22T14:34:35Z","author_association":"NONE","body":"Hi, I am running into a similar issue while creating a snapshot on 6.4:\r\n```\r\norg.elasticsearch.common.io.stream.NotSerializableExceptionWrapper: NotSerializableExceptionWrapper[not_x_content_exception: Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes]\r\nNotSerializableExceptionWrapper[not_x_content_exception: Compressor detection can only be called on some xcontent bytes or compressed xcontent bytes]\r\n\tat org.elasticsearch.common.compress.CompressorFactory.compressor(CompressorFactory.java:56)\r\n\tat org.elasticsearch.common.xcontent.XContentHelper.createParser(XContentHelper.java:69)\r\n\tat org.elasticsearch.repositories.blobstore.BlobStoreRepository.getRepositoryData(BlobStoreRepository.java:671)\r\n\tat org.elasticsearch.snapshots.SnapshotsService.getRepositoryData(SnapshotsService.java:139)\r\n\tat org.elasticsearch.action.admin.cluster.snapshots.status.TransportSnapshotsStatusAction.buildResponse(TransportSnapshotsStatusAction.java:207)\r\n\tat org.elasticsearch.action.admin.cluster.snapshots.status.TransportSnapshotsStatusAction.access$100(TransportSnapshotsStatusAction.java:61)\r\n\tat org.elasticsearch.action.admin.cluster.snapshots.status.TransportSnapshotsStatusAction$1.onResponse(TransportSnapshotsStatusAction.java:127)\r\n\tat org.elasticsearch.action.admin.cluster.snapshots.status.TransportSnapshotsStatusAction$1.onResponse(TransportSnapshotsStatusAction.java:121)\r\n\tat org.elasticsearch.action.support.TransportAction$1.onResponse(TransportAction.java:85)\r\n\tat org.elasticsearch.action.support.TransportAction$1.onResponse(TransportAction.java:81)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.finishHim(TransportNodesAction.java:252)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.onOperation(TransportNodesAction.java:229)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction.access$100(TransportNodesAction.java:153)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$1.handleResponse(TransportNodesAction.java:206)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$AsyncAction$1.handleResponse(TransportNodesAction.java:198)\r\n\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1058)\r\n\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.processResponse(TransportService.java:1134)\r\n\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1124)\r\n\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1113)\r\n\tat org.elasticsearch.transport.TaskTransportChannel.sendResponse(TaskTransportChannel.java:54)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$NodeTransportHandler.messageReceived(TransportNodesAction.java:260)\r\n\tat org.elasticsearch.action.support.nodes.TransportNodesAction$NodeTransportHandler.messageReceived(TransportNodesAction.java:256)\r\n\tat org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:66)\r\n\tat org.elasticsearch.transport.TransportService$7.doRun(TransportService.java:665)\r\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:723)\r\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nMoreover, I see a log line very similar to the one pointed out by @original-brownbear:\r\n```\r\n[2019-01-18T18:10:42,829][WARN ][o.e.r.h.HdfsRepository   ] [OyVQR66] [index-0] index blob is not valid x-content [0 bytes]\r\n```\r\n\r\n(Note that it uses `HdfsRepository` instead of `BlobStoreRepository`.)\r\n\r\nI have a few specific questions:\r\n1. What exactly is `MockRepository`? I don't see it in the Elasticsearch package I am using, and I don't see much documentation in the file. Is it only used for testing?\r\n2. How is `MockRepository` related to `BlobStoreRepository`? Why does a change to `MockRepository` fix an issue that seems to be related to `BlobStoreRepository`?\r\n3. How likely is it that the issue that I am seeing is related to this underlying issue? Is it possible that I am seeing the same symptom, but it's another issue? How meaningful is the fact that I see `HdfsRepository` in my log instead of `BlobStoreRepository`?\r\n4. While debugging, I stumbled upon this other thread: https://github.com/elastic/elasticsearch/issues/33199 Is that related to this issue?\r\n5. Does this issue mean that snapshots are expected to randomly fail in production? If so, is the workaround for clients to add a retry mechanism until we upgrade to an Elasticsearch version that includes the fix (6.7, if I understood correctly)?\r\n\r\nPlease let me know if there's any other helpful information I can provide, or if there's another question that I should be asking. Thanks in advance for your work in Elasticsearch and for your time.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/456512522","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-456512522","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":456512522,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NjUxMjUyMg==","user":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"created_at":"2019-01-22T18:36:21Z","updated_at":"2019-01-22T18:36:21Z","author_association":"CONTRIBUTOR","body":"@abw333 Your issue is probably fixed in 6.7.0, see #37066. `MockRepository` is a fake repository implementation that we use in our tests to randomly inject failures. A test failure uncovered a problem with repository types that don't support writing blobs in an atomic way. It turned out that only HDFSRepository was not supporting atomic writes, which we changed in #37066. With that change, we now mandated that all repository implementations support atomic writes, and hence adapted `MockRepository` (#37011) so that it more accurately reflected the behavior of our improved repository implementations. There is unfortunately no workaround here, in particular retrying will not help. You could try deleting the offending 0-byte file and see if that allows further snapshots.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/456547997","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-456547997","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":456547997,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NjU0Nzk5Nw==","user":{"login":"abw333","id":1274347,"node_id":"MDQ6VXNlcjEyNzQzNDc=","avatar_url":"https://avatars2.githubusercontent.com/u/1274347?v=4","gravatar_id":"","url":"https://api.github.com/users/abw333","html_url":"https://github.com/abw333","followers_url":"https://api.github.com/users/abw333/followers","following_url":"https://api.github.com/users/abw333/following{/other_user}","gists_url":"https://api.github.com/users/abw333/gists{/gist_id}","starred_url":"https://api.github.com/users/abw333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abw333/subscriptions","organizations_url":"https://api.github.com/users/abw333/orgs","repos_url":"https://api.github.com/users/abw333/repos","events_url":"https://api.github.com/users/abw333/events{/privacy}","received_events_url":"https://api.github.com/users/abw333/received_events","type":"User","site_admin":false},"created_at":"2019-01-22T20:18:52Z","updated_at":"2019-01-22T20:18:52Z","author_association":"NONE","body":"Thanks, @ywelsch, I will give that a try!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458576687","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-458576687","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":458576687,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODU3NjY4Nw==","user":{"login":"abw333","id":1274347,"node_id":"MDQ6VXNlcjEyNzQzNDc=","avatar_url":"https://avatars2.githubusercontent.com/u/1274347?v=4","gravatar_id":"","url":"https://api.github.com/users/abw333","html_url":"https://github.com/abw333","followers_url":"https://api.github.com/users/abw333/followers","following_url":"https://api.github.com/users/abw333/following{/other_user}","gists_url":"https://api.github.com/users/abw333/gists{/gist_id}","starred_url":"https://api.github.com/users/abw333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abw333/subscriptions","organizations_url":"https://api.github.com/users/abw333/orgs","repos_url":"https://api.github.com/users/abw333/repos","events_url":"https://api.github.com/users/abw333/events{/privacy}","received_events_url":"https://api.github.com/users/abw333/received_events","type":"User","site_admin":false},"created_at":"2019-01-29T15:13:23Z","updated_at":"2019-01-29T15:13:23Z","author_association":"NONE","body":"Hi again. I was able to reproduce this failure reliably by attempting to take a snapshot into an HDFS directory that already had an empty file named `index-0` in it. I was then able to fix the failure by 1) detecting the failure caused by the race condition 2) deleting the snapshot directory's contents and 3) retrying the snapshot. Thanks again for the suggestion :)\r\n\r\nI have a couple follow-up questions: \r\n\r\nI am currently taking snapshots of all of my indices with a single request. My indices all have roughly the same size. I am concerned that, a long time into the snapshot process, the snapshot fails, and then I have to restart from the beginning.\r\n\r\nQuestion 1: If my snapshot fails with this race condition, when will it fail? Will it always be near the beginning? Or always near the end? Or does it vary? \r\n\r\nIf it always fails near the beginning, I don't have anything to worry about. If it sometimes fails near the end, though, I would like to do something about it. I was thinking that, in this case, I could take a snapshot of each of my indices separately. Since they are roughly equally sized, this would lower the cost of a failure induced by the race condition.\r\n\r\nQuestion 2: Does this strategy (i.e. snapshot each index separately, with the error handling described above) sound reasonable? Are there any other alternatives I should consider (e.g. selectively delete some of the contents of the snapshot directory instead of all of them, and then retry the snapshot)?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458630150","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-458630150","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":458630150,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODYzMDE1MA==","user":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"created_at":"2019-01-29T17:26:22Z","updated_at":"2019-01-29T17:26:22Z","author_association":"CONTRIBUTOR","body":"@abw333 how often have you seen this happen? This should be extremely rare and only a problem in an extremely flaky or unreliable network or nodes that crash all the time.\r\n\r\n> Will it always be near the beginning? Or always near the end? Or does it vary?\r\n\r\nThis is read two times, once at the beginning and end of a snapshot (just before it is overridden), but if the read were to fail at the end, it should already have failed at the beginning.\r\n\r\n> Question 2: Does this strategy (i.e. snapshot each index separately, with the error handling described above) sound reasonable? Are there any other alternatives I should consider (e.g. selectively delete some of the contents of the snapshot directory instead of all of them, and then retry the snapshot)?\r\n\r\nGiven that this should very rarely happen, I'm not convinced this would need any special strategy. As I mentioned above, you can just delete the offending 0-byte file and start snapshotting again.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/459085226","html_url":"https://github.com/elastic/elasticsearch/issues/37005#issuecomment-459085226","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37005","id":459085226,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1OTA4NTIyNg==","user":{"login":"abw333","id":1274347,"node_id":"MDQ6VXNlcjEyNzQzNDc=","avatar_url":"https://avatars2.githubusercontent.com/u/1274347?v=4","gravatar_id":"","url":"https://api.github.com/users/abw333","html_url":"https://github.com/abw333","followers_url":"https://api.github.com/users/abw333/followers","following_url":"https://api.github.com/users/abw333/following{/other_user}","gists_url":"https://api.github.com/users/abw333/gists{/gist_id}","starred_url":"https://api.github.com/users/abw333/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abw333/subscriptions","organizations_url":"https://api.github.com/users/abw333/orgs","repos_url":"https://api.github.com/users/abw333/repos","events_url":"https://api.github.com/users/abw333/events{/privacy}","received_events_url":"https://api.github.com/users/abw333/received_events","type":"User","site_admin":false},"created_at":"2019-01-30T19:53:35Z","updated_at":"2019-01-30T19:53:35Z","author_association":"NONE","body":"@ywelsch I have a test that starts a snapshot using a `CreateSnapshotRequest` and then monitors the snapshot status using `SnapshotsStatusRequest` until the snapshot is complete.\r\n\r\nLocally, the test passes reliably, but, on my testing infrastructure, it fails about once every 20 runs. (Which might indicate that the network on my testing infrastructure is not great.)\r\n\r\nI have observed the failure (same stack trace) in two places: 1) when starting the snapshot with the `CreateSnapshotRequest` and 2) when checking on the snapshot status with the `SnapshotsStatusRequest`.\r\n\r\nAlthough I can't reproduce the race condition locally, I can reproduce the failures by creating the empty file myself either before the `CreateSnapshotRequest` or before the `SnapshotsStatusRequest`.\r\n\r\n1 is easy to address: I added some logic around the `CreateSnapshotRequest` to detect the failure caused by the race condition, and to retry (after cleaning up) if necessary. If my understanding is correct, the actual snapshot occurs asynchronously, so the actual `CreateSnapshotRequest` is fairly quick, and therefore it is not too costly to retry.\r\n\r\n2 is a little bit more complex, since it seems that here the race condition is occurring during the actual snapshot (as opposed to during the request that initiates the snapshot). Here, a failure can be more costly since a snapshot is a long-running operation. My worry is that the failure happens towards the end of the snapshot and then we need to rerun the whole thing, which would add a lot of latency to the process.\r\n\r\nIs what I'm seeing consistent with your understanding of what's happening here? And do you have any recommendation on how to handle 2? Is the race condition happening during the actual snapshot job? If so, do you expect that the snapshot job would fail right at the beginning?","performed_via_github_app":null}]