[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/48058886","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-48058886","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":48058886,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4MDU4ODg2","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-04T16:12:50Z","updated_at":"2014-07-04T16:12:50Z","author_association":"CONTRIBUTOR","body":"Here is what happens:\n\nFor multi-fields, the parent field is returned instead of `null` if a sub-field is requested. For the example above, when getting `text.word_count`, `text` is retrieved from the source and returned.\nWe could prevent this easily like this: 7f522fbd9542\n\nHowever, the FastVectorHighlighter relies on this functionality to highlight on multi-fields (see [here](https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/search/highlight/vectorhighlight/SourceSimpleFragmentsBuilder.java#L55)), so this is not really a solution unless we want to prevent highlighting with the FastVectorHighlighter on multi-fields.\n\nThe other option is to simply catch the NumberFormatException and handle it like here: be999b1042\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/48453804","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-48453804","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":48453804,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDUzODA0","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2014-07-09T10:30:41Z","updated_at":"2014-07-09T10:30:41Z","author_association":"CONTRIBUTOR","body":"@brwe what is the status of this?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/48460402","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-48460402","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":48460402,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDYwNDAy","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-09T11:56:07Z","updated_at":"2014-07-09T11:56:07Z","author_association":"CONTRIBUTOR","body":"@s1monw Need to write more tests, did not get to it yet. Will continue Friday. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/48460977","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-48460977","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":48460977,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDYwOTc3","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2014-07-09T12:02:56Z","updated_at":"2014-07-09T12:02:56Z","author_association":"CONTRIBUTOR","body":"cool ok but it's going to be ready for 1.3 right?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/48462471","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-48462471","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":48462471,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDYyNDcx","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-09T12:21:02Z","updated_at":"2014-07-09T12:21:02Z","author_association":"CONTRIBUTOR","body":"depends on when the release is\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/49468226","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-49468226","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":49468226,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDY4MjI2","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-18T19:07:00Z","updated_at":"2014-07-18T19:07:00Z","author_association":"CONTRIBUTOR","body":"A field of type `murmur3` actually has the same issue. In addition, if `murmur3` and `token_count` fields are not stored, GET will also return NumberFormatException after refresh, example below.\n\n```\nDELETE testidx\nPUT testidx\n{\n  \"settings\": {\n    \"index.translog.disable_flush\": true,\n    \"index.number_of_shards\": 1,\n    \"refresh_interval\": \"1h\"\n  },\n  \"mappings\": {\n    \"doc\": {\n      \"properties\": {\n        \"token_count\": {\n          \"type\": \"token_count\",\n          \"analyzer\": \"standard\"\n        },\n        \"murmur\": {\n          \"type\": \"murmur3\"\n        }\n      }\n    }\n  }\n}\n\nPOST testidx/doc/1\n{\n  \"murmur\": \"Some value that can be hashed\",\n  \"token_count\": \"A text with five words.\"\n}\n\nGET testidx/doc/1?routing=2&fields=murmur,token_count\n\nPOST testidx/_refresh\n\nGET testidx/doc/1?routing=2&fields=murmur,token_count\n\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/49469706","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-49469706","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":49469706,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDY5NzA2","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-18T19:22:02Z","updated_at":"2014-07-18T19:22:02Z","author_association":"CONTRIBUTOR","body":"Following the discussion on pull request #6826 I checked all field mappers and tried to figure out what they should return upon GET. I will call a field \"generated\" if the content is only available after indexing. \nWe discussed that we either throw a meaningful exception if the field is generated or ignore the field silently if a (new) parameter is set with the GET request. `FieldMapper` should get a new method `isGenerated()` which indicates weather the field will be found in the source or not.\n\nHere is what I think we should do:\n\nFor some core field types (`integer, float, string,...`), the behavior (`isGenerated()` returns `true` or `false`) should be configurable. The reason is that a different mapper might use them and store generated data in them. The Mapper attachment plugin does that: Fields like author (`string`), content_type (`string`) etc. are only available after tika parsing. \n\nThere are currently four field types (detailed list below):\n1. Fields that should not be configurable, because they are always generated\n2. Fields that not be configurable because they are never generated\n3. Fields that should not be configurable because they are never stored\n4. Fields that should be configurable\n\nFor 1-3 we simply have to implement `isGenerated()` accordingly.\n\nTo make the fields configurable we could add a parameter `\"is_generated\"` to the mapping which steers the behavior.\n\nPro: would be easy to do and also allow different types in plugin to very easily use the feature.\n\nCon: This would allow users to set `\"is_generated\"` accidentally - fields that are accessible via source would then still cause an exception if requested via GET while the document is not yet indexed\n\nFor fields that are not configurable, the parameter `\"is_generated\"` could be ignored without warning like so many other parameters.\n\nList of types and their category:\n\nThere is core types, root types, geo an ip.\n\n#### Core types\n\nThese should be configurable:\n\n```\nIntegerFieldMapper.java\nShortFieldMapper.java\nBinaryFieldMapper.java      \nDateFieldMapper.java        \nLongFieldMapper.java        \nStringFieldMapper.java\nBooleanFieldMapper.java     \nDoubleFieldMapper.java      \n```\n\nThe following two should not be configurable because they are always generated:\n\n```\nMurmur3FieldMapper.java     \nTokenCountFieldMapper.java\n```\n\nThis should not be configurable because it is never stored:\n\n```\nCompletionFieldMapper.java\n```\n\n#### ip an geo\n\nShould be configurable:\n\n```\nGeoPointFieldMapper.java    \nGeoShapeFieldMapper.java\nIpFieldMapper.java\n```\n\n#### root types\n\nNever generated and should not be configurable:\n\n```\nRoutingFieldMapper.java     \nTimestampFieldMapper.java\nIdFieldMapper.java      \nSizeFieldMapper.java        \nTypeFieldMapper.java\nBoostFieldMapper.java       \nIndexFieldMapper.java       \nSourceFieldMapper.java  \nParentFieldMapper.java      \nTTLFieldMapper.java     \nVersionFieldMapper.java\n```\n\nAlways generated and should not be configurable:\n\n```\nAllFieldMapper.java     \nFieldNamesFieldMapper.java  \n```\n\nThe following should not be configurable, because they are never stored:\n\n```\nAnalyzerMapper.java     \nUidFieldMapper.java\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/49510559","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-49510559","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":49510559,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NTEwNTU5","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-19T14:13:01Z","updated_at":"2014-07-19T14:13:01Z","author_association":"CONTRIBUTOR","body":"hmpf. while writing tests I figured there are actually more cases to consider. will update soon...\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/49843333","html_url":"https://github.com/elastic/elasticsearch/issues/6676#issuecomment-49843333","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6676","id":49843333,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5ODQzMzMz","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-07-23T07:54:42Z","updated_at":"2014-07-23T07:54:42Z","author_association":"CONTRIBUTOR","body":"There are two numeric fields that are currently generated (`Murmur3FieldMapper.java` and `TokenCountFieldMapper.java`) and two string fields (`AllFieldMapper.java` and `FieldNamesFieldMapper.java` ).\n\nThese should only be returned with GET (`fields=...`) if set to `stored` and not retuned if not `stored` regardless of if source is enabled or not (this was not so, see example above). If refresh has not been called between indexing and GET then this should cause an Exception unless `ignore_errors_on_generated_fields=true` (working title) is set with the GET request.\nUntil now `_all` and `_field_names` where silently ignored and getting the numeric fields caused a `NumberFormatException`.\n\nI am now unsure if we should make the core types configurable. By configurable, I actually meant adding a parameter to the type mapping such as\n\n```\n{\n   type: string,\n   is_generated: true/false\n   ...\n}\n```\n\nI'll make a pull request without that and then maybe we can discuss further. \n\nJust for completeness, below is a list of all ungenerated field types and how they behave with GET.\n\n---\n\n## Fields with fixed behavior:\n\nNever stored -> should never be returned via GET\n\n`CompletionFieldMapper` \n\nAlways stored -> should always be returned via GET\n\n```\nParentFieldMapper.java      \nTTLFieldMapper.java   \n```\n\nStored or source enabled -> always return via GET, else never return\n\n```\nBoostFieldMapper.java  \n```\n\nStored (but independent of source) -> always return via GET, else never return\n\n```\nTimestampFieldMapper.java\nSizeFieldMapper.java    \nRoutingFieldMapper.java   \n```\n\n## Fields that might be configurable\n\n```\nIntegerFieldMapper.java\nShortFieldMapper.java\nBinaryFieldMapper.java      \nDateFieldMapper.java        \nLongFieldMapper.java        \nStringFieldMapper.java\nBooleanFieldMapper.java     \nDoubleFieldMapper.java      \nGeoPointFieldMapper.java    \nGeoShapeFieldMapper.java\nIpFieldMapper.java\n```\n\n## Special fields which can never be in the \"fields\" list returned by GET anyway\n\n```\nIdFieldMapper.java       \nTypeFieldMapper.java\nIndexFieldMapper.java       \nSourceFieldMapper.java  \nVersionFieldMapper.java\nAnalyzerMapper.java     \nUidFieldMapper.java\n```\n","performed_via_github_app":null}]