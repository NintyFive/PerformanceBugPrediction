[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/145916761","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-145916761","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":145916761,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NTkxNjc2MQ==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2015-10-06T16:16:58Z","updated_at":"2015-10-06T16:16:58Z","author_association":"MEMBER","body":"@dakrone I tried to find out how this happens the only thing I could suspect is Guice causing two instances of Listener to be created. I would be very curious to see the code of ListenerModule.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146461579","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146461579","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146461579,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ2MTU3OQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T08:50:23Z","updated_at":"2015-10-08T08:50:23Z","author_association":"CONTRIBUTOR","body":"@dakrone can you reproduce it and print the stacktrace for each of the invocations?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146470845","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146470845","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146470845,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ3MDg0NQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T09:27:33Z","updated_at":"2015-10-08T09:27:33Z","author_association":"CONTRIBUTOR","body":"ok I can reproduce this problem. It's caused by the fact that the master creates the index once before we actually creating it on other nodes to ensure we can fully create it and don't throw an exception. If you print stacktraces it looks like this:\n\n```\n[2015-10-08 11:23:50,331][INFO ][org.elasticsearch.index  ] [ListenerIT#testIt]: starting test\n[2015-10-08 11:23:50,604][WARN ][LISTENER                 ] Listener created!\njava.lang.RuntimeException\n    at org.elasticsearch.index.ListenerIT$MyTestListener.<init>(ListenerIT.java:67)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)\n    at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)\n    at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)\n    at org.elasticsearch.common.inject.InjectorImpl$5$1.call(InjectorImpl.java:828)\n    at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)\n    at org.elasticsearch.common.inject.InjectorImpl$5.get(InjectorImpl.java:823)\n    at org.elasticsearch.common.inject.InheritingState.makeAllBindingsToEagerSingletons(InheritingState.java:157)\n    at org.elasticsearch.common.inject.InjectorImpl.readOnlyAllSingletons(InjectorImpl.java:909)\n    at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:59)\n    at org.elasticsearch.indices.IndicesService.createIndex(IndicesService.java:347)\n    at org.elasticsearch.cluster.metadata.MetaDataCreateIndexService$2.execute(MetaDataCreateIndexService.java:364)\n    at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:383)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n[2015-10-08 11:23:50,688][INFO ][org.elasticsearch.cluster.metadata] [node_s0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [_default_]\n[2015-10-08 11:23:50,710][WARN ][LISTENER                 ] Listener created!\njava.lang.RuntimeException\n    at org.elasticsearch.index.ListenerIT$MyTestListener.<init>(ListenerIT.java:67)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)\n    at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)\n    at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)\n    at org.elasticsearch.common.inject.InjectorImpl$5$1.call(InjectorImpl.java:828)\n    at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)\n    at org.elasticsearch.common.inject.InjectorImpl$5.get(InjectorImpl.java:823)\n    at org.elasticsearch.common.inject.InheritingState.makeAllBindingsToEagerSingletons(InheritingState.java:157)\n    at org.elasticsearch.common.inject.InjectorImpl.readOnlyAllSingletons(InjectorImpl.java:909)\n    at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:59)\n    at org.elasticsearch.indices.IndicesService.createIndex(IndicesService.java:347)\n    at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyNewIndices(IndicesClusterStateService.java:303)\n    at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:172)\n    at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:493)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\na short term workaround for this is to de-register the listener which it should do anyway like this:\n\n``` Java\n        @Override\n        public void afterIndexClosed(Index index, @IndexSettings Settings indexSettings) {\n            lifecycle.removeListener(this);\n        }\n```\n\nBut we should really turn this into an index level component that we destroy once the index is destroyed. ie instead of `IndicesLifecycle` we would have an `IndexLifecycle` that we can trash after the index is destroyed\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146472735","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146472735","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146472735,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ3MjczNQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T09:35:39Z","updated_at":"2015-10-08T09:35:39Z","author_association":"CONTRIBUTOR","body":"@dakrone  I am going to push this out to 2.1 for now\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146473095","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146473095","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146473095,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ3MzA5NQ==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T09:36:23Z","updated_at":"2015-10-08T09:36:23Z","author_association":"MEMBER","body":"That’s indeed why the listener is created twice, but  does it explain why we call beforeIndexShardCreated twice- the master doesn’t create shards... That’s where I got stuck looking at this…\n\n> On 08 Oct 2015, at 11:27, Simon Willnauer notifications@github.com wrote:\n> \n> ok I can reproduce this problem. It's caused by the fact that the master creates the index once before we actually creating it on other nodes to ensure we can fully create it and don't throw an exception. If you print stacktraces it looks like this:\n> \n> [2015-10-08 11:23:50,331][INFO ][org.elasticsearch.index  ] [ListenerIT#testIt]: starting test\n> [2015-10-08 11:23:50,604][WARN ][LISTENER                 ] Listener created!\n> java.lang.RuntimeException\n>     at org.elasticsearch.index.ListenerIT$MyTestListener.<init>(ListenerIT.java:67)\n>     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n>     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n>     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n>     at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n>     at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)\n>     at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)\n>     at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)\n>     at org.elasticsearch.common.inject.InjectorImpl$5$1.call(InjectorImpl.java:828)\n>     at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)\n>     at org.elasticsearch.common.inject.InjectorImpl$5.get(InjectorImpl.java:823)\n>     at org.elasticsearch.common.inject.InheritingState.makeAllBindingsToEagerSingletons(InheritingState.java:157)\n>     at org.elasticsearch.common.inject.InjectorImpl.readOnlyAllSingletons(InjectorImpl.java:909)\n>     at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:59)\n>     at org.elasticsearch.indices.IndicesService.createIndex(IndicesService.java:347)\n>     at org.elasticsearch.cluster.metadata.MetaDataCreateIndexService$2.execute(MetaDataCreateIndexService.java:364)\n>     at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:383)\n>     at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)\n>     at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)\n>     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n>     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n>     at java.lang.Thread.run(Thread.java:745)\n> [2015-10-08 11:23:50,688][INFO ][org.elasticsearch.cluster.metadata] [node_s0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [_default_]\n> [2015-10-08 11:23:50,710][WARN ][LISTENER                 ] Listener created!\n> java.lang.RuntimeException\n>     at org.elasticsearch.index.ListenerIT$MyTestListener.<init>(ListenerIT.java:67)\n>     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n>     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n>     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n>     at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n>     at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)\n>     at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)\n>     at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)\n>     at org.elasticsearch.common.inject.InjectorImpl$5$1.call(InjectorImpl.java:828)\n>     at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)\n>     at org.elasticsearch.common.inject.InjectorImpl$5.get(InjectorImpl.java:823)\n>     at org.elasticsearch.common.inject.InheritingState.makeAllBindingsToEagerSingletons(InheritingState.java:157)\n>     at org.elasticsearch.common.inject.InjectorImpl.readOnlyAllSingletons(InjectorImpl.java:909)\n>     at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:59)\n>     at org.elasticsearch.indices.IndicesService.createIndex(IndicesService.java:347)\n>     at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyNewIndices(IndicesClusterStateService.java:303)\n>     at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:172)\n>     at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:493)\n>     at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)\n>     at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)\n>     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n>     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n>     at java.lang.Thread.run(Thread.java:745)\n> \n> a short term workaround for this is to de-register the listener which it should do anyway like this:\n> \n> ```\n>     @Override\n> ```\n> \n> public void afterIndexClosed(Index index, @IndexSettings Settings\n>  indexSettings) {\n>             lifecycle\n> .removeListener(this\n> );\n>         }\n> \n> But we should really turn this into an index level component that we destroy once the index is destroyed. ie instead of IndicesLifecycle we would have an IndexLifecycle that we can trash after the index is destroyed\n> \n> —\n> Reply to this email directly or view it on GitHub.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146473230","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146473230","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146473230,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ3MzIzMA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T09:36:44Z","updated_at":"2015-10-08T09:36:44Z","author_association":"CONTRIBUTOR","body":"I also think it's not necessarily a bug, if a listener does this it will leak once an index is moved to another node entirely so it has to cleanup after himself.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146473557","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146473557","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146473557,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ3MzU1Nw==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T09:37:51Z","updated_at":"2015-10-08T09:37:51Z","author_association":"CONTRIBUTOR","body":"> That’s indeed why the listener is created twice, but  does it explain why we call beforeIndexShardCreated twice- the master doesn’t create shards... That’s where I got stuck looking at this…\n\nit does never unregister itself. so if you allocate a shard on the node that happens to be the master as well you will AGAIN register the listener (a new instance) once it's actually creating the shard.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/146474812","html_url":"https://github.com/elastic/elasticsearch/issues/13259#issuecomment-146474812","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13259","id":146474812,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NjQ3NDgxMg==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-10-08T09:41:47Z","updated_at":"2015-10-08T09:41:47Z","author_association":"CONTRIBUTOR","body":"here is an output of this test https://gist.github.com/s1monw/1a552a6abb7f63c51e6f\n\n```\n...\n[2015-10-08 11:39:40,526][WARN ][LISTENER                 ] Listener created!\njava.lang.RuntimeException\n    at org.elasticsearch.index.ListenerIT$MyTestListener.<init>(ListenerIT.java:67)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)\n    at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)\n    at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)\n    at org.elasticsearch.common.inject.InjectorImpl$5$1.call(InjectorImpl.java:828)\n    at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)\n    at org.elasticsearch.common.inject.InjectorImpl$5.get(InjectorImpl.java:823)\n    at org.elasticsearch.common.inject.InheritingState.makeAllBindingsToEagerSingletons(InheritingState.java:157)\n    at org.elasticsearch.common.inject.InjectorImpl.readOnlyAllSingletons(InjectorImpl.java:909)\n    at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:59)\n    at org.elasticsearch.indices.IndicesService.createIndex(IndicesService.java:347)\n    at org.elasticsearch.cluster.metadata.MetaDataCreateIndexService$2.execute(MetaDataCreateIndexService.java:364)\n    at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:383)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n[2015-10-08 11:39:40,714][INFO ][org.elasticsearch.cluster.metadata] [node_s0] [test] creating index, cause [api], templates [random_index_template], shards [1]/[0], mappings [_default_]\n[2015-10-08 11:39:40,741][WARN ][LISTENER                 ] Listener created!\njava.lang.RuntimeException\n    at org.elasticsearch.index.ListenerIT$MyTestListener.<init>(ListenerIT.java:67)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at org.elasticsearch.common.inject.DefaultConstructionProxyFactory$1.newInstance(DefaultConstructionProxyFactory.java:50)\n    at org.elasticsearch.common.inject.ConstructorInjector.construct(ConstructorInjector.java:86)\n    at org.elasticsearch.common.inject.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:116)\n    at org.elasticsearch.common.inject.InjectorImpl$5$1.call(InjectorImpl.java:828)\n    at org.elasticsearch.common.inject.InjectorImpl.callInContext(InjectorImpl.java:880)\n    at org.elasticsearch.common.inject.InjectorImpl$5.get(InjectorImpl.java:823)\n    at org.elasticsearch.common.inject.InheritingState.makeAllBindingsToEagerSingletons(InheritingState.java:157)\n    at org.elasticsearch.common.inject.InjectorImpl.readOnlyAllSingletons(InjectorImpl.java:909)\n    at org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:59)\n    at org.elasticsearch.indices.IndicesService.createIndex(IndicesService.java:347)\n    at org.elasticsearch.indices.cluster.IndicesClusterStateService.applyNewIndices(IndicesClusterStateService.java:303)\n    at org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:172)\n    at org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:493)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:231)\n    at org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:194)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n[2015-10-08 11:39:40,748][WARN ][LISTENER                 ] RUNNING beforeIndexShardCreated() on instance org.elasticsearch.index.ListenerIT$MyTestListener@25e3d50a \n[2015-10-08 11:39:40,748][WARN ][LISTENER                 ] RUNNING beforeIndexShardCreated() on instance org.elasticsearch.index.ListenerIT$MyTestListener@7555bbb0 \n[2015-10-08 11:39:40,879][WARN ][LISTENER                 ] RUNNING afterIndexShardCreated() on instance org.elasticsearch.index.ListenerIT$MyTestListener@25e3d50a\n[2015-10-08 11:39:40,880][WARN ][LISTENER                 ] RUNNING afterIndexShardCreated() on instance org.elasticsearch.index.ListenerIT$MyTestListener@7555bbb0\n```\n","performed_via_github_app":null}]