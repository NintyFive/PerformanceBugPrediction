{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/16794","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16794/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16794/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16794/events","html_url":"https://github.com/elastic/elasticsearch/issues/16794","id":136027029,"node_id":"MDU6SXNzdWUxMzYwMjcwMjk=","number":16794,"title":"Add index time \"_boost\" property which automatically affects the score per document","user":{"login":"pawpro","id":941786,"node_id":"MDQ6VXNlcjk0MTc4Ng==","avatar_url":"https://avatars0.githubusercontent.com/u/941786?v=4","gravatar_id":"","url":"https://api.github.com/users/pawpro","html_url":"https://github.com/pawpro","followers_url":"https://api.github.com/users/pawpro/followers","following_url":"https://api.github.com/users/pawpro/following{/other_user}","gists_url":"https://api.github.com/users/pawpro/gists{/gist_id}","starred_url":"https://api.github.com/users/pawpro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pawpro/subscriptions","organizations_url":"https://api.github.com/users/pawpro/orgs","repos_url":"https://api.github.com/users/pawpro/repos","events_url":"https://api.github.com/users/pawpro/events{/privacy}","received_events_url":"https://api.github.com/users/pawpro/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-02-24T11:05:52Z","updated_at":"2016-02-24T11:31:25Z","closed_at":"2016-02-24T11:31:25Z","author_association":"NONE","active_lock_reason":null,"body":"This can now be achieved using function_score but that makes it very explicitly and in many cases complicates the queries unnecessarily.\n\nThe common use case for this would be positive popularity bias. This is where one would want popular search items to be raising in search results. Implementing popularity in ES entirely would be defeated with reindexing but if the popularity value was provided by the indexing service (business application) at index time then ES would only need to consider it while scoring.\n\nIt is important in my head to be able to hide this complexity behind regular _score so that it \"just works\" when enabled.\n","closed_by":{"login":"pawpro","id":941786,"node_id":"MDQ6VXNlcjk0MTc4Ng==","avatar_url":"https://avatars0.githubusercontent.com/u/941786?v=4","gravatar_id":"","url":"https://api.github.com/users/pawpro","html_url":"https://github.com/pawpro","followers_url":"https://api.github.com/users/pawpro/followers","following_url":"https://api.github.com/users/pawpro/following{/other_user}","gists_url":"https://api.github.com/users/pawpro/gists{/gist_id}","starred_url":"https://api.github.com/users/pawpro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pawpro/subscriptions","organizations_url":"https://api.github.com/users/pawpro/orgs","repos_url":"https://api.github.com/users/pawpro/repos","events_url":"https://api.github.com/users/pawpro/events{/privacy}","received_events_url":"https://api.github.com/users/pawpro/received_events","type":"User","site_admin":false},"performed_via_github_app":null}