{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/5191","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5191/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5191/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5191/events","html_url":"https://github.com/elastic/elasticsearch/issues/5191","id":27941965,"node_id":"MDU6SXNzdWUyNzk0MTk2NQ==","number":5191,"title":"Add support for matching mode when attaching REST handlers","user":{"login":"templth","id":558344,"node_id":"MDQ6VXNlcjU1ODM0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/558344?v=4","gravatar_id":"","url":"https://api.github.com/users/templth","html_url":"https://github.com/templth","followers_url":"https://api.github.com/users/templth/followers","following_url":"https://api.github.com/users/templth/following{/other_user}","gists_url":"https://api.github.com/users/templth/gists{/gist_id}","starred_url":"https://api.github.com/users/templth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/templth/subscriptions","organizations_url":"https://api.github.com/users/templth/orgs","repos_url":"https://api.github.com/users/templth/repos","events_url":"https://api.github.com/users/templth/events{/privacy}","received_events_url":"https://api.github.com/users/templth/received_events","type":"User","site_admin":false},"labels":[{"id":111624690,"node_id":"MDU6TGFiZWwxMTE2MjQ2OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/feedback_needed","name":"feedback_needed","color":"d4c5f9","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"assignees":[{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false}],"milestone":null,"comments":14,"created_at":"2014-02-20T07:27:41Z","updated_at":"2015-01-30T09:57:38Z","closed_at":"2015-01-30T09:57:38Z","author_association":"NONE","active_lock_reason":null,"body":"At the moment, ElasticSearch does a matching mode `equals` when attaching REST handlers using the method `RestController#registerHandler`:\n\n```\n    @Inject\npublic MyRestHandler(Settings settings, Client client, RestController controller) {\n    super(settings, client);\n\n    // Define REST endpoints\n    controller.registerHandler(Method.GET, \"(...)\",this);\n```\n\nIn some cases, it's not suitable since we would want to attach an handle on a subset of URIs. For such cases, the matching mode `starts with` would be more suitable:\n\n```\ncontroller.registerHandler(Method.GET, \"/myuri\",\n                   RestMatchingMode.STARTS_WITH, this);\n```\n\nThis means that all sub URIs (like `/myuri/segment1`, `/myuri/segment2/segment3/segment4`, and so on) would handle by the same class. This would be useful if we want manage URIs in a custom way (URI format, ...) that isn't supported by ElasticSearch. This is typically the case for OData URIs.\n\nTo implement such feature, we need to add an enumeration to list all support matching modes:\n\n```\npublic enum RestMatchingMode {\n    EQUALS, STARTS_WITH\n}\n```\n\nWe also need to update the `RestController` to add the corresponding methods:\n\n```\npublic void registerHandler(RestRequest.Method method,\n                                      String path, RestHandler handler) {\n    registerHandler(method, path, RestMatchingMode.EQUALS, handler);\n}\n\npublic void registerHandler(RestRequest.Method method, String path,\n                                     RestMatchingMode matchingMode, RestHandler handler) {\n    (...)\n}\n```\n\nAs the matching is handled by the classes `PathTrie` and `TreeNode`, we need to add in it the support of matching mode at both methods insert and retrieve.\n\n```\npublic synchronized void insert(String[] path, int index,\n                     RestMatchingMode matchingMode, T value) {\n   (...)\n   TrieNode<T> node = children.get(key);\n   if (node == null) {\n        if (index == (path.length - 1)) {\n            node = new TrieNode<T>(token, value, this, wildcard, matchingMode);\n        } else {\n            node = new TrieNode<T>(token, null, this, wildcard, RestMatchingMode.EQUALS);\n        }\n        children = newMapBuilder(children).put(key, node).immutableMap();\n    (...)\n}\n\npublic T retrieve(String[] path, int index, Map<String, String> params) {\n    (...)\n    if (index == (path.length - 1)) {\n        return node.value;\n    }\n\n    // In the case of starts with matching, return the value\n    if (RestMatchingMode.STARTS_WITH.equals(node.getMatchingMode())) {\n        return node.value;\n    }\n    (...)\n```\n\nMoreover we simply need to add the property matchingMode in the class TreeNode\n\n```\npublic class TrieNode<T> {\n    (...)\n    private RestMatchingMode matchingMode; \n    (...)\n\n    public TrieNode(String key, T value, TrieNode parent, String wildcard,\n                               RestMatchingMode matchingMode) {\n        this.key = key;\n        this.wildcard = wildcard;\n        this.isWildcard = (key.equals(wildcard));\n        this.parent = parent;\n        this.value = value;\n        this.children = ImmutableMap.of();\n        this.matchingMode = matchingMode;\n        (...)\n    }\n    (...)\n}\n```\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}