[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/86545368","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-86545368","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":86545368,"node_id":"MDEyOklzc3VlQ29tbWVudDg2NTQ1MzY4","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2015-03-26T14:44:58Z","updated_at":"2015-03-26T14:44:58Z","author_association":"CONTRIBUTOR","body":"What would the score be as c approaches 0? We added exp, gauss and linear because like this we can at least make sure the score is between 0 and 1 always. What is your usecase?\nI cannot promise there will be any resources soon to implement this but it should be really easy to implement it as a plugin like so: https://github.com/elastic/elasticsearch/blob/master/src/test/java/org/elasticsearch/search/functionscore/FunctionScorePluginTests.java\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/86907596","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-86907596","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":86907596,"node_id":"MDEyOklzc3VlQ29tbWVudDg2OTA3NTk2","user":{"login":"ofir-reich","id":8654211,"node_id":"MDQ6VXNlcjg2NTQyMTE=","avatar_url":"https://avatars0.githubusercontent.com/u/8654211?v=4","gravatar_id":"","url":"https://api.github.com/users/ofir-reich","html_url":"https://github.com/ofir-reich","followers_url":"https://api.github.com/users/ofir-reich/followers","following_url":"https://api.github.com/users/ofir-reich/following{/other_user}","gists_url":"https://api.github.com/users/ofir-reich/gists{/gist_id}","starred_url":"https://api.github.com/users/ofir-reich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ofir-reich/subscriptions","organizations_url":"https://api.github.com/users/ofir-reich/orgs","repos_url":"https://api.github.com/users/ofir-reich/repos","events_url":"https://api.github.com/users/ofir-reich/events{/privacy}","received_events_url":"https://api.github.com/users/ofir-reich/received_events","type":"User","site_admin":false},"created_at":"2015-03-27T11:37:13Z","updated_at":"2015-03-27T11:48:30Z","author_association":"NONE","body":"You mean where x approaches 0. It would be best to add a constant b, so that it's (x+b)^c, or (abs(x)+b)^c to handle negative cases.\nBut to be more exact, what we need is a minus logarithmic decay:\nScore = -log( abs(x)+b ),\nwhere x is the difference between the query term and the document.\nOur use case is for time decay. We want the time difference between documents to affect the result in this way, so that more recent documents are given a higher score. The reason we can't use any of the other decay functions is that we use a probabilistic interpretation for the IDF and we want it to be consistent all through our search to get the exact results we want. We've found that the probability that a document is relevant to our query decays as a power law: probability ~ 1/(delta_t+b) . (more precisely, the odds ratio, but never mind).\nSince IDF is (close to) the log of a probability of a random document to match the query, we take the exponent of the IDF (the resulting score). We want to add to the probability the power law decay, but since scores are additive and we take an exponent of the result in the end, we want a log( abs(delta_t)+b) function for the score so that when we take the exponent to obtain the probability it would become 1/(delta_t+b).\nI hope this was clear. I'm open to other clarifications if needed.\nThank you!\n\np.s. notice that in the probabilistic interpretation, a decay function of (-x) for the score would correspond, when taking the exponent, to an exponential decay in probability, which also might be useful for many use-cases. It doesn't make much sense to decay the score itself as en exponent.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/88507939","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-88507939","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":88507939,"node_id":"MDEyOklzc3VlQ29tbWVudDg4NTA3OTM5","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2015-04-01T14:36:20Z","updated_at":"2015-04-01T14:36:20Z","author_association":"CONTRIBUTOR","body":"I think I understand the usecase but I am not convinced that this is a very common one so I am leaning against adding this scoring function to core. \nWhat keeps you from implementing this in a script (potentially native) or as a plugin to decay functions?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/88508824","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-88508824","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":88508824,"node_id":"MDEyOklzc3VlQ29tbWVudDg4NTA4ODI0","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","site_admin":false},"created_at":"2015-04-01T14:39:43Z","updated_at":"2015-04-01T14:39:43Z","author_association":"CONTRIBUTOR","body":"Maintenance, mostly. We could do that, but the internal APIs are not stable and aren't going to be for a while. I've been maintaining various plugins for over 2 years now.\n\nWe think this could be very useful for many others as well, hence this proposals. We do hope it will make it in, and will gladly provide a complete PR for it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/162242807","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-162242807","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":162242807,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MjI0MjgwNw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-12-05T20:14:06Z","updated_at":"2015-12-05T20:14:06Z","author_association":"CONTRIBUTOR","body":"The maths was above me, but it looks like this could be implemented easily with a (very fast) `expression` script, no? Plus the `weight` parameter allows for tuning between functions.\n\nAny reason to keep this open?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/162631624","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-162631624","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":162631624,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MjYzMTYyNA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2015-12-07T19:24:05Z","updated_at":"2015-12-07T19:24:05Z","author_association":"CONTRIBUTOR","body":"> Any reason to keep this open?\n\nI think expression scripts are likely to be good for this. The API there is pretty stable.\n\nIf we think the shape of the decay is useful it might be worth adding. If I'm reading it right they are talking about something like `1 + log(b) - log( a * abs(now - doc['time']) +b )`\n\nThis creates something that starts at 0 and decays quickly at first but more and more slowly as time goes on. And, if my very very very rusty calculus doesn't fail me, it will eventually become negative so we'd want to clamp it at 0.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/249879176","html_url":"https://github.com/elastic/elasticsearch/issues/10048#issuecomment-249879176","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10048","id":249879176,"node_id":"MDEyOklzc3VlQ29tbWVudDI0OTg3OTE3Ng==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2016-09-27T14:20:10Z","updated_at":"2016-09-27T14:20:10Z","author_association":"MEMBER","body":"This is possible with the new Painless scripting language, so I am closing this since it's been almost a year.\n","performed_via_github_app":null}]