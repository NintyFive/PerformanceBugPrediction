[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/506569782","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-506569782","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":506569782,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNjU2OTc4Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-06-28T01:48:24Z","updated_at":"2019-06-28T01:48:24Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/506578577","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-506578577","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":506578577,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNjU3ODU3Nw==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-06-28T02:40:48Z","updated_at":"2019-06-28T02:40:48Z","author_association":"CONTRIBUTOR","body":"> allow startup process to continue even if a key is not recognized.\r\n\r\nYou will find it hard to make this case.\r\nWe have a clear preference to detect problems and fail.\r\n\r\nIf we have a realm configured in `elasticsearch.yml` like:\r\n```\r\nxpack.security.authc.realms:\r\n  ldap.corp_ldap:\r\n    url: \"ldaps://some.example.com:636\"\r\n    bind_dn: \"CN=elasticsearch,OU=service_accounts,DC=example,DC=com\"\r\n``` \r\nand then a keystore with \r\n- `xpack.security.authc.realms.ldap.corp-ldap.secure_bind_password`\r\n\r\nThen the user has made a mistake. They've named their realm \"corp_ldap\" in the YAML and \"corp-ldap\" in the keystore. We want to detect that and fail fast.\r\n\r\nWe _could_ (and in the past have) make the assumption that the user knows what they're doing, and in this case they might be planing to create a second \"corp-ldap\" realm in the future, but such leniency leads to far more problems than it solves.\r\n\r\nI understand why this causes problems. From an admin point of view, there's no reasonable option to update both files (YAML and Keystore) in a way that guarantees your node can be safely restarted. If you change the yml first, and the node is restarted before you change the keystore it will fail (which is the correct outcome, but not nice from an operations point of view), and likewise if you update them in the reverse.  \r\nAnd obviously, as you have pointed out, reloading the keystore makes all of that more complicated.\r\n\r\n> make reload API fail and return an error if settings are invalid\r\n\r\nI think we can make progress on this (or at least, even if we're not ready to make it a hard failure, it could report back the settings that were incorrect). However, there are 2 complexities:\r\n\r\n**(1)** On our side, it's a little trickier than it sounds.  \r\nIt's not too hard for us to detect that `xpack.security.authc.realms.ldap.corp-ldap.secure_bind_password` _might_ be a valid keystore setting (if you have an LDAP realm named \"corp-ldap\") and `xpack.security.authc.realms.ldap.corp-ldap.bind_dn` is _never_ a valid keystore setting (because `bind_dn` is not a secure setting). That's just a matter of checking whether the items in the keystore match up to `Setting` keys that this node knows about.  \r\nBut, the more extensive validation, that (a) this realm does exist, and (b) the assigned _value_ is meaningful will take more work. At the moment a lot of that validation is implemented as part of the process by which the components initialise themselves. Extracting it so that we can run it in isolation & validate the settings, without actually re-initialising the components will take some time, and I wouldn't want to give you any expectation that it would happen soon.\r\n\r\n**(2)** On your side, I don't think this would actually do what you want.\r\nIf you to make a change that adds a new realm to `elasticsearch.yml`, and then add the secure settings to the keystore, and then reload the keystore we would fail because the running instance does not know about the new realm.\r\nSo, you wouldn't be able to use this API to determine whether the node was going to be able to start up cleanly, because what you really want is a way to test: _Is this combination of `elasticsearch.yml` and `elasticsearch.keystore` valid for node startup_, and the only option we offer for that (now, and in the near future) is to try starting the node.\r\n\r\nHowever, if you were able to differentiate between keystore changes that are part of a larger \"config change\" (where you change both the yml and the keystore) and those that are intended to modify a running node (e.g. a keystore change to update a password) then we probably could make some progress.\r\nIf you know which of those scenarios you're in, then you could:\r\n- in the former case, treat the whole change as a unit & apply it. If the node fails to start, then roll back the whole change (both yml and keystore)\r\n- in the latter case, call the reload keystore API, and have us validate it (which we don't do now, but potentially could).\r\n\r\n### Other random thoughts \r\n\r\nI wonder whether there's a lot of use case for the dynamically _adding_ a setting to the keystore. Most of the cases that I can think of are for updating a value rather than adding it. Updating an existing setting is alaways a safer change because you know that the key was valid when the node started, so the only potential problem is that the value is wrong (which could still prevent node startup).\r\n\r\nHow do you deal with the fact that not all keystore settings are dynamic?\r\ne.g. Right now you can't change the `secure_bind_password` on an ldap realm by reloading the keystore. So if someone changes that setting on cloud, do you detect that it needs to restart the node?\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/506771454","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-506771454","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":506771454,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNjc3MTQ1NA==","user":{"login":"dimatkach","id":4604190,"node_id":"MDQ6VXNlcjQ2MDQxOTA=","avatar_url":"https://avatars0.githubusercontent.com/u/4604190?v=4","gravatar_id":"","url":"https://api.github.com/users/dimatkach","html_url":"https://github.com/dimatkach","followers_url":"https://api.github.com/users/dimatkach/followers","following_url":"https://api.github.com/users/dimatkach/following{/other_user}","gists_url":"https://api.github.com/users/dimatkach/gists{/gist_id}","starred_url":"https://api.github.com/users/dimatkach/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dimatkach/subscriptions","organizations_url":"https://api.github.com/users/dimatkach/orgs","repos_url":"https://api.github.com/users/dimatkach/repos","events_url":"https://api.github.com/users/dimatkach/events{/privacy}","received_events_url":"https://api.github.com/users/dimatkach/received_events","type":"User","site_admin":false},"created_at":"2019-06-28T15:16:05Z","updated_at":"2019-06-28T15:16:25Z","author_association":"NONE","body":"> Then the user has made a mistake. They've named their realm \"corp_ldap\" in the YAML and \"corp-ldap\" in the keystore. We want to detect that and fail fast.\r\n\r\nIndeed, they have, and we do! \r\nBut we don't have to do that (detect and fail) on keystore load - failing to start because configured realm `corp_ldap` does not have password set would do just as well if not better, and it would not create problems like the one we are discussing here.\r\n\r\nI agree, that ES should detect and fail fast situations when configuration is _invalid_, just not when there is some (yet) unused key in the keystore. I am not sure I understand what is the harm in letting people add things to keystore before the rest of configuration is in place (like in my example above, it could actually be handled by different people). \r\n\r\n> I wonder whether there's a lot of use case for the dynamically adding a setting to the keystore. \r\n\r\nCredentials for snapshot repos is one example I can think of. \r\n\r\n>  So if someone changes that setting on cloud, do you detect that it needs to restart the node?\r\n\r\nWe don't (seems like that would require too much knowledge from us about every individual setting), it is up to the user to do a rolling restart after they change something that is not reloadable in ES. \r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/507104486","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-507104486","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":507104486,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzEwNDQ4Ng==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-01T03:38:37Z","updated_at":"2019-07-01T03:38:37Z","author_association":"CONTRIBUTOR","body":"> I agree, that ES should detect and fail fast situations when configuration is invalid, just not when there is some (yet) unused key in the keystore. I am not sure I understand what is the harm in letting people add things to keystore before the rest of configuration is in place (like in my example above, it could actually be handled by different people).\r\n\r\nThere is no reasonable heuristic that can tell the difference between a mistake and an intentional pre-configuration well enough to be of benefit to users.\r\n\r\nIt presumes that a typo in a setting key, will will always cause a hard failure due to the correct key being missing. In some cases this is true, but it is not always true.\r\n\r\nSome settings are optional, it is intentional that the node will start without the setting being present. In such cases, a typo in a setting can only be detected because the incorrect setting exists, which is why we enforce that every setting has to be meaningful.\r\n\r\nThis is not just an academic problem. I have certainly seen far more cases of people putting unsupported entries into the keystore because they made a mistake (either a typo in the key, or misreading the docs and getting the key name wrong, or putting non-secure settings into the keystore) than I have seen people intentionally put settings in there that they knew would be unused (yet).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/507818795","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-507818795","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":507818795,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzgxODc5NQ==","user":{"login":"amitavmohanty01","id":1063403,"node_id":"MDQ6VXNlcjEwNjM0MDM=","avatar_url":"https://avatars1.githubusercontent.com/u/1063403?v=4","gravatar_id":"","url":"https://api.github.com/users/amitavmohanty01","html_url":"https://github.com/amitavmohanty01","followers_url":"https://api.github.com/users/amitavmohanty01/followers","following_url":"https://api.github.com/users/amitavmohanty01/following{/other_user}","gists_url":"https://api.github.com/users/amitavmohanty01/gists{/gist_id}","starred_url":"https://api.github.com/users/amitavmohanty01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amitavmohanty01/subscriptions","organizations_url":"https://api.github.com/users/amitavmohanty01/orgs","repos_url":"https://api.github.com/users/amitavmohanty01/repos","events_url":"https://api.github.com/users/amitavmohanty01/events{/privacy}","received_events_url":"https://api.github.com/users/amitavmohanty01/received_events","type":"User","site_admin":false},"created_at":"2019-07-02T19:45:04Z","updated_at":"2019-07-02T19:45:04Z","author_association":"NONE","body":"I think you are mixing concerns here.\r\n\r\nThe concerns at play are:\r\n1. picking settings from elasticsearch process\r\n2. storing secure settings in a keystore\r\n3. detecting incorrect settings\r\n\r\nThe approach taken by you is that when incorrect settings are added to keystore, you fail the process startup. You think you are failing fast. You are actually violating the design boundary of keystore though. A keystore should have the capability of containing arbitrary keys. It is the process accessing it that should know how to handle them. Thus the keystore is becoming a validator.\r\n\r\nIf you want to help users detect incorrect settings, give them a script to validate which settings are correct. Here is how the design of the tools should be:\r\n\r\n1. keystore: lets you store whatever keys you want to store\r\n2. elasticsearch process picks up relevant keys as mentioned in config and ignores others\r\n3. validation script tells users that the keys mentioned in the config YAML are missing in the keystore and the user should fix that\r\n\r\nPutting older entries, redundant entries in a keystore is a perfectly valid scenario.\r\n\r\nImagine a multi-tenant keystore situation. The keys for all processes are added to the keystore for simplicity and each process picks what is necessary.\r\n\r\nAnother mistake you are doing design wise is that there are two sources of truth for the elasticsearch process. If there are two sources of truth, eventually there will always be conflict (which is kind of why we are having this discussion). To have a single source of truth, it is preferable to rely on the YAML only and `refer` to values in the keystore.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/507910056","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-507910056","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":507910056,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzkxMDA1Ng==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-03T02:11:51Z","updated_at":"2019-07-03T02:11:51Z","author_association":"CONTRIBUTOR","body":"The elasticsearch keystore is not, and was never intended to be a general purpose keystore.\r\nIt is specifically designed as an extension of the YAML file into a encrypted format of our own design, that is cleared from memory as soon as it is processed.\r\n\r\nIt should not be shared between processes (and cannot be because it must be stored in the same directory as the YAML).\r\n\r\nThere are other designs that we could have implemented, including the reference approach that you are advocating, however such a design would not have satisfied the constraints that we wanted for the keystore.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/508011440","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-508011440","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":508011440,"node_id":"MDEyOklzc3VlQ29tbWVudDUwODAxMTQ0MA==","user":{"login":"amitavmohanty01","id":1063403,"node_id":"MDQ6VXNlcjEwNjM0MDM=","avatar_url":"https://avatars1.githubusercontent.com/u/1063403?v=4","gravatar_id":"","url":"https://api.github.com/users/amitavmohanty01","html_url":"https://github.com/amitavmohanty01","followers_url":"https://api.github.com/users/amitavmohanty01/followers","following_url":"https://api.github.com/users/amitavmohanty01/following{/other_user}","gists_url":"https://api.github.com/users/amitavmohanty01/gists{/gist_id}","starred_url":"https://api.github.com/users/amitavmohanty01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amitavmohanty01/subscriptions","organizations_url":"https://api.github.com/users/amitavmohanty01/orgs","repos_url":"https://api.github.com/users/amitavmohanty01/repos","events_url":"https://api.github.com/users/amitavmohanty01/events{/privacy}","received_events_url":"https://api.github.com/users/amitavmohanty01/received_events","type":"User","site_admin":false},"created_at":"2019-07-03T09:13:06Z","updated_at":"2019-07-03T09:13:06Z","author_association":"NONE","body":"I understand that we might be coming up with suggestions based on partial knowledge and hence not being able to figure out why something makes sense for you. I am not sure if you would be at the liberty of sharing more design details.\r\n\r\nI think the actionable points to know would be the following:\r\n\r\n- can you consider the reference based design in a future release ?\r\n- does it make sense to provide the incorrect settings detection tool again of course in a future release?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510777681","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-510777681","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":510777681,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDc3NzY4MQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2019-07-12T07:19:39Z","updated_at":"2019-07-12T07:19:39Z","author_association":"MEMBER","body":"To expand on what @tvernum has been saying here, we have long wanted to add validation the keystore cli. The way validation of all settings works (elasticsearch.yml and the keystore) is by the code internally registering every allowed setting, and launching a node validates the type and data of each setting found.\r\n\r\nUnfortunately running this validation in the cli is difficult because plugins are allowed to add settings (and in fact much of the system, including all of xpack, is implemented through plugin apis). These plugins are loaded into separate classloaders when a node is launched, and we also are already locked down with a SecurityManager. Additionally, these plugins can do complex initialization to work correctly with the security manager. In the keystore cli tool, we do not run with a security manager, so loading the plugins is not currently an option.\r\n\r\nThe long term plan is to extract the part of plugins that expose settings into a minimal api that would not trigger loading the complex setup the full plugin initialization needs.\r\n\r\n> can you consider the reference based design in a future release ?\r\n\r\nThis was considered when we developed our keystore, but it would have complicated how the keystore settings are ready by the system, especially around validation. It is not something we plan to change.\r\n\r\n> does it make sense to provide the incorrect settings detection tool again of course in a future release?\r\n\r\nAs described above, we want the keystore cli itself to do this validation, and we very much want to add it in a future release, but there is not yet any concrete timeline for when that will happen.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/526311286","html_url":"https://github.com/elastic/elasticsearch/issues/43722#issuecomment-526311286","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43722","id":526311286,"node_id":"MDEyOklzc3VlQ29tbWVudDUyNjMxMTI4Ng==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2019-08-29T18:41:02Z","updated_at":"2019-08-29T18:41:02Z","author_association":"MEMBER","body":"I've opened a separate issue, https://github.com/elastic/elasticsearch/issues/46148, which details the desire to have keystore validation. I'm closing this issue in favor of that one.","performed_via_github_app":null}]