[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386632291","html_url":"https://github.com/elastic/elasticsearch/issues/30398#issuecomment-386632291","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30398","id":386632291,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjYzMjI5MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-05-04T15:12:08Z","updated_at":"2018-05-04T15:12:08Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386805479","html_url":"https://github.com/elastic/elasticsearch/issues/30398#issuecomment-386805479","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30398","id":386805479,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjgwNTQ3OQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2018-05-05T13:23:54Z","updated_at":"2018-05-05T13:23:54Z","author_association":"MEMBER","body":"1.  Can you please check why `TABLE` is being used and whether that's not a bug on our side? Normally the client should query for the types supported by the driver and then ask for additional information.\r\nMicrosoft Query seems to support both base table and derived table hence why it's a bit weird to see it ask for `TABLE` without any differentiation.\r\n\r\n2. We cannot support unquoted values due to the SQL grammar. That is the table types are interpreted as literals and per SQL need to be quoted (`'`). Not using quotes means we need to change the grammar to add a dedicated keyword for each value, which is excessive and redundant.\r\nSo I think this needs to handled inside the driver - which might have more context on the actual value and how to convert it to a literal.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/387124287","html_url":"https://github.com/elastic/elasticsearch/issues/30398#issuecomment-387124287","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30398","id":387124287,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NzEyNDI4Nw==","user":{"login":"bpintea","id":1562801,"node_id":"MDQ6VXNlcjE1NjI4MDE=","avatar_url":"https://avatars3.githubusercontent.com/u/1562801?v=4","gravatar_id":"","url":"https://api.github.com/users/bpintea","html_url":"https://github.com/bpintea","followers_url":"https://api.github.com/users/bpintea/followers","following_url":"https://api.github.com/users/bpintea/following{/other_user}","gists_url":"https://api.github.com/users/bpintea/gists{/gist_id}","starred_url":"https://api.github.com/users/bpintea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bpintea/subscriptions","organizations_url":"https://api.github.com/users/bpintea/orgs","repos_url":"https://api.github.com/users/bpintea/repos","events_url":"https://api.github.com/users/bpintea/events{/privacy}","received_events_url":"https://api.github.com/users/bpintea/received_events","type":"User","site_admin":false},"created_at":"2018-05-07T16:35:50Z","updated_at":"2018-05-08T07:33:21Z","author_association":"CONTRIBUTOR","body":"> 1. Can you please check why TABLE is being used and whether that's not a bug on our side? \r\n\r\nAfter looking into msqry and delving through postgresql's and mysql's drivers, I've found out that actually `BASE TABLE` would not work at all as argument for this catalog function: they expect `TABLE` only here. Confused (and too late in the process), I checked the [spec](https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqltables-function) again, which states indeed that this argument can only be `one of the following: \"TABLE\", \"VIEW\", \"SYSTEM TABLE\", \"GLOBAL TEMPORARY\", \"LOCAL TEMPORARY\", \"ALIAS\", \"SYNONYM\", or a data sourceâ€“specific type name.`.\r\n\r\nSo, here again, just as for point 2., we have the option of either changing the plugin implementation or handle this in the driver. For the record, both drivers \"intercept\" this argument and adapt it to the server.\r\n\r\nAlso for the record, on their respective CLIs, both _psql_ and _mysql_ report the table types as `BASE TABLE`. So there's a clear differentiation between the concepts and the drivers take care of adapting the results.\r\n\r\nThe follow-up question would then be: besides the `TABLE` to `BASE TABLE` one, should the driver do any other translation? \r\n\r\n> 2. So I think this needs to handled inside the driver\r\n\r\nOK, will take care of it there.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/387280066","html_url":"https://github.com/elastic/elasticsearch/issues/30398#issuecomment-387280066","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30398","id":387280066,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NzI4MDA2Ng==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2018-05-08T04:21:56Z","updated_at":"2018-05-08T04:21:56Z","author_association":"MEMBER","body":"> For the record, both drivers \"intercept\" this argument and adapt it to the server.\r\n\r\nInteresting. Do you know what the complete mapping of _psql_ is? How do they handle `BASE TABLE` vs `DERIVED TABLE`? As `TABLE` vs `VIEW`?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/387549073","html_url":"https://github.com/elastic/elasticsearch/issues/30398#issuecomment-387549073","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30398","id":387549073,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NzU0OTA3Mw==","user":{"login":"bpintea","id":1562801,"node_id":"MDQ6VXNlcjE1NjI4MDE=","avatar_url":"https://avatars3.githubusercontent.com/u/1562801?v=4","gravatar_id":"","url":"https://api.github.com/users/bpintea","html_url":"https://github.com/bpintea","followers_url":"https://api.github.com/users/bpintea/followers","following_url":"https://api.github.com/users/bpintea/following{/other_user}","gists_url":"https://api.github.com/users/bpintea/gists{/gist_id}","starred_url":"https://api.github.com/users/bpintea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bpintea/subscriptions","organizations_url":"https://api.github.com/users/bpintea/orgs","repos_url":"https://api.github.com/users/bpintea/repos","events_url":"https://api.github.com/users/bpintea/events{/privacy}","received_events_url":"https://api.github.com/users/bpintea/received_events","type":"User","site_admin":false},"created_at":"2018-05-08T21:32:03Z","updated_at":"2018-05-09T10:35:46Z","author_association":"CONTRIBUTOR","body":"Postresql's ODBC driver will only allow return results for `SYSTEM TABLE`, `TABLE`, `VIEW`, as standard table types, and `MATVIEW` and `FOREIGN TABLE`, as their specific type.\r\nAnything else will be ignored; this is explicitly commented in the code: `NOTE: Unsupported table types (i.e., LOCAL TEMPORARY, ALIAS, etc) will return nothing`.\r\n\r\nIn a setup where MS Query connects to MS SQL Server through FreeTDS (over the TDS protocol), the driver will not \"intercept\" the type parameter - as postgresql's one does -, but simply quote whatever tokens it receives, if they aren't quoted (so addressing the issue described in point 2 above).\r\nFor an ODBC SQLTables() call, besides a plethora of system tables, SQL Server returns a user-defined table as of type `TABLE` (so matching what's been queried for!), even if a direct SELECT (using Management Studio) from the database's `information_schema` will return the `BASE TABLE` type. \r\n\r\nThis is in line with postgresql behaviour too: \r\n```\r\n$ psql testdb -E\r\npsql (9.1.24lts2)\r\nType \"help\" for help.\r\n\r\ntestdb=# \\d\r\n********* QUERY **********\r\nSELECT n.nspname as \"Schema\",\r\n  c.relname as \"Name\",\r\n  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' END as \"Type\",\r\n  pg_catalog.pg_get_userbyid(c.relowner) as \"Owner\"\r\nFROM pg_catalog.pg_class c\r\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\nWHERE c.relkind IN ('r','v','S','f','')\r\n      AND n.nspname <> 'pg_catalog'\r\n      AND n.nspname <> 'information_schema'\r\n      AND n.nspname !~ '^pg_toast'\r\n  AND pg_catalog.pg_table_is_visible(c.oid)\r\nORDER BY 1,2;\r\n**************************\r\n\r\n        List of relations\r\n Schema |  Name  | Type  | Owner\r\n--------+--------+-------+-------\r\n public | t_test | table | root\r\n(1 row)\r\n\r\ntestdb=# SELECT table_type FROM information_schema.TABLES WHERE TABLE_NAME like '%test%';\r\n table_type\r\n------------\r\n BASE TABLE\r\n(1 row)\r\n\r\n```\r\n\r\nNote: `r` in `relkind` / [pg_class](https://www.postgresql.org/docs/9.0/static/catalog-pg-class.html) stands for an \"ordinary table\". Their ODBC driver translates to this value `r` as well when servicing `SQLTables()` -- the query the driver generates is:  `\r\nselect relname, nspname, relkind from pg_catalog.pg_class c, pg_catalog.pg_namespace n where relkind in ('r', 'v') and nspname not in ('pg_catalog', 'information_schema', 'pg_toast', 'pg_temp_1') and n.oid = relnamespace order by nspname, relname`.\r\n\r\n\r\nMy conclusion of this: in general, if an application needs to differentiate between the types of tables available into a data source, it would have to query the information schema \"directly\", via an explicit SELECT statement. **As far as ODBC's SQLTables() is concerned, the specific type of table - `BASE`, `DERIVED` etc. - is irrelevant, unless it's a `SYSTEM` table or data source specific**.\r\nI believe that the issue we have with this is that we're missing now the possibility to query the information schema via a `SELECT` and `SYS TABLES` is the only query available to get this data.\r\n\r\nThe options I would see:\r\n- have the driver handle the types of tables;\r\n- extend `SYS TABLES` with a new parameter that would decide if a `BASE TABLE` (or other table types we might add) is returned as such or just `TABLE`.\r\n- have `SYS TABLES` always report the different types of tables as just `TABLE`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/387818174","html_url":"https://github.com/elastic/elasticsearch/issues/30398#issuecomment-387818174","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30398","id":387818174,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NzgxODE3NA==","user":{"login":"bpintea","id":1562801,"node_id":"MDQ6VXNlcjE1NjI4MDE=","avatar_url":"https://avatars3.githubusercontent.com/u/1562801?v=4","gravatar_id":"","url":"https://api.github.com/users/bpintea","html_url":"https://github.com/bpintea","followers_url":"https://api.github.com/users/bpintea/followers","following_url":"https://api.github.com/users/bpintea/following{/other_user}","gists_url":"https://api.github.com/users/bpintea/gists{/gist_id}","starred_url":"https://api.github.com/users/bpintea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bpintea/subscriptions","organizations_url":"https://api.github.com/users/bpintea/orgs","repos_url":"https://api.github.com/users/bpintea/repos","events_url":"https://api.github.com/users/bpintea/events{/privacy}","received_events_url":"https://api.github.com/users/bpintea/received_events","type":"User","site_admin":false},"created_at":"2018-05-09T17:41:27Z","updated_at":"2018-05-09T17:41:27Z","author_association":"CONTRIBUTOR","body":"Issue described in .2 above addressed in https://github.com/bpintea/elasticsearch-sql-odbc/commit/13f4883cdb706a423d1a763969345cd61f23a64a","performed_via_github_app":null}]