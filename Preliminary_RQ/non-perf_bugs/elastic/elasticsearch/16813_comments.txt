[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/189541620","html_url":"https://github.com/elastic/elasticsearch/issues/16813#issuecomment-189541620","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16813","id":189541620,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTU0MTYyMA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-02-27T00:50:05Z","updated_at":"2016-02-27T14:36:19Z","author_association":"MEMBER","body":"This setting is weird. Note that it's enabled by default and the documentation says\n\n> Bump the number of file descriptors to max.\n\nSo why do we want to _disable_ it to increase the number of file descriptors past 10240 on OS X?\n\nI dove into the OpenJDK code to understand this flag and how it interacts with each of the major operating systems. When this flag is set, all of them basically delegate to `getrlimit` with the resource `RLIMIT_NOFILE` and then the JVM tries to set the soft limit to the hard limit (it silently ignores failure). The one exception to this is OS X which takes the minimum of `OPEN_MAX` and the soft limit as the new soft limit.\n\nThe reason for the exception on OS X is due to this from `man setrlimit`:\n\n> `setrlimit() now returns with errno set to EINVAL in places that historically succeeded.  It no longer accepts \"rlim_cur = RLIM_INFINITY\" for RLIM_NOFILE.  Use \"rlim_cur = min(OPEN_MAX, rlim_max)\".`\n\nThe constant `OPEN_MAX` is defined as:\n\n`#define OPEN_MAX                10240   /* max open files per process - todo, make a config option? */`\n\nin `/usr/include/sys/syslimits.h`. A todo. :disappointed: This explains the 10240 number that we are seeing in the output.\n\nWhen the flag is disabled, the number of file descriptors is equal to the soft limit. This is why if the soft limit is increased on OS X, then the 10240 limit can be avoided. Sneaky and rather counterintuitive.\n\nThe situation with OS X gets weird though. If you look at `int fdalloc(proc_t p, int want, int *result)` in [`bsd/kern/kern_descrip.c`](http://www.opensource.apple.com/source/xnu/xnu-3248.20.55/bsd/kern/kern_descrip.c) there is this code:\n\n```\n    lim = min((int)p->p_rlimit[RLIMIT_NOFILE].rlim_cur, maxfiles);\n```\n\nThe limit is the minimum of the soft limit and `maxfiles`. What is `maxfiles`? It's a global variable defined in [`bsd/conf/param.c`](http://www.opensource.apple.com/source/xnu/xnu-3248.20.55/bsd/conf/param.c):\n\n```\n#define MAXFILES (OPEN_MAX + 2048)\nint maxfiles = MAXFILES;\n```\n\nWait, so is the max files still only 12288?\n\nI ran the dtrace \n\n```\n$ dtrace -n 'BEGIN { trace(`maxfiles); exit(0); }â€™\n```\n\nwhich gives \n\n```\ndtrace: description 'BEGIN ' matched 1 probe\nCPU     ID                    FUNCTION:NAME\n  0      1                           :BEGIN         12288\n```\n\nThis then leads us to `kern.maxfiles` and `kern.maxfilesperproc` which need to be increased via `sysctl` followed by a reboot. \n\nOf course, none of this makes sense on Windows (insert joke about how Windows is not a major operating system) where `getrlimit` doesn't even exist. On Windows, `MaxFDLimit` has no effect (the flag is recognized at start up, but has no impact on the runtime behavior of the JVM).\n\nI note that there is a comment on the OpenJDK bug that @jaymode linked to that this this flag is going to be deprecated, but it still appears in the JDK9 sources, so I'm skeptical of that at this time.\n\nMy conclusion for all of this is that this is _way_ too complicated. I think we should take a different route than working around the limit via this JVM flag and all these others dances on OS X. Instead, I think that we should just disable the flag if the build is a snapshot build.\n\nI opened #16835.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/189542261","html_url":"https://github.com/elastic/elasticsearch/issues/16813#issuecomment-189542261","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16813","id":189542261,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTU0MjI2MQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-02-27T00:56:06Z","updated_at":"2016-02-27T00:56:06Z","author_association":"MEMBER","body":"Closed by #16835\n","performed_via_github_app":null}]