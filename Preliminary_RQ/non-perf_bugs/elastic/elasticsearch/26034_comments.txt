[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320039478","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-320039478","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":320039478,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDAzOTQ3OA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T17:40:13Z","updated_at":"2017-08-03T17:40:13Z","author_association":"CONTRIBUTOR","body":"The documentation here in 5.0 is at best misleading, unfortunately.  Check out (https://www.elastic.co/guide/en/elasticsearch/painless/5.5/types.html) for more information on how types work in Painless.  As this documentation is relatively new, any feedback is appreciated if there are confusing areas, ambiguities, or incorrect statements.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320099377","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-320099377","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":320099377,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDA5OTM3Nw==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T21:48:17Z","updated_at":"2017-08-03T21:48:17Z","author_association":"MEMBER","body":"@StuAtGit What is your actual request json (ie including parameters, not just the raw script as you have above)?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320108043","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-320108043","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":320108043,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDEwODA0Mw==","user":{"login":"StuAtGit","id":9757762,"node_id":"MDQ6VXNlcjk3NTc3NjI=","avatar_url":"https://avatars2.githubusercontent.com/u/9757762?v=4","gravatar_id":"","url":"https://api.github.com/users/StuAtGit","html_url":"https://github.com/StuAtGit","followers_url":"https://api.github.com/users/StuAtGit/followers","following_url":"https://api.github.com/users/StuAtGit/following{/other_user}","gists_url":"https://api.github.com/users/StuAtGit/gists{/gist_id}","starred_url":"https://api.github.com/users/StuAtGit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StuAtGit/subscriptions","organizations_url":"https://api.github.com/users/StuAtGit/orgs","repos_url":"https://api.github.com/users/StuAtGit/repos","events_url":"https://api.github.com/users/StuAtGit/events{/privacy}","received_events_url":"https://api.github.com/users/StuAtGit/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T22:33:52Z","updated_at":"2017-08-03T22:55:59Z","author_association":"NONE","body":"@rjernst \r\n\r\nIs there an easy way to dump this from the Java API?\r\nThe most promising method I found was:\r\n```\r\nlog.debug(updateRequest.upsertRequest().toString());\r\n```\r\nBut it appears to not contain the whole request.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320110833","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-320110833","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":320110833,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDExMDgzMw==","user":{"login":"StuAtGit","id":9757762,"node_id":"MDQ6VXNlcjk3NTc3NjI=","avatar_url":"https://avatars2.githubusercontent.com/u/9757762?v=4","gravatar_id":"","url":"https://api.github.com/users/StuAtGit","html_url":"https://github.com/StuAtGit","followers_url":"https://api.github.com/users/StuAtGit/followers","following_url":"https://api.github.com/users/StuAtGit/following{/other_user}","gists_url":"https://api.github.com/users/StuAtGit/gists{/gist_id}","starred_url":"https://api.github.com/users/StuAtGit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StuAtGit/subscriptions","organizations_url":"https://api.github.com/users/StuAtGit/orgs","repos_url":"https://api.github.com/users/StuAtGit/repos","events_url":"https://api.github.com/users/StuAtGit/events{/privacy}","received_events_url":"https://api.github.com/users/StuAtGit/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T22:51:18Z","updated_at":"2017-08-03T22:54:10Z","author_association":"NONE","body":"Also note that I may actually have a workaround coming. Also, I should probably just upgrade to 5.5 - thanks for the reminder & the link @jdconrad  ;)\r\n\r\nThe workaround is predicated on two main things \r\n -  the realization (a straightforward one, once you dig into what's going on), that the types that can be easily assigned to in Painless are necessarily the types that Elastic search natively supports - ints, booleans, maps, lists, and such. (or am I wrong?)\r\n\r\n -  the overall problem I'm trying to solve is how to perform an upsert that merges lists. I've seen this referenced elsewhere and dismissed as \"too hard, do it with painless\". But, note that it's pretty hard to do with painless in a reasonably generic fashion. I may file a feature request for the option to \".mergeLists(true).allowDuplicates(false)\" in upsert requests - as that would reduce my problem to a trivial one.\r\n\r\nA brief sketch of my workaround (hopefully more details coming) - it is a bit of java code that traverses/reflects the Fields of a given POJO (that represents the objects I'm storing in elasticsearch, passed in a request serialized in JSON). Checks the type of each field and decides if:\r\n  - the field is an instance of String, Long, Integer, Double, Boolean ... and generates a simple script line that assigns to the field, with the given field name, again using reflection to grab the value.\r\n  - the field is an instance of a collection - generates a script line that appends values from that field into the existing field in ES\r\n  - the field is another POJO - recurse through the fields of that POJO, building the equivalent flattened path that will exist in elastic search, i.e. \"messageDateTime : { dateTime : { year : 0 ..... \r\nwill have a field like [MyRecordType].messageDateTime.dateTime.year built. For each of those paths, at the leaf, you determine the final type, and apply the two rules above.\r\n\r\nNote that this all results from me having a large object, with many fields, and, in it, I have *one* list that I really need to be merged, not overwritten - if they are all merged, fine, but that one really does need to be merged. As you can imagine, spending a few days writing up a bunch of Java code to recursively reflect through an objects fields, determining the fields types (and values!!), and generating the corresponding Painless code to allow me to do an upsert where lists are merged does make me think that maybe it would be better to have some simple merge options on the UpsertRequest?\r\nI do understand the general solution to merging a data type in a distributed system is non-trivial:\r\nhttps://en.wikipedia.org/wiki/Conflict-free_replicated_data_type\r\nBut! It seems a few simple options could cover about 90% of the use cases. Also note that doing all this reflection to generate a Painless script that is then run on upsert is prolly a bit less efficient than natively supporting merges.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320118375","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-320118375","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":320118375,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDExODM3NQ==","user":{"login":"StuAtGit","id":9757762,"node_id":"MDQ6VXNlcjk3NTc3NjI=","avatar_url":"https://avatars2.githubusercontent.com/u/9757762?v=4","gravatar_id":"","url":"https://api.github.com/users/StuAtGit","html_url":"https://github.com/StuAtGit","followers_url":"https://api.github.com/users/StuAtGit/followers","following_url":"https://api.github.com/users/StuAtGit/following{/other_user}","gists_url":"https://api.github.com/users/StuAtGit/gists{/gist_id}","starred_url":"https://api.github.com/users/StuAtGit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StuAtGit/subscriptions","organizations_url":"https://api.github.com/users/StuAtGit/orgs","repos_url":"https://api.github.com/users/StuAtGit/repos","events_url":"https://api.github.com/users/StuAtGit/events{/privacy}","received_events_url":"https://api.github.com/users/StuAtGit/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T23:41:05Z","updated_at":"2017-08-03T23:41:05Z","author_association":"NONE","body":"Another way to make the problem trivial is to allow scripts to run only on certain fields, and use the upsertDoc for all other fields - this means that I could write a small, simple script for one field, and just submit an upsertDoc for the rest. This might be a better approach to the overall use case that triggered this issue.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320118501","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-320118501","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":320118501,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDExODUwMQ==","user":{"login":"StuAtGit","id":9757762,"node_id":"MDQ6VXNlcjk3NTc3NjI=","avatar_url":"https://avatars2.githubusercontent.com/u/9757762?v=4","gravatar_id":"","url":"https://api.github.com/users/StuAtGit","html_url":"https://github.com/StuAtGit","followers_url":"https://api.github.com/users/StuAtGit/followers","following_url":"https://api.github.com/users/StuAtGit/following{/other_user}","gists_url":"https://api.github.com/users/StuAtGit/gists{/gist_id}","starred_url":"https://api.github.com/users/StuAtGit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StuAtGit/subscriptions","organizations_url":"https://api.github.com/users/StuAtGit/orgs","repos_url":"https://api.github.com/users/StuAtGit/repos","events_url":"https://api.github.com/users/StuAtGit/events{/privacy}","received_events_url":"https://api.github.com/users/StuAtGit/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T23:42:01Z","updated_at":"2017-08-03T23:42:01Z","author_association":"NONE","body":"But I digress ;)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/487230552","html_url":"https://github.com/elastic/elasticsearch/issues/26034#issuecomment-487230552","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","id":487230552,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NzIzMDU1Mg==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2019-04-26T23:26:31Z","updated_at":"2019-04-26T23:26:31Z","author_association":"MEMBER","body":"Date fields were recently converted over to using the java 8 time api in ES 7.0. The serialization logic mentioned in this issue now handles ZonedDateTime. This is what is now returned from date fields. Thus I am closing this issue.","performed_via_github_app":null}]