[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/683729331","html_url":"https://github.com/elastic/elasticsearch/issues/61711#issuecomment-683729331","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61711","id":683729331,"node_id":"MDEyOklzc3VlQ29tbWVudDY4MzcyOTMzMQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-08-31T11:45:24Z","updated_at":"2020-08-31T11:45:24Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed (:Distributed/Cluster Coordination)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/685012187","html_url":"https://github.com/elastic/elasticsearch/issues/61711#issuecomment-685012187","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61711","id":685012187,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NTAxMjE4Nw==","user":{"login":"fcofdez","id":1033457,"node_id":"MDQ6VXNlcjEwMzM0NTc=","avatar_url":"https://avatars1.githubusercontent.com/u/1033457?v=4","gravatar_id":"","url":"https://api.github.com/users/fcofdez","html_url":"https://github.com/fcofdez","followers_url":"https://api.github.com/users/fcofdez/followers","following_url":"https://api.github.com/users/fcofdez/following{/other_user}","gists_url":"https://api.github.com/users/fcofdez/gists{/gist_id}","starred_url":"https://api.github.com/users/fcofdez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fcofdez/subscriptions","organizations_url":"https://api.github.com/users/fcofdez/orgs","repos_url":"https://api.github.com/users/fcofdez/repos","events_url":"https://api.github.com/users/fcofdez/events{/privacy}","received_events_url":"https://api.github.com/users/fcofdez/received_events","type":"User","site_admin":false},"created_at":"2020-09-01T17:19:24Z","updated_at":"2020-09-01T17:19:24Z","author_association":"CONTRIBUTOR","body":"It seems like this is related with the changes introduced in #60872.\r\nIn this build there are 2 nodes:\r\n\r\n- node0: master-eligible node\r\n- node1: non master-eligible node\r\n\r\nDuring `AbstractCoordinatorTestCase.Cluster#runRandomly()` phase node1 is unable to join the cluster as the connection is closed/blackholed a few times. The problematic part can be summarized as follows: \r\n\r\n1.  `node1` attempts to join the cluster sending a `internal:cluster/coordination/join` message to `node0` and adds a new in flight join request between `node1` and `node0`\r\n2. `node0` receives the join request and establishes a connection with `node1` and then sends a `internal:cluster/coordination/join/validate` message to `node1`\r\n3. `node1` processes the `internal:cluster/coordination/join/validate` request but the response is dropped as the connection is black-holed at that point. The current [behavior](https://github.com/elastic/elasticsearch/blob/9dc0ca003d39499cbf3f04780d83e100f358fc5e/test/framework/src/main/java/org/elasticsearch/test/disruption/DisruptableMockTransport.java#L164) for back holed messages is to trigger a connection closed exception after 1 day.\r\n4. The test moves on to the `AbstractCoordinatorTestCase.Cluster#stabilise()` phase, and `node1` attempts to join the cluster again, but since there's an in-flight join request that wasn't removed from the [in-flight set](https://github.com/elastic/elasticsearch/blob/d9060ae4eee9377129424f42297ece22d74774c3/server/src/main/java/org/elasticsearch/cluster/coordination/JoinHelper.java#L234) the request is bypassed.\r\n5. Since there's only 2 nodes in this test, the node is unable to join to the cluster and the test expects that `node1` is a `FOLLOWER` after stabilizing the cluster.\r\n\r\nI'm not sure if we should reintroduce the timeout from #60872 (that solves the issue), or schedule the `ConnectTransportException` earlier when we drop messages (more in line with the current TCP keep-alive settings).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686364936","html_url":"https://github.com/elastic/elasticsearch/issues/61711#issuecomment-686364936","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61711","id":686364936,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjM2NDkzNg==","user":{"login":"fcofdez","id":1033457,"node_id":"MDQ6VXNlcjEwMzM0NTc=","avatar_url":"https://avatars1.githubusercontent.com/u/1033457?v=4","gravatar_id":"","url":"https://api.github.com/users/fcofdez","html_url":"https://github.com/fcofdez","followers_url":"https://api.github.com/users/fcofdez/followers","following_url":"https://api.github.com/users/fcofdez/following{/other_user}","gists_url":"https://api.github.com/users/fcofdez/gists{/gist_id}","starred_url":"https://api.github.com/users/fcofdez/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fcofdez/subscriptions","organizations_url":"https://api.github.com/users/fcofdez/orgs","repos_url":"https://api.github.com/users/fcofdez/repos","events_url":"https://api.github.com/users/fcofdez/events{/privacy}","received_events_url":"https://api.github.com/users/fcofdez/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T09:19:31Z","updated_at":"2020-09-03T09:19:31Z","author_association":"CONTRIBUTOR","body":"After discussing this with @original-brownbear it seems like `AbstractCoordinatorTestCase.Cluster#stabilise()` should take into account this edge case while it is running pending tasks to stabilize the cluster. Currently, it [takes](https://github.com/elastic/elasticsearch/blob/9dc0ca003d39499cbf3f04780d83e100f358fc5e/test/framework/src/main/java/org/elasticsearch/cluster/coordination/AbstractCoordinatorTestCase.java#L231) into account certain failure scenarios, before introducing #60872, that time frame was enough to trigger the error handler for the join task and retry. \r\n\r\nMy proposal is to increase the `DEFAULT_STABILISATION_TIME` to cover this case i.e. increasing it by 1 day, AFAIK the only side effect of this would be an increase on test execution time, but I would like some feedback on this @ywelsch ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/687005073","html_url":"https://github.com/elastic/elasticsearch/issues/61711#issuecomment-687005073","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61711","id":687005073,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NzAwNTA3Mw==","user":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"created_at":"2020-09-04T08:26:01Z","updated_at":"2020-09-04T08:26:01Z","author_association":"CONTRIBUTOR","body":"I'm not excited about increasing `DEFAULT_STABILISATION_TIME` from a couple of minutes to a day. The reason is that we can no longer assert anything sensible that the cluster converges within a reasonable amount of time (1 day is not reasonable). We should probably introduce a randomized bad connection detection timeout (simulating tcp_retries2) that ranges from a minute to a day, and then incorporate that into `DEFAULT_STABILISATION_TIME`. Let's wait for @DaveCTurner to be back though, I'm sure he will have an opinion here as well.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/691833705","html_url":"https://github.com/elastic/elasticsearch/issues/61711#issuecomment-691833705","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61711","id":691833705,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MTgzMzcwNQ==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2020-09-14T06:07:17Z","updated_at":"2020-09-14T06:07:55Z","author_association":"CONTRIBUTOR","body":"IMO this is actually a bug in `runRandomly()` in that it fails to account for the pending disconnection, leaving the system in a state where stabilisation may fail due to a long-delayed disconnection. In other words, it is not properly respecting its `coolDown` parameter. My preference would be to keep executing the loop in `runRandomly()` until there are no pending disconnection events, and to prevent new network disruptions from happening during the cool-down phase (i.e. when `finishTime != -1`.\r\n\r\nThis is the same bug that affects `testAckedIndexing`, see e.g. https://github.com/elastic/elasticsearch/issues/53064, although here it is actually tractable to fix since we can track the number of pending disconnection events.\r\n\r\nI also see value in randomising the bad-connection-detection timeout, but don't think we should incorporate that into the default stabilisation time.","performed_via_github_app":null}]