{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068/events","html_url":"https://github.com/elastic/elasticsearch/issues/43068","id":454387089,"node_id":"MDU6SXNzdWU0NTQzODcwODk=","number":43068,"title":"[Data Frame] Bad date_histogram format causes infinitely running indexer","user":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"labels":[{"id":1272783040,"node_id":"MDU6TGFiZWwxMjcyNzgzMDQw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:ml/Transform","name":":ml/Transform","color":"0e8a16","default":false,"description":"Transform"},{"id":929267538,"node_id":"MDU6TGFiZWw5MjkyNjc1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/team-discuss","name":"team-discuss","color":"fbca04","default":false,"description":""},{"id":1352927464,"node_id":"MDU6TGFiZWwxMzUyOTI3NDY0","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v7.3.0","name":"v7.3.0","color":"dddddd","default":false,"description":""},{"id":1194435738,"node_id":"MDU6TGFiZWwxMTk0NDM1NzM4","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v8.0.0","name":"v8.0.0","color":"dddddd","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"assignees":[{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false}],"milestone":null,"comments":8,"created_at":"2019-06-10T21:43:18Z","updated_at":"2019-06-28T14:02:33Z","closed_at":"2019-06-28T14:02:33Z","author_association":"MEMBER","active_lock_reason":null,"body":"# Problem\r\nUsers have the ability to shoot themselves in the foot without much warning with Data Frames.\r\n\r\nExample:\r\n```\r\n{\r\n  \"source\": { \"index\": \"my-index-*\"},\r\n  \"dest\"  : { \"index\": \"my-data-frame\"},\r\n  \"pivot\": {\r\n    \"group_by\": {\r\n      \"@timestamp\": {\r\n        \"date_histogram\": {\r\n          \"field\": \"@timestamp\",\r\n          \"calendar_interval\": \"1m\",\r\n          \"format\": \"yyyy-MM-dd HH:00\"  <--- Uh OH!!!!\r\n        }\r\n      }\r\n    },\r\n    \"aggregations\": {\r\n\t    ....\r\n    }\r\n  }\r\n}\r\n```\r\nThis is a valid data frame definition, but the format of the key for the composite aggregation buckets has too few \"time significant digits\". This will result in many buckets that have the exact same pivot key. Two issues result from this:\r\n\r\n* The data frame will happily run forever. If there are enough documents to span an entire page, such that all the documents are in the same hour, the data frame will continue to request the same page of the composite aggregation infinitely.\r\n* Documents will overwrite each other. Since we generate the document `_id` values by the values of the composite aggregation bucket, all the buckets generated in the same hour would have the same `_id` and only the very last bucket seen would be retained.\r\n\r\n# Solutions???\r\n\r\n### Check if the interval and the format have the same time fidelity\r\n\r\nThe `format` field allows any of our valid time formats. We may be able to look at the base of the `calendar_interval` (e.g. `m => minutes`, `h => hours`, etc.) and compare it with a formatted timestamp. If we use the format provided against a epoch timestamp where we know all the digits are non-zero, it should be possible to verify that the format has the same fidelity (or higher) than the interval.\r\n\r\n👍 Computationally efficient\r\n👎  A tad complicated, logically\r\n\r\n### Run sample queries and see if there are repeated keys\r\n\r\nOnly the `date_histogram` group_by would have to be considered. If the `date_histogram` aggregation is ran against a subset of the data, with the supplied format, each non-empty bucket key should be checked to see if there are any repeats.\r\n\r\n👍 simple\r\n👎 computationally inefficient\r\n👎 not reliable. What if the subset of the queried data just happens to bucket where the keys are different?\r\n example of different keys but invalid format:\r\n```\r\nGET kibana_sample_data_flights/_search\r\n{\r\n  \"aggs\": {\r\n    \"buckets\": {\r\n      \"composite\": {\r\n        \"sources\": [\r\n          {\r\n            \"time\": {\r\n              \"date_histogram\": {\r\n                \"field\": \"timestamp\",\r\n                \"interval\": \"second\",\r\n                \"format\": \"yyyy-MM-dd HH:mm\"\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n>\"buckets\" : [\r\n        {\r\n          \"key\" : {\r\n            \"time\" : \"2019-04-08 00:00\"\r\n          },\r\n          \"doc_count\" : 1\r\n        },\r\n        {\r\n          \"key\" : {\r\n            \"time\" : \"2019-04-08 00:02\"\r\n          },\r\n          \"doc_count\" : 1\r\n        },\r\n        {\r\n          \"key\" : {\r\n            \"time\" : \"2019-04-08 00:06\"\r\n          },\r\n          \"doc_count\" : 1\r\n        },...\r\n```","closed_by":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"performed_via_github_app":null}