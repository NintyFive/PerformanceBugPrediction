{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/6289","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6289/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6289/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6289/events","html_url":"https://github.com/elastic/elasticsearch/issues/6289","id":34144480,"node_id":"MDU6SXNzdWUzNDE0NDQ4MA==","number":6289,"title":"Exception management for internal code contracts","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"assignees":[{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2014-05-23T04:33:04Z","updated_at":"2015-10-14T16:35:05Z","closed_at":"2015-10-14T16:35:05Z","author_association":"MEMBER","active_lock_reason":null,"body":"Exception management for some of the internal code is repetitive across the entire codebase, requiring a lot of boilerplate code that is sensitive to copy/paste issues as well as a lot of unintended `NullPointerException`s in places that mean to check for `null` while checking other conditions. I propose creating a utility to handle this boilerplate for the most common cases.\n\nIn the forthcoming pull request, I have created an `Exceptions` utility that works like the `Preconditions` utility in Guava (and others that I have used/written), which just gives a very simple and readable mechanism for failing fast with expected exceptions (in this case, `ElasticsearchIllegalArgumentException`s). I have been using things like this for years on projects and I have found that they make code shorter, more readable and more predictable.\n\nIt turns code like:\n\n```\nif (value1 == null) {\n  throw new ElasticsearchIllegalArgumentException(\"value1 cannot be null\");\n}\nif (Strings.isNullOrEmpty(value2)) {\n  throw new ElasticsearchIllegalArgumentException(\"value2 cannot be empty\");\n}\nif (value3 < 0) {\n  throw new ElasticsearchIllegalArgumentException(\"value3 cannot be negative\");\n}\n\n// required\nthis.value1 = value1;\nthis.value2 = value2;\nthis.value3 = value3;\n// optional\nthis.value4 = value4;\n```\n\ninto:\n\n```\n// required\nthis.value1 = Exceptions.ifNull(value1, \"value1 cannot be null\");\nthis.value2 = Exceptions.ifEmpty(value2, \"value2 cannot be empty\");\nthis.value3 = Exceptions.ifNegative(value3, \"value3 cannot be negative\");\n// optional\nthis.value4 = value4;\n```\n\nI also tend to use a few other functions not specified by `Preconditions`, such as inclusive and exclusive range checks and latitude/longitude checks, which I have implemented here. If they are actually embraced, it should make a simple way to provide predictable code contracts with minimal code.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}