[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/433397547","html_url":"https://github.com/elastic/elasticsearch/issues/34903#issuecomment-433397547","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34903","id":433397547,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzM5NzU0Nw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-10-26T12:53:57Z","updated_at":"2018-10-26T12:53:57Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/433402735","html_url":"https://github.com/elastic/elasticsearch/issues/34903#issuecomment-433402735","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34903","id":433402735,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzQwMjczNQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-10-26T13:13:05Z","updated_at":"2018-10-26T13:13:05Z","author_association":"MEMBER","body":"Whilst I agree that this is something that we should think about solving in a general way, especially as it has come up before when dealing with pipeline aggregations I am wondering if in the short term #34896 could be solved by looking at the doc_count of the parent aggregation bucket (or total.hits if the agg is already a root aggregation) since this would determine with accuracy if the aggregation received any data?\r\n\r\nOne other thing to note here is that the Sum of no values is `0` (and not `null`) so I think it's right that the sum outputs `0` for this case.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/433409883","html_url":"https://github.com/elastic/elasticsearch/issues/34903#issuecomment-433409883","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34903","id":433409883,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzQwOTg4Mw==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2018-10-26T13:36:09Z","updated_at":"2018-10-26T13:36:09Z","author_association":"CONTRIBUTOR","body":"@colings86 may I ask why `sum` has a different behavior than `min`, `max`, `avg`, from the `0`/`null` point of view?\r\n\r\nA `sum` of `null`s (no values) for at least one document is 0.\r\nA `sum` of 0 documents is 0.\r\nA `min` of `null`s (no values) is `null`, same goes for `max`. This is different than what `sum` does.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/433421060","html_url":"https://github.com/elastic/elasticsearch/issues/34903#issuecomment-433421060","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34903","id":433421060,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzQyMTA2MA==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-10-26T14:10:48Z","updated_at":"2018-10-26T14:10:48Z","author_association":"MEMBER","body":"It works this way because `max` and `min` have no value if there is no data but `sum`,`cardinality` and `value_count` by definition (outside of Elasticsearch just the actual definition of the metric) are initialised to `0` and the result of all three is `0` even if there is no data. `max`, `min`, `avg` and `percentiles` are all initialised without a value hence returning `null` if the re is no data for those.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/433833471","html_url":"https://github.com/elastic/elasticsearch/issues/34903#issuecomment-433833471","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34903","id":433833471,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzgzMzQ3MQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2018-10-29T08:58:22Z","updated_at":"2018-10-29T08:58:22Z","author_association":"MEMBER","body":"> could be solved by looking at the doc_count of the parent aggregation bucket (or total.hits if the agg is already a root aggregation) since this would determine with accuracy if the aggregation received any data\r\n\r\nIt would work but it requires knowledge about the agg structure (its parent) in the consumer. This information can be encapsulated in the agg itself and in a good number of metric aggs it already is (to properly report values as null in `doXContentBody`).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/438442822","html_url":"https://github.com/elastic/elasticsearch/issues/34903#issuecomment-438442822","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34903","id":438442822,"node_id":"MDEyOklzc3VlQ29tbWVudDQzODQ0MjgyMg==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2018-11-13T21:25:24Z","updated_at":"2018-11-13T21:25:24Z","author_association":"MEMBER","body":"A related issue that will need addressing is how this interacts with pipeline aggs, as also discovered by Costin.  E.g. when pipelines resolve agg values, they get the primitive internal state from the agg.  This means that pipelines like `bucket_selector` will get _a_ value, but it's unclear what the value actually represents (is it `NaN` because it's not actually a number, or because the agg had no values?)\r\n\r\nI think this can be fixed by providing the eventual mechanism (`hasValue()` or whatever) through the various pipeline painless contexts for use in the script itself.\r\n\r\nNote: this is related to #27377 although somewhat different.","performed_via_github_app":null}]