{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/4210","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4210/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4210/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4210/events","html_url":"https://github.com/elastic/elasticsearch/issues/4210","id":22947038,"node_id":"MDU6SXNzdWUyMjk0NzAzOA==","number":4210,"title":"has_child Query scores Adversely Affected by filters","user":{"login":"npilon","id":382517,"node_id":"MDQ6VXNlcjM4MjUxNw==","avatar_url":"https://avatars3.githubusercontent.com/u/382517?v=4","gravatar_id":"","url":"https://api.github.com/users/npilon","html_url":"https://github.com/npilon","followers_url":"https://api.github.com/users/npilon/followers","following_url":"https://api.github.com/users/npilon/following{/other_user}","gists_url":"https://api.github.com/users/npilon/gists{/gist_id}","starred_url":"https://api.github.com/users/npilon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npilon/subscriptions","organizations_url":"https://api.github.com/users/npilon/orgs","repos_url":"https://api.github.com/users/npilon/repos","events_url":"https://api.github.com/users/npilon/events{/privacy}","received_events_url":"https://api.github.com/users/npilon/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"assignees":[{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false}],"milestone":null,"comments":22,"created_at":"2013-11-19T20:37:15Z","updated_at":"2013-12-19T00:53:38Z","closed_at":"2013-12-18T23:27:28Z","author_association":"NONE","active_lock_reason":null,"body":"I am encountering some extremely confusing behavior when employing a has_child query and a filter together on ElasticSearch 0.90.5. Our data involves records of US court cases (type \"case\") with child documents representing entries in the case's docket (type \"docket-entry\"). I've run a number of experiments to try and wrap my head around what's going on here. The TLDR version is this:\n\nDespite `filtered` claiming that filters do not affect the score, scoring of a query including a `has_child` clause is adversely affected by filters.\n\nTo demonstrate the issue, I created and tested a set of filters that match _both_ every case and every docket entry in our database. This was to confirm that the problem was not something simple and silly, like the filters clause applying to the child documents and filtering them in some undesirable fashion. I obtained total document counts using:\n\n``` json\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}\n```\n\nThis produced: 150662 cases and 7290248 docket entries.\n\nI then ran my \"match everything\" filter:\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"or\": [\n          {\n            \"range\": {\n              \"last_docket_id\": {\n                \"gte\": \"1\"\n              }\n            }\n          },\n          {\n            \"missing\": {\n              \"field\": \"last_docket_id\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nWhere `last_docket_id` is a field that every case should have (as a 1-or-higher) and no docket entry should have. This also produced 150662 cases and 7290248 docket entries.\n\nUsing this data, I ran some test queries. First, a query involving a `has_child` without any filter attached:\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"query_string\": {\n                \"query\": \"apple samsung\",\n                \"default_operator\": \"AND\"\n              }\n            },\n            {\n              \"has_child\": {\n                \"type\": \"docket-entry\",\n                \"query\": {\n                  \"query_string\": {\n                    \"default_operator\": \"AND\",\n                    \"query\": \"apple samsung\"\n                  }\n                },\n                \"score_type\": \"sum\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\nThis produced the expected results: 505 total documents and a max score of 420.29727, with the first page of results being highly relevant. I then applied my \"match everything\" filter:\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"query_string\": {\n                \"query\": \"apple samsung\",\n                \"default_operator\": \"AND\"\n              }\n            },\n            {\n              \"has_child\": {\n                \"type\": \"docket-entry\",\n                \"query\": {\n                  \"query_string\": {\n                    \"default_operator\": \"AND\",\n                    \"query\": \"apple samsung\"\n                  }\n                },\n                \"score_type\": \"sum\"\n              }\n            }\n          ]\n        }\n      },\n      \"filter\": {\n        \"or\": [\n          {\n            \"range\": {\n              \"last_docket_id\": {\n                \"gte\": \"1\"\n              }\n            }\n          },\n          {\n            \"missing\": {\n              \"field\": \"last_docket_id\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nThe degradation in results was immediately apparent. Not only did the `max_score` drop to 99.71274 and the quality of the first page of results decline to uselessness, the total documents dropped to 223 and randomly fluctuated with repeated runs of the query.\n\nTo confirm, I isolated the two segments of the query and ran the same experiments in isolation:\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"query_string\": {\n                \"query\": \"apple samsung\",\n                \"default_operator\": \"AND\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\nReturned 60 results with a `max_score` of 1.5968025\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"query_string\": {\n                \"query\": \"apple samsung\",\n                \"default_operator\": \"AND\"\n              }\n            }\n          ]\n        }\n      },\n      \"filter\": {\n        \"or\": [\n          {\n            \"range\": {\n              \"last_docket_id\": {\n                \"gte\": \"1\"\n              }\n            }\n          },\n          {\n            \"missing\": {\n              \"field\": \"last_docket_id\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nReturned the same - 60 results, 1.5968025 `max_score`, which is what I would expect given the documentation. The `has_child` half, on the other hand, is disastrous:\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"has_child\": {\n                \"type\": \"docket-entry\",\n                \"query\": {\n                  \"query_string\": {\n                    \"default_operator\": \"AND\",\n                    \"query\": \"apple samsung\"\n                  }\n                },\n                \"score_type\": \"sum\"\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\nStarts with 498 hits and a `max_score` of 419.9289, but adding the filter:\n\n``` json\n{\n  \"query\": {\n    \"filtered\": {\n      \"query\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"has_child\": {\n                \"type\": \"docket-entry\",\n                \"query\": {\n                  \"query_string\": {\n                    \"default_operator\": \"AND\",\n                    \"query\": \"apple samsung\"\n                  }\n                },\n                \"score_type\": \"sum\"\n              }\n            }\n          ]\n        }\n      },\n      \"filter\": {\n        \"or\": [\n          {\n            \"range\": {\n              \"last_docket_id\": {\n                \"gte\": \"1\"\n              }\n            }\n          },\n          {\n            \"missing\": {\n              \"field\": \"last_docket_id\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nDrops us to 171 hits with a `max_score` of 99.37268.\n\nAt this point, my only conclusion is that either there's something about the has_child query that I'm completely failing to understand or that there's a bug in ElasticSearch.\n","closed_by":{"login":"npilon","id":382517,"node_id":"MDQ6VXNlcjM4MjUxNw==","avatar_url":"https://avatars3.githubusercontent.com/u/382517?v=4","gravatar_id":"","url":"https://api.github.com/users/npilon","html_url":"https://github.com/npilon","followers_url":"https://api.github.com/users/npilon/followers","following_url":"https://api.github.com/users/npilon/following{/other_user}","gists_url":"https://api.github.com/users/npilon/gists{/gist_id}","starred_url":"https://api.github.com/users/npilon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/npilon/subscriptions","organizations_url":"https://api.github.com/users/npilon/orgs","repos_url":"https://api.github.com/users/npilon/repos","events_url":"https://api.github.com/users/npilon/events{/privacy}","received_events_url":"https://api.github.com/users/npilon/received_events","type":"User","site_admin":false},"performed_via_github_app":null}