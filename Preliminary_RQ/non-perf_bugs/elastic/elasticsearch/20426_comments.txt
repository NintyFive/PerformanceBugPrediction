[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246410891","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246410891","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246410891,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjQxMDg5MQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T16:47:18Z","updated_at":"2016-09-12T16:47:18Z","author_association":"CONTRIBUTOR","body":"I agree with the idea of having the context at compile time. Are you thinking you'd have to pass in a `Class` and we'd would analyze the publicly visible getters? Something more explicit and less magic? Like a `Map<String, ContextField>` where `ContextField` has `Method` references for getting and (optionally) setting?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246413433","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246413433","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246413433,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjQxMzQzMw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T16:55:15Z","updated_at":"2016-09-12T16:55:15Z","author_association":"CONTRIBUTOR","body":"@nik9000 I can't say this is 100% thought-through yet as I need to go through the code and figure out what the contexts should be (I don't think the existing ones completely fit all the cases), but as I think you've seen in the past from me I prefer explicit over magic typically :) .  I was thinking more along the lines of perhaps an interface per context with the signature that must be implemented by the script object that is returned from compile.  CompiledScripts that implement the specific interface are what get's executed rather than a call back to the ScriptService.  I envision a CompiledScript containing more than one interface possibly so we hopefully wouldn't end up with an excessive number of new classes.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246418685","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246418685","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246418685,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjQxODY4NQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T17:11:06Z","updated_at":"2016-09-12T17:11:06Z","author_association":"CONTRIBUTOR","body":"That makes sense. I think it'd be pretty cool to say \"here is some text that a user sent me, please compile it and return something that implements this interface\". We wouldn't have to pass in there `ctx` objects any more at all which'd be cool.\n\nI like the flexibility of letting the user of the script engine specify the interface that it needs. It lines up pretty well with \"what can this script engine do?\" because implementations like Mustache and Expressions can just choke when the caller asks them for an interface they don't understand but groovy and painless can actually implement the interface. Groovy through dynamic stuff and painless with static stuff.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246421191","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246421191","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246421191,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjQyMTE5MQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T17:17:12Z","updated_at":"2016-09-12T17:17:12Z","author_association":"CONTRIBUTOR","body":"@nik9000 Exactly what I was thinking!  As a bonus, I really think this will help clean up the ScriptService quite a bit too.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246421273","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246421273","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246421273,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjQyMTI3Mw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T17:17:29Z","updated_at":"2016-09-12T17:17:29Z","author_association":"CONTRIBUTOR","body":"++\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246504923","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246504923","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246504923,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjUwNDkyMw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T21:46:32Z","updated_at":"2016-09-12T22:32:31Z","author_association":"CONTRIBUTOR","body":"So I began to modify the code to allow context at compilation for script engines that would like it, and ran into an issue with stored scripts.\n\nIn RestPutStoredScriptAction we add handlers like this:\n\n```\n    protected RestPutStoredScriptAction(Settings settings, RestController controller, boolean registerDefaultHandlers) {\n        super(settings);\n        if (registerDefaultHandlers) {\n            controller.registerHandler(POST, \"/_scripts/{lang}/{id}\", this);\n            controller.registerHandler(PUT, \"/_scripts/{lang}/{id}\", this);\n        }\n    }\n```\n\nI would like to optionally have a context as part of this API, so I would propose that we change the handlers to be `/_scripts/{id}` and take in JSON as we do for other API's.  This would allow us to add an optional context parameter.\n\nDefinitely looking for some feedback on this issue.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246515750","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246515750","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246515750,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjUxNTc1MA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T22:29:06Z","updated_at":"2016-09-12T22:29:06Z","author_association":"MEMBER","body":"Changing to just key on id in the stored scripts api sounds right to me. The cache is based on script id alone right? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246516389","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246516389","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246516389,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjUxNjM4OQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T22:31:55Z","updated_at":"2016-09-12T22:31:55Z","author_association":"CONTRIBUTOR","body":"The cache is based on both id and lang.  And with context added, it would be based on all three.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246602954","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246602954","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246602954,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjYwMjk1NA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T07:50:04Z","updated_at":"2016-09-13T07:50:04Z","author_association":"CONTRIBUTOR","body":"> I would like to optionally have a context as part of this API, so I would propose that we change the handlers to be /_scripts/{id} and take in JSON as we do for other API's. This would allow us to add an optional context parameter.\n\nyou can still add an optional parameter here even with keeping this URL?\n\n``` JAVA\n controller.registerHandler(POST, \"/_scripts/{lang}/{id}\", this);\n controller.registerHandler(PUT, \"/_scripts/{lang}/{id}\", this);\n controller.registerHandler(POST, \"/_scripts/{lang}/{id}/{context}\", this);\n controller.registerHandler(PUT, \"/_scripts/{lang}/{id}/{context}\", this);\n```\n\nI am not sure if that is sufficient but I thought I'd bring it up.\n\n++ on this issue in order to get good performance from scripts we have to require this and I really wonder if we should make it non-optional and require it for all scripts. Existing ones can still use `Unknown` or `All`? We have the infra to do this added when we required the lang to be present on all scripts. WDYT?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246647096","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246647096","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246647096,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjY0NzA5Ng==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T11:01:02Z","updated_at":"2016-09-13T11:01:02Z","author_association":"CONTRIBUTOR","body":"I love the idea but i would prefer it if it were implicit (ie not user specified).  Also, I think that specifying eg `aggs` is insufficient as some aggs scripts return doubles and some return strings/objects.\n\nHow about this:\n\nWe have a number of contexts defined internally, eg returns_double, whatever.  When we execute (eg) a file script, we pass in the context plus the script file name to the script service.  The service tries to retrieve a compiled script that is keyed off the file name PLUS the context.  If it doesn't exist, it retrieves the script from the file, compiles it for the context, and caches it with the context.\n\nSo if the same script is used with different contexts, then it will be cached multiple times.  That said, most scripts will only be cached once or maybe twice.\n\nOur contexts can be as specific as we need and this is totally transparent to the user.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246652400","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246652400","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246652400,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjY1MjQwMA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T11:27:53Z","updated_at":"2016-09-13T11:27:53Z","author_association":"CONTRIBUTOR","body":"I suppose the nice thing about knowing the context up front is that you can\ncompile the script in the context right away and get useful error messages.\n\nI, too, had envisioned this be done when the script is first used and not\nat storage time, but I'd jack likes it at storage time that is fine with me\nso long as we can work it out. I wonder if we can do this at first usage\ntime in one PR so we and then look at the separate storage in a second PR?\n\nOn Sep 13, 2016 7:01 AM, \"Clinton Gormley\" notifications@github.com wrote:\n\n> I love the idea but i would prefer it if it were implicit (ie not user\n> specified). Also, I think that specifying eg aggs is insufficient as some\n> aggs scripts return doubles and some return strings/objects.\n> \n> How about this:\n> \n> We have a number of contexts defined internally, eg returns_double,\n> whatever. When we execute (eg) a file script, we pass in the context plus\n> the script file name to the script service. The service tries to retrieve a\n> compiled script that is keyed off the file name PLUS the context. If it\n> doesn't exist, it retrieves the script from the file, compiles it for the\n> context, and caches it with the context.\n> \n> So if the same script is used with different contexts, then it will be\n> cached multiple times. That said, most scripts will only be cached once or\n> maybe twice.\n> \n> Our contexts can be as specific as we need and this is totally transparent\n> to the user.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246647096,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AANLohtYrmaoHlQl5EnFiiijXQZUoJHOks5qpoJygaJpZM4J6wjq\n> .\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246707917","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246707917","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246707917,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjcwNzkxNw==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T14:52:04Z","updated_at":"2016-09-13T14:52:04Z","author_association":"CONTRIBUTOR","body":"I mean that magic applied here is really nice until it doesn't work. Then all kinds of ugly stuff happens. What if a script can't compile for a certain context? Do we reject it when it's added? I think we should? Do we require the contexts that it's valid for in such a case?\nI really wonder if we are trying to be too user friendly on the wrong end here?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246717378","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246717378","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246717378,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjcxNzM3OA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T15:20:00Z","updated_at":"2016-09-13T15:20:00Z","author_association":"MEMBER","body":"> I love the idea but i would prefer it if it were implicit (ie not user specified).\n\nImplicit here is not actually user friendly: it means the user can write a broken script that uses something not available, but not find out until runtime. For file scripts, this is inevitable, since they are loaded completely asynchronously. However, for stored scripts, I think this is important feedback to have as soon as possible, rather than when later (possibly a different) user hits an error at runtime for using something not available.\n\n> Also, I think that specifying eg aggs is insufficient as some aggs scripts return doubles and some return strings/objects.\n\nThis is why we need more contexts than what we have now. There are actually many more uses of scripts than the existing contexts lead you to think. Scripted metrics is even more complicated, it should have multiple contexts, one for each phase.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246745458","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246745458","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246745458,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Njc0NTQ1OA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T16:44:54Z","updated_at":"2016-09-13T16:44:54Z","author_association":"CONTRIBUTOR","body":"The contexts that are there would only be the starting point, but once we make the changes to handle custom signatures with the existing contexts, it should be easier to add more.  I think that's the time to go through all the uses of compile and then figure out which contexts make sense and add them.  I envision us having an interface for each context's signature, and having a subclass of CompiledScript implement the interface(s) that will then be called directly by the CompiledScript requester.  There is no need to have these calling back to the ScriptService when they already have a CompiledScript.  \n\nIt would be great to enforce that all scripts be required to have context, but this would kill backcompat for Groovy, Expressions and Javascript right now.  I think the thing to do about this is to make Painless require it for 5.0, then remove Groovy, Javascript, and have Expressions require it for 6.0.\n\nI also don't think implicit scripts is a good idea (we do need some of this for backcompat unfortunately), but moving forward I would absolutely require the context be provided with all scripts.  It will eliminate much frustration to the issues that Simon pointed out, and most scripts won't be able to be useful in multiple contexts anyway.\n\nOn the storage issue, we are not very well set up to compile with context on first use, since we only cache the already compiled scripts.  Painless will be able to make good use of the context at compile, so I would prefer to have it with storage the way it is now, otherwise a lot more needs to suddenly be refactored.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246746181","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246746181","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246746181,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Njc0NjE4MQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T16:47:13Z","updated_at":"2016-09-13T16:47:13Z","author_association":"CONTRIBUTOR","body":"@s1monw I actually did consider adding more handlers, and I do believe that's the easiest way to do that, but @rjernst was thinking it might be better to only have the API cache on an ID (just the name) for a stored script and possibly file scripts too, and that would require a JSON blob to take in other pieces like lang and context.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246763346","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-246763346","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":246763346,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Njc2MzM0Ng==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T17:44:20Z","updated_at":"2016-09-13T17:44:20Z","author_association":"MEMBER","body":"Adding more handlers isn't good for a couple reasons:\n- It is confusing because really the id should be globally unique. Right now we have IMO a difficult to use api to reference stored/file scripts in that you must also specify the language. We should be able to lookup a stored script simply by its id.  Changing the handlers to `/_scripts/{id}` will make it clear all scripts share the same namespace, regardless of lang or context.\n- Accepting the same json that the eg search api accepts normally allows for changes there to be reflected automatically in stored scripts. For example, if we add an `options` map with compile time options, there would be a place for that in stored scripts. Right now, there is no way to add such options. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/289737907","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-289737907","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":289737907,"node_id":"MDEyOklzc3VlQ29tbWVudDI4OTczNzkwNw==","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"created_at":"2017-03-28T11:14:19Z","updated_at":"2017-03-28T11:20:54Z","author_association":"CONTRIBUTOR","body":"This will benefit the new [secure Kotlin script engine for Elasticsearch](https://github.com/kohesive/keplin) as well.  It can execute both text based scripts where we can compile the script to a different base class that handles the context interface, and also can ship client-side lambdas as binary inline scripts that are extensions to a receiver class which represents the context interface or the Lambda as a SAM conversion depending on how a context's interface will be represented.  Then type inference, code completion and other IDE features can kick in to help in script development.  \r\n\r\nCurrently everything compiles against one class that unifies the contexts and helps a bit with extensions trying to make things a bit more uniform, but it is still confusing and has lower performance than if each call/context was uniquely suited to the script's real job.  And as the comments about Painless above mention, we can provide more useful errors at compilation since we know what can/should be accessed.\r\n\r\nIs there any branch with changes underway for this?  I'd like to track it if so.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/289751711","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-289751711","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":289751711,"node_id":"MDEyOklzc3VlQ29tbWVudDI4OTc1MTcxMQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2017-03-28T12:19:46Z","updated_at":"2017-03-28T12:19:46Z","author_association":"CONTRIBUTOR","body":"> Is there any branch with changes underway for this? I'd like to track it if so.\r\n\r\nGiven how we work long running branches are a huge pain to maintain. No one is actively working on this at the moment. I was a few days ago, but that turned out to be a dead end: https://github.com/elastic/elasticsearch/pull/23744","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/300575963","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-300575963","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":300575963,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMDU3NTk2Mw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-05-10T18:41:31Z","updated_at":"2017-05-10T18:47:01Z","author_association":"CONTRIBUTOR","body":"Been a bit, but this is progressing again.  Some notes on the current discussions:\r\n\r\n* Allow users to create custom contexts that specify the name of the context, the signature for the method to call against a generated script, and a whitelist of classes, methods, and fields that are to be allowed be used in the script (may not matter for some languages).\r\n* Allow users to create custom languages that will have to decide how and which contexts to support.  Custom languages do not necessarily need to be able to support all contexts.  Expressions will only support search, scripted fields, and possibly aggs.\r\n* Possibly remove stored templates and only use the stored scripting API.  (#24596).  With custom contexts, a template context can be made that accepts a ```Map<String, Object>``` and returns a ```String```.  With this in place, there is no reason to only allow Mustache for templates.  Any language that supports this context should be allowed.\r\n* Settings will be allowed to turn enable and disable any context.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304765488","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-304765488","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":304765488,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDc2NTQ4OA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2017-05-30T03:18:25Z","updated_at":"2017-05-30T03:18:25Z","author_association":"MEMBER","body":"This work has been slowly progressing in #24868, #24818, #24817, #24873, #24877, #24883, #24896 and #24897.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/347907606","html_url":"https://github.com/elastic/elasticsearch/issues/20426#issuecomment-347907606","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20426","id":347907606,"node_id":"MDEyOklzc3VlQ29tbWVudDM0NzkwNzYwNg==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-11-29T16:04:14Z","updated_at":"2017-11-29T16:04:14Z","author_association":"CONTRIBUTOR","body":"This is done.  Closing.","performed_via_github_app":null}]