[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/500606452","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-500606452","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":500606452,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMDYwNjQ1Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-06-10T21:43:19Z","updated_at":"2019-06-10T21:43:19Z","author_association":"COLLABORATOR","body":"Pinging @elastic/ml-core","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/501309896","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-501309896","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":501309896,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTMwOTg5Ng==","user":{"login":"droberts195","id":7405510,"node_id":"MDQ6VXNlcjc0MDU1MTA=","avatar_url":"https://avatars0.githubusercontent.com/u/7405510?v=4","gravatar_id":"","url":"https://api.github.com/users/droberts195","html_url":"https://github.com/droberts195","followers_url":"https://api.github.com/users/droberts195/followers","following_url":"https://api.github.com/users/droberts195/following{/other_user}","gists_url":"https://api.github.com/users/droberts195/gists{/gist_id}","starred_url":"https://api.github.com/users/droberts195/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/droberts195/subscriptions","organizations_url":"https://api.github.com/users/droberts195/orgs","repos_url":"https://api.github.com/users/droberts195/repos","events_url":"https://api.github.com/users/droberts195/events{/privacy}","received_events_url":"https://api.github.com/users/droberts195/received_events","type":"User","site_admin":false},"created_at":"2019-06-12T14:52:23Z","updated_at":"2019-06-12T14:52:23Z","author_association":"CONTRIBUTOR","body":"An alternative approach for \"Check if the interval and the format have the same time fidelity\" might be to first format `Instant.EPOCH` to a string using the supplied date format.  Then format `Instant.EPOCH.plus(interval)` (converting `interval` to a `TemporalAmount` to pass to [`plus`](https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html#plus-java.time.temporal.TemporalAmount-)) to a string using the supplied date format.  If the two strings are the same then reject the config.\r\n\r\nDoing it this way we would not need to understand the Java time format string.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/501322593","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-501322593","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":501322593,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTMyMjU5Mw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2019-06-12T15:20:31Z","updated_at":"2019-06-12T15:20:31Z","author_association":"MEMBER","body":"We don't separate the raw key from the string representation in the response of the composite aggregation. In the \"normal\" `date_histogram` we have `key` that contains the raw timestamp and `key_as_string` that contains the timestamp formatted with the provided `format`. We could have the same mechanism in `composite` but I wonder why we expose the `format` option in the data frame ? Is it just because it's available in the `composite` ?  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/501444366","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-501444366","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":501444366,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTQ0NDM2Ng==","user":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"created_at":"2019-06-12T20:32:46Z","updated_at":"2019-06-12T20:32:46Z","author_association":"MEMBER","body":"@jimczi two reasons:\r\n* One is that it is supported in `composite` and in `date_histogram`. \r\n* Certain use cases do benefit from having a formatted time value. Especially in the data exploration scenario where the pivot is completed and they desire to see the resulting table. Having a formatted timestamp is much more human readable than a raw timestamp.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/501613153","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-501613153","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":501613153,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTYxMzE1Mw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2019-06-13T08:54:08Z","updated_at":"2019-06-13T08:54:08Z","author_association":"MEMBER","body":"> Certain use cases do benefit from having a formatted time value. Especially in the data exploration scenario where the pivot is completed and they desire to see the resulting table. Having a formatted timestamp is much more human readable than a raw timestamp.\r\n\r\nOk so I guess this is for the preview page since the resulting table should be an index where the format  should be compatible with the format defined on the target `date` field. Would it be possible to apply the formatting outside of the composite ? We can use `DateFormatter.forPattern` to create the `DateFormatter` and then apply something like `formatter.format(resolution.toInstant(value).atZone(timeZone))` where the `value` is the raw timestamp ? So internally the composite aggregation would always return the raw timestamp but the preview page would apply some formatting to display the result ?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/505801831","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-505801831","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":505801831,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNTgwMTgzMQ==","user":{"login":"hendrikmuhs","id":7126422,"node_id":"MDQ6VXNlcjcxMjY0MjI=","avatar_url":"https://avatars3.githubusercontent.com/u/7126422?v=4","gravatar_id":"","url":"https://api.github.com/users/hendrikmuhs","html_url":"https://github.com/hendrikmuhs","followers_url":"https://api.github.com/users/hendrikmuhs/followers","following_url":"https://api.github.com/users/hendrikmuhs/following{/other_user}","gists_url":"https://api.github.com/users/hendrikmuhs/gists{/gist_id}","starred_url":"https://api.github.com/users/hendrikmuhs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hendrikmuhs/subscriptions","organizations_url":"https://api.github.com/users/hendrikmuhs/orgs","repos_url":"https://api.github.com/users/hendrikmuhs/repos","events_url":"https://api.github.com/users/hendrikmuhs/events{/privacy}","received_events_url":"https://api.github.com/users/hendrikmuhs/received_events","type":"User","site_admin":false},"created_at":"2019-06-26T09:42:03Z","updated_at":"2019-06-26T09:42:03Z","author_association":"CONTRIBUTOR","body":"I somewhat like the idea of the testing/querying approach, similar to what @droberts195 suggested and I wonder if we can create the data ourselves instead of querying the source (which might be sparse, empty, non-existent at the time of creating the transform). So basically generating\r\n\r\n```\r\nformat(start)\r\nformat(start + interval)\r\nformat(start + interval * 2)\r\n...\r\n```\r\n\r\nand throw if we create a duplicate.\r\n\r\nInterestingly I wonder if this issue is always a bug:\r\n\r\n```\r\n \"calendar_interval\": \"1m\",\r\n \"format\": \"HH:mm\"\r\n```\r\n\r\nis a nice way to implement a round-robin database with data for the last 24 hours.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/505806815","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-505806815","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":505806815,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNTgwNjgxNQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2019-06-26T09:56:32Z","updated_at":"2019-06-26T09:56:32Z","author_association":"MEMBER","body":"Another solution would be to only apply the `format` to the buckets and not the `after` key. We need the raw values there since they have to be unique and the `format` may break this assumption. The `after` map is always used as is to paginate over the buckets so it would be safer to always return the original values without any modification.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/506745426","html_url":"https://github.com/elastic/elasticsearch/issues/43068#issuecomment-506745426","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43068","id":506745426,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNjc0NTQyNg==","user":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"created_at":"2019-06-28T14:02:33Z","updated_at":"2019-06-28T14:02:33Z","author_association":"MEMBER","body":"We opted to simply remove support for `format` in 7.3.0. We will also add the ability to add a `human=true` flag to the `_preview` response. \r\n\r\nSee more discussion here: https://github.com/elastic/kibana/issues/39250\r\n\r\nPR removing the format: https://github.com/elastic/elasticsearch/pull/43659","performed_via_github_app":null}]