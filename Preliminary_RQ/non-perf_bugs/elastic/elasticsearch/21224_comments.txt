[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258618308","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-258618308","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":258618308,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODYxODMwOA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-11-05T15:21:02Z","updated_at":"2016-11-05T15:21:02Z","author_association":"CONTRIBUTOR","body":"`min_children: 0` makes no sense because you are essentially saying match all parents.  If you want to find parents with no children, then wrap a has_child query inside of a bool.must_not clause\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258933064","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-258933064","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":258933064,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODkzMzA2NA==","user":{"login":"marshall007","id":877936,"node_id":"MDQ6VXNlcjg3NzkzNg==","avatar_url":"https://avatars2.githubusercontent.com/u/877936?v=4","gravatar_id":"","url":"https://api.github.com/users/marshall007","html_url":"https://github.com/marshall007","followers_url":"https://api.github.com/users/marshall007/followers","following_url":"https://api.github.com/users/marshall007/following{/other_user}","gists_url":"https://api.github.com/users/marshall007/gists{/gist_id}","starred_url":"https://api.github.com/users/marshall007/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshall007/subscriptions","organizations_url":"https://api.github.com/users/marshall007/orgs","repos_url":"https://api.github.com/users/marshall007/repos","events_url":"https://api.github.com/users/marshall007/events{/privacy}","received_events_url":"https://api.github.com/users/marshall007/received_events","type":"User","site_admin":false},"created_at":"2016-11-07T19:14:52Z","updated_at":"2016-11-07T19:14:52Z","author_association":"NONE","body":"@clintongormley the point I'm trying to make here is that not supporting `min_children: 0` makes doing a SQL-like \"left join\" a lot more difficult than it needs to be. In this case we _are_ trying to match all parents even if they don't have any children, not just parents that have no children.\n\nCan you elaborate on why this use-case \"makes no sense\"? In my mind it's counter-intuitive that this does not work out of the box.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259083007","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-259083007","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":259083007,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTA4MzAwNw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-11-08T09:08:04Z","updated_at":"2016-11-08T09:08:04Z","author_association":"CONTRIBUTOR","body":"I say it makes no sense because it is very ambiguous.  Do you intend to match only parents that either have children matching the specified constraints or no have no children at all.  You specify min_should_match: 1, so what about parents that have no children which match the constraints.  Should those be included or not?  In which case surely you just want a match_all on the parents?\n\nI think you mean to exclude parents that have children but those children don't match the constraints.  In that case, you can write it as a bool query:\n\n```\n bool: {\n    should: [\n       { parents with matching children },\n       { parents with no children }\n   ]\n}\n```\n\nSo you can do what you want, but in a way that is much less ambiguous than accepting `min_children: 0`\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259192562","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-259192562","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":259192562,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTE5MjU2Mg==","user":{"login":"marshall007","id":877936,"node_id":"MDQ6VXNlcjg3NzkzNg==","avatar_url":"https://avatars2.githubusercontent.com/u/877936?v=4","gravatar_id":"","url":"https://api.github.com/users/marshall007","html_url":"https://github.com/marshall007","followers_url":"https://api.github.com/users/marshall007/followers","following_url":"https://api.github.com/users/marshall007/following{/other_user}","gists_url":"https://api.github.com/users/marshall007/gists{/gist_id}","starred_url":"https://api.github.com/users/marshall007/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshall007/subscriptions","organizations_url":"https://api.github.com/users/marshall007/orgs","repos_url":"https://api.github.com/users/marshall007/repos","events_url":"https://api.github.com/users/marshall007/events{/privacy}","received_events_url":"https://api.github.com/users/marshall007/received_events","type":"User","site_admin":false},"created_at":"2016-11-08T16:53:11Z","updated_at":"2016-11-08T16:53:11Z","author_association":"NONE","body":"> Do you intend to match only parents that either have children matching the specified constraints or no have no children at all.\n\nGiven that the parameter name is **min** children, I don't see how this is an ambiguous statement at all. It's simply \"zero or more children matching this query\". In other words \"return all parents, including any of their children that match this query\".\n\n> I think you mean to exclude parents that have children but those children don't match the constraints.\n\nThis is not quite accurate. We do in fact want to include parents even if their children don't match the constraints, not just parents with zero children.\n\nWe currently workaround this by putting both the parent `terms` query and the `has_child` in a `should` clause, but I argue this is far more convoluted than a simple `min_children: 0`. Especially when you consider that we want to dynamically change this parameter (either `0` or `1`). Instead of changing a single param, we're required to restructure the `bool` query into a `must` or `should` depending on whether we want to include parents with no matching children or not.\n\nFurthermore, the fact that `min_children: 0` is considered valid, yet behaves more like `min_children: 1` is certainly confusing. I think we can at least agree that `0` should not be considered a valid value for this param if it doesn't behave as such.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259214842","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-259214842","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":259214842,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTIxNDg0Mg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-11-08T18:14:39Z","updated_at":"2016-11-08T18:14:39Z","author_association":"CONTRIBUTOR","body":"> This is not quite accurate. We do in fact want to include parents even if their children don't match the constraints, not just parents with zero children.\n\nOK, that wasn't what i was expecting.  So you're using inner hits to return the children?  And the children aren't involved in scoring the parent hits?  In this case, running a has_child query just to return any matching children for the top 10 results would be an inefficient way of doing it.\n\nI'd rather just get back the top 10 parents, then retrieve any children for those parents in a separate request.\n\n>  I think we can at least agree that 0 should not be considered a valid value for this param if it doesn't behave as such.\n\nAgreed\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/265161362","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-265161362","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":265161362,"node_id":"MDEyOklzc3VlQ29tbWVudDI2NTE2MTM2Mg==","user":{"login":"nimelord","id":21811792,"node_id":"MDQ6VXNlcjIxODExNzky","avatar_url":"https://avatars0.githubusercontent.com/u/21811792?v=4","gravatar_id":"","url":"https://api.github.com/users/nimelord","html_url":"https://github.com/nimelord","followers_url":"https://api.github.com/users/nimelord/followers","following_url":"https://api.github.com/users/nimelord/following{/other_user}","gists_url":"https://api.github.com/users/nimelord/gists{/gist_id}","starred_url":"https://api.github.com/users/nimelord/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nimelord/subscriptions","organizations_url":"https://api.github.com/users/nimelord/orgs","repos_url":"https://api.github.com/users/nimelord/repos","events_url":"https://api.github.com/users/nimelord/events{/privacy}","received_events_url":"https://api.github.com/users/nimelord/received_events","type":"User","site_admin":false},"created_at":"2016-12-06T14:22:30Z","updated_at":"2016-12-06T14:22:30Z","author_association":"NONE","body":"I totally agree with marshall007.\r\nRight now, I have no solution for list all parents with children (including zero number of children), which matched by 'bool section' and must be sorted by custom score.\r\nImprove it please. :)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372719673","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-372719673","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":372719673,"node_id":"MDEyOklzc3VlQ29tbWVudDM3MjcxOTY3Mw==","user":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"created_at":"2018-03-13T16:04:17Z","updated_at":"2018-03-13T16:04:17Z","author_association":"MEMBER","body":"/cc @elastic/es-search-aggs ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/413882199","html_url":"https://github.com/elastic/elasticsearch/issues/21224#issuecomment-413882199","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21224","id":413882199,"node_id":"MDEyOklzc3VlQ29tbWVudDQxMzg4MjE5OQ==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2018-08-17T14:23:35Z","updated_at":"2018-08-17T14:23:35Z","author_association":"CONTRIBUTOR","body":"Closing this in favour of https://github.com/elastic/elasticsearch/issues/32949","performed_via_github_app":null}]