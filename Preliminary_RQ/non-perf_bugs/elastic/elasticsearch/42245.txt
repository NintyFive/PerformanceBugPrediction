{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/42245","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42245/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42245/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42245/events","html_url":"https://github.com/elastic/elasticsearch/issues/42245","id":446220439,"node_id":"MDU6SXNzdWU0NDYyMjA0Mzk=","number":42245,"title":"Add API to simplify ILM initial setup","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"labels":[{"id":912828538,"node_id":"MDU6TGFiZWw5MTI4Mjg1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/ILM+SLM","name":":Core/Features/ILM+SLM","color":"0e8a16","default":false,"description":"Index and Snapshot lifecycle management"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":1967496097,"node_id":"MDU6TGFiZWwxOTY3NDk2MDk3","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Core/Features","name":"Team:Core/Features","color":"fef2c0","default":false,"description":"Meta label for core/features team"},{"id":111624690,"node_id":"MDU6TGFiZWwxMTE2MjQ2OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/feedback_needed","name":"feedback_needed","color":"d4c5f9","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2019-05-20T17:03:13Z","updated_at":"2020-05-15T22:50:46Z","closed_at":"2020-05-15T22:50:45Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Problem\r\n\r\nNow that ILM has been in the wild for a while, we've seen that one of the biggest issues users have with it is the [initial setup step](https://www.elastic.co/guide/en/elasticsearch/reference/7.0/getting-started-index-lifecycle-management.html), which can be quite unintuitive for users that are not experts in Elasticsearch - in order for things to work as expected, you need to:\r\n1) Create an ILM policy\r\n2) Create an index template which includes both the policy setting and the alias name (which does not yet exist)\r\n3) Create the first index manually with the alias used in the template with `is_write_index` set to true\r\n4) Write to that alias, rather than the index you've just created\r\n\r\nThis isn't insurmountably difficult, but it does require understanding how templates and aliases work well enough to understand what `is_write_index` means, and that it can't be set in the template, but must be set in the separate request to create the first index. This is especially unintuitive given that our typical workflow with templates in the past has been \"set up the template, then just issue index requests and let the index get created automatically\".  Even I've forgotten this once or twice.\r\n\r\n## Proposed Solution\r\n\r\nWe can add an API that would greatly simply the setup for the typical use case that would allow users to get the benefits of ILM-managed indices without needing to have a deep understanding of templates or aliases.\r\n\r\nHere's a sketch of what such an API could look like for a simple logging use case:\r\n```\r\nPOST _ilm/bootstrap/mylogs\r\n{\r\n  \"settings\": {\r\n    \"index.lifecycle.name\": \"mylogs-policy\",\r\n    \"number_of_shards\": 3\r\n  },\r\n  \"mappings\": {\r\n    \"properties\": {\r\n      \"message\": {\r\n        \"type\": \"text\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf this looks similar to the Create Index API, that's intentional - with this API, the workflow would be:\r\n1) Create an ILM policy\r\n2) Use this API with the name you want to write to, and the body you would use to create an index\r\n3) Write to the name you used\r\n\r\nUnder the covers, this would do the following:\r\n1) Create a template from the index creation request, but merging in the `index_patterns` and the `index.lifecycle.rollover_alias` setting:\r\n```\r\nPUT _template/mylogs-template\r\n{\r\n  \"index_patterns\": [\"mylogs-*\"],\r\n  \"settings\": {\r\n    \"index.lifecycle.name\": \"mylogs-policy\",\r\n    \"number_of_shards\": 3,\r\n    \"index.lifecycle.rollover_alias\": \"mylogs\"\r\n  },\r\n  \"mappings\": {\r\n    \"properties\": {\r\n      \"message\": {\r\n        \"type\": \"text\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n2) Create the first index with the appropriate alias with `is_write_index` set to `true`:\r\n```\r\nPUT mylogs-000001\r\n{\r\n  \"aliases\": {\r\n    \"mylogs\": {\r\n      \"is_write_index\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis is somewhat similar to the Rollover API in that it simply combines existing operations into a single API call with a small piece of extra logic.  This is not intended to replace the existing workflow for power users who need the additional flexibility, but to streamline the setup for the most common use, especially for less experienced users for whom this seems to be a particular pain point.\r\n\r\n## Alternative API\r\n\r\nAlternatively, the API could optionally include a policy definition if `index.lifecycle.name` is not provided. This would probably require nesting the index definition and the policy definition under two top-level keys, like so:\r\n```\r\nPOST _ilm/bootstrap/mylogs\r\n{\r\n  \"index\": {\r\n    \"settings\": {\r\n      \"number_of_shards\": 3\r\n    },\r\n    \"mappings\": {\r\n      \"properties\": {\r\n        \"message\": {\r\n          \"type\": \"text\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"hot\": {\r\n        \"actions\": {\r\n          \"rollover\": {\r\n            \"max_size\": \"50GB\",\r\n            \"max_age\": \"30d\"\r\n          }\r\n        }\r\n      },\r\n      \"delete\": {\r\n        \"min_age\": \"90d\",\r\n        \"actions\": {\r\n          \"delete\": {}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis would behave very similar to the first proposed API, but does not include the `index.lifecycle.name` setting in the index definition, and includes a full ILM policy definition.  This would then create the policy with the name `mylogs-policy` and inject the `index.lifecycle.name` setting in addition to `index.lifecycle.rollover_alias` as described above.  Here, the policy definition would be optional if `index.lifecycle.name` is provided on the index definition.\r\n\r\nThis adds some complexity to the API, but allows it to be a \"one-stop shop\" for setting up ILM.  This may or may not be worth the extra complexity, as I've seen fewer users having issues setting up the policy, especially since if an index is set to use a policy that does not exist, and the policy is later created, the index will immediately begin to use that policy.\r\n\r\nWhich of these two API options do folks like better?","closed_by":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"performed_via_github_app":null}