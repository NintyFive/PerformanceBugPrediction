[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/497356325","html_url":"https://github.com/elastic/elasticsearch/issues/42697#issuecomment-497356325","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42697","id":497356325,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NzM1NjMyNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-05-30T14:47:13Z","updated_at":"2019-05-30T14:47:13Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/497726618","html_url":"https://github.com/elastic/elasticsearch/issues/42697#issuecomment-497726618","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42697","id":497726618,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NzcyNjYxOA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2019-05-31T14:22:10Z","updated_at":"2019-05-31T14:23:29Z","author_association":"MEMBER","body":"Named queries execute the query in isolation so in this example:\r\n ````\r\n{\r\n    \"query\": {\r\n        \"bool\": {\r\n            \"must_not\": {\r\n                \"exists\": {\r\n                    \"field\": \"fB\",\r\n                    \"_name\": \"exists\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n````\r\nthe named query is:\r\n````\r\n  \"exists\": {\r\n     \"field\": \"fB\",\r\n      \"_name\": \"exists\"\r\n   }\r\n````\r\nwhich explains why it appears in the `matched_queries` of document that **contains** a field named `fB`. \r\n\r\nThe solution, that you already outlined, is to put the named query at the `bool` level in order to take the `must_not` clause into account:\r\n````\r\n{\r\n    \"query\": {\r\n        \"bool\": {\r\n            \"should\": [\r\n                {\r\n                    \"exists\": {\r\n                        \"field\": \"fA\",\r\n                        \"_name\": \"INSIDE EXISTS\"\r\n                    }\r\n                },\r\n                {\r\n                    \"bool\": {\r\n                        \"must_not\": {\r\n                            \"exists\": {\r\n                                \"field\": \"fA\"\r\n                            }\r\n                        },\r\n                        \"_name\": \"MUST NOT EXISTS\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n````\r\nSince this is not a bug and that a solution exists for the issue I am going to close this issue. Please reopen if I missed anything.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/497917276","html_url":"https://github.com/elastic/elasticsearch/issues/42697#issuecomment-497917276","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42697","id":497917276,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NzkxNzI3Ng==","user":{"login":"DevCeN","id":1760371,"node_id":"MDQ6VXNlcjE3NjAzNzE=","avatar_url":"https://avatars1.githubusercontent.com/u/1760371?v=4","gravatar_id":"","url":"https://api.github.com/users/DevCeN","html_url":"https://github.com/DevCeN","followers_url":"https://api.github.com/users/DevCeN/followers","following_url":"https://api.github.com/users/DevCeN/following{/other_user}","gists_url":"https://api.github.com/users/DevCeN/gists{/gist_id}","starred_url":"https://api.github.com/users/DevCeN/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DevCeN/subscriptions","organizations_url":"https://api.github.com/users/DevCeN/orgs","repos_url":"https://api.github.com/users/DevCeN/repos","events_url":"https://api.github.com/users/DevCeN/events{/privacy}","received_events_url":"https://api.github.com/users/DevCeN/received_events","type":"User","site_admin":false},"created_at":"2019-06-01T06:14:44Z","updated_at":"2019-06-01T06:19:16Z","author_association":"NONE","body":"I get that from your explanation now how the mechanism behind has caused this weird behaviour, which also explained situation 8. above why \"INSIDE MUST NOT\" appeared in the result. The workaround (or \"solution\" as you put it), is to use a different construct in order to know whether a `must_not` query is matched or not. Comparing\r\n\r\n```\r\n{\r\n  \"bool\": {\r\n    \"must\": {\r\n      \"exists\": {\r\n        \"field\": \"fA\",\r\n        \"_name\": \"MUST EXISTS\"\r\n      }\r\n}}}\r\n```\r\nto obtain in `matched_queries` that the named query (works for `must`, `should`) matched but the following\r\n```\r\n{\r\n  \"bool\": {\r\n    \"must\": {\r\n      \"bool\": {\r\n        \"must_not\": {\r\n          \"exists\": {\r\n            \"field\": \"fB\"\r\n          }\r\n        },\r\n        \"_name\": \"MUST NOT EXISTS\"\r\n      }\r\n}}}\r\n```\r\nas a \"solution\" for `must_not` query is very much counter intuitive to use the feature.\r\n\r\nAlso, when issuing nested `must_not` query, the \"solution\" above would populate \"MUST NOT EXISTS\" into the parent `matched_queries` as well as in the nested child's `matched_queries`, is this a bug then?","performed_via_github_app":null}]