{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/33049","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33049/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33049/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33049/events","html_url":"https://github.com/elastic/elasticsearch/issues/33049","id":352836363,"node_id":"MDU6SXNzdWUzNTI4MzYzNjM=","number":33049,"title":"Alternative schemes for Elasticsearch generated document IDs?","user":{"login":"cdahlqvist","id":2804455,"node_id":"MDQ6VXNlcjI4MDQ0NTU=","avatar_url":"https://avatars0.githubusercontent.com/u/2804455?v=4","gravatar_id":"","url":"https://api.github.com/users/cdahlqvist","html_url":"https://github.com/cdahlqvist","followers_url":"https://api.github.com/users/cdahlqvist/followers","following_url":"https://api.github.com/users/cdahlqvist/following{/other_user}","gists_url":"https://api.github.com/users/cdahlqvist/gists{/gist_id}","starred_url":"https://api.github.com/users/cdahlqvist/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cdahlqvist/subscriptions","organizations_url":"https://api.github.com/users/cdahlqvist/orgs","repos_url":"https://api.github.com/users/cdahlqvist/repos","events_url":"https://api.github.com/users/cdahlqvist/events{/privacy}","received_events_url":"https://api.github.com/users/cdahlqvist/received_events","type":"User","site_admin":false},"labels":[{"id":144797810,"node_id":"MDU6TGFiZWwxNDQ3OTc4MTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Core","name":":Core/Infra/Core","color":"0e8a16","default":false,"description":"Core issues without another label"},{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":110557212,"node_id":"MDU6TGFiZWwxMTA1NTcyMTI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/high%20hanging%20fruit","name":"high hanging fruit","color":"fc6149","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"assignees":[{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false}],"milestone":null,"comments":24,"created_at":"2018-08-22T07:37:37Z","updated_at":"2020-02-20T09:42:43Z","closed_at":"2020-02-20T09:42:42Z","author_association":"NONE","active_lock_reason":null,"body":"I have recently run some benchmarks simulating dense nodes, and have noticed that heap usage related to storage of document IDs is the main driver behind heap usage for at least some types of data. To see how different types of document IDs perform/behave, I created [a Rally challenge](https://github.com/elastic/rally-eventdata-track/blob/master/eventdata/challenges/large-shard-sizing.json#L162) based on the [rally-eventdata-track](https://github.com/elastic/rally-eventdata-track) to index ~25GB data into single-shard indices using a few different types of document IDs.\r\n\r\nI imported the metrics in Elasticsearch and got the following when visualizing it in Kibana:\r\n\r\n![screen shot 2018-08-22 at 08 17 06](https://user-images.githubusercontent.com/2804455/44449182-56f83100-a5e5-11e8-8763-74290f6a327a.png)\r\n\r\n_1. Heap usage per 120M documents by type of document ID_\r\n\r\n![screen shot 2018-08-22 at 08 17 19](https://user-images.githubusercontent.com/2804455/44449198-61b2c600-a5e5-11e8-8e86-4b4f768ade44.png)\r\n\r\n_2. Index size on disk for 120M documents by type of document ID_\r\n\r\nMost of the alternative ID types tested contains a large random portion (UUID4, SHA*). It is interesting to see that the autogenerated IDs seem to take up less space on disk but use more than twice the amount of heap compared to the other types of IDs.\r\n\r\nAs using autogenerated IDs give a speed advantage at indexing time, I think it would be great to make the format/.structure of autogenerated IDs configurable per index so the user can choose between optimizing for heap or disk usage. This does not need to support arbitrary formats, but one option that is more efficient with respect to heap usage would be useful.\r\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}