[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/59236938","html_url":"https://github.com/elastic/elasticsearch/issues/8027#issuecomment-59236938","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8027","id":59236938,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjM2OTM4","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-10-15T16:47:01Z","updated_at":"2014-10-15T16:47:01Z","author_association":"CONTRIBUTOR","body":"Hi @georgi0u \n\nThanks for all the description.  It's quite difficult to follow the detail though. Could you provide a simple but complete recreation of the problem (ie curl commands that I can copy and paste).  It will make it much easier to figure out where the problem lies.\n\nthanks\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/59996176","html_url":"https://github.com/elastic/elasticsearch/issues/8027#issuecomment-59996176","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8027","id":59996176,"node_id":"MDEyOklzc3VlQ29tbWVudDU5OTk2MTc2","user":{"login":"georgi0u","id":197144,"node_id":"MDQ6VXNlcjE5NzE0NA==","avatar_url":"https://avatars1.githubusercontent.com/u/197144?v=4","gravatar_id":"","url":"https://api.github.com/users/georgi0u","html_url":"https://github.com/georgi0u","followers_url":"https://api.github.com/users/georgi0u/followers","following_url":"https://api.github.com/users/georgi0u/following{/other_user}","gists_url":"https://api.github.com/users/georgi0u/gists{/gist_id}","starred_url":"https://api.github.com/users/georgi0u/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/georgi0u/subscriptions","organizations_url":"https://api.github.com/users/georgi0u/orgs","repos_url":"https://api.github.com/users/georgi0u/repos","events_url":"https://api.github.com/users/georgi0u/events{/privacy}","received_events_url":"https://api.github.com/users/georgi0u/received_events","type":"User","site_admin":false},"created_at":"2014-10-21T20:48:12Z","updated_at":"2014-10-21T20:53:53Z","author_association":"NONE","body":"# Simple Concrete Recreation\n\n**Executing the following code blocks, in order, as written -- with the exception of the hostname and port being replaced with relevant values -- should illustrate the issue on an otherwise untouched instance of elasticsearch 1.3.4.**\n\nTo summarize the potential issue again: \n\nRunning a set of specific queries through the `_search` utility, with one document indexed, returns said document each time (i.e., each of the unique queries used matches the document).\n\nIndexing the same set of queries into the `.percolator` type, followed by percolating the same document used in the searching example returns a smaller subset of the queries indexed, whereas it should be the same exact set, as far as I understand. \n\nThis seems inconsistent and thus I think it's a bug.\n\nHere are the steps:\n\n## Step 1: Create index\n\n_My original example had similar analyzers/tokenizers so I recreated them here_\n\n```\ncurl -XPUT 'unixdeva10:13312/a_test_index' -d '\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"my_tokenizer\",\n                    \"filter\" : [\"lowercase\"]\n                }\n            },\n            \"tokenizer\" : {\n                \"my_tokenizer\" : {\n                    \"pattern\" : \",+\",\n                    \"type\" : \"pattern\"\n                }\n            }\n        },\n        \"index\" : {\"number_of_shards\" : 5,\"number_of_replicas\" : 0}\n    }\n}'\n```\n\n## Step 2: Set up a mapping\n\n_Note: I don't think the `another_field` is necessary, but I'm trying to replicate my environment. It's probable that this example could be whittled down a bit._\n\n```\ncurl -XPUT 'unixdeva10:13312/a_test_index/_mapping/a_type' -d '\n{\n    \"a_type\": {\n        \"analyzer\": \"my_analyzer\",\n        \"properties\": {\n            \"a_field\": {\n                \"type\": \"string\"\n            },\n            \"another_field\": {\n                \"type\":\"string\",\n                \"null_value\":\"STATIC\"\n            }\n        }\n    }\n}\n' \n```\n\n## Step 3: Index a document\n\n```\ncurl -XPUT 'unixdeva10:13312/a_test_index/a_type/a_document' -d '{\"a_field\":\"A/VALUE\",\"another_field\":\"static\"}'\n```\n\n## Step 4: Attempt to `_search` for the document\n\n_control group to make sure queries match_\n\n### `match_all` query returns document, as expected.\n\n```\ncurl -XGET 'unixdeva10:13312/a_test_index/a_type/_search?pretty' -d '{\"query\": { \"match_all\":{}}}'\n```\n\n### `term` query returns document, as expected.\n\n```\ncurl -XGET 'unixdeva10:13312/a_test_index/a_type/_search?pretty' -d '{\n    \"query\": {\n        \"filtered\": {\n            \"filter\": {\n                \"and\": [\n                    {\n                        \"term\": {\n                            \"another_field\": \"static\"\n                        }\n                    },\n                    {\n                        \"in\": {\n                            \"a_field\": [\n                                \"a/value\"\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}'\n```\n\n### `phrase` query returns document, as expected\n\n```\ncurl -XGET 'unixdeva10:13312/a_test_index/a_type/_search?pretty' -d '{\n    \"query\": {\n        \"filtered\": {\n            \"filter\": {\n                \"term\": {\n                    \"another_field\": \"static\"\n                }\n            },\n            \"query\": {\n                \"match_phrase\" : {\n                    \"a_field\" : \"a/value\"\n                }\n            }\n        }\n    }\n}\n'\n```\n\n## Step 5: Run the same set of queries against the same document, via percolation.\n\n_Note: These are the same queries as used in the searching example_\n\n### Index the `phrase` query into `.percolator`\n\n```\ncurl -XPUT 'unixdeva10:13312/a_test_index/.percolator/PHRASE?pretty' -d '{\n    \"query\": {\n        \"filtered\": {\n            \"filter\": {\n                \"term\": {\n                    \"another_field\": \"static\"\n                }\n            },\n            \"query\": {\n                \"match_phrase\" : {\n                    \"a_field\" : \"a/value\"\n                }\n            }\n        }\n    }\n}'\n\n```\n\n### Index the `term` query into `.percolator`\n\n```\ncurl -XPUT 'unixdeva10:13312/a_test_index/.percolator/TERM?pretty' -d '{\n    \"query\": {\n        \"filtered\": {\n            \"filter\": {\n                \"and\": [\n                    {\n                        \"term\": {\n                            \"another_field\": \"static\"\n                        }\n                    },\n                    {\n                        \"in\": {\n                            \"a_field\": [\n                                \"a/value\"\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}'\n\n```\n\n### Index the `match_all` query into `.percolator`\n\n```\ncurl -XPUT 'unixdeva10:13312/a_test_index/.percolator/ALL' -d '{\"query\": { \"match_all\":{}}}'\n```\n\n## Step 6: Percolate the same example document\n\n```\ncurl -XGET 'unixdeva10:13312/a_test_index/a_type/_percolate?percolate_format=ids' -d '{\"doc\" : {\"a_field\":\"A/VALUE\",\"another_field\":\"static\"}}' | pprint\n```\n\n### The above **incorrectly** returns:\n\n_missing the query id `PHRASE` from its returned matches_\n\n```\n{\n    \"matches\": [\n        \"ALL\",\n        \"TERM\"\n    ],\n    \"total\": 2,\n    \"took\": 2,\n    \"_shards\": {\n        \"successful\": 5,\n        \"failed\": 0,\n        \"total\": 5\n    }\n}\n```\n\n### ...when _I think_ it should return the following:\n\n_Note: the inclusion of the query id `PHRASE` in the matches section_\n\n```\n{\n    \"matches\": [\n        \"ALL\",\n        \"TERM\",\n        \"PHRASE\"\n    ],\n    \"total\": 2,\n    \"took\": 2,\n    \"_shards\": {\n        \"successful\": 5,\n        \"failed\": 0,\n        \"total\": 5\n    }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/60100977","html_url":"https://github.com/elastic/elasticsearch/issues/8027#issuecomment-60100977","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8027","id":60100977,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTAwOTc3","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-10-22T15:14:11Z","updated_at":"2014-10-22T15:14:11Z","author_association":"CONTRIBUTOR","body":"Hi @georgi0u \n\nI've found the issue.  The problem is to do with the type-level `analyzer`.  In fact, if you run the phrase query search without using the type name in the URL, it doesn't work either.\n\nHowever, if you change the phrase query to use `a_type.a_field` then it works correctly, both in search and in percolate.\n\nIn fact, this is a duplicate of #3102, so I'll close this one.\n","performed_via_github_app":null}]