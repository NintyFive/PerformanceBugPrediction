{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/13843","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13843/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13843/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13843/events","html_url":"https://github.com/elastic/elasticsearch/issues/13843","id":108865384,"node_id":"MDU6SXNzdWUxMDg4NjUzODQ=","number":13843,"title":"Current issues with (meta) data upgrade","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"labels":[{"id":144797810,"node_id":"MDU6TGFiZWwxNDQ3OTc4MTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Core","name":":Core/Infra/Core","color":"0e8a16","default":false,"description":"Core issues without another label"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null},{"id":110815527,"node_id":"MDU6TGFiZWwxMTA4MTU1Mjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/help%20wanted","name":"help wanted","color":"207de5","default":true,"description":"adoptme"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-09-29T13:07:55Z","updated_at":"2018-03-14T02:51:32Z","closed_at":"2018-03-14T02:51:32Z","author_association":"MEMBER","active_lock_reason":null,"body":"Reviewing https://github.com/elastic/elasticsearch/pull/13799, I found it hard to follow the upgrade paths in our code. Here are couple of suggestion to make it simpler. This issue is meant capture them and we can spawn other tickets for each of the things we decide to do.\n- We rely both on Lucene versions and Elasticsearch versions in our code. I think this is confusing. We should just rely on the Elasticsearch version.\n- We capture the current status in index settings but we don't have clear separation in our naming between data upgrades (i.e., Lucene segments) and metadata upgrades. We have the following settings:\n  - `index.version.upgraded` -> meta data was upgraded \n  - `index.version.minimum_compatible` -> lucene segements were upgraded (and uses lucene versions)\n    they should be renamed to  `index.version.metadata_upgrade` & `index.version.data_upgrade` (or similar)\n- For closed indices we ignore the minimum data requirement (see MetaDataIndexUpgradeService#checkSupportedVersion) as we aren't intending to go and read the lucene files. However, we _do_ upgrade the metadata files. This puts us in place where people can't downgrade back to a previous version, open the index and upgrade it. I _think_ that we we have closed indices which can't be opened we should refuse to start. The alternative is to leave the metadata alone - but then we can't guarantee that the Elasticsearch code of the new version can deal with it.\n- The upgrade API sends upgrade commands to all the shards and when they respond successfully,we send a command to the master to mark the index as (data) upgraded. It would be nice to send the allocation IDs of the physical copies that were upgraded so the master can decide wether these are indeed contain all the _current_ primaries.\n\nOther confusions & minor things:\n- we have MetaDataUpdateSettingsService#upgradeIndexSettings which marks the index after upgrading the shard. We have MetaDataIndexUpgradeService which does all the metadata upgrading. We should move upgradeIndexSettings() into  MetaDataIndexUpgradeService\n- MetaDataUpdateSettingsService#upgradeIndexSettings (or it's equivalent) should stay away from the meta data upgrade settings (it's generally OK because the cluster state was already upgraded at that point)\n- MetaDataIndexUpgradeService#checkSupportedVersion ignores closed indices. That should be made explicit (either by the name or a parameter).\n","closed_by":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"performed_via_github_app":null}