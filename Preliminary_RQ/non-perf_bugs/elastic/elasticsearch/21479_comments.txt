[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259796368","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259796368","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259796368,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTc5NjM2OA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-10T20:19:21Z","updated_at":"2016-11-10T20:19:21Z","author_association":"CONTRIBUTOR","body":"@clintongormley I'd like to fast track this a bit because I feel like doing text manipulation on the query is a bit fraught.\n\nI also figure that if Kibana does this thing someone else might be doing it as well so it is likely worth fixing in a nice way.\n\nI certainly don't want to rush it though.\n\nI also think it is a thing we could build with our \"contextless\" scripts today and we could improve with the context work @jdconrad is doing. With \"contextless\" scripts we'd do a checked on the result from the script before comparing. With script context we'd force the return types to match so the script engine'd make the user perform the appropriate casts and give compile errors if they don't.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259800309","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259800309","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259800309,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgwMDMwOQ==","user":{"login":"Bargs","id":6239176,"node_id":"MDQ6VXNlcjYyMzkxNzY=","avatar_url":"https://avatars3.githubusercontent.com/u/6239176?v=4","gravatar_id":"","url":"https://api.github.com/users/Bargs","html_url":"https://github.com/Bargs","followers_url":"https://api.github.com/users/Bargs/followers","following_url":"https://api.github.com/users/Bargs/following{/other_user}","gists_url":"https://api.github.com/users/Bargs/gists{/gist_id}","starred_url":"https://api.github.com/users/Bargs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Bargs/subscriptions","organizations_url":"https://api.github.com/users/Bargs/orgs","repos_url":"https://api.github.com/users/Bargs/repos","events_url":"https://api.github.com/users/Bargs/events{/privacy}","received_events_url":"https://api.github.com/users/Bargs/received_events","type":"User","site_admin":false},"created_at":"2016-11-10T20:36:16Z","updated_at":"2016-11-10T20:36:16Z","author_association":"NONE","body":"I chatted with @nik9000 about this and agreed it would be nice to have first class support for this in the ES API. \n\nWe could work around this issue in Kibana by wrapping the user's script in a function, but as Nik said such textual manipulation is fragile. For one it would only work in painless, or we would have to have to hardcode the syntax for functions in every possible language the user might have enabled. We [already do that](https://github.com/elastic/kibana/pull/8642/files) in some cases but it's hacky and a nice side effect of Nik's proposal is that it would allow us to remove those existing conditionals from the code.\n\nNik also mentioned that the error reporting would be much worse if we wrapped the script in a function.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259827996","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259827996","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259827996,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgyNzk5Ng==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-11-10T22:34:41Z","updated_at":"2016-11-10T22:34:51Z","author_association":"CONTRIBUTOR","body":"Hey @nik9000, would you mind clarifying what you mind by the following: \"Specifically, the ($scriptText) == params.value part is scary because script fields that are perfectly valid painless most places are not valid in this script context.\"  What script context is this, and what makes it invalid?  Thanks.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259828782","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259828782","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259828782,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgyODc4Mg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-10T22:38:15Z","updated_at":"2016-11-10T22:38:15Z","author_association":"CONTRIBUTOR","body":"> What script context is this, and what makes it invalid?\n\nSay you have a script that looks like `return 1;`. It is valid painless. But when Kibana builds it as a filter you get a script that looks like `(return 1;) == params.value` which is all kinds of not going to work.\n\nMy point is that you can't do string manipulation to turn a painless script that returns a number into one that compares that number to another number. Sure, it works sometimes, but in general it doesn't. And it is super confusing.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259829054","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259829054","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259829054,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgyOTA1NA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-11-10T22:39:29Z","updated_at":"2016-11-10T22:39:29Z","author_association":"CONTRIBUTOR","body":"Got it.  Thanks!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259836711","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259836711","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259836711,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTgzNjcxMQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-11-10T23:17:12Z","updated_at":"2016-11-10T23:17:12Z","author_association":"MEMBER","body":"> Kibana lets users configure script fields once and reuse them\n\nThis sounds like stored scripts. Why aren't they using that?\n\n> the ($scriptText) == params.value part is scary because script fields that are perfectly valid painless most places are not valid in this script context\n\nBut they will return a compile error if the user has something bogus there like `return 1;`, so what is the problem?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259846248","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259846248","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259846248,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg0NjI0OA==","user":{"login":"Bargs","id":6239176,"node_id":"MDQ6VXNlcjYyMzkxNzY=","avatar_url":"https://avatars3.githubusercontent.com/u/6239176?v=4","gravatar_id":"","url":"https://api.github.com/users/Bargs","html_url":"https://github.com/Bargs","followers_url":"https://api.github.com/users/Bargs/followers","following_url":"https://api.github.com/users/Bargs/following{/other_user}","gists_url":"https://api.github.com/users/Bargs/gists{/gist_id}","starred_url":"https://api.github.com/users/Bargs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Bargs/subscriptions","organizations_url":"https://api.github.com/users/Bargs/orgs","repos_url":"https://api.github.com/users/Bargs/repos","events_url":"https://api.github.com/users/Bargs/events{/privacy}","received_events_url":"https://api.github.com/users/Bargs/received_events","type":"User","site_admin":false},"created_at":"2016-11-11T00:13:25Z","updated_at":"2016-11-11T00:13:25Z","author_association":"NONE","body":"> This sounds like stored scripts. Why aren't they using that?\n\nNot sure about that since I wasn't around when kibana scripted fields were implemented but my guess is that either stored scripts didn't exist at the time, or it was simply easier to store the script in `.kibana` since we needed  to maintain a master list of kibana scripted fields and metadata about each one anyway.\n\n> But they will return a compile error if the user has something bogus there like return 1;, so what is the problem?\n\nThink of Kibana scripted fields as a separate, higher level of abstraction than scripted fields in Elasticsearch. The user writes a single script, gives it a name, and we display it alongside all the regular fields anywhere they appear in the UI. From the Kibana user's perspective it's almost like a real field - they can search on it, filter on it, display its values, and aggregate on it. Under the hood we're taking that one script they wrote and using it in a bunch of different APIs, along with a little of the above mentioned magical text manipulation to get filtering to work. That worked fine when we only allowed lucene expressions. \n\nNow with a painless (or groovy, etc) script that's more than a single expression, the user is going to get a nasty compile error when they click the little filter icon in the UI. Users expect that functionality to work and we can't limit them to single expression scripts because that would seriously reduce the benefits of having painless in the first place.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259847107","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259847107","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259847107,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg0NzEwNw==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-11-11T00:18:45Z","updated_at":"2016-11-11T00:18:45Z","author_association":"MEMBER","body":"Then it should be done as a function in the generated wrapper script. I don't think we should complicate the script apis for this.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259848896","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259848896","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259848896,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg0ODg5Ng==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-11-11T00:29:52Z","updated_at":"2016-11-11T00:30:26Z","author_association":"CONTRIBUTOR","body":"Trying to reuse a script across multiple contexts doesn't really make sense in a lot of cases.  I know this is a bummer for our users, but a user should understand what each script does in each context.  Though some scripts may be similar, it makes sense to have one per.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259865984","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259865984","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259865984,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg2NTk4NA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-11T02:33:22Z","updated_at":"2016-11-11T02:33:22Z","author_association":"CONTRIBUTOR","body":"> Trying to reuse a script across multiple contexts doesn't really make sense in a lot of cases\n\nKibana has been doing this for quite a while. It works well in aggregations and script fields, I believe. They do it for filters too but they use this string manipulation hack. Those three cases have fairly similar contexts so long as you stick to doc values.\n\nI want to give Kibana some way so that it can stop this brittle textual manipulation of the scripts. It make filters super brittle with painless. I don't want Kibana to go deeper down the textual manipulation of user script hole because we'll end up with some twisty stuff and it still won't work well.\n\n@rjernst, what do you mean by \"generated wrapper script\"? Like a script that delegates to another script for one of it's inputs? The sounds fairly complex but might end up being a better solution. Something like:\n\n```\n                \"script\" : {\n                    \"script\" : {\n                        \"inline\" : \"params.dv == params.value\",\n                        \"lang\"   : \"painless\",\n                        \"params\" : {\n                            \"dv\" : {\n                              \"script\": {\n                                \"inline\": $scriptText,\n                                \"lang\": \"painless\"\n                              }\n                            },\n                            \"value\" : \"whatever the user picked\"\n                        }\n                    }\n                }\n```\n\nThat'd solve the brittleness problem and be fairly interesting from a compostability perspective. It seems like a fairly heavy, abstract solution to this problem but it'd work. I'm not sure how I feel about it. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259868710","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-259868710","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":259868710,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTg2ODcxMA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-11-11T02:54:58Z","updated_at":"2016-11-11T02:55:22Z","author_association":"CONTRIBUTOR","body":"This is exactly the situation I'm talking about.  They're using a script here where it doesn't make sense.  The user should make a separate script for this that is expected to return a boolean.  The value can be passed in automatically as a parameter.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260502659","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-260502659","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":260502659,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDUwMjY1OQ==","user":{"login":"Bargs","id":6239176,"node_id":"MDQ6VXNlcjYyMzkxNzY=","avatar_url":"https://avatars3.githubusercontent.com/u/6239176?v=4","gravatar_id":"","url":"https://api.github.com/users/Bargs","html_url":"https://github.com/Bargs","followers_url":"https://api.github.com/users/Bargs/followers","following_url":"https://api.github.com/users/Bargs/following{/other_user}","gists_url":"https://api.github.com/users/Bargs/gists{/gist_id}","starred_url":"https://api.github.com/users/Bargs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Bargs/subscriptions","organizations_url":"https://api.github.com/users/Bargs/orgs","repos_url":"https://api.github.com/users/Bargs/repos","events_url":"https://api.github.com/users/Bargs/events{/privacy}","received_events_url":"https://api.github.com/users/Bargs/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T23:54:17Z","updated_at":"2016-11-14T23:54:17Z","author_association":"NONE","body":"Asking the user to copy paste their script with a slight modification for filtering isn't a viable solution IMO. It'll lead to subtle copy paste errors. It also isn't scalable. What happens when there's another slightly different context we need to support? We ask them to copy/paste 3 times, then 4 times, etc? Not a good user experience.\n\nI've also been playing with the idea of a function wrapper workaround as mentioned in my previous comment and I don't think it's going to work. As far as I can tell Painless requires functions to have return type declarations, and we can't infer that in Kibana so we can't auto generate a wrapper function for the user's script.\n\nI'm not married to the original solution proposed in this ticket but I think we need some way to take a single script which produces a return value and apply it in multiple contexts. From the user's perspective there shouldn't be a difference between a script that has a single expression and one that has some logic and a return statement.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260709602","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-260709602","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":260709602,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDcwOTYwMg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-15T17:32:35Z","updated_at":"2016-11-15T17:32:35Z","author_association":"CONTRIBUTOR","body":"I talked with @jdconrad about this and I convinced him that the places where Kibana is reusing the same script are similar _enough_ that it is pretty reasonable to reuse the scripts. Places like the `script` field in the `terms` aggregation. The script filter is the most weird place where the scripts are reused because it returns the wrong thing.\n\nWe want to remove the need for the brittle text manipulation but we aren't yet sure of the nicest way to do it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260801221","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-260801221","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":260801221,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDgwMTIyMQ==","user":{"login":"Bargs","id":6239176,"node_id":"MDQ6VXNlcjYyMzkxNzY=","avatar_url":"https://avatars3.githubusercontent.com/u/6239176?v=4","gravatar_id":"","url":"https://api.github.com/users/Bargs","html_url":"https://github.com/Bargs","followers_url":"https://api.github.com/users/Bargs/followers","following_url":"https://api.github.com/users/Bargs/following{/other_user}","gists_url":"https://api.github.com/users/Bargs/gists{/gist_id}","starred_url":"https://api.github.com/users/Bargs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Bargs/subscriptions","organizations_url":"https://api.github.com/users/Bargs/orgs","repos_url":"https://api.github.com/users/Bargs/repos","events_url":"https://api.github.com/users/Bargs/events{/privacy}","received_events_url":"https://api.github.com/users/Bargs/received_events","type":"User","site_admin":false},"created_at":"2016-11-15T23:15:10Z","updated_at":"2016-11-15T23:15:10Z","author_association":"NONE","body":"It might be cool if we could treat the user's script as a named function, so that we could create the filter like so:\n\n```\n\"script\" : {\n    \"script\" : {\n        \"inline\" : \"userScript(doc) == params.value\",\n        \"lang\"   : \"painless\",\n        \"params\" : {\n            \"value\" : \"whatever the user picked\"\n        }\n    }\n}\n```\n\nThat might give us a lot of flexibility to use the provided user script in interesting ways down the road as well. It would be super swell if it didn't matter what language the user script is written in, but without knowing how this is all implemented I'm probably just spewing crazy talk.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260881851","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-260881851","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":260881851,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDg4MTg1MQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T08:16:30Z","updated_at":"2016-11-16T08:16:30Z","author_association":"CONTRIBUTOR","body":"I might miss a thing but would it make sense to specialize that particular usercase `userScript(doc) == params.value` in `ScriptQuery`? we already have this:\n\n``` Java\n  leafScript.setDocument(doc);\nObject val = leafScript.run();\nif(val instanceof Number) {\n  return ((Number) val).longValue() != 0;\n}\n```\n\nif this is the usecase we can maybe turn it into:\n\n``` Java\n  leafScript.setDocument(doc);\nObject val = leafScript.run();\nif(val instanceof Number) {\n  return ((Number) val).longValue() == userSpecified; // we gotta make it a bit more complicated by bascially that's it...\n}\n```\n\nthen we can just use the script and compare it internally without any API being more complicated?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260969028","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-260969028","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":260969028,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDk2OTAyOA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T15:08:26Z","updated_at":"2016-11-16T15:08:26Z","author_association":"CONTRIBUTOR","body":"@s1monw I think that fairly similar to what I proposed first....\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260979663","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-260979663","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":260979663,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDk3OTY2Mw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T15:44:15Z","updated_at":"2016-11-16T15:44:15Z","author_association":"CONTRIBUTOR","body":"I don't feel good about this feature: making it easy to match scripts against exact values feels wrong to me since it means that the data was not indexed correctly. I think it is fine for one-time usage, but here we are discussing the ability to search on reusable scripts, which means the user should have an index pipeline that creates a proper field based on this script so that querying it is fast.\n\nI think it's great to have the `script` query exposed in Kibana for these one-time queries that one did not think about at index time. But I don't think we should aim at making it easy to wire existing reusable scripts and the `script` query. This looks like an anti-pattern to me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261001820","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-261001820","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":261001820,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTAwMTgyMA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T16:50:05Z","updated_at":"2016-11-16T16:50:05Z","author_association":"CONTRIBUTOR","body":"> I don't feel good about this feature: making it easy to match scripts against exact values feels wrong to me since it means that the data was not indexed correctly.\n\nIndeed the fact that this is just a couple of clicks in Kibana is a bit troubling. It isn't obvious while you are doing it that this might have non-trivial performance cost. Part of what makes this not so bad in Kibana is that to get to the page where you make the selection we've already shown you an aggregation across the entire date range so the user has already waited once. And we've potentially already lit up the disk cache for the field.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261169211","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-261169211","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":261169211,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTE2OTIxMQ==","user":{"login":"alexbrasetvik","id":43624,"node_id":"MDQ6VXNlcjQzNjI0","avatar_url":"https://avatars0.githubusercontent.com/u/43624?v=4","gravatar_id":"","url":"https://api.github.com/users/alexbrasetvik","html_url":"https://github.com/alexbrasetvik","followers_url":"https://api.github.com/users/alexbrasetvik/followers","following_url":"https://api.github.com/users/alexbrasetvik/following{/other_user}","gists_url":"https://api.github.com/users/alexbrasetvik/gists{/gist_id}","starred_url":"https://api.github.com/users/alexbrasetvik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexbrasetvik/subscriptions","organizations_url":"https://api.github.com/users/alexbrasetvik/orgs","repos_url":"https://api.github.com/users/alexbrasetvik/repos","events_url":"https://api.github.com/users/alexbrasetvik/events{/privacy}","received_events_url":"https://api.github.com/users/alexbrasetvik/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T06:47:45Z","updated_at":"2016-11-17T06:47:45Z","author_association":"CONTRIBUTOR","body":"Seconding @jpountz here, this looks like an easy way to make a seemingly innocuous query become super-expensive. In my experience, scripts are a common source of _unexpected_ (to the novice user) CPU-cost, as a user doesn't necessarily think of the massive cost difference in execution of `{\"term\": {\"foo\": \"bar\"}}` vs. `\"doc['foo'].value == params.value\"`. If this happens behind the scenes in Kibana, it's even less likely that the user considers (or is even aware) of this.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261181392","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-261181392","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":261181392,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTE4MTM5Mg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T08:08:12Z","updated_at":"2016-11-17T08:08:12Z","author_association":"CONTRIBUTOR","body":"Another issue here is that script fields (will) run in a different context to script queries: scripted fields should have access to the `_source`, while script queries should only have access to `doc[]`, so there is no guarantee that a scripted field would work as a script query in the future.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/262056657","html_url":"https://github.com/elastic/elasticsearch/issues/21479#issuecomment-262056657","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21479","id":262056657,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MjA1NjY1Nw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-11-21T20:25:51Z","updated_at":"2016-11-21T20:25:51Z","author_association":"CONTRIBUTOR","body":"After an over video discussion we came the to the conclusion that #21635 is good enough for Kibana and hopefully should be good enough for other users. [This](https://github.com/elastic/elasticsearch/pull/21635/files#diff-28eece182c011b16a11a0ba2adf61b69R45) is an example of doing a comparison. You use text manipulation to wrap the scripted field in a lambda and run the comparison. This isn't perfect - if the script you are wrapping defines a function then it'll fail, but this is much simpler on our side than any of the other proposed solutions and it has the advantage of making it difficult to do a potentially slow thing. And that is kind of a good thing.","performed_via_github_app":null}]