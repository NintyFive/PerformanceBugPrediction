{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/33003","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33003/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33003/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33003/events","html_url":"https://github.com/elastic/elasticsearch/issues/33003","id":352315997,"node_id":"MDU6SXNzdWUzNTIzMTU5OTc=","number":33003,"title":"Flattened object fields design + implementation","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"assignees":[{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false}],"milestone":null,"comments":22,"created_at":"2018-08-20T22:15:48Z","updated_at":"2019-07-01T09:21:49Z","closed_at":"2019-07-01T09:11:34Z","author_association":"MEMBER","active_lock_reason":null,"body":"Main issue: #25312\r\nFeature branch: https://github.com/elastic/elasticsearch/tree/object-fields\r\n\r\n**Note:** this field type was previously called `embedded_json`, so many PRs + comments will refer to that name.\r\n\r\n**Motivation**\r\n\r\nDocuments sometimes contain large objects, where only a small number of the fields are frequently used in searches. By default, we create dynamic mappings for all key-value pairs in the object, and index each one as a separate field. This has a number of downsides:\r\n- Weâ€™re creating a large number of distinct fields in Lucene.\r\n- Each field becomes its own entry in the mappings, which can lead to a large cluster state.\r\n- From a UX perspective, the list of fields can appear quite cluttered, and it can be difficult to understand which fields are most critical.\r\n\r\nIn some cases, the number of field keys not just a large known number, but unbounded. Here, it can be difficult to successfully model the data at all.\r\n\r\n**Feature Summary**\r\n\r\nThis feature will allow an entire JSON object to be indexed into a field, and provide limited search functionality over the field's contents. Given an object field `header` of the form `{\"content-type\": \"text/html\", \"referer\": \"https://google.com\"}`, its content will be analyzed into the individual tokens `content-type\\0text/html`, `referer\\0https://google.com` (where `\\0` is some suitable delimiter). Additionally, tokens are created for each value alone: `text/html`, `https://google.com`. Each leaf value in the object becomes its own token, and no further analysis is applied to the individual values.\r\n\r\nIn addition to being able to retrieve the JSON blob (through fetching source, or as a stored field), we plan to support queries of the following forms:\r\n- key: `header`, value: `application/json`, for example `{\"term\": {\"header\": \"application/json\"}}`\r\n- key: `header.content-type`, value: `application/json`, for example `{\"term\": {\"header.content-type\": \"application/json\"}}`\r\n\r\nNote that it is not possible to search the prefixed tokens directly, i.e. the following query will not return results: `{\"term\": {\"header\": \"content-type\\0application/json\"}}`.\r\n\r\nAs a first pass, the following query types will be allowed: `term`, `terms`, `terms_set`, `range` (without special support for numerics), `prefix`, `match` family (insofar as they work for keyword fields), `query_string`, `simple_query_string`, `exists`.\r\n\r\nIn this first version, it will not be possible to refer to field keys using wildcards, as in `{\"header.content-*\": \"application/json\"}`. Under the proposed API/ implementation, supporting field wildcards would add significant complexity and uncertainty around performance.\r\n\r\n**Potential Extensions**\r\n\r\n- Collect more feedback on the importance of numeric fields, and explore adding more targeted support for them. As an example, users may want to perform true range queries on numeric fields within the object.\r\n- Introduce a way for certain JSON keys to be 'promoted' into individual fields. One approach we're considering is to extend `copy_to` to work on entire objects, so that the same JSON blob could be added both as a 'queryable object' field, and also as normal object with explicit subfield definitions.\r\n- Add support for additional query types.\r\n  - By performing proper escaping and taking advantage of `prefix_length`, we could likely support `wildcard`, `regexp`, and `fuzzy` queries.\r\n  - As mentioned in the original issue, we could consider tokenizing values on whitespace. This could allow for better support of positional queries like `match_phrase`.\r\n- Explore adding support for aggregations + sorting. This idea needs a lot more research, but could maybe be accomplished by creating additional 'doc value fields', then adding a filtering layer when fetching doc values that checks for the field prefix. **Update**: we've decided to include this in the first version.\r\n- Explore adding support for highlighting, since with large JSON blobs it can be difficult to tell which key-value pairs matched the query.\r\n- Potentially allow for the field contents to be specified as a JSON string, in addition to accepting an object embedded in the document source.\r\n\r\n**Implementation Plan**\r\nCore items:\r\n- [x] Create a new field type that accepts an object and indexes its leaf values. Verify that the object field can be used in queries of the form `{\"header\": \"application/json\"}`. #33923\r\n- [x] Index prefixed tokens, and support searching for values based on key as in `{\"header.content-type\": \"application/json\"}`. #34207 #34621\r\n- [x] Add support for storing the field by adding a single stored field containing the whole JSON blob. #34942\r\n- [x] Add a limit to the depth of the objects that will be indexed. #35063\r\n- [x] Add documentation. #35281\r\n- [x] Add tests for the supported query types. #35319\r\n- [x] Revisit the field lookup logic with potential optimizations. #39872\r\n- [x] Rename field type to `embedded_json`. #40712\r\n- [x] Explore adding support for doc values, to allow for aggregations + sorting. #40069\r\n- [x] Address issues in doc values implementation  (https://github.com/elastic/elasticsearch/pull/40069#issuecomment-477797499). #41282 #41319\r\n- [x] Perform benchmarks.","closed_by":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"performed_via_github_app":null}