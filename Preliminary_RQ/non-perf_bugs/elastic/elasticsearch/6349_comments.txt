[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/44662039","html_url":"https://github.com/elastic/elasticsearch/issues/6349#issuecomment-44662039","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6349","id":44662039,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0NjYyMDM5","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2014-05-30T15:13:31Z","updated_at":"2014-05-30T15:13:31Z","author_association":"CONTRIBUTOR","body":"Would it be possible to count the average number of disk seeks per version lookup in both cases. I think this would give a pretty good idea of how performance would compare in case of an index that is cold or much larger than RAM?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/44665020","html_url":"https://github.com/elastic/elasticsearch/issues/6349#issuecomment-44665020","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6349","id":44665020,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0NjY1MDIw","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2014-05-30T15:37:44Z","updated_at":"2014-05-30T15:37:44Z","author_association":"CONTRIBUTOR","body":"I did exactly that when working on the UUID blog post.  Random IDs (which ES is using for auto-id) are the worst case: they cause a seek per segment, once the index is large enough.  Predictable IDs give much less seeking.\n\nI didn't test seek count with the bloom filters; I can do that.  It should be much less, though I suspect even in a cold case (overall index bigger than free RAM), the OS would keep the _uid terms dict blocks warmish in the update case, as long as ongoing indexing is fast enough, because ES is doing a lookup per indexed doc.  Especially if the lookups are biased towards recently indexed docs.\n\nIn the append-only case I think none of this matters much, because we are never doing a lookup by ID.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/49623242","html_url":"https://github.com/elastic/elasticsearch/issues/6349#issuecomment-49623242","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6349","id":49623242,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NjIzMjQy","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T15:45:26Z","updated_at":"2014-07-21T15:45:26Z","author_association":"CONTRIBUTOR","body":"I ran another test here, indexing 50M small (lines from web access logs) docs.  I pass my own ID (so ES must do the ID lookup), and 25% of the time the ID does exist and so the doc is replaced.\n\nIt was a worst case test: I used fully random UUIDs, docs are tiny, I left terms index at its default settings (i.e., did not let it use the ~10 bits of RAM per UUID that blooms got to use), and indexing performance was ~10% slower.  This used to be much, much worse before #6298 ...\n\nI suspect the apps that do pass their own ID and update docs are \"typically\" indexing larger docs than the common \"append only tiny docs\" case, and so that 10% would be lower because more time is spent actually indexing.\n\nNet/net I think we should disable blooms today: I think the added RAM usage at search time is dangerous and not worth the minor indexing gains.  We could do this in a low-risk way, just by changing the default  index.codec.bloom.load to false.  This way the bloom filters are still computed at indexing time, but not loaded at search time.  Apps that \"need them\" can just flip that boolean to true.\n\nOr we can stop computing them at indexing time too; this means apps that want them back would have to re-index.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/49854966","html_url":"https://github.com/elastic/elasticsearch/issues/6349#issuecomment-49854966","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6349","id":49854966,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5ODU0OTY2","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2014-07-23T10:03:58Z","updated_at":"2014-07-23T10:03:58Z","author_association":"CONTRIBUTOR","body":"Closed via #6959\n","performed_via_github_app":null}]