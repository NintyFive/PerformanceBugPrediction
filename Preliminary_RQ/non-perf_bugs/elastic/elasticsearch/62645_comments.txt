[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/694961694","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-694961694","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":694961694,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDk2MTY5NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-09-18T16:23:15Z","updated_at":"2020-09-18T16:23:15Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-ql (:Query Languages/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/694991328","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-694991328","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":694991328,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDk5MTMyOA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-18T17:27:03Z","updated_at":"2020-09-21T20:14:43Z","author_association":"MEMBER","body":"Thanks for starting this discussion on an issue @costin. I'm optimistic that we'll agree on something.\r\n\r\nInstead of interpreting this issue as _Replace ?\" and ?' with \"\"\"_, I'm hoping to address the underlying question _What syntax is ideal for representing raw strings?_\r\n\r\nMost of my thoughts boil down to three high-level questions\r\n\r\n1. What contexts do we think this will be used? Purely in `==` and `!=` equality comparisons? Do we think users will just copy and paste a value directly into a query this way? Or will it be used within the `wildcard` or `match` function? I think we should know our use-cases first, and work from there.\r\n\r\n\r\n2. What alternatives have we considered, and is this the best option?\r\nSince this is a feature request that is user-facing, I want to make sure we find the right solution, because maintaining compatibility could pigeonhole us in the user. So we want to avoid breaking changes down the road.\r\n\r\nA handful of alternatives that we've discussed:\r\n* use `/.../` syntax for representing raw literals. We brought this one up, but the biggest concern is how common `/` is for unix paths. For that reason, it would need to be escaped a lot, and is problematic.\r\n* use `'...'` approach for literal strings. The `'` character is used for strings in many languages, and using it for escaping identifiers in SQL seems to be more the exception than the rule.  Personally, using`'...'` for literal string seems the most intuitive is my favorite approach and is consistent with several programming languages and serialization formats. However, this syntax isn't currently available to us, because we need to first deprecate/remove it before we can repurpose it.\r\n* use backticks <code>\\`...\\`</code>. But this makes more sense for escaping identifiers than escaping strings.\r\n* use `'''...'''`. This is nearly identical to `\"\"\"`, however it could be misread in non-monospace fonts.\r\n\r\n\r\n3. What is the desired syntax and behavior allowed between the `\"\"\"` pairs? Can the string contain `\"\"\"` at all? How many quotes could it contain?\r\n\r\nHow do we handle these scenarios?\r\n* newlines between `\"\"\"`\r\n* tabs between `\"\"\"`\r\n* what whitespace _is_ allowed between?\r\n* `\"\"\"\"\"\"` (6 quotes): is this an empty string?\r\n* 7 quotes: should this parse to `\"` or should it fail?\r\n* 8 quotes: will this parse to `\"\"` or should it fail?\r\n* 9 quotes: will this parse to `\"\"\"` or shoul it fail?\r\n* 10 quotes: will this parse to `\"\"\"` or should it fail?\r\n* `\"\"\"\"\"\"abc\"\"\"` (6 quotes, then `abc\"\"\"`): will this parse as `\"\"\"abc` or should it fail?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696007369","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696007369","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696007369,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjAwNzM2OQ==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T09:37:58Z","updated_at":"2020-09-21T09:37:58Z","author_association":"CONTRIBUTOR","body":"For consistency with the rest of the language and to keep symbols usage to a minimum (which adds additional complexity and potentially can confuse users), using `\"\"\"` is a good option. The double quote is already used, so it doesn't come as a surprise to a user.\r\n\r\nFor the other four suggested alternatives:\r\n- `/` feels regex-ish to me and for the reason @rw-access mentioned, as well, I don't think is a good alternative\r\n- [the single quote `'` could be used for identifiers](https://github.com/elastic/elasticsearch/issues/61659#issuecomment-686396993) and I like this idea better than using the single quote for raw strings\r\n- the backtick ``` ` ``` is not so common imo and tends to suggest escaping (see Markdown). And, again, there is no need to add more symbols to the language if we don't actually need it.\r\n- fully agree with @rw-access regarding `'''`\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696138607","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696138607","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696138607,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjEzODYwNw==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T14:08:51Z","updated_at":"2020-09-21T14:08:51Z","author_association":"CONTRIBUTOR","body":"I think that this change is quite safe even for any existing users, and the chance that the unescaped string literal is used.\r\n\r\n- We provide an error message when using the previous syntax pointing to the new syntax\r\n- The introduction of `\"\"\"` has the exact same behaviour regarding `\"` and `'` in the unescaped string:\r\n  - `?\"asdf\"asdf\"`\r\n  - `?\"\"\"`\r\n  - `?\"\"\"\"`\r\n  - `?\"'\"`\r\n  - and so on\r\n\r\nIt's the same behaviour for every language out there and every unescaped syntax. What about if the unescaped syntax is marked with an `#`? Then expressions like `##foo#bar#` will result int `#foo#bar`.\r\n\r\nImho, we should proceed with this breaking change.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696329731","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696329731","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696329731,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjMyOTczMQ==","user":{"login":"sethpayne","id":5001370,"node_id":"MDQ6VXNlcjUwMDEzNzA=","avatar_url":"https://avatars2.githubusercontent.com/u/5001370?v=4","gravatar_id":"","url":"https://api.github.com/users/sethpayne","html_url":"https://github.com/sethpayne","followers_url":"https://api.github.com/users/sethpayne/followers","following_url":"https://api.github.com/users/sethpayne/following{/other_user}","gists_url":"https://api.github.com/users/sethpayne/gists{/gist_id}","starred_url":"https://api.github.com/users/sethpayne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sethpayne/subscriptions","organizations_url":"https://api.github.com/users/sethpayne/orgs","repos_url":"https://api.github.com/users/sethpayne/repos","events_url":"https://api.github.com/users/sethpayne/events{/privacy}","received_events_url":"https://api.github.com/users/sethpayne/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T19:40:11Z","updated_at":"2020-09-21T19:40:48Z","author_association":"NONE","body":"> How do we handle these scenarios?\r\n\r\n> * newlines between `\"\"\"`\r\n> * tabs between `\"\"\"`\r\n\r\n@paulewing  and @MikePaquette  -- can you comment on the above?\r\n\r\nGoing to add my perspective on the below:\r\n\r\n> * what whitespace _is_ allowed between?\r\n\r\nAny.  If `\"\"\" ... \"\"\"` encloses literal strings, whitespace should be interpreted literally as well.  \r\n\r\n> * `\"\"\"\"\"\"` (6 quotes): is this an empty string?\r\n\r\nYes.  This should be an empty string\r\n\r\n> * 7 quotes: should this parse to `\"` or should it fail?\r\n\r\nThis should fail since we would need to make assumptions about user intent, otherwise.  I think we need to avoid this and require users to be very explicit\r\n\r\n> * 8 quotes: will this parse to `\"\"` or should it fail?\r\n\r\nThis should be interpreted as the a string: `\"\"`\r\n\r\n> * 9 quotes: will this parse to `\"\"\"` or shoul it fail?\r\n\r\nFail.  Same reasoning as for 7 quotes\r\n\r\n> * 10 quotes: will this parse to `\"\"\"` or should it fail?\r\n\r\nParse to `\"\"\"` as with 8 -- or any even numbered count of double quotes\r\n\r\n> * `\"\"\"\"\"\"abc\"\"\"` (6 quotes, then `abc\"\"\"`): will this parse as `\"\"\"abc` or should it fail?\r\n\r\nParse as `\"\"\"abc` -- again, I think we should require explicit input from users.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696342261","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696342261","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696342261,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjM0MjI2MQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T20:04:18Z","updated_at":"2020-09-21T20:04:18Z","author_association":"MEMBER","body":"Folks, before getting lost in the details let's clarify one thing: this ticket is **not** about changing the raw string semantics.\r\n\r\n> What contexts do we think this will be used?\r\n\r\n1. Again, the aim of this ticket is **not** introduce new behavior but to simplify the grammar. In other words, the behavior of the raw string declaration does not and should not change.\r\nFurther more the context of a definition should not matter. It does not for strings so it shouldn't for raw strings either. If it does, that's a bug.\r\n\r\n> What alternatives have we considered, and is this the best option?\r\n\r\n2. The issue with only picking any one character is that it leads to escaping that character inside the string.\r\nIf we pick [x], declaring the raw string x becomes x\\xx. Sure the same thing applies with a repetition of characters but it's much more unlikely.\r\nI'm not clear whether you propose an alternative or not...\r\n\r\n> What is the desired syntax and behavior allowed between the \"\"\" pairs? ...\r\n\r\n3. I'm not sure I follow - this is not a new requirement but replacing the current raw string declaration with a new one. The existing behavior will remain the same. See 1).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696354855","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696354855","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696354855,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjM1NDg1NQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T20:26:44Z","updated_at":"2020-09-21T20:27:36Z","author_association":"MEMBER","body":"I believe we're on the same page. I asked these questions to make this proposal crystal clear.\r\nThis is a specification we're talking about, so I don't want to assume anything.\r\n\r\n> Further more the context of a definition should not matter. It does not for strings so it shouldn't for raw strings either. If it does, that's a bug.\r\n* My preference is that `\"\"\"` and `\"` be fully interchangeable, but merely have different syntax (escaping vs raw). It sounds like we're agreement.\r\n\r\n> What contexts do we think this will be used?\r\n* My reason for this question is that I want to make sure we are also clear on _why_ we need this syntax and what contexts it will most likely be used in. I believe there are two: (1) regular expressions and (2) copy and paste without escaping\r\n\r\n> What alternatives have we considered, and is this the best option?\r\n* I asked this question, because I want to make sure that we aren't simply charging forward with one option, but that we are exploring all options, because this a change we only want to make once.\r\n\r\n> I'm not clear whether you propose an alternative or not...\r\n\r\nI recapped four alternatives and added reasons for why most of them were inadequate:\r\n* `/.../`\r\n* `'...'`\r\n* <code>\\`...\\`</code>\r\n* `'''...'''`\r\n\r\n> What is the desired syntax and behavior allowed between the \"\"\" pairs? ...\r\n* My reason for asking this question is to make sure that we are proposing a precise syntax and that we understand the implications of our choices.\r\n* We should understand exactly what is and is not allowed between `\"\"\"`. Newlines, tabs, unprintable characters, extra quotes, etc.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696699642","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696699642","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696699642,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjY5OTY0Mg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T12:50:28Z","updated_at":"2020-09-22T12:50:28Z","author_association":"MEMBER","body":"If my understanding is correct, most of confusion revolves around escaping `\"` inside a raw string. \r\n\r\n> My preference is that \"\"\" and \" be fully interchangeable, but merely have different syntax (escaping vs raw). It sounds like we're agreement.\r\n\r\n👍 \r\n\r\n> My reason for this question is that I want to make sure we are also clear on why we need this syntax and what contexts it will most likely be used in. I believe there are two: (1) regular expressions and (2) copy and paste without escaping\r\n\r\nThis is where we have different goals. The aim of this ticket is to simplify the grammar by 7.10. Not to impact in anyway the semantics for unescaped string declaration. Whether what we have is useful or not, is outside the scope of this ticket and 7.10 as far as I'm concerned.\r\n\r\n> My reason for asking this question is to make sure that we are proposing a precise syntax and that we understand the implications of our choices.\r\n\r\nIs the current syntax for `?'` and `?\"` unclear ?\r\n\r\n> We should understand exactly what is and is not allowed between \"\"\". Newlines, tabs, unprintable characters, extra quotes, etc.\r\n\r\nI'm not sure what's unclear. This is not a new concept, the only change in the grammar really is the defining string, from `?'` and `?\"` to `\"\"\"` as you've seen in the PR: https://github.com/elastic/elasticsearch/pull/62539\r\n\r\nThe same rules for newlines, tabs, unprintable characters, etc.. that apply for `?'` and `?\"`, apply for `\"\"\"`. \r\nThe only difference is obviously escaping the `\"\"\"` sequence which seems to be confusing so before discussing that, I'd like to check that is the case.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696794008","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696794008","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696794008,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Njc5NDAwOA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T15:24:48Z","updated_at":"2020-09-23T16:18:20Z","author_association":"MEMBER","body":"> This is where we have different goals. The aim of this ticket is to simplify the grammar by 7.10. Not to impact in anyway the semantics for unescaped string declaration. Whether what we have is useful or not, is outside the scope of this ticket and 7.10 as far as I'm concerned.\r\n\r\nI'm referring to _user_ behavior not syntax or semantic behavior. For the grammar, we're in agreement both on semantics and syntax: it's a string with no escape sequences between the `\"\"\"`, and it's interchangeable with other strings. I want to make sure we enumerate the use cases of this functionality, and make sure we're asking the question \"how well does it accomplish the expected user behavior?\"\r\n\r\nIf we create a new syntax for raw strings, but it's awful at capturing regular expressions, then we probably did a bad job. I think `\"\"\"` is the best proposal we've seen for many use cases, and much better than both `?\"` and  `?'`. I just want to make sure we are keeping typical user experience and at the forefront and that `\"\"\"` is fulfilling their needs. One hypothetical concern is the extra verbosity.\r\n\r\nFor example, if we want to use `\"\"\"` strings as regular expressions, what does a regex look like? Is that something that looks overwhelming or is writing it something that's comfortable? \r\n\r\n* Do we like the way this looks and feels? `match(process.path, \"\"\"C:\\\\Program Files( \\(x86\\))?\\\\Microsoft\\\\Office.*\\\\.*?\\.exe\"\"\")`\r\n* What about this common example, where we are leading with an extra quote? `process.command_line == \"\"\"\"C:\\Windows\\System32\\cmd.exe\" /c start  /b whoami /all\"\"\"`\r\n\r\n\r\nMy questions about how many quotes do we allow were again to make sure that this proposal successfully accomplishes its goals and use cases. I think the only logical regular expression is this: `\"\"\"[^\\r\\n\\f\\v]*?[\"]{3,}`, and this means that you can have as many trailing quotes as you want, as long as there are at least three. The original text will always be recovered by removing the first 3 and last 3 characters. That means you can start with up to five quotes (3 will be dropped), and end with at least 3.\r\n\r\nI don't think of that is simply an implementation detail, it's part of the proposal for `\"\"\"` in the specification and will eventually be in the user docs (but much more polished).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696802904","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-696802904","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":696802904,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjgwMjkwNA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T15:39:40Z","updated_at":"2020-09-22T15:50:41Z","author_association":"MEMBER","body":"Screenshot of that regex and how it matches strings. I'm pleased with this behavior, and fairly confident that it's desirable and it matches our use cases. `\"\"\"` in the middle of a string seems very unlikely, and I can't enumerate more use cases than regex and just avoiding cumbersome escape sequences in general.\r\n![image](https://user-images.githubusercontent.com/31489089/93904853-83e10b80-fcb7-11ea-937b-5f9a6cc4ea10.png)\r\n\r\nIf we can't come up with any use cases where the syntax is confusing, inadequate, undesirable or misleading, then I think we can safely move ahead.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/697207832","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-697207832","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":697207832,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzIwNzgzMg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-23T08:12:39Z","updated_at":"2020-09-23T08:12:39Z","author_association":"MEMBER","body":"It looks like we're reaching consensus. I'm removing the team-discuss label but will keep the ticket open just in case there are some details popping up regarding the grammar itself.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/698366429","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-698366429","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":698366429,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODM2NjQyOQ==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-24T14:04:35Z","updated_at":"2020-09-24T14:04:35Z","author_association":"CONTRIBUTOR","body":"For python when you have something enclosed in `\"\"\"` you cannot have the `\"\"\"` sequence inside it, since the approach is the non-greedy one and therefore, when the sequence is met again it denotes the end of string. For python you just need to escape on of the `\"` or all of them in the sequence to make it work:\r\n```\r\n\"\"\"asd\\\"\\\"\\\"qwe\"\"\"\r\nor\r\n\"\"\"asd\\\"\"\"qwer\"\"\"\r\nor\r\n\"\"\"asd\"\\\"\"qwer\"\"\"\r\n\"\"\"asd\"\"\\\"qwer\"\"\"\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/698646625","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-698646625","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":698646625,"node_id":"MDEyOklzc3VlQ29tbWVudDY5ODY0NjYyNQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-24T23:59:13Z","updated_at":"2020-09-24T23:59:13Z","author_association":"MEMBER","body":"One big downside for that is that you can't have trailing double quotes at all, which is problematic. Also, this is most comparable to `r\"\"\"` \r\n```python\r\n>>> r\"\"\"\"abc\"\"\"\"\r\n  File \"<stdin>\", line 1\r\n    r\"\"\"\"abc\"\"\"\"\r\n               ^\r\nSyntaxError: EOL while scanning string literal\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/699830263","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-699830263","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":699830263,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTgzMDI2Mw==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T07:25:23Z","updated_at":"2020-09-28T07:25:23Z","author_association":"CONTRIBUTOR","body":"I tend to lean towards the greedy approach, so that once you have the leading `\"\"\"` you expect the trailing `\"\"\"` and everything in-between is unescaped raw string including any combination/series of `\"`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/699966706","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-699966706","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":699966706,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTk2NjcwNg==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T12:09:10Z","updated_at":"2020-09-28T12:09:10Z","author_association":"MEMBER","body":"That means you can have at most one `\"\"\"` in an expression. Everything between the first `\"\"\"` and the last `\"\"\"` will be consumed.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/699967590","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-699967590","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":699967590,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTk2NzU5MA==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T12:11:17Z","updated_at":"2020-09-28T12:13:20Z","author_association":"CONTRIBUTOR","body":"Yes, so as many `\"` or `\"\"\"` inside the expression as long as it ends with a closing `\"\"\"`.  At least that's my proposal/suggestion, but I don't have any really strong arguments against escaping each `\"` within the expression. I'd definitely won't go with the python way that you would have to escape just one of the sequence, I find it confusing.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/699977996","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-699977996","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":699977996,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTk3Nzk5Ng==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T12:34:16Z","updated_at":"2020-09-28T12:41:55Z","author_association":"MEMBER","body":"Maybe these examples better illustrate the problem that I see with greedy matching. What strings are in each expression?\n```\nfoo == \"\"\"one string\"\"\" and bar == \"\"\"\"\"another string\"\"\"\"\"\n```\n```\nconcat(\"\"\"abcdefg\"\"\", \"\"\"\"\"hijklmnop\"\"\"\")\n```\n\nNon-greedy:\n- `one string`\n- `\"\"another string\"\"`\n\n\n- `abcdefg`\n- `\"\"hijklmnop\"`\n\n\nGreedy:\n- `one string\"\"\" and bar == \"\"\"\"\"another string`\n\n\n- `bcdefg\"\"\", \"\"\"\"\"hijklmnop\"`\n\n\nAlso the analogous python syntax is `r\"\"\"` for raw strings, not `\"\"\"` for escaped strings.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/699991512","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-699991512","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":699991512,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTk5MTUxMg==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T13:01:29Z","updated_at":"2020-09-28T13:59:30Z","author_association":"CONTRIBUTOR","body":"No, it's not like that, the greedy approach works within the expression, `and`, `or`, etc. breaks the expression anyway.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/700110222","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-700110222","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":700110222,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDExMDIyMg==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T15:42:33Z","updated_at":"2020-09-28T15:42:33Z","author_association":"CONTRIBUTOR","body":"@rw-access Please check the tests I've added: https://github.com/elastic/elasticsearch/pull/62539/files#diff-8b3f6645d4cf54ff461c3e337b4bbe84R122","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/700114421","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-700114421","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":700114421,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDExNDQyMQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T15:44:54Z","updated_at":"2020-09-28T15:48:13Z","author_association":"MEMBER","body":"But what if you _want_ a `\\\"` inside the string? Now there's no way to do that.\r\nI'm just confused why there's escaping at all in a string that's supposed to solve the problem of not needing escape sequences.\r\n\r\nI still think \"\"\"[^\\r\\n\\f\\v]*?[\"]{3,} is the safest and most clear specification. It forces the string to be in a single line, can end or start with a double quote inside the string, and has no escape sequences.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/705141212","html_url":"https://github.com/elastic/elasticsearch/issues/62645#issuecomment-705141212","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62645","id":705141212,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNTE0MTIxMg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-10-07T19:17:25Z","updated_at":"2020-10-07T19:17:25Z","author_association":"MEMBER","body":"Closed by #62539","performed_via_github_app":null}]