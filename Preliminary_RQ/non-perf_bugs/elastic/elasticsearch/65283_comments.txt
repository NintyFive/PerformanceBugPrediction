[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/730635810","html_url":"https://github.com/elastic/elasticsearch/issues/65283#issuecomment-730635810","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/65283","id":730635810,"node_id":"MDEyOklzc3VlQ29tbWVudDczMDYzNTgxMA==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2020-11-19T21:03:48Z","updated_at":"2020-11-19T21:03:48Z","author_association":"MEMBER","body":"This is unfortunately an issue with floating point rounding error inherent to IEEE-754 floats :(\r\n\r\nFor example, the value `2.1` is actually stored as `2.099999904632568359375` in an IEEE-754 float, because it can't represent `2.1` exactly.  And that means it matches the range because 2.09999.... is less than 2.1.\r\n\r\nThere's an interactive calculator for floats which you can play with here: https://www.h-schmidt.net/FloatConverter/IEEE754.html\r\n\r\nIt's definitely confusing to the user, but it's just the nature of limited precision data-types like floats.  You could switch over to doubles to get a greater dynamic range and less conversion errors (although it'll still be present).  Or you could switch to `scaled_float` if you have a known dynamic range and have a desired number of decimal places of accuracy (https://www.elastic.co/guide/en/elasticsearch/reference/current/number.html#scaled-float-params).  That stores the decimal as a long internally so you won't get these kinds of conversion errors... but they have limited significant figure precision, so conversion errors are just different.  Namely rounding up/down to nearest number of sig-figs, rather than rounding to nearest encodable value.\r\n\r\nI'm going to close this because, while it's a deeply unsatisfying answer, it's also not something we can fix.  Just the practicalities of dealing with floating points in computers unfortunately :(","performed_via_github_app":null}]