[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/486964772","html_url":"https://github.com/elastic/elasticsearch/issues/41559#issuecomment-486964772","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41559","id":486964772,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4Njk2NDc3Mg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2019-04-26T07:57:04Z","updated_at":"2019-04-26T07:57:04Z","author_association":"CONTRIBUTOR","body":"Actually the 2nd query is invalid: it is written as if the `schedule` nested object had another nested object called `schedule` as well. Closing in favor of #23290.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/487081203","html_url":"https://github.com/elastic/elasticsearch/issues/41559#issuecomment-487081203","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41559","id":487081203,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NzA4MTIwMw==","user":{"login":"MacMcIrish","id":8932818,"node_id":"MDQ6VXNlcjg5MzI4MTg=","avatar_url":"https://avatars3.githubusercontent.com/u/8932818?v=4","gravatar_id":"","url":"https://api.github.com/users/MacMcIrish","html_url":"https://github.com/MacMcIrish","followers_url":"https://api.github.com/users/MacMcIrish/followers","following_url":"https://api.github.com/users/MacMcIrish/following{/other_user}","gists_url":"https://api.github.com/users/MacMcIrish/gists{/gist_id}","starred_url":"https://api.github.com/users/MacMcIrish/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MacMcIrish/subscriptions","organizations_url":"https://api.github.com/users/MacMcIrish/orgs","repos_url":"https://api.github.com/users/MacMcIrish/repos","events_url":"https://api.github.com/users/MacMcIrish/events{/privacy}","received_events_url":"https://api.github.com/users/MacMcIrish/received_events","type":"User","site_admin":false},"created_at":"2019-04-26T14:39:21Z","updated_at":"2019-04-26T14:39:21Z","author_association":"CONTRIBUTOR","body":"@jpountz cheers for the link. We'll have to do some further thinking in how we dynamically build our queries.\r\nJust so I understand, that it filters the results properly if I put the same filter in a top level `query` is a bug in itself?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/490636809","html_url":"https://github.com/elastic/elasticsearch/issues/41559#issuecomment-490636809","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41559","id":490636809,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MDYzNjgwOQ==","user":{"login":"simlu","id":1539747,"node_id":"MDQ6VXNlcjE1Mzk3NDc=","avatar_url":"https://avatars1.githubusercontent.com/u/1539747?v=4","gravatar_id":"","url":"https://api.github.com/users/simlu","html_url":"https://github.com/simlu","followers_url":"https://api.github.com/users/simlu/followers","following_url":"https://api.github.com/users/simlu/following{/other_user}","gists_url":"https://api.github.com/users/simlu/gists{/gist_id}","starred_url":"https://api.github.com/users/simlu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simlu/subscriptions","organizations_url":"https://api.github.com/users/simlu/orgs","repos_url":"https://api.github.com/users/simlu/repos","events_url":"https://api.github.com/users/simlu/events{/privacy}","received_events_url":"https://api.github.com/users/simlu/received_events","type":"User","site_admin":false},"created_at":"2019-05-08T20:22:43Z","updated_at":"2019-05-08T20:22:43Z","author_association":"NONE","body":"@jpountz Thank you very much for your input here. I'm still not entirely sure how to fix the query in a general way. Would you mind proof reading the following query? Is this how you can do double nesting for sort filters? Very much appreciated!\r\n\r\n<details> <summary>Spoiler</summary>\r\n\r\n```json\r\n{\r\n  \"_source\": [\r\n    \"id\",\r\n    \"name\",\r\n    \"schedule.start\",\r\n    \"schedule.end\"\r\n  ],\r\n  \"size\": 20,\r\n  \"from\": 0,\r\n  \"sort\": [\r\n    {\r\n      \"schedule.start\": {\r\n        \"order\": \"asc\",\r\n        \"mode\": \"max\",\r\n        \"nested\": {\r\n          \"path\": \"schedule\",\r\n          \"filter\": {\r\n            \"bool\": {\r\n              \"filter\": [\r\n                {\r\n                  \"range\": {\r\n                    \"schedule.start\": {\r\n                      \"gte\": \"2019-06-06\"\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"schedule.end\": {\r\n        \"order\": \"desc\",\r\n        \"mode\": \"max\",\r\n        \"nested\": {\r\n          \"path\": \"schedule\",\r\n          \"filter\": {\r\n            \"bool\": {\r\n              \"filter\": [\r\n                {\r\n                  \"range\": {\r\n                    \"schedule.end\": {\r\n                      \"lte\": \"2019-06-06\"\r\n                    }\r\n                  }\r\n                },\r\n                {\r\n                  \"nested\": {\r\n                    \"path\": \"schedule.subschedule\",\r\n                    \"query\": {\r\n                      \"bool\": {\r\n                        \"filter\": [\r\n                          {\r\n                            \"range\": {\r\n                              \"schedule.subschedule.end\": {\r\n                                \"lte\": \"2019-06-06\"\r\n                              }\r\n                            }\r\n                          }\r\n                        ]\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"id\": {\r\n        \"order\": \"asc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n</details>","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/491193234","html_url":"https://github.com/elastic/elasticsearch/issues/41559#issuecomment-491193234","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41559","id":491193234,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MTE5MzIzNA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2019-05-10T07:46:35Z","updated_at":"2019-05-10T07:46:35Z","author_association":"CONTRIBUTOR","body":"@MacMcIrish When you start specifying a `nested` element in queries or when sorting, everything below only sees fields that belong to this nested path, other fields become invisible. Your sort object says that it should sort on the `start` property of the nested object `schedule` (so far so good) but then. So far so good, but while you are already in the context of the `schedule` nested object, you use a `nested` query on the `schedule` path in the filter. It makes Elasticsearch look for the nested object `schedule.schedule`, which doesn't exist, so the filter doesn't match any documents. If you look at the response, your sort values are either `9223372036854775807` or `-9223372036854775808`. These values are the maximum and minimum long values, which Elasticsearch uses when values are missing at sorting time so that missing values are sorted last.\r\n\r\n@simlu This query looks correct. What I don't know is whether it does what you want. :) So to be clear when sorting on `schedule.end`, it will only consider `schedule` objects whose `end` time is less than or equal to `2019-06-06` AND that have at least one `schedule.subschedule` nested object whose `end` property is less than or equal to `2019-06-06`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/491354748","html_url":"https://github.com/elastic/elasticsearch/issues/41559#issuecomment-491354748","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41559","id":491354748,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MTM1NDc0OA==","user":{"login":"simlu","id":1539747,"node_id":"MDQ6VXNlcjE1Mzk3NDc=","avatar_url":"https://avatars1.githubusercontent.com/u/1539747?v=4","gravatar_id":"","url":"https://api.github.com/users/simlu","html_url":"https://github.com/simlu","followers_url":"https://api.github.com/users/simlu/followers","following_url":"https://api.github.com/users/simlu/following{/other_user}","gists_url":"https://api.github.com/users/simlu/gists{/gist_id}","starred_url":"https://api.github.com/users/simlu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simlu/subscriptions","organizations_url":"https://api.github.com/users/simlu/orgs","repos_url":"https://api.github.com/users/simlu/repos","events_url":"https://api.github.com/users/simlu/events{/privacy}","received_events_url":"https://api.github.com/users/simlu/received_events","type":"User","site_admin":false},"created_at":"2019-05-10T16:45:24Z","updated_at":"2019-05-10T16:45:24Z","author_association":"NONE","body":"@jpountz You seem to imply that double `nested.path` entries need to be provided relative. But from what we've seen they need to be provided absolute:\r\n- [Reference1]( https://discuss.elastic.co/t/querying-a-multiple-level-nested-object/56889/5), scroll to query section in comment\r\n- [Reference2](https://github.com/elastic/elasticsearch/issues/11830#issuecomment-114574181), linked and next comment\r\n- [Reference3](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html#_nested_sorting_examples), this is slightly different from the sort example above, but shows that nested path should be provided absolute\r\n\r\nThis is also in line with what we found in our testing.\r\n\r\nI would expect this to work the same for sort filtering. So the only issue with the initial query that @MacMcIrish posted was then that the same nesting was specified twice (which was what confused elasticsearch). \r\n\r\ntldr; I might have misunderstood, but it appears that your statement above was incorrect. I'll be working on another test case here that hopefully clarifies this further.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/491400198","html_url":"https://github.com/elastic/elasticsearch/issues/41559#issuecomment-491400198","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41559","id":491400198,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MTQwMDE5OA==","user":{"login":"simlu","id":1539747,"node_id":"MDQ6VXNlcjE1Mzk3NDc=","avatar_url":"https://avatars1.githubusercontent.com/u/1539747?v=4","gravatar_id":"","url":"https://api.github.com/users/simlu","html_url":"https://github.com/simlu","followers_url":"https://api.github.com/users/simlu/followers","following_url":"https://api.github.com/users/simlu/following{/other_user}","gists_url":"https://api.github.com/users/simlu/gists{/gist_id}","starred_url":"https://api.github.com/users/simlu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simlu/subscriptions","organizations_url":"https://api.github.com/users/simlu/orgs","repos_url":"https://api.github.com/users/simlu/repos","events_url":"https://api.github.com/users/simlu/events{/privacy}","received_events_url":"https://api.github.com/users/simlu/received_events","type":"User","site_admin":false},"created_at":"2019-05-10T19:12:14Z","updated_at":"2019-05-10T19:12:14Z","author_association":"NONE","body":"Follow-up to my previous comment. To reproduce locally follow instructions @MacMcIrish posted above.\r\n\r\n<details> <summary>mapping.json</summary>\r\n\r\n```json\r\n{\r\n  \"properties\": {\r\n    \"id\": {\r\n      \"type\": \"keyword\"\r\n    },\r\n    \"name\": {\r\n      \"type\": \"text\"\r\n    },\r\n    \"schedule\": {\r\n      \"properties\": {\r\n        \"start\": {\r\n          \"type\": \"date\"\r\n        },\r\n        \"end\": {\r\n          \"type\": \"date\"\r\n        },\r\n        \"sub\": {\r\n          \"properties\": {\r\n            \"start\": {\r\n              \"type\": \"date\"\r\n            },\r\n            \"end\": {\r\n              \"type\": \"date\"\r\n            }\r\n          },\r\n          \"type\": \"nested\"\r\n        }\r\n      },\r\n      \"type\": \"nested\"\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details> <summary>data.json</summary>\r\n\r\n```json\r\n{ \"index\": { \"_index\": \"entity\", \"_type\": \"_doc\", \"_id\": \"1\" } }\r\n{ \"name\": \"first\", \"schedule\": { \"start\": \"2020-01-01\", \"end\": \"2020-01-05\", \"sub\": { \"start\": \"2020-01-01\", \"end\": \"2020-01-05\" } } }\r\n{ \"index\": { \"_index\": \"entity\", \"_type\": \"_doc\", \"_id\": \"2\" } }\r\n{ \"name\": \"second\", \"schedule\": { \"start\": \"2020-01-02\", \"end\": \"2020-01-06\", \"sub\": { \"start\": \"2020-01-02\", \"end\": \"2020-01-06\" } } }\r\n{ \"index\": { \"_index\": \"entity\", \"_type\": \"_doc\", \"_id\": \"3\" } }\r\n{ \"name\": \"third\", \"schedule\": { \"start\": \"2019-01-01\", \"end\": \"2019-04-03\", \"sub\": { \"start\": \"2019-01-01\", \"end\": \"2019-04-03\" } } }\r\n{ \"index\": { \"_index\": \"entity\", \"_type\": \"_doc\", \"_id\": \"4\" } }\r\n{ \"name\": \"fourth\", \"schedule\": { \"start\": \"2019-01-01\", \"end\": \"2019-03-03\", \"sub\": { \"start\": \"2019-01-01\", \"end\": \"2019-03-03\" } } }\r\n```\r\n\r\n</details>\r\n\r\n<details> <summary>query.json</summary>\r\n\r\n```json\r\n{\r\n  \"_source\": [\r\n    \"id\",\r\n    \"name\",\r\n    \"schedule.start\",\r\n    \"schedule.end\"\r\n  ],\r\n  \"size\": 20,\r\n  \"from\": 0,\r\n  \"sort\": [\r\n    {\r\n      \"schedule.start\": {\r\n        \"order\": \"asc\",\r\n        \"mode\": \"max\",\r\n        \"nested\": {\r\n          \"path\": \"schedule\",\r\n          \"filter\": {\r\n            \"bool\": {\r\n              \"filter\": [\r\n                {\r\n                  \"nested\": {\r\n                    \"path\": \"schedule.sub\",\r\n                    \"query\": {\r\n                      \"bool\": {\r\n                        \"filter\": [\r\n                          {\r\n                            \"range\": {\r\n                              \"schedule.sub.start\": {\r\n                                \"gte\": \"2019-06-06\"\r\n                              }\r\n                            }\r\n                          }\r\n                        ]\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"schedule.end\": {\r\n        \"order\": \"desc\",\r\n        \"mode\": \"max\",\r\n        \"nested\": {\r\n          \"path\": \"schedule\",\r\n          \"filter\": {\r\n            \"bool\": {\r\n              \"filter\": [\r\n                {\r\n                  \"nested\": {\r\n                    \"path\": \"schedule.sub\",\r\n                    \"query\": {\r\n                      \"bool\": {\r\n                        \"filter\": [\r\n                          {\r\n                            \"range\": {\r\n                              \"schedule.sub.end\": {\r\n                                \"lte\": \"2019-06-06\"\r\n                              }\r\n                            }\r\n                          }\r\n                        ]\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"id\": {\r\n        \"order\": \"asc\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details> <summary>result.json</summary>\r\n\r\n```json\r\n{\r\n  \"took\" : 3,\r\n  \"timed_out\" : false,\r\n  \"_shards\" : {\r\n    \"total\" : 5,\r\n    \"successful\" : 5,\r\n    \"skipped\" : 0,\r\n    \"failed\" : 0\r\n  },\r\n  \"hits\" : {\r\n    \"total\" : 4,\r\n    \"max_score\" : null,\r\n    \"hits\" : [\r\n      {\r\n        \"_index\" : \"entity\",\r\n        \"_type\" : \"_doc\",\r\n        \"_id\" : \"1\",\r\n        \"_score\" : null,\r\n        \"_source\" : {\r\n          \"schedule\" : {\r\n            \"start\" : \"2020-01-01\",\r\n            \"end\" : \"2020-01-05\"\r\n          },\r\n          \"name\" : \"first\"\r\n        },\r\n        \"sort\" : [\r\n          1577836800000,\r\n          -9223372036854775808,\r\n          null\r\n        ]\r\n      },\r\n      {\r\n        \"_index\" : \"entity\",\r\n        \"_type\" : \"_doc\",\r\n        \"_id\" : \"2\",\r\n        \"_score\" : null,\r\n        \"_source\" : {\r\n          \"schedule\" : {\r\n            \"start\" : \"2020-01-02\",\r\n            \"end\" : \"2020-01-06\"\r\n          },\r\n          \"name\" : \"second\"\r\n        },\r\n        \"sort\" : [\r\n          1577923200000,\r\n          -9223372036854775808,\r\n          null\r\n        ]\r\n      },\r\n      {\r\n        \"_index\" : \"entity\",\r\n        \"_type\" : \"_doc\",\r\n        \"_id\" : \"3\",\r\n        \"_score\" : null,\r\n        \"_source\" : {\r\n          \"schedule\" : {\r\n            \"start\" : \"2019-01-01\",\r\n            \"end\" : \"2019-04-03\"\r\n          },\r\n          \"name\" : \"third\"\r\n        },\r\n        \"sort\" : [\r\n          9223372036854775807,\r\n          1554249600000,\r\n          null\r\n        ]\r\n      },\r\n      {\r\n        \"_index\" : \"entity\",\r\n        \"_type\" : \"_doc\",\r\n        \"_id\" : \"4\",\r\n        \"_score\" : null,\r\n        \"_source\" : {\r\n          \"schedule\" : {\r\n            \"start\" : \"2019-01-01\",\r\n            \"end\" : \"2019-03-03\"\r\n          },\r\n          \"name\" : \"fourth\"\r\n        },\r\n        \"sort\" : [\r\n          9223372036854775807,\r\n          1551571200000,\r\n          null\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n```\r\n\r\n</details>\r\n\r\nWhen I try to make the query relative, as to your suggestion @jpountz, I get `[nested] failed to find nested object under path [sub]`. Would be great if you could clarify! Cheers","performed_via_github_app":null}]