{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/470","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/470/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/470/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/470/events","html_url":"https://github.com/elastic/elasticsearch/issues/470","id":396193,"node_id":"MDU6SXNzdWUzOTYxOTM=","number":470,"title":"API: Allow to control document shard routing, and search shard routing","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":53377,"node_id":"MDU6TGFiZWw1MzM3Nw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.13.0","name":"v0.13.0","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2010-11-02T17:54:36Z","updated_at":"2010-11-02T18:30:25Z","closed_at":"2010-11-03T00:56:50Z","author_association":"MEMBER","active_lock_reason":null,"body":"Currently, when indexing or deleting documents, they are hashed based on the type and id and routed to a shard based on the hash result. When searching, the search request is a broadcast request to all shards within an index.\n\nSometimes, it make sense to control this routing. For example, indexing blob posts for a specific user might be routed based on the user id. If routing is controlled, then when performing a search on posts for only that user, only the relevant shard that match the user id can be queried, resulting in much faster search and overhaul less load on the system.\n\nThe `index` and `delete` operation now allow for a `routing` parameter to be specified. When specified, that routing value will be used to control the shard placement.\n\nThe `bulk` operation allows to specify `_routing` for each item to control the routing for that index/delete/create operation.\n\nThe `get` operation allows to specify a `routing` parameter as well, to specify which shard the doc will be fetched from. Note, in our blog post partitioned by user example, doing a lookup just by the post id will not be enough and probably will not find anything, the user id will also need to be specified in the `routing` parameter.\n\nThe `search` and `count` operations accept a `routing` parameter as well, controlling which _shards_ the search will be executed on. The `routing` parameter accepts a comma separated list of the routing values to use, and the all relevant shards will execute the query.\n\nNote, even when specifying a search for a specific user blog posts using the `routing` parameter set to the user id, filtering only the user posts is still needed by, for example, adding a `term` filter with the user id.\n\nThe `delete_by_query` operation also accepts a `routing` parameter, which is a comma separated list of routing values of controlling which shards the delete query will be executed on.\n\nOne question that might arise is why not use indices to get the same behavior. For example, create an index per user. The reason is that indices have a much lower limit on how many of them can be created. A single machine can easily support millions of users with millions of posts. Creating an index per user will mean millions of indices, which is problematic, as even with a single shard per index, it does mean millions of lucene indices.\n","closed_by":null,"performed_via_github_app":null}