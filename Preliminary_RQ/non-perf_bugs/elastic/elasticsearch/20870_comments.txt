[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/253009978","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-253009978","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":253009978,"node_id":"MDEyOklzc3VlQ29tbWVudDI1MzAwOTk3OA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-11T18:52:48Z","updated_at":"2016-10-11T18:52:48Z","author_association":"CONTRIBUTOR","body":"I'd be all for it if we could do it without a runtime cost but I'm fairly sure this'd have to have one. I wonder how much of a cost it is though.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/253045506","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-253045506","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":253045506,"node_id":"MDEyOklzc3VlQ29tbWVudDI1MzA0NTUwNg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-11T21:03:41Z","updated_at":"2016-10-11T21:03:41Z","author_association":"CONTRIBUTOR","body":"Actually now that I think about it it may not have a runtime cost. I expect the JVM already inlines the array's range checking and it's possible it might be able to merge this into that. It is worth checking.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255206946","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255206946","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255206946,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIwNjk0Ng==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T19:39:36Z","updated_at":"2016-10-20T19:40:11Z","author_association":"CONTRIBUTOR","body":"@jdconrad I played with this a bit and I think we can get this without any much runtime cost for folks that don't use it. I wrote a quick and dirty performance test that looks like:\n\n```\n    @Repeat(iterations=10)\n    public void testArrayCompoundInt() {\n        assertEquals(0, exec(\"int[] x = new int[5]; x[0] = 1; for (int i = 0; i < 1000000000; i++) {x[0] += x[0]} return x[0]\",\n                emptyMap(), singletonMap(\"max_loop_counter\", \"2147483647\"), null, true));\n    }\n```\n\nAfter the second execution of that test and beyond run in around .6s whether or not I support indexing into the array with a negative lookup. I suspect branch prediction or the trivial conditional needed to support it is being swamped by something. Either way, the cost seems fime. This is the implementation of flipping the index that I made:\n\n```\n    /**\n     * Writes the opcodes to flip a negative array index (meaning slots from the end of the array) into a 0-based one (meaning slots from\n     * the start of the array).\n     */\n    static void writeIndexFlip(MethodWriter writer) {\n        Label noFlip = new Label();\n        // The stack after each instruction:       array, index\n        writer.dup();                           // array, index, index\n        writer.ifZCmp(Opcodes.IFGE, noFlip);    // array, index\n        writer.swap();                          // index, array (index is always negative)\n        writer.dupX1();                         // array, index, array\n        writer.arrayLength();                   // array, index, length\n        writer.visitInsn(Opcodes.IADD);         // array, index (index is flipped, so > 0 if the index was less than the size)\n        writer.mark(noFlip);\n    }\n```\n\nI believe I could adapt that to lists fairly easily. When you run the test using a negative array index on the rhs (`x[0] += x[-5]`) it takes much longer, 2.3s. So we may not want to implement it just because of how much longer it takes. Though I think it is fine because there doesn't seem to be a cost if you don't use it. And we're talking about a cost of 1.7 [nanoseconds](https://youtu.be/1-vcErOPofQ?t=4m27s) which per use which isn't terrible though I expect the performance to be an order of magnitude worse if you constantly flip from positive to negative accessors ways that blow branch predication.\n\nIt is worth thinking about the cost in the code bloat around the array access. Every array write and store needs an extra 6 instructions. Because the JVM uses instruction counts to determine if it is allowed to inline a method (35 is the default I think) or unroll a loop then the count of the instructions matters here some.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255209771","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255209771","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255209771,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIwOTc3MQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T19:51:18Z","updated_at":"2016-10-20T19:52:51Z","author_association":"CONTRIBUTOR","body":"@nik9000 Nice analysis!  Thanks again for looking into this.  I need some time to process this, but I wonder what the cost of the doing this in user-facing code would be since he/she would need to call array.length anyway.  I think that would be the best way to see how much the branching here really costs.  I do agree that if it's significantly slower than just having the user write it themselves it would be very trappy.\n\nAt worst maybe we could just add something like array.last and ensure support of list.last as special methods/variables if the negative indices end up being too slow.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255215362","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255215362","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255215362,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIxNTM2Mg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T20:15:06Z","updated_at":"2016-10-20T20:15:06Z","author_association":"CONTRIBUTOR","body":"> I do agree that if it's significantly slower than just having the user write it themselves it would be very trappy.\n\nAgain my simplistic tests show it isn't any slower. I eyeball a billion `x[0] += x[x.length - 5]` also takes about 2.3 seconds on average. I think branch predication is winning the day here.\n\nI'm willing to say \"supporting this is as fast as not supporting it\" and move on to thinking about the complexity (not so bad in my estimation) and the extra byte codes.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255217861","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255217861","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255217861,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIxNzg2MQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T20:24:56Z","updated_at":"2016-10-20T20:24:56Z","author_association":"CONTRIBUTOR","body":"Sorry misread that.  That's awesome!  Have you thought about how to support the dynamic case as well?  Or is that already covered?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255222507","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255222507","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255222507,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIyMjUwNw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T20:43:19Z","updated_at":"2016-10-20T20:43:19Z","author_association":"CONTRIBUTOR","body":"You didn't misread anything! I just hadn't run the tests for the explicit case until you asked about it.\n\nI talked to @jasontedor about the cost of adding the extra code and we came to the conclusion that it should be fine. The jvm has a limit of 325 bytes for inlining \"hot\" methods. Certainly in a search context we hope that painless methods are \"hot\". But an extra 6 bytes per array read or write are unlikely to be too big a deal. If you have more than a half dozen of array reads and writes you are quite likely blowing the limit already on other stuff.\n\nI haven't looked at the dynamic case yet but I _think_ it'll be the same. I expect `PSubListShortcut` to be fairly similar but with a method call instead of the arraylength opcode.\n\nI was thinking of adding a `normalizeIndex` method to `AStoreable` that writes nothing by default but writes the index flipping opcodes for arrays and lists and calling it in `EAssignment`. I'm not super sure that is the right way to go but I think it is where I should start on getting assignment part working.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255224797","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255224797","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255224797,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIyNDc5Nw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T20:52:20Z","updated_at":"2016-10-20T20:52:20Z","author_association":"CONTRIBUTOR","body":"Yeah, I'm definitely not worried about the extra bytes.  If they are doing a huge script in search, it's already problematic for other reasons anyway.\n\nI would need to take a look at the code again (already forgetting so much :( ), but I would hope the PSubBrace can independently handle the negative indices without doing anything special to EAssignment during write since it should know the index expression?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255227089","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255227089","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255227089,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIyNzA4OQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T21:01:42Z","updated_at":"2016-10-20T21:01:42Z","author_association":"CONTRIBUTOR","body":"> but I would hope the PSubBrace can independently handle the negative indices without doing anything special to EAssignment during write since it should know the index expression?\n\nIt _could_, but it builds the items on the stack in the wrong order. `PSubBrace`'s assignment gets `array, index, value` on the stack and the normalization is _much_ easier to do before `value` is put on the stack. I'll poke at it soon and see if I can put together a proposal that isn't horrible.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255230630","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255230630","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255230630,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIzMDYzMA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T21:15:48Z","updated_at":"2016-10-20T21:15:48Z","author_association":"CONTRIBUTOR","body":"Ordering is definitely a pain... looking at PSubBrace now, the ordering seems off even for just reads for writeIndexFlip?  Since lists and arrays are fundamentally different byte code instructions would it make sense to write the flip code directly in the setup methods of the respective sub nodes?  I'm just hesitant to add more complexity/specialization to the EAssignment since it's already pretty scary.  I fully admit I might be missing something, though, so if you think this is the best way to do it, I'll roll with it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255231131","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255231131","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255231131,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIzMTEzMQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T21:17:50Z","updated_at":"2016-10-20T21:17:50Z","author_association":"CONTRIBUTOR","body":"> I fully admit I might be missing something, though, so if you think this is the best way to do it, I'll roll with it.\n\nI'm the same way. I think it is plenty complex as is but it _looks_ like the right spot. But I could certainly be wrong. I've got a reindex failure I just started investigating that I'll try and play out tomorrow morning and I'll try and roll up my sleeves and see if I can find a sensible way to do this without to much complexity....\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/255231512","html_url":"https://github.com/elastic/elasticsearch/issues/20870#issuecomment-255231512","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20870","id":255231512,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NTIzMTUxMg==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2016-10-20T21:19:25Z","updated_at":"2016-10-20T21:21:48Z","author_association":"CONTRIBUTOR","body":"Sounds good, thanks @nik9000.  I look forward to seeing your solution :)  Scratch that last comment, I messed up the ordering in my head.  I fully understand what you're saying.  Definitely, a difficult problem.\n","performed_via_github_app":null}]