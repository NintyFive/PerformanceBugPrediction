{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036/events","html_url":"https://github.com/elastic/elasticsearch/issues/57036","id":622472060,"node_id":"MDU6SXNzdWU2MjI0NzIwNjA=","number":57036,"title":"EQL: consolidate response format","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"labels":[{"id":1690690117,"node_id":"MDU6TGFiZWwxNjkwNjkwMTE3","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Query%20Languages/EQL","name":":Query Languages/EQL","color":"0e8a16","default":false,"description":"EQL querying"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":1967501040,"node_id":"MDU6TGFiZWwxOTY3NTAxMDQw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:QL","name":"Team:QL","color":"fef2c0","default":false,"description":"Meta label for query languages team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":23,"created_at":"2020-05-21T12:39:15Z","updated_at":"2020-09-28T17:16:06Z","closed_at":"2020-09-28T17:16:05Z","author_association":"MEMBER","active_lock_reason":null,"body":"A piece of feedback from the demo sessions on EQL was that having different response types for each query makes things difficult for consumers. That is, regardless of whether the consumer cares about the initial query, it has to have different types of parsing.\r\n\r\nPlease see #49634 on how we ended up with the current approach.\r\n\r\nOne thing to keep in mind is we should strive for extensibility - if we are to add other features, we should have space to evolve the response. With the current approach that would be both easy and hard - easy because we could add just another response, hard because existing clients will have issues adapting.\r\n\r\nTo reiterate, currently each query creates a slightly different response structure. All responses return events but sequences and joins wrap said events into another structure:\r\n\r\n`event where filter`\r\n\r\n```json\r\n{\r\n    \"took\" : 5,\r\n    \"timed_out\" : false,\r\n    \"hits\" : {\r\n        \"total\" : {\r\n            \"value\" : 100,\r\n            \"relation\" : \"eq\"\r\n        },\r\n        \"events\" : [\r\n            {\r\n                \"_index\" : \"my_index\",\r\n                \"_id\" : \"0\",\r\n                \"_sequence_id\": 0,\r\n                \"_source\" : {\r\n                    \"date\" : \"2009-11-15T14:12:12\",\r\n                    \"event\": {\r\n                        \"type\": \"process\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n}\r\n```\r\n\r\n`sequence by ..`\r\n```javascript\r\n{\r\n    \"took\" : 5,\r\n    \"timed_out\" : false,\r\n    \"hits\" : {\r\n        \"total\" : {\r\n        },\r\n         \"sequences\" : [\r\n            {\r\n                \"join_keys\": [ \"4021\" ],\r\n                \"events\":[ ... ]\r\n            }\r\n        ]\r\n}\r\n```\r\n\r\n`join` queries are similar to the ones above, replacing `sequence` accordingly.\r\n\r\nThe other response which break the mold is `count` since it is not document based:\r\n\r\n```javascript\r\n{\r\n    \"timed_out\": false,\r\n    \"took\": 5,\r\n    \"hits\": {\r\n        \"total\" : {\r\n            \"value\" : 100,\r\n            \"relation\" : \"eq\"\r\n        },\r\n        \"counts\": [\r\n            {\r\n                \"_count\": 40,\r\n                \"_keys\": [...],\r\n                \"_percent\": 0.4223148165093,\r\n                \"_values\": [...]\r\n            }\r\n        ]\r\n    }\r\n} \r\n```\r\n\r\nHere are a number of proposals on my end to get the discussion started:\r\n\r\n1. rename `join_keys` to `keys`.\r\n\r\nSince we have both `sequence` and `join`, having `join` as a prefix is redundant and confusing. It also makes folks think of a `join` and all its baggage when typically we would expect sequences to be used.\r\nHence why I propose, and will use in the examples, `keys` instead of `join_keys`, same thing but shorter and more generic.\r\n\r\n2. consider moving away from `events` to something more generic.\r\n\r\nEQL is all about events so using `events` in the response is a good choice. However it's limiting if the response should be more generic such as returning a sequence or a join since that's not just one event but rather multiple.\r\nMaybe using `hit` (though that one is overloaded) or `match` or `result` ?\r\n\r\n## Proposal\r\n\r\nTry to combine all the responses into one, indicating the type of query executed either explicitly (though a separate field for example) or implicitly based on the response (and the presence of certain fields).\r\n\r\nSo instead of having different top-level responses, the nesting is lower-level:\r\n\r\n`sequence by `\r\n\r\n```javascript\r\n{\r\n    \"took\" : 5,\r\n    \"timed_out\" : false,\r\n    \"hits\" : {\r\n        \"total\" : {\r\n        },\r\n         \"result\" : [\r\n            {\r\n                \"keys\": [ \"key1\" ],\r\n                \"match\": [{ _source1 } , { _source2 } ]\r\n            },\r\n            {}\r\n        ]\r\n}\r\n```\r\n\r\nIf no key is specified the `keys` entry would be empty:\r\n```javascript\r\n \"result\" : [\r\n    {\r\n        \"keys\": [],\r\n        \"match\": [{ _source1 } , { _source2 } ]\r\n    },\r\n```\r\n\r\n### Do we want to differentiate between a join/sequence ?\r\n\r\nJoin are unordered sequences - even though the results are ordered based on the declaration order. Ideally based on the response we would know whether a join or a sequence query were asked however is that really needed?\r\nIf we do potentially we can add an extra field such as `ordered` to differentiate between the two however that is clunky.\r\nAs an alternative we could add extra information about when each event matched so one could deduce based on the order whether it is a sequence (the order is ascending) or a join (there is no order though that's not always the case):\r\n\r\n```javascript\r\n\"match\": [{ pos: 0, _source1 } , {  pos: 1, _source2 } ]\r\n```\r\n\r\nBased on that approach, a simple query:\r\n\r\n`event where condition` would return:\r\n\r\n```javascript\r\n\"result\" : [\r\n{\r\n    \"match\": [{ _source1 }]\r\n},\r\n{\r\n    \"match\": [{ _source2 }]\r\n},\r\n```\r\n\r\nEssentially there will be one entry per match since a sequence/join requires at least two queries. Notice that there is no `keys` entries which might be confusing for folks expecting this entry, we could add it and have no keys for it.\r\n\r\n`count` would take a similar approach, returning the results as a document inside a `match` clause however there would be no `_source` to speak of but rather the predefined aggregation fields.\r\n\r\nThoughts?","closed_by":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"performed_via_github_app":null}