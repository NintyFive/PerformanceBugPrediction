[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/485862967","html_url":"https://github.com/elastic/elasticsearch/issues/41443#issuecomment-485862967","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41443","id":485862967,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NTg2Mjk2Nw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-04-23T15:51:22Z","updated_at":"2019-04-23T15:51:22Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/487617424","html_url":"https://github.com/elastic/elasticsearch/issues/41443#issuecomment-487617424","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41443","id":487617424,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NzYxNzQyNA==","user":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"created_at":"2019-04-29T15:06:26Z","updated_at":"2019-04-29T15:06:26Z","author_association":"CONTRIBUTOR","body":"Hey @stephanebastian,\r\n\r\nIs there any reason this has to be an interface? Im not terribly familiar w/ Vertx, but if you just subclass the `RestClient` you should be able to override both of those methods and replace them with whatever you like, all without an extra interface. Is it something about Vertx that makes you use interfaces instead? ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/493389473","html_url":"https://github.com/elastic/elasticsearch/issues/41443#issuecomment-493389473","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41443","id":493389473,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MzM4OTQ3Mw==","user":{"login":"stephanebastian","id":873039,"node_id":"MDQ6VXNlcjg3MzAzOQ==","avatar_url":"https://avatars2.githubusercontent.com/u/873039?v=4","gravatar_id":"","url":"https://api.github.com/users/stephanebastian","html_url":"https://github.com/stephanebastian","followers_url":"https://api.github.com/users/stephanebastian/followers","following_url":"https://api.github.com/users/stephanebastian/following{/other_user}","gists_url":"https://api.github.com/users/stephanebastian/gists{/gist_id}","starred_url":"https://api.github.com/users/stephanebastian/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stephanebastian/subscriptions","organizations_url":"https://api.github.com/users/stephanebastian/orgs","repos_url":"https://api.github.com/users/stephanebastian/repos","events_url":"https://api.github.com/users/stephanebastian/events{/privacy}","received_events_url":"https://api.github.com/users/stephanebastian/received_events","type":"User","site_admin":false},"created_at":"2019-05-17T09:32:28Z","updated_at":"2019-05-17T09:32:28Z","author_association":"NONE","body":"Hey @hub-cap,\r\nSorry for the late reply.\r\n\r\nTo answer your question, no, there is nothing special about Vertx and Vertx doesn't mandate that is has to be an interface. Sorry I should I have been better at explaining the problem.\r\nWe currently do subclass the RestClient and we are able to perform requests via our own http client running in the worker thread pool provided by Vertx.\r\n\r\nHowever, it only works because the current constructor support a null CloseableHttpAsyncClient (which seems odd by the way ;).\r\nSo, we feel that our current solution is more of a hack than anything else, even though it gets the job done. If in subsequent releases, you modify your constructor to forbid null CloseableHttpAsyncClient then we are doomed. \r\nTherefore, we are proposing to turn the class RestClient into an interface. This would make it clear that  the intention is to support others implementations than the one you provide out-of-the-box and be a future-proof solution\r\n\r\nDoes it make sens to you ?\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/494062602","html_url":"https://github.com/elastic/elasticsearch/issues/41443#issuecomment-494062602","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41443","id":494062602,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDA2MjYwMg==","user":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"created_at":"2019-05-20T16:37:58Z","updated_at":"2019-05-20T16:37:58Z","author_association":"CONTRIBUTOR","body":"Well, I do agree that not checking for null is odd here, and we may certainly add a not null check in the future. But it is also entirely valid to pass in a dummy object, like the following example. It would never be used since you are overriding the `performRequest` & `performRequestAsync` methods.  \r\n\r\n```\r\nnew CloseableHttpAsyncClient() {\r\n\r\n            @Override\r\n            public void close() throws IOException {\r\n\r\n            }\r\n\r\n            @Override\r\n            public boolean isRunning() {\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public void start() {\r\n\r\n            }\r\n\r\n            @Override\r\n            public <T> Future<T> execute(HttpAsyncRequestProducer requestProducer, HttpAsyncResponseConsumer<T> responseConsumer, HttpContext context, FutureCallback<T> callback) {\r\n                return null;\r\n            }\r\n        };\r\n```\r\n\r\nWe are working on a plan for generating as much of this code as possible, so some of this will be subject to change, so Id like to reduce the changes here and in the high level client as much as possible until I know the path forward. But Ill be helping to design the new client, so I will definitely try to ensure the High Level client is more composable for your use case.\r\n\r\nDo you think this would suffice for now? Such that if you need to new a dummy `CloseableHttpAsyncClient`, you can do so in a way that does not harm what you are doing.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/494065466","html_url":"https://github.com/elastic/elasticsearch/issues/41443#issuecomment-494065466","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41443","id":494065466,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDA2NTQ2Ng==","user":{"login":"stephanebastian","id":873039,"node_id":"MDQ6VXNlcjg3MzAzOQ==","avatar_url":"https://avatars2.githubusercontent.com/u/873039?v=4","gravatar_id":"","url":"https://api.github.com/users/stephanebastian","html_url":"https://github.com/stephanebastian","followers_url":"https://api.github.com/users/stephanebastian/followers","following_url":"https://api.github.com/users/stephanebastian/following{/other_user}","gists_url":"https://api.github.com/users/stephanebastian/gists{/gist_id}","starred_url":"https://api.github.com/users/stephanebastian/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stephanebastian/subscriptions","organizations_url":"https://api.github.com/users/stephanebastian/orgs","repos_url":"https://api.github.com/users/stephanebastian/repos","events_url":"https://api.github.com/users/stephanebastian/events{/privacy}","received_events_url":"https://api.github.com/users/stephanebastian/received_events","type":"User","site_admin":false},"created_at":"2019-05-20T16:46:25Z","updated_at":"2019-05-20T16:46:25Z","author_association":"NONE","body":"Great to hear that the new client might be more composable.\r\nShort term, we can definitely pass-in a dummy client. Thanks for your time\r\n\r\nStephane\r\n\r\n","performed_via_github_app":null}]