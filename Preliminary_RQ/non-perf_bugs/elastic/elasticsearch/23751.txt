{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/23751","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23751/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23751/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23751/events","html_url":"https://github.com/elastic/elasticsearch/issues/23751","id":217047789,"node_id":"MDU6SXNzdWUyMTcwNDc3ODk=","number":23751,"title":"Update Script plugin API so that script compilation knows what type of script it is compiling","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-03-26T12:13:55Z","updated_at":"2017-03-28T08:16:18Z","closed_at":"2017-03-28T08:16:18Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Currently, when writing a script plugin, you are called to compile a script without knowing the intended usage of the script.  Therefore for more type-strict languages that should provide better access to ctx, doc, fields, and other values coming into the script they cannot change what is available to the script code (i.e. a custom receiver per script type, or script template class per script type).  Since the scripts are specified within a specific use case it is possible to tell the plugin what this is.  Also, the Java API should have known type-safe contexts available for the engines to use and build upon for each use case of a script.\r\n\r\nMy use case is for Kotlin painlessly-secured script engine (https://github.com/kohesive/keplin#elasticsearch-kotlin-plugin) where currently I have to provide a very generic receiver class yet handle the variations of how to access scripts which is not very uniform:\r\n\r\n```\r\n* Scripted updates, update by query:  https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html\r\n *\r\n *     ctx._source.counter += number    // inc counter\r\n *     ctx._source.tags.add(params.tag) // add to list\r\n *     ctx._source.new_field = bla      // add new field to index\r\n *     ctx._source.remove(old_field)    // remove field from index\r\n *\r\n *     also in ctx is:  _index, _type, _id, _version, _routing, _parent, _now (current timestamp)\r\n *\r\n *     ctx.op = delete (delete doc instead of update), noop  (do nothing)\r\n *\r\n * Script fields in queries: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-script-fields.html\r\n *\r\n *     doc['myfield'].value               // access a current field in the doc, loading all values, caching, simple values, typically single value (but can be multi)\r\n *     params['_source'].['fieldName']    // access the original _source from the document, each doc parsed, slower, full JSON access\r\n *\r\n * Scripted aggregations: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-scripted-metric-aggregation.html\r\n *\r\n *     doc.type.value           // doc type\r\n *     doc.fieldName.value      // access field from doc\r\n *     params._agg.whatever     // can place anything here for map step, or retrieving in combine step\r\n *     params._agg              // contents for reduce script\r\n *\r\n *     scripts can only return or store into _agg object primitive, string, map (of same types listed here), array (of same types listed here)\r\n *\r\n * Script ingest processor: https://www.elastic.co/guide/en/elasticsearch/reference/current/script-processor.html\r\n *\r\n *    ctx.fieldName             // value of a field\r\n *\r\n * Function score query: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-script-score\r\n *\r\n *    _score\r\n *    doc['myField'].value\r\n *    _index.*                  // doc stats https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-advanced-scripting.html\r\n *\r\n *    return double\r\n *\r\n * All cases\r\n *\r\n *     params['paramName']\r\n *\r\n * Some cases\r\n *\r\n *     _fields['fieldName'].value    // stored: true fields\r\n *\r\n```","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}