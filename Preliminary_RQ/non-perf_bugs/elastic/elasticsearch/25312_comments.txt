[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/309725299","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-309725299","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":309725299,"node_id":"MDEyOklzc3VlQ29tbWVudDMwOTcyNTI5OQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-06-20T11:30:38Z","updated_at":"2017-06-20T11:30:38Z","author_association":"CONTRIBUTOR","body":"We could also index terms with and without the field prefix, (eg `status:active`, `active`) to make it work more like  a normal field","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/309748003","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-309748003","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":309748003,"node_id":"MDEyOklzc3VlQ29tbWVudDMwOTc0ODAwMw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2017-06-20T13:10:10Z","updated_at":"2017-06-20T13:10:10Z","author_association":"CONTRIBUTOR","body":"I wonder if you could make this more transparent so the normal thing works:\r\n```\r\nPUT idx/_mapping\r\n{\r\n  \"doc\": {\r\n    \"properties\": {\r\n      \"my_object\": {\r\n        \"type\": \"keyvalue\",\r\n        \"value_type\": \"keyword\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPOST idx/_search\r\n{\r\n  \"match\": {\r\n    \"my_object.status\": \"active\"\r\n  }\r\n}\r\n```\r\n\r\nThe prefixing would be an implementation detail of `keyvalue`. I'd be inclined to only support `keyword` and `text` style fields in there. That'd let you tell someone \"stick whatever you want in this field and we'll index it and you won't pay a cost every time you introduce a new field\". I feel like giving numbers their own lucene field makes this less foolproof. I think for something like this more foolproof is better than more featureful.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/309989205","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-309989205","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":309989205,"node_id":"MDEyOklzc3VlQ29tbWVudDMwOTk4OTIwNQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2017-06-21T07:36:28Z","updated_at":"2017-06-21T07:36:28Z","author_association":"CONTRIBUTOR","body":"> I wonder if you could make this more transparent so the normal thing works:\r\n\r\nI think we should not make it complicated restrictive. It's very simple, we decide how to index and make things work without any special type.  you just mark the mapping as `\"dynamic\": false` and `\"indexed\" : true`. I don't necessarily understand what is trappy here, we don't support these parameters there yet. \r\n\r\n> The prefixing would be an implementation detail of keyvalue. I'd be inclined to only support keyword and text style fields in there. That'd let you tell someone \"stick whatever you want in this field and we'll index it and you won't pay a cost every time you introduce a new field\".\r\n\r\nI don't get what you mean here, I assume you want to barf on numerics? I think we should just use make text out of it and be done with it. We can add some position inc gaps to make phrases work but from this perspective it's really just one big pile of text.\r\n\r\n>  I feel like giving numbers their own lucene field makes this less foolproof. I think for something like this more foolproof is better than more featureful.\r\n\r\nyou know they can't use any kind of numeric special things here since we won't support aggregations etc. Let's keep it simple and don't have many exceptions. That's what I'd like though. \r\nI really don't want to get into the number / date / lat,long detection game when it's coming as a string and next time as a number it's going to be a bad user experience and this is support to fix stuff that is changing on a regular basis ie. twitter data.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/310073766","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-310073766","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":310073766,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMDA3Mzc2Ng==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2017-06-21T13:12:12Z","updated_at":"2017-06-21T13:12:12Z","author_association":"CONTRIBUTOR","body":"> I think we should just use make text out of it and be done with it.\r\n\r\nThat is what I mean.\r\n\r\nThe way I read the original proposal I thought that we would automatically give numerics their own Lucene field somehow and I didn't like that. I agree that we shouldn't do numerics.\r\n\r\nIn Clint's example you can pull out numeric fields. I wonder if we can exclude those fields from the indexed object fields.\r\n\r\nCould we make queries to the indexed objects look \"normal\" like I had in my example?\r\n\r\nI think it'd be nice to have an example of configuring the field type of the index - whether the strings are analyzed like text or keyword and how you'd set up multifields. And setting up the analyzer/normalizer/etc. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/310402374","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-310402374","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":310402374,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMDQwMjM3NA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2017-06-22T14:46:16Z","updated_at":"2017-06-22T14:46:16Z","author_association":"CONTRIBUTOR","body":"> The way I read the original proposal I thought that we would automatically give numerics their own Lucene field somehow and I didn't like that. I agree that we shouldn't do numerics.\r\nIn Clint's example you can pull out numeric fields. I wonder if we can exclude those fields from the indexed object fields.\r\n\r\nwe are on the same page here. let not be smart but simple \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/312277855","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-312277855","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":312277855,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMjI3Nzg1NQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-06-30T14:12:01Z","updated_at":"2017-06-30T14:12:01Z","author_association":"CONTRIBUTOR","body":"Discussed in FixItFriday. We're going to start simple and see what feedback we get.  We will index each term alone plus with a path prefix (eg `path\\0term`), so users can query `my_object:term` but we could also automatically convert `my_object.some.path:term` to a query for `my_object:some.path\\0term`.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/344598170","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-344598170","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":344598170,"node_id":"MDEyOklzc3VlQ29tbWVudDM0NDU5ODE3MA==","user":{"login":"roncohen","id":744,"node_id":"MDQ6VXNlcjc0NA==","avatar_url":"https://avatars0.githubusercontent.com/u/744?v=4","gravatar_id":"","url":"https://api.github.com/users/roncohen","html_url":"https://github.com/roncohen","followers_url":"https://api.github.com/users/roncohen/followers","following_url":"https://api.github.com/users/roncohen/following{/other_user}","gists_url":"https://api.github.com/users/roncohen/gists{/gist_id}","starred_url":"https://api.github.com/users/roncohen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/roncohen/subscriptions","organizations_url":"https://api.github.com/users/roncohen/orgs","repos_url":"https://api.github.com/users/roncohen/repos","events_url":"https://api.github.com/users/roncohen/events{/privacy}","received_events_url":"https://api.github.com/users/roncohen/received_events","type":"User","site_admin":false},"created_at":"2017-11-15T13:52:16Z","updated_at":"2017-11-15T13:52:16Z","author_association":"NONE","body":"This possibly has a nice use-case in APM. We allow users to send up big blobs of custom objects which are not currently indexed. This would be a nice way to make those documents searchable without running the risk of field explosion (Thanks for the ping @ruflin!)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372951338","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-372951338","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":372951338,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Mjk1MTMzOA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-03-14T09:08:41Z","updated_at":"2018-03-14T09:08:41Z","author_association":"CONTRIBUTOR","body":"cc @elastic/es-search-aggs ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/392598117","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-392598117","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":392598117,"node_id":"MDEyOklzc3VlQ29tbWVudDM5MjU5ODExNw==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2018-05-28T20:23:53Z","updated_at":"2018-05-29T02:16:06Z","author_association":"MEMBER","body":"+1 to @roncohen's comment about handling a potentially unbounded number of unique field names. I've come across a related use case in previous experience: a spreadsheet program where users can create sheet templates with arbitrary column names, and want to be able to search within columns by name.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/413313821","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-413313821","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":413313821,"node_id":"MDEyOklzc3VlQ29tbWVudDQxMzMxMzgyMQ==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2018-08-15T19:48:28Z","updated_at":"2018-08-17T17:01:03Z","author_association":"MEMBER","body":"I’m now getting started on this in earnest. My main open question is whether it makes sense to add this functionality to objects, as opposed to creating a new data type as @nik9000 alluded to.\r\n\r\nUnder the current proposal, an object field would be made queryable as follows:\r\n\r\n```\r\n\"my_object\": {\r\n    \"type\": \"object\",\r\n    \"dynamic\": false,\r\n    \"index\": true,\r\n    \"boost\": 0.5,\r\n    \"properties\": { … }\r\n}\r\n```\r\n\r\nThere are a few issues to ponder with this approach. First, it’s a bit subtle that setting `dynamic: false` and `index: true` is what indicates that the object is also a field mapping, and allows for other field mapping entries to be supplied. The mappings under `my_object` could also be misinterpreted as providing defaults for the mappings under `properties`. \r\n\r\nAdditionally, mixing in concrete field mappings can make the behavior less clear:\r\n\r\n```\r\n\"my_object\": {\r\n    \"type\": \"object\",\r\n    \"dynamic\": false,\r\n    \"index\": true,\r\n    \"boost\": 0.5,\r\n    \"properties\": {\r\n        \"status\": { … }\r\n    }\r\n}\r\n```\r\n\r\nDo we still index the un-prefixed values for `status` into the object field, so that a search for `my_object:active` will work (but not index the prefixed values)? If the queryable object field was introduced first, then the `status` field was introduced much later, which one do we end up searching in a query for `my_object.status`, as there is now data split across two fields?\r\n\r\nFinally, this syntax looks tricky to support given how the mapping + document parsing code is currently designed. In particular, an object mapper must now also function as a field mapper in certain contexts.\r\n\r\n**To avoid these problems, I wonder if it would better to create a new field type, something similar to the following:**\r\n\r\n```\r\n\"http-headers\": {\r\n    \"type\": \"key_value\",\r\n    \"index\": true,\r\n    \"boost\": 0.5\r\n }\r\n```\r\n\r\nThis directly covers the use cases around handling opaque blobs of data. If certain important keys are known in advance (and should be made available for aggregations, etc.), they can be pulled into a separate field, with no special relation to the object field. We could maybe provide a mechanism similar to `copy_to` to help users to ‘promote’ certain keys into their own fields (thanks @colings86 for this suggestion).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/414612969","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-414612969","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":414612969,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNDYxMjk2OQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-08-21T09:32:08Z","updated_at":"2018-08-21T09:32:08Z","author_association":"CONTRIBUTOR","body":"> Do we still index the un-prefixed values for status into the object field\r\n>  which one do we end up searching in a query for my_object.status, as there is now data split across two fields?\r\n\r\nThese are compelling arguments towards a dedicated indexed object field indeed. I guess we could still make it work on `object` fields by adding the list of fields that are indexed as kv-pairs to the mapping, but that would also defeat the purpose of this feature?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/414616221","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-414616221","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":414616221,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNDYxNjIyMQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-08-21T09:43:35Z","updated_at":"2018-08-21T09:43:35Z","author_association":"CONTRIBUTOR","body":"Or alternatively, we could prevent (both dynamic and explicit) mapping updates to `object` fields that are indexed so that we could ensure that data is never split across two fields? To be clear, I'm not actually recommending it and still need to weigh pros and cons, I'm mostly adding it to make sure that we explore all options.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/419536575","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-419536575","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":419536575,"node_id":"MDEyOklzc3VlQ29tbWVudDQxOTUzNjU3NQ==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2018-09-07T19:07:07Z","updated_at":"2018-09-07T19:07:07Z","author_association":"MEMBER","body":"We had a discussion offline and decided to create a new leaf field type for the reasons outlined above. As @jpountz mentioned we didn't think it made sense to add a new field mapping for each key, as this would not solve a major use case of the feature, which is to prevent mapping explosion.\r\n\r\nOther conclusions from the discussion can be found on the meta-issue: https://github.com/elastic/elasticsearch/issues/33003#issuecomment-419535274","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442389905","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-442389905","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":442389905,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjM4OTkwNQ==","user":{"login":"jsoriano","id":15763,"node_id":"MDQ6VXNlcjE1NzYz","avatar_url":"https://avatars2.githubusercontent.com/u/15763?v=4","gravatar_id":"","url":"https://api.github.com/users/jsoriano","html_url":"https://github.com/jsoriano","followers_url":"https://api.github.com/users/jsoriano/followers","following_url":"https://api.github.com/users/jsoriano/following{/other_user}","gists_url":"https://api.github.com/users/jsoriano/gists{/gist_id}","starred_url":"https://api.github.com/users/jsoriano/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jsoriano/subscriptions","organizations_url":"https://api.github.com/users/jsoriano/orgs","repos_url":"https://api.github.com/users/jsoriano/repos","events_url":"https://api.github.com/users/jsoriano/events{/privacy}","received_events_url":"https://api.github.com/users/jsoriano/received_events","type":"User","site_admin":false},"created_at":"2018-11-28T10:02:42Z","updated_at":"2018-11-28T10:02:42Z","author_association":"MEMBER","body":"Would this allow to store objects with dots in their field names?\r\n\r\nOn beats we have some cases were we would benefit of being able to store key-value objects (string to string) with dots in the keys, like in the subfields of `docker.container.labels.*` [mentioned in the design issue](https://github.com/elastic/elasticsearch/issues/33003#issuecomment-414850399) where dots are pretty usual. We'd like to be able to store events with fields like:\r\n```\r\n{\r\n  \"docker\": {\r\n    \"container\": {\r\n      \"labels\": {\r\n        \"com.docker.swarm.task\": \"foo\",\r\n        \"com.docker.swarm.task.id\": \"xxxxx\",\r\n        \"com.docker.swarm.task.name\": \"yyyyy\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nOn queries, in principle, these fields would be used only for filtering.\r\n\r\nAt the moment users face mapping errors when they try to store data like this, and the only workarounds they have are to replace the dots with other characters (we offer this \"dedotting\" in [some places](https://www.elastic.co/guide/en/beats/metricbeat/6.5/metricbeat-module-docker.html)), or to rename and/or [drop](https://discuss.elastic.co/t/using-autodiscover-feature-for-docker-does-not-work-when-running-in-swarm-mode/120342/2) the conflicting fields. This is not a very good user experience (see [this topic in discuss](https://discuss.elastic.co/t/filebeats-auto-mapping-of-kubernetes-labels-causing-big-issues/154718) for example), and makes them to lose the original names of these labels, or to completely discard some of them.\r\n\r\nIt'd be great if this new type could cover this case :slightly_smiling_face:","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442540893","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-442540893","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":442540893,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjU0MDg5Mw==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2018-11-28T17:49:41Z","updated_at":"2018-11-28T17:49:41Z","author_association":"MEMBER","body":"Hi @jsoriano, as currently designed the new field type would support this sort of data. For example, `com.docker.swarm.task.name` would be treated as a single key, and you could issue a simple query on the field `labels.com.docker.swarm.task.name`.\r\n\r\nAlso, you're not suggesting this in your comment, but just to be really clear -- this field type shouldn't be used as a general approach to handling dots in field names. It supports a much more restrictive set of search functionality than normal fields, and should only be used if it's the right fit for the particular data.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/443772836","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-443772836","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":443772836,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0Mzc3MjgzNg==","user":{"login":"jsoriano","id":15763,"node_id":"MDQ6VXNlcjE1NzYz","avatar_url":"https://avatars2.githubusercontent.com/u/15763?v=4","gravatar_id":"","url":"https://api.github.com/users/jsoriano","html_url":"https://github.com/jsoriano","followers_url":"https://api.github.com/users/jsoriano/followers","following_url":"https://api.github.com/users/jsoriano/following{/other_user}","gists_url":"https://api.github.com/users/jsoriano/gists{/gist_id}","starred_url":"https://api.github.com/users/jsoriano/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jsoriano/subscriptions","organizations_url":"https://api.github.com/users/jsoriano/orgs","repos_url":"https://api.github.com/users/jsoriano/repos","events_url":"https://api.github.com/users/jsoriano/events{/privacy}","received_events_url":"https://api.github.com/users/jsoriano/received_events","type":"User","site_admin":false},"created_at":"2018-12-03T16:28:01Z","updated_at":"2018-12-03T16:28:01Z","author_association":"MEMBER","body":"Hi, an update about its possible use in Beats after some conversations offline.\r\n\r\nI have started a PR (https://github.com/elastic/beats/pull/9286) with the changes that would be needed, and after trying it a little bit it works quite well for our case.\r\nIn principle we'd need to introduce these changes on 7.0 as they would be breaking. Alternative options for our problems with these fields would be breaking too (like \"dedoting\" by default), so we'd have to make a decision for 7.0 in any case.\r\n\r\nThere are two main cons about using this type already on 7.0 for labels:\r\n* It would be an experimental feature. But I think we could live with that, our current situation is quite prone to problems and this could be a good improvement in any case.\r\n* Lack of terms aggregations. Even if we don't use them directly in our solutions at the moment, it can be seen as a show-stopper soon as some users expect to be able to group by labels (see [this topic](https://discuss.elastic.co/t/infastructure-group-pods-by-labels/158932) for example).\r\nWe could live with workarounds (like renaming fields from beats, or duplicating them with different types) till aggregations are implemented, but then it wouldn't be such an improvement for these cases.\r\nWe could delay the adoption of this type till terms aggregation is implemented, but this could mean a breaking change for us in 7.x, or having to wait till 8.0.\r\n\r\nIf at the end we don't use it for labels, we could still consider using this type for kubernetes annotations. We are not storing them by default now to avoid loads of dynamic field mappings, this type would help on this. And terms aggregation is less required there.\r\n\r\nI have also opened a discussion about the possible use of these fields in ECS (https://github.com/elastic/ecs/pull/198).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/443777447","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-443777447","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":443777447,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0Mzc3NzQ0Nw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2018-12-03T16:39:59Z","updated_at":"2018-12-03T16:39:59Z","author_association":"CONTRIBUTOR","body":"@jsoriano Aggregations will not be implemented for queryable object fields.  I don't think you should make plans based on this field type, it is too different from normal fields and will never support a number of features that you would expect, eg discoverability of the existence of the field via an API.\r\n\r\nI think the correct way to deal with fields like:\r\n\r\n```\r\n        \"com.docker.swarm.task\": \"foo\",\r\n        \"com.docker.swarm.task.id\": \"xxxxx\",\r\n        \"com.docker.swarm.task.name\": \"yyyyy\"\r\n```\r\n\r\nis either to dedot them, or to rewrite `com.docker.swarm.task` to something like `com.docker.swarm.task.main`.\r\n\r\nThat way, these fields end up benefiting from all the features already supported.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/444297960","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-444297960","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":444297960,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0NDI5Nzk2MA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2018-12-04T23:22:09Z","updated_at":"2018-12-04T23:22:09Z","author_association":"MEMBER","body":"> Aggregations will not be implemented for queryable object fields.\r\n\r\nJust a note that while aggregations are not planned for the first version of the feature, I don't think they're out of the question, and I'm investigating if it'd be possible to support some simple aggregation types like `terms`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/507186930","html_url":"https://github.com/elastic/elasticsearch/issues/25312#issuecomment-507186930","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25312","id":507186930,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzE4NjkzMA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2019-07-01T09:21:05Z","updated_at":"2019-07-01T09:21:05Z","author_association":"MEMBER","body":"The initial version of the feature was merged in #42541 and backported to 7.3. I filed a new issue #43805 to track follow-up improvements.","performed_via_github_app":null}]