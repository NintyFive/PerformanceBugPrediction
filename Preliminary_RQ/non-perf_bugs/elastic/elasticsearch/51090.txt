{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/51090","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51090/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51090/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51090/events","html_url":"https://github.com/elastic/elasticsearch/issues/51090","id":550726825,"node_id":"MDU6SXNzdWU1NTA3MjY4MjU=","number":51090,"title":"the meaning of the code","user":{"login":"zplinuxlover","id":23027077,"node_id":"MDQ6VXNlcjIzMDI3MDc3","avatar_url":"https://avatars1.githubusercontent.com/u/23027077?v=4","gravatar_id":"","url":"https://api.github.com/users/zplinuxlover","html_url":"https://github.com/zplinuxlover","followers_url":"https://api.github.com/users/zplinuxlover/followers","following_url":"https://api.github.com/users/zplinuxlover/following{/other_user}","gists_url":"https://api.github.com/users/zplinuxlover/gists{/gist_id}","starred_url":"https://api.github.com/users/zplinuxlover/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zplinuxlover/subscriptions","organizations_url":"https://api.github.com/users/zplinuxlover/orgs","repos_url":"https://api.github.com/users/zplinuxlover/repos","events_url":"https://api.github.com/users/zplinuxlover/events{/privacy}","received_events_url":"https://api.github.com/users/zplinuxlover/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-01-16T10:50:28Z","updated_at":"2020-01-16T12:00:14Z","closed_at":"2020-01-16T12:00:14Z","author_association":"NONE","active_lock_reason":null,"body":"I read the code of the class, `org.apache.lucene.util.bkd.BKDWriter`, the method of `private byte[] packIndex(long[] leafBlockFPs, byte[] splitPackedValues) throws IOException`\r\n what's the meaning of the code below? \r\n\r\n```\r\nif (numDims == 1 && numLeaves > 1) {\r\n      int levelCount = 2;\r\n      while (true) {\r\n        if (numLeaves >= levelCount && numLeaves <= 2*levelCount) {\r\n          int lastLevel = 2*(numLeaves - levelCount);\r\n          assert lastLevel >= 0;\r\n          if (lastLevel != 0) {\r\n            // Last level is partially filled, so we must rotate the leaf FPs to match.  We do this here, after loading\r\n            // at read-time, so that we can still delta code them on disk at write:\r\n            long[] newLeafBlockFPs = new long[numLeaves];\r\n            System.arraycopy(leafBlockFPs, lastLevel, newLeafBlockFPs, 0, leafBlockFPs.length - lastLevel);\r\n            System.arraycopy(leafBlockFPs, 0, newLeafBlockFPs, leafBlockFPs.length - lastLevel, lastLevel);\r\n            leafBlockFPs = newLeafBlockFPs;\r\n          }\r\n          break;\r\n        }\r\n\r\n        levelCount *= 2;\r\n      }\r\n    }\r\n```\r\n\r\n\r\n\r\n","closed_by":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"performed_via_github_app":null}