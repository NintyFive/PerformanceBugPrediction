[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/610619909","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-610619909","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":610619909,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDYxOTkwOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-04-07T21:04:45Z","updated_at":"2020-04-07T21:04:45Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra (:Core/Infra/Build)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/610638238","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-610638238","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":610638238,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDYzODIzOA==","user":{"login":"mark-vieira","id":4106672,"node_id":"MDQ6VXNlcjQxMDY2NzI=","avatar_url":"https://avatars2.githubusercontent.com/u/4106672?v=4","gravatar_id":"","url":"https://api.github.com/users/mark-vieira","html_url":"https://github.com/mark-vieira","followers_url":"https://api.github.com/users/mark-vieira/followers","following_url":"https://api.github.com/users/mark-vieira/following{/other_user}","gists_url":"https://api.github.com/users/mark-vieira/gists{/gist_id}","starred_url":"https://api.github.com/users/mark-vieira/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mark-vieira/subscriptions","organizations_url":"https://api.github.com/users/mark-vieira/orgs","repos_url":"https://api.github.com/users/mark-vieira/repos","events_url":"https://api.github.com/users/mark-vieira/events{/privacy}","received_events_url":"https://api.github.com/users/mark-vieira/received_events","type":"User","site_admin":false},"created_at":"2020-04-07T21:50:36Z","updated_at":"2020-04-07T21:52:10Z","author_association":"CONTRIBUTOR","body":"Looking at this again we already sort of have such alias tasks. The behavior though is that it runs _all_ tests, ignoring those not applicable to the current platform. So just `destructiveDistroTest` will run all packaging tests, skipping those that don't apply to the current machine (ex: skips docker tests on Windows).\r\n\r\nWe have more specific versions of these tasks as well, such as `destructiveDistroTest.docker`, that runs _only _ the Docker tests. Right now this does both default and oss distributions but we could just wire up the arm ones as well, and on a non-arm system these would be skipped (unless manually overriden, in which case all tests would run).\r\n\r\n@pugnascotia Would this situation work? Would just continuing the existing pattern of \"skip stuff that doesn't apply\" align with this or do we need something different?\r\n\r\nIn what I'm running `./gradlew destructiveDistroTest.docker` on an x86_64 system would skip the arm tests and vice versa on an arm system. This would still rely on tasks per-architecture so we'd now have `destructiveDistroTest.default-docker-x86_64` and `destructiveDistroTest.default-docker-aarch64`. I don't think we can avoid this because we'll want to do the same for the other packaging types as well (deb, rpm, tar), not just Docker.\r\n\r\nRunning the arm tests locally (if possible) would then leverage a flag to tell the build \"I know my system is reporting x86 as the arch, but I can run the arm Docker stuff\" (ex: `-Ddocker.aarch64.supported=true`).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/610677384","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-610677384","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":610677384,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDY3NzM4NA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2020-04-07T23:58:16Z","updated_at":"2020-04-07T23:58:16Z","author_association":"MEMBER","body":">  because we'll want to do the same for the other packaging types as well (deb, rpm, tar), not just Docker.\r\n\r\nIn fact, we already have these tasks for every distribution, right now, it is just that like Mark said, we assume all are x86. We should just need another loop in DistroTestPlugin.\r\n\r\n```\r\nVerification tasks\r\n------------------\r\ndistroTest.default-deb - Runs default-deb-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.default-deb-no-jdk - Runs default-deb-no-jdk-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.default-docker - Runs default-docker-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.default-linux-archive - Runs default-linux-archive-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.default-linux-archive-no-jdk - Runs default-linux-archive-no-jdk-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.default-rpm - Runs default-rpm-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.default-rpm-no-jdk - Runs default-rpm-no-jdk-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-deb - Runs oss-deb-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-deb-no-jdk - Runs oss-deb-no-jdk-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-docker - Runs oss-docker-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-linux-archive - Runs oss-linux-archive-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-linux-archive-no-jdk - Runs oss-linux-archive-no-jdk-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-rpm - Runs oss-rpm-8.0.0-SNAPSHOT distribution tests within vagrant\r\ndistroTest.oss-rpm-no-jdk - Runs oss-rpm-no-jdk-8.0.0-SNAPSHOT distribution tests within vagrant\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/610855054","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-610855054","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":610855054,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDg1NTA1NA==","user":{"login":"pugnascotia","id":8696382,"node_id":"MDQ6VXNlcjg2OTYzODI=","avatar_url":"https://avatars1.githubusercontent.com/u/8696382?v=4","gravatar_id":"","url":"https://api.github.com/users/pugnascotia","html_url":"https://github.com/pugnascotia","followers_url":"https://api.github.com/users/pugnascotia/followers","following_url":"https://api.github.com/users/pugnascotia/following{/other_user}","gists_url":"https://api.github.com/users/pugnascotia/gists{/gist_id}","starred_url":"https://api.github.com/users/pugnascotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pugnascotia/subscriptions","organizations_url":"https://api.github.com/users/pugnascotia/orgs","repos_url":"https://api.github.com/users/pugnascotia/repos","events_url":"https://api.github.com/users/pugnascotia/events{/privacy}","received_events_url":"https://api.github.com/users/pugnascotia/received_events","type":"User","site_admin":false},"created_at":"2020-04-08T09:32:23Z","updated_at":"2020-04-08T09:32:23Z","author_association":"CONTRIBUTOR","body":"OK, so if I add in an extra loop for architecture, and also a way of say \"No, I really want $ARCH for the Docker stuff\", then that would probably get us most of the way there. Thanks all.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618438163","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-618438163","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":618438163,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODQzODE2Mw==","user":{"login":"james-crowley","id":42618816,"node_id":"MDQ6VXNlcjQyNjE4ODE2","avatar_url":"https://avatars1.githubusercontent.com/u/42618816?v=4","gravatar_id":"","url":"https://api.github.com/users/james-crowley","html_url":"https://github.com/james-crowley","followers_url":"https://api.github.com/users/james-crowley/followers","following_url":"https://api.github.com/users/james-crowley/following{/other_user}","gists_url":"https://api.github.com/users/james-crowley/gists{/gist_id}","starred_url":"https://api.github.com/users/james-crowley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/james-crowley/subscriptions","organizations_url":"https://api.github.com/users/james-crowley/orgs","repos_url":"https://api.github.com/users/james-crowley/repos","events_url":"https://api.github.com/users/james-crowley/events{/privacy}","received_events_url":"https://api.github.com/users/james-crowley/received_events","type":"User","site_admin":false},"created_at":"2020-04-23T14:47:12Z","updated_at":"2020-04-23T14:47:12Z","author_association":"CONTRIBUTOR","body":"> We should consider including the architecture in the Docker tag, for both x86 and aarch64. In this case it might be useful to use Docker's conventions, which are amd64 and arm64.\r\n\r\nNaming/tagging the docker containers with those docker’s conventions make the most sense!\r\n\r\nIn the code to add support for `aarch64`, I keep seeing either switch statements or ternary operators. Especially, when you have the situations like you described above where you need to convert the name `aarch64` into docker’s way of naming things. This also happens when trying to produce `deb` and `rpm` packages since both have unique naming schemes for architectures.\r\n\r\nOne idea I wanted to run by everyone is moving some of these switch statements and ternary operators into the [`Architecture.java`](https://github.com/elastic/elasticsearch/blob/master/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java) file. Seems like there is already one method inside the file, `current()`. \r\nhttps://github.com/elastic/elasticsearch/blob/cbc9c7ab4dd6833dc9985c25ea23f4990c2b539d/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java#L27-L38\r\n\r\nWe could add additional methods to support our needs.\r\n\r\nBringing most of the architecture logic into [`Architecture.java`](https://github.com/elastic/elasticsearch/blob/master/buildSrc/src/main/java/org/elasticsearch/gradle/Architecture.java) would help reduce duplicate code. Implementing a method that gives back docker’s naming convention of the architecture would be helpful in many different places throughout the code. \r\n\r\n@jasontedor @rjernst @mark-vieira Thoughts? Happy to post back here with a code snippet of what I am thinking or do a PR if you guys want.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618594942","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-618594942","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":618594942,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODU5NDk0Mg==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2020-04-23T19:00:18Z","updated_at":"2020-04-23T19:00:18Z","author_association":"MEMBER","body":"The point of that class is only to serve as a place to obtain the current architecture, which is needed in various places in the build. I worry about overloading to also serve as a place to house logic for packaging, which is different for Docker/RPM/Deb, as you point out.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618602267","html_url":"https://github.com/elastic/elasticsearch/issues/54925#issuecomment-618602267","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54925","id":618602267,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODYwMjI2Nw==","user":{"login":"pugnascotia","id":8696382,"node_id":"MDQ6VXNlcjg2OTYzODI=","avatar_url":"https://avatars1.githubusercontent.com/u/8696382?v=4","gravatar_id":"","url":"https://api.github.com/users/pugnascotia","html_url":"https://github.com/pugnascotia","followers_url":"https://api.github.com/users/pugnascotia/followers","following_url":"https://api.github.com/users/pugnascotia/following{/other_user}","gists_url":"https://api.github.com/users/pugnascotia/gists{/gist_id}","starred_url":"https://api.github.com/users/pugnascotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pugnascotia/subscriptions","organizations_url":"https://api.github.com/users/pugnascotia/orgs","repos_url":"https://api.github.com/users/pugnascotia/repos","events_url":"https://api.github.com/users/pugnascotia/events{/privacy}","received_events_url":"https://api.github.com/users/pugnascotia/received_events","type":"User","site_admin":false},"created_at":"2020-04-23T19:11:35Z","updated_at":"2020-04-23T19:11:35Z","author_association":"CONTRIBUTOR","body":"This issue was actually addressed in #55073, as the build now constructs testing targets such as `:qa:os:destructiveDistroTest.default-docker-aarch64`. I'm no longer convinced of the need to cross-test the images, so I'm going to close this issue for the time being.","performed_via_github_app":null}]