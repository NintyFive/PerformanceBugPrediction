[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/614933229","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-614933229","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":614933229,"node_id":"MDEyOklzc3VlQ29tbWVudDYxNDkzMzIyOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-04-16T22:40:42Z","updated_at":"2020-04-16T22:40:42Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/Search)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/642844403","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-642844403","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":642844403,"node_id":"MDEyOklzc3VlQ29tbWVudDY0Mjg0NDQwMw==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-06-11T18:03:38Z","updated_at":"2020-06-11T18:04:00Z","author_association":"MEMBER","body":"We discussed as a group, and decided that we want to support `ignore_malformed`, `ignore_above`, and `null_value` in the fields API.\r\n\r\nThe arguments in favor:\r\n* We want the API to be consistent with queries and aggregations. For example, say there was a keyword field with `ignore_above` configured. In a search we could run a `terms` aggregation on the field and also load it through `fields`. It would be confusing if the output of `terms `was missing a large value that was ignored, but `fields` showed the value.\r\n* The API always parses the values using their mapping type -- for example an integer field that's passed as the string `\"42\"` will be returned as the integer `42`. So it's very natural to ignore malformed values and avoid returning these. If we are respecting `ignore_malformed`, it is consistent to also respect the related option `ignore_above`.\r\n\r\nThere wasn't clear agreement on whether we should apply the `normalizer` to keyword fields. I'm working on resolving this question.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/644441380","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-644441380","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":644441380,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NDQ0MTM4MA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-06-15T23:25:19Z","updated_at":"2020-06-17T18:06:44Z","author_association":"MEMBER","body":"I ran some benchmarks to check the performance wasn't too different from source filtering.\r\n\r\n**Set-up**\r\nUsing the metricbeat rally track, I benchmarked searches with different field loading strategies:\r\n* A baseline where no fields or `_source` data are requested.\r\n* Load fields through `docvalues_fields`, disable `_source`.\r\n* Load fields through source filtering.\r\n* Load using new `fields` API, disable `_source`.\r\n\r\nTo make it a tough scenario for loading from source, I added a search filter so that documents tend to be quite large (~200 fields). I also set `size: 100` to make the timing differences more noticeable.\r\n\r\nEach experiment loads a different number of fields:\r\n\r\n* `load-single-*`: load 1 field\r\n* `load-small-*`: load ~5 fields\r\n* `load-medium-*`: load ~35 fields\r\n\r\n**Results**\r\n```\r\n| Metric                        |                        Task |       Value |   Unit |\r\n|------------------------------:|----------------------------:|------------:|-------:|\r\n|  50th percentile service time |                   load-none |      10.832 |     ms | \r\n|  90th percentile service time |                   load-none |     10.9151 |     ms |\r\n        \r\n|  50th percentile service time | load-single-docvalue-fields |     10.9799 |     ms |\r\n|  90th percentile service time | load-single-docvalue-fields |     11.3019 |     ms |\r\n|  50th percentile service time |   load-single-source-filter |     15.5808 |     ms |\r\n|  90th percentile service time |   load-single-source-filter |     16.0853 |     ms |\r\n|  50th percentile service time |          load-single-fields |     17.9226 |     ms |\r\n|  90th percentile service time |          load-single-fields |     18.0486 |     ms |\r\n        \r\n|  50th percentile service time |  load-small-docvalue-fields |     11.8346 |     ms |\r\n|  90th percentile service time |  load-small-docvalue-fields |     11.9437 |     ms |\r\n|  50th percentile service time |    load-small-source-filter |     15.9773 |     ms |\r\n|  90th percentile service time |    load-small-source-filter |     16.1746 |     ms |\r\n|  50th percentile service time |           load-small-fields |     18.4241 |     ms |\r\n|  90th percentile service time |           load-small-fields |     19.1415 |     ms |\r\n\r\n|  50th percentile service time | load-medium-docvalue-fields |     13.4794 |     ms\r\n|  90th percentile service time | load-medium-docvalue-fields |     13.5975 |     ms |\r\n|  50th percentile service time |   load-medium-source-filter |     17.7839 |     ms |\r\n|  90th percentile service time |   load-medium-source-filter |     18.5534 |     ms |\r\n|  50th percentile service time |          load-medium-fields |     21.7517 |     ms |\r\n|  90th percentile service time |          load-medium-fields |     22.1342 |     ms |\r\n```\r\n\r\nNotes:\r\n1. Loading from `fields` is consistently slower than source filtering. This seems related to source loading/ decompression: for source filtering, we make sure to load both the `_id` and the `_source` in the same 'load stored fields' call. However, in the new fetch fields phase, we need to make a separate call to 'load stored fields'. I tested a hacky version that shared the stored fields loading with `_id`, and it closed the timing gap. \r\n2. Using `docvalue_fields` was surprisingly fast, even for a decent number of fields (~35).\r\n\r\nI filed #58155 with more details on the first note.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/644772439","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-644772439","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":644772439,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NDc3MjQzOQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2020-06-16T13:39:36Z","updated_at":"2020-06-16T13:39:36Z","author_association":"CONTRIBUTOR","body":"> Using `docvalue_fields` was surprisingly fast, even for a decent number of fields (~35).\r\n\r\nThis is interesting! I wonder if it has to do with making those particular doc_values \"hot\" in the disk cache. In my head the tradeoff with doc_values has mostly to do with them being stored column-wise rather than grouped with the docs. Great for aggregations, but when you have fetch all of them you could end up with a bunch of random seeks. But in rally it is fairly easy to light up the disk cache just by requesting the same docs over and over again so those random seeks become cache hits.\r\n\r\nI *guess* a similar thing happens comparing spinning disks with SSDs. And we have folks using both. Maybe searchable snapshots is sort of like that problem too, but even worse!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/644991366","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-644991366","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":644991366,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NDk5MTM2Ng==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-06-16T20:21:16Z","updated_at":"2020-06-16T21:06:28Z","author_association":"MEMBER","body":"> Loading from fields is consistently slower than source filtering. This seems related to source loading/ decompression: for source filtering, we make sure to load both the _id and the _source in the same 'load stored fields' call.\r\n\r\nI opened a PR to refactor the fetch subphase so that stored fields are only loaded once per hit: #58196. Here are the new performance numbers after that change. Now the times are very similar to source filtering:\r\n\r\n```\r\n| Metric                        |                        Task |       Value |   Unit |\r\n|------------------------------:|----------------------------:|------------:|-------:|\r\n|  50th percentile service time |          load-single-fields |     15.7337 |     ms |\r\n|  90th percentile service time |          load-single-fields |     16.9116 |     ms |\r\n|  50th percentile service time |           load-small-fields |     15.8501 |     ms |\r\n|  90th percentile service time |           load-small-fields |     16.3547 |     ms |\r\n|  50th percentile service time |          load-medium-fields |     18.9691 |     ms |\r\n|  90th percentile service time |          load-medium-fields |      19.975 |     ms |\r\n```\r\n\r\n> I filed #58155 with more details on the first note.\r\n\r\nI am going to close that new issue, I was confused and thought the refactor was harder than it actually was.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/651441458","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-651441458","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":651441458,"node_id":"MDEyOklzc3VlQ29tbWVudDY1MTQ0MTQ1OA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-06-30T00:28:16Z","updated_at":"2020-06-30T20:27:54Z","author_association":"MEMBER","body":"I thought more about the question of whether we should apply `normalizer` before returning a keyword, and to me it makes sense to apply normalization by default:\r\n* The actual name `normalizer` suggests that it is performing standardization, which is exactly the sort of thing we claim to do when returning values. I was hesitant earlier because normalization felt more like text analysis to me, but I think it's typically value standardization (and we just happen to re-use the analyzer framework).\r\n* It's most consistent with other parts of the search response, in particular `terms` aggregations.\r\n* If the original value is actually interesting in terms of casing, accents, etc., then a user will probably avoid normalizing, and instead perform a case-insensitive search (coming soon :)). Or, they would set up a multi-field where one field contains the original, and the other a normalized form.\r\n\r\nTagging @jpountz @jimczi @javanna @nik9000 in case they have thoughts on the above, happy to discuss here!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/652039447","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-652039447","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":652039447,"node_id":"MDEyOklzc3VlQ29tbWVudDY1MjAzOTQ0Nw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2020-06-30T20:57:14Z","updated_at":"2020-06-30T20:57:14Z","author_association":"MEMBER","body":"+1 to support `normalizer` ootb. As you said it's consistent with aggregations and script. That would also make the `docvalue_fields` alternative less appealing, which I find important since we want to simplify the reasoning when retrieving fields.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/652282501","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-652282501","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":652282501,"node_id":"MDEyOklzc3VlQ29tbWVudDY1MjI4MjUwMQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2020-07-01T08:44:24Z","updated_at":"2020-07-01T08:44:24Z","author_association":"MEMBER","body":"@jtibshirani when you say \"by default\" does that mean it can be disabled? From the point of view of \"when you retrieve, you get what you sent, when you search and aggregate, you search on and get back what was indexed\" I am torn, I would personally expect the raw value loaded from source. Though if users can control what they get, I would not mind that the default is normalized.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/655182634","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-655182634","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":655182634,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NTE4MjYzNA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-07-07T23:02:43Z","updated_at":"2020-07-07T23:02:43Z","author_association":"MEMBER","body":"@javanna I was indeed wondering if we could make the behavior configurable, but don't have immediate plans to do so. It's always nice to avoid configuration options and have strong defaults.\r\n\r\nI have also been on the fence about this, I can see arguments both ways. I suggest that we move forward with normalizing the values for now. I'm going to ask the teams planning to use this feature (SQL, ML, Kibana) to try to integrate with it before we ship it, and have a short list of questions I plan to ask them which includes keyword normalization. The questions are tracked in the issue description.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/659600101","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-659600101","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":659600101,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTYwMDEwMQ==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-07-16T18:46:08Z","updated_at":"2020-07-16T19:09:20Z","author_association":"MEMBER","body":"We discussed how geo fields should be returned with @talevy and @imotov. A summary of our discussion:\r\n* Geo data should be returned in a consistent format. We accept a variety of formats during indexing, and feel it would be helpful for clients if all fields were returned in a single format. \r\n* The default format should be 'geojson', since this matches our usual JSON return format, and it's natural for Kibana. We should also support well-known text, which is best for SQL. Note that geo points (in addition to shapes) will also be returned in geojson.\r\n* The user will be able to select the format by setting `format: wkt` or `format: geojson`.\r\n* Ideally if the source value is already in the right format to return, we won't re-parse it to a geolib object then re-serialize it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/659651564","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-659651564","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":659651564,"node_id":"MDEyOklzc3VlQ29tbWVudDY1OTY1MTU2NA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-07-16T20:24:14Z","updated_at":"2020-07-16T20:24:14Z","author_association":"MEMBER","body":"An additional note: now that we'll return points in geojson format by default, for consistency we should accept this format when indexing points. We currently don't allow geojson, the work to add support is tracked in #47815.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/665279090","html_url":"https://github.com/elastic/elasticsearch/issues/55363#issuecomment-665279090","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","id":665279090,"node_id":"MDEyOklzc3VlQ29tbWVudDY2NTI3OTA5MA==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2020-07-28T20:58:13Z","updated_at":"2020-07-28T20:58:13Z","author_association":"MEMBER","body":"The feature branch was merged in #60100. I'll open new issues/ PRs for the follow-up improvements mentioned in the description.","performed_via_github_app":null}]