{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/220","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/220/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/220/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/220/events","html_url":"https://github.com/elastic/elasticsearch/issues/220","id":221598,"node_id":"MDU6SXNzdWUyMjE1OTg=","number":220,"title":"Query DSL: custom score (scripted) query","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":34099,"node_id":"MDU6TGFiZWwzNDA5OQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.09.0","name":"v0.09.0","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2010-06-14T00:14:31Z","updated_at":"2010-06-14T01:12:33Z","closed_at":"2010-06-14T07:15:34Z","author_association":"MEMBER","active_lock_reason":null,"body":"`custom_score` query allows to wrap another query and customize the scoring of it optionally with a computation derived from other field values in the doc (numeric ones). Here is a simple sample:\n\n```\n\"custom_score\" : {\n    \"query\" : {\n        ....\n    },\n    \"script\" : \"score * doc['my_numeric_field'].value\"\n}\n```\n\nThe `script` uses `mvel` (http://mvel.codehaus.org/) which gives a lot of flexibility in terms of what can be computed and is _really_ fast. Other options considered were building a Json based AST (which will be faster, and might be implemented in the future), or using javascript, which is not as fast on the JVM (rhino).\n\nThere are \"extensions\" to mvel provided, they include the `score` variable, which is the score of the internal query. The idea of providing the score and let the user use it is to allow for complete control over the scoring, without internally multiplying whatever the script produced with the score. This allows for the sub query score to be discarded if needed, or computed on a different \"scale\" than multiplying.\n\nIt also provides all the Math functions (will be listed in the final docs). The more interesting one is the `doc[field_name]`, which actually returns an object that has the following common properties:\n- `doc['field_name'].value`: The native numeric value of the field. For example, if its a `short` type, it will be short.\n- `doc['field_name'].values`: The native numeric array values of the field. For example, if its a `short` type, it will be short[]. Remember, a field can have several values within a single doc. Returns an empty array if the field has no values.\n- `doc['field_name'].stringValue`: The string value of the field.\n- `doc['field_name'].doubleValue`: The converted double of the field. Replace `double` with `int`, `long`, `float`, `short`, `byte`. Returns an empty array if the field has no values.\n- `doc['field_name'].doubleValues`: A converted double values array.\n- `doc['field_name'].date`: Applies only to date / long (timestamp) types, returns a `MutableDateTime` (http://joda-time.sourceforge.net/api-release/org/joda/time/MutableDateTime.html) allowing to get date / time specific data.\n- `doc['field_name'].dates`: Applies only to date / long (timestamp) types, returns a `MutableDateTime` array (http://joda-time.sourceforge.net/api-release/org/joda/time/MutableDateTime.html) allowing to get date / time specific data.\n- `doc['field_name'].empty`: A boolean indicating if the field has no values within the doc.\n- `doc['field_name'].multiValued`: A boolean indicating that the field has several values within the corpus.\n\n`custom_score` also allows to accept parameters to scripts (allowing to reuse scripts for better performance). Parameters are simple json object that can then be accessed in the script, for example:\n\n```\n\"custom_score\" : {\n    \"query\" : {\n        ....\n    },\n    \"params\" : {\n        \"param1\" : 2,\n        \"param2\" : 3.1\n    }\n    \"script\" : \"score * doc['my_numeric_field'].value / pow(param1, param2)\"\n}\n```\n","closed_by":null,"performed_via_github_app":null}