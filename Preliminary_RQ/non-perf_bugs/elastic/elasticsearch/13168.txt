{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/13168","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13168/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13168/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13168/events","html_url":"https://github.com/elastic/elasticsearch/issues/13168","id":103613872,"node_id":"MDU6SXNzdWUxMDM2MTM4NzI=","number":13168,"title":"Recovery fails to handle truncated translog files on NTFS","user":{"login":"pablocastro","id":3433341,"node_id":"MDQ6VXNlcjM0MzMzNDE=","avatar_url":"https://avatars1.githubusercontent.com/u/3433341?v=4","gravatar_id":"","url":"https://api.github.com/users/pablocastro","html_url":"https://github.com/pablocastro","followers_url":"https://api.github.com/users/pablocastro/followers","following_url":"https://api.github.com/users/pablocastro/following{/other_user}","gists_url":"https://api.github.com/users/pablocastro/gists{/gist_id}","starred_url":"https://api.github.com/users/pablocastro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pablocastro/subscriptions","organizations_url":"https://api.github.com/users/pablocastro/orgs","repos_url":"https://api.github.com/users/pablocastro/repos","events_url":"https://api.github.com/users/pablocastro/events{/privacy}","received_events_url":"https://api.github.com/users/pablocastro/received_events","type":"User","site_admin":false},"labels":[{"id":836542781,"node_id":"MDU6TGFiZWw4MzY1NDI3ODE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/Engine","name":":Distributed/Engine","color":"0e8a16","default":false,"description":"Anything around managing Lucene and the Translog in an open shard."},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"assignees":[{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2015-08-27T23:15:22Z","updated_at":"2018-02-13T20:33:40Z","closed_at":"2016-01-21T10:42:49Z","author_association":"NONE","active_lock_reason":null,"body":"As captured in #9699 the translog can get truncated during a power failure or a system crash. The actual details of what a partial write looks like depend on the filesystem among other things, and the fix to that bug addresses partial writes that are seen when this failure happens in ext4 (xfs seems to expose a similar behavior) .\n\nIn NTFS a partial write often looks different. If the failure happens in the middle of a FlushFileBuffers call (called by force() on Windows) it may catch the filesystem at a point where file size has been updated in metadata but no data has been written (or at least the valid data pointer has not been moved yet). For security reasons NTFS will return all 0s for content when reading past the last successfully written point after the system restarts. \n\nThe end result is either a translog file that has only zeroes in it (when only the start of the translog was written) or more commonly a translog file that has a set of whole transaction records followed by one or more buffers worth of zeroes. In both cases the translog reading logic chokes on these files during recovery and doesn’t recover the shard (concretely, since there’s 0s at the translog record boundary, the translog record type is read as 0 and that causes Translog.Operation.fromId() to fail).\n\nI discussed this with the NTFS folks here at Microsoft and they confirmed we can rely on the 0s for cases where metadata was updated but data wasn’t during a system failure.\n\nIn the context of the 1.7 codebase a relatively simple fix for this would be throw TruncatedTranslogException whenever we see a transaction record of type “0” since it's never a valid type. This covers both cases, one because 0s start at a record boundary and the other because a file that’s all 0s makes ES think it’s an old translog file, and the legacy translog file code skips the size (first 4 bytes) and goes straight for the first record. To be conservative the checking of 0s could be Windows only, although I’m not sure if that’s necessary since no healthy translog should have it. It could even be taken further by verifying that some of the subsequent bytes are 0s as well, although that might be too far. \n\nThe 2.0 codebase has moved quite a bit and I’m less familiar with it, but somehow this would need to be factored in either by having a boundary where a check for 0s is a safe detection strategy or by growing the translog in known increments and placing markers at the previous page that can be used to detect partial writes. Happy to help explore/validate approaches if that would be useful.\n\nI have a few truncated translog files if anyone wants to take a look (couldn't attach them here, github didn't like .binary files). I have a simple fix and tests for this implemented since we needed to address this quickly here, if a PR would help I can send one.\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}