[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/129608479","html_url":"https://github.com/elastic/elasticsearch/issues/12783#issuecomment-129608479","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12783","id":129608479,"node_id":"MDEyOklzc3VlQ29tbWVudDEyOTYwODQ3OQ==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2015-08-10T21:15:48Z","updated_at":"2015-08-10T21:15:48Z","author_association":"CONTRIBUTOR","body":"+1\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/129609600","html_url":"https://github.com/elastic/elasticsearch/issues/12783#issuecomment-129609600","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12783","id":129609600,"node_id":"MDEyOklzc3VlQ29tbWVudDEyOTYwOTYwMA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-08-10T21:18:46Z","updated_at":"2015-08-10T21:18:46Z","author_association":"CONTRIBUTOR","body":"++\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/129640879","html_url":"https://github.com/elastic/elasticsearch/issues/12783#issuecomment-129640879","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12783","id":129640879,"node_id":"MDEyOklzc3VlQ29tbWVudDEyOTY0MDg3OQ==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-08-10T22:59:30Z","updated_at":"2015-08-10T22:59:30Z","author_association":"CONTRIBUTOR","body":"personally I find having a hierarchy of modules helpful to keep things clean, more modular and more testable:\n- a module is a unit responsible for X\n- the module itself is a sub-system within a system. Breaking the system to modules is good, and I believe the same holds for modules themselves. Specially when it comes to complex modules.\n- one can argue that this can also be fixed by collapsing a hierarchy to a single module - I believe this will lead to a spaghetti code on the module level. Instead, split responsibilities to higher/lower level functions and work your way down/up.\n- applied properly, sub-modules actually reduce spaghetti dependencies, simply because higher modules are not (and should not) be aware of lower ones. When flattening everything, you risk modules in the system knowing/depending on other modules that they should not even know about. A hierarchy mandates strict narrow dependency rules:\n\n```\nA\n|-- B\n|    |-- C\n|    |-- D\n|-- E\n|    |-- F\n|    |-- G\n```\n\nA should only know about B & E\nB and E only know about each other \nC and D only know about each other \nF and G only know about each other \n\neach module knows the minimum it needs to know in order to function. With a flatten model the dependency rules are quite weak:\n\n```\nA\nB\nC\nD\nE\nF\nG\n```\n\neveryone knows about everyone... no clear dependency rules... everything is allowed.\n\nOne thing I like about the hierarchy model is that if you follow the rules it forces you to think. That is, if you see that for some reason dependencies leak out of their boundaries - you probably did something wrong.\n\nWe've had plenty of discussion on this topic already in #12744, so not going to repeat everything again. If most agree to remove this.... it's fine... as long as the end result doesn't turn out to be worse than where we started.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/129743779","html_url":"https://github.com/elastic/elasticsearch/issues/12783#issuecomment-129743779","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12783","id":129743779,"node_id":"MDEyOklzc3VlQ29tbWVudDEyOTc0Mzc3OQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-08-11T07:46:08Z","updated_at":"2015-08-11T07:46:08Z","author_association":"CONTRIBUTOR","body":"@uboness I totally understand where you are coming from. The last couple of months elasticsearch has undergone some massive changes since we are basically not able to cope with the amount of classes and abstractions, number of packages etc. It's largely grown over the years and taking several steps back here is a reasonable thing to do. So what does this mean, we mainly folded classes into larger and more general classes, removed packages containing a single class or like a handful, removed wiring services via guice and use good old ctors.\nThese refactorings are similar to this, in theory the abstractions where ok and the right thing todo if you look at smaller and meant to be extendable projects. In elasticsearch the complexity of the system alone is hard to cope with, we should try to make our interfaces simple. Lemme explain using an example:\n\nWe have a class `SearchModule` it spawns a bunch of modules:\n\n``` Java\n    @Override\n    public Iterable<? extends Module> spawnModules() {\n        return ImmutableList.of(\n                new SearchServiceModule(settings),\n                new TransportSearchModule(),\n                new HighlightModule(),\n                new SuggestModule(),\n                new FunctionScoreModule(),\n                new AggregationModule(),\n                new FetchSubPhaseModule());\n    }\n```\n\nalmost all of them follow a simple pattern:\n\n``` Java\npublic class FooModule extends AbstractModule {\n\n  public void registerFoo(Foo foo) { ... }\n\n  @Override\n  protected void configure() { ... }\n}\n```\n\nI think stuff would be way simpler if we would merge them all into `SearchModule` like this:\n\n``` Java\npublic class  SearchModule extends AbstractModule  {\n\n  public void registerHighlighter(Class<? extends Highlighter> clazz) { ... } \n  public void registerSuggester(Class<? extends Suggester> suggester) { ... }\n  public void registerFetchSubPhase(Class<? extends FetchSubPhase> subPhase)  { ... }\n  public void registerParser(Class<? extends ScoreFunctionParser> parser) { .. }\n  public void registerStream(SignificanceHeuristicStreams.Stream stream) { ... } \n  public void registerStream(MovAvgModelStreams.Stream stream) { ... }\n\n}\n```\n\nThis is simple to use, clear and reduces bloat. Abstractions are added via the individual classes you can register that is a clear interface. The fact that `SearchModule` spawns `TransportSearchModule` to spawn `TransportAggregationModule` to spawn `[TransportSignificantTermsHeuristicModule, TransportMovAvgModelModule]` is just confusing and not needed. There is no gain here only complexity. I am 100% convinced we should discourage and prevent this overdesign pattern.\n","performed_via_github_app":null}]