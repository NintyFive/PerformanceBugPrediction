[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/632063343","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-632063343","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":632063343,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMjA2MzM0Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-05-21T12:39:38Z","updated_at":"2020-05-21T12:39:38Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-ql (:Query Languages/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/632063836","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-632063836","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":632063836,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMjA2MzgzNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-05-21T12:40:48Z","updated_at":"2020-05-21T12:40:48Z","author_association":"MEMBER","body":"Tagging @colings86 and @tsg in particular","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634641997","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-634641997","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":634641997,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDY0MTk5Nw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T12:58:01Z","updated_at":"2020-05-27T22:18:46Z","author_association":"MEMBER","body":"After a first round of discussions, the following format is proposed. At high-level, the results are \"merged\" into a list so all responses will essentially return a list of results, which for sequences and joins will be lists of lists.\r\n\r\nTo avoid ambiguity and indicate the type of query, an enum-like field is added so folks that are interested in the type of query can find out without having to filter the results.\r\n\r\nThe proposed generic response is:\r\n\r\n```javascript\r\n{\r\n \"took\": 5,\r\n \"timed_out\": false,\r\n \"hits\": {\r\n  \"total\": {\r\n   \"value\": 100,\r\n   \"relation\": \"eq\"\r\n  },\r\n  \"type\": \"event\" // one of event, join, sequence, count\r\n  \"results\":\r\n  [{ \r\n    \"result\" : [{ result1 }], \r\n   },\r\n   {\r\n    \"result\" : [{ result2 }]\r\n   }  \r\n  ]\r\n }\r\n}\r\n```\r\n\r\nTo wit:\r\n\r\n### event query\r\n\r\n`event where filter`\r\n\r\n```javascript\r\n{\r\n ...\r\n \"type\": \"event\"\r\n \"results\":\r\n [{\r\n   \"result\": [{\r\n     \"_index\": \"my_index\",\r\n     \"_id\": \"0\",\r\n     \"_sequence_id\": 0,\r\n     \"_source\": {\r\n      \"date\": \"2009-11-15T14:12:12\",\r\n      \"event\": {\r\n       \"type\": \"process\"\r\n      }\r\n     }\r\n    }\r\n   ],\r\n   [{\r\n     ...\r\n    }\r\n   ]\r\n  }\r\n ]\r\n}\r\n```\r\n\r\n### join\r\n\r\n```\r\njoin by ...\r\n [query1]\r\n [query2]\r\n```\r\n\r\n```javascript\r\n{\r\n ...\r\n \"type\": \"join\"\r\n \"results\":\r\n [{\r\n   \"keys\": [\"a\", \"b\"],\r\n   \"result\": [{\r\n     \"_index\": \"my_index\",\r\n     \"_id\": \"0\",\r\n     \"_sequence_id\": 0,\r\n     \"_source\": {\r\n      \"date\": \"2009-11-15T14:12:12\",\r\n      \"event\": {\r\n       \"type\": \"process\"\r\n      }\r\n     }\r\n    }, {\r\n     \"_index\": \"my_index\",\r\n     \"_id\": \"1\",\r\n     \"_sequence_id\": 1,\r\n     \"_source\": {\r\n      \"date\": \"2009-11-15T14:13:13\",\r\n      \"event\": {\r\n       \"type\": \"process\"\r\n      }\r\n     }\r\n    },\r\n    ...\r\n   ],\r\n   [{\r\n     ...\r\n    }\r\n   ]\r\n  }\r\n ]\r\n}\r\n```\r\n\r\n### sequence\r\n\r\nEssentially identical to `join` bar the `type` value:\r\n\r\n```\r\nsequence by ...\r\n [query1]\r\n [query2]\r\n```\r\n\r\n```javascript\r\n{\r\n ...\r\n \"type\": \"sequence\"\r\n \"results\":\r\n [{\r\n   \"keys\": [\"a\", \"b\"],\r\n   \"result\": [{\r\n     \"_index\": \"my_index\",\r\n     \"_id\": \"0\",\r\n     \"_sequence_id\": 0,\r\n     \"_source\": {\r\n      \"date\": \"2009-11-15T14:12:12\",\r\n      \"event\": {\r\n       \"type\": \"process\"\r\n      }\r\n     }\r\n    }, {\r\n     \"_index\": \"my_index\",\r\n     \"_id\": \"1\",\r\n     \"_sequence_id\": 1,\r\n     \"_source\": {\r\n      \"date\": \"2009-11-15T14:13:13\",\r\n      \"event\": {\r\n       \"type\": \"process\"\r\n      }\r\n     }\r\n    },\r\n    ...\r\n   ],\r\n   [{\r\n     ...\r\n    }\r\n   ]\r\n  }\r\n ]\r\n}\r\n```\r\n\r\n### count\r\n\r\nLastly `count`:\r\n\r\n```\r\nquery\r\n| count\r\n```\r\n\r\n```javascript\r\n{\r\n ...\r\n \"type\": \"count\"\r\n \"results\":\r\n [{\r\n   \"result\": [{ \r\n     {\r\n      \"_count\": 40,\r\n      \"_keys\": [...],\r\n      \"_percent\": 0.4223148165093,\r\n      \"_values\": [...]\r\n     }\r\n    }\r\n   ]\r\n  }\r\n ]\r\n}\r\n```\r\n\r\nOne questions is what does `total hits` represent?\r\n\r\nThe number of total documents hit or the number of results? For a join, do we return the number of joins or the number of documents (or matches) across all results?   ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634648516","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-634648516","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":634648516,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDY0ODUxNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T13:09:38Z","updated_at":"2020-05-27T13:09:38Z","author_association":"MEMBER","body":"Tagging @Mpdreamz, @cjcenizal, @stacey-gammon and @tsg to check for any red flags on the consumer side.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634972695","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-634972695","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":634972695,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDk3MjY5NQ==","user":{"login":"cjcenizal","id":1238659,"node_id":"MDQ6VXNlcjEyMzg2NTk=","avatar_url":"https://avatars2.githubusercontent.com/u/1238659?v=4","gravatar_id":"","url":"https://api.github.com/users/cjcenizal","html_url":"https://github.com/cjcenizal","followers_url":"https://api.github.com/users/cjcenizal/followers","following_url":"https://api.github.com/users/cjcenizal/following{/other_user}","gists_url":"https://api.github.com/users/cjcenizal/gists{/gist_id}","starred_url":"https://api.github.com/users/cjcenizal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjcenizal/subscriptions","organizations_url":"https://api.github.com/users/cjcenizal/orgs","repos_url":"https://api.github.com/users/cjcenizal/repos","events_url":"https://api.github.com/users/cjcenizal/events{/privacy}","received_events_url":"https://api.github.com/users/cjcenizal/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T22:16:38Z","updated_at":"2020-05-27T22:16:38Z","author_association":"CONTRIBUTOR","body":"Take my comments with a grain of salt, since I have never worked with EQL before... 😅  \r\n\r\nI like the solution we arrived at. If I were consuming these responses in JS, I'd be able to use the `type` field to determine which shape to expect the results to be and how to interpret them. The simplification of `join_keys` -> `keys` also makes sense to me.\r\n\r\nWhat's the intention behind wrapping each individual result object in an array for the `event` and `count` responses? As a consumer, I think I'd find it cumbersome and confusing to have to extract the object at `result[0]` for these types. If the intention was simply consistency, then I think we should sacrifice consistency for ergonomics and remove the wrapping arrays. For clients, I expect it'd be trivial to change the way this shape is consumed in response to the `type`.\r\n\r\nHave you considered adding new information for surfacing the number of results, e.g. a field called `hits.total_results`? This would allow you to retain the existing meaning of `hits.total` to indicate the total number of documents hit.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634974487","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-634974487","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":634974487,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDk3NDQ4Nw==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T22:21:28Z","updated_at":"2020-05-27T22:21:28Z","author_association":"MEMBER","body":"@cjcenizal I think the worry is that embedding several specialized schemas within the response will be more cumbersome to consumers of the API. If we just have a list of results returned, you just have to know how to render \"a result\". It would also be more future proof, if we added new capabilities to EQL. Results with a single event can be treated as a special case but they don't have to. Sequences, joins, counts, and events could all be rendered with the same code. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634978889","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-634978889","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":634978889,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDk3ODg4OQ==","user":{"login":"cjcenizal","id":1238659,"node_id":"MDQ6VXNlcjEyMzg2NTk=","avatar_url":"https://avatars2.githubusercontent.com/u/1238659?v=4","gravatar_id":"","url":"https://api.github.com/users/cjcenizal","html_url":"https://github.com/cjcenizal","followers_url":"https://api.github.com/users/cjcenizal/followers","following_url":"https://api.github.com/users/cjcenizal/following{/other_user}","gists_url":"https://api.github.com/users/cjcenizal/gists{/gist_id}","starred_url":"https://api.github.com/users/cjcenizal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cjcenizal/subscriptions","organizations_url":"https://api.github.com/users/cjcenizal/orgs","repos_url":"https://api.github.com/users/cjcenizal/repos","events_url":"https://api.github.com/users/cjcenizal/events{/privacy}","received_events_url":"https://api.github.com/users/cjcenizal/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T22:33:25Z","updated_at":"2020-05-27T22:33:25Z","author_association":"CONTRIBUTOR","body":"Thanks for the explanation @rw-access!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/635398313","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-635398313","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":635398313,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNTM5ODMxMw==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-05-28T14:49:06Z","updated_at":"2020-05-28T14:50:11Z","author_association":"MEMBER","body":"This looks good good.\r\nA few things that I would add or resolve\r\n* consistency between `keys` and `_keys`. we should pick one. Should everything have a leading underscore? That seems consistent with other APIs?\r\n* total_results will be all of the results; total_events is the sum of all sequence lengths\r\n* should we remove a notion of `total_hits` when it's not relevant? it's nontrivial what it means for sequences/joins and is harder to estimate\r\n* we should account for `unique_count` which performs a unique while adding `_count`/`_percent` to each result\r\n\r\nI'm also wondering what something like this would look like:\r\n`sequence [A] [B] [C] | unique_count events[0].process_path`\r\n\r\nThat will add a `_count` to each result. But I don't think to each event in each result. Would you then want to capture the count key _and_ the join key?\r\n```javascript\r\n{\r\n   ...\r\n  \"type\": str, // \"count\" | \"sequence\" | \"join\"\r\n  \"results\": [\r\n    {\r\n      \"_count\": null | int\r\n      \"_join_keys\": null | [object, ...],\r\n      \"_count_keys\": null | [object, ...],\r\n      \"_percent\": null | float,\r\n      \"_values\": null | [object, ... ],\r\n      \"_events\": null | [\r\n          {\"_source\": ... },\r\n          {\"_source\": ... },\r\n          {\"_source\": ... },\r\n          {\"_source\": ... },\r\n       ]\r\n     }, ...\r\n  }\r\n ]\r\n}\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/635908018","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-635908018","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":635908018,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNTkwODAxOA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-05-29T10:51:04Z","updated_at":"2020-05-29T10:51:04Z","author_association":"MEMBER","body":"The issue has been raised during our meeting yesterday.\r\n@jpountz pointed out that total hits might not be all that useful so another question for the group is whether we should still keep it or remove it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/635910062","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-635910062","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":635910062,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNTkxMDA2Mg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-05-29T10:56:32Z","updated_at":"2020-05-29T10:56:32Z","author_association":"MEMBER","body":"> consistency between keys and _keys. we should pick one. Should everything have a leading underscore? That seems consistent with other APIs?\r\n\r\nThe convention has been to use `_` as a namespace for internal fields within a document. That is fields that are not set by the user but potentially can be seen by them.\r\n\r\nOutside an actual _user_ json document, using `_` doesn't serve any functionality and impacts the response readability.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/635911182","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-635911182","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":635911182,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNTkxMTE4Mg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-05-29T10:59:33Z","updated_at":"2020-05-29T11:06:28Z","author_association":"MEMBER","body":"> total_results will be all of the results; total_events is the sum of all sequence lengths\r\n\r\ntotal hits in ES currently means all the documents that were matched and by default it is not exact. Do I understand correctly that you are proposing adding two counters:\r\n- one for results - essentially all results (whether we're talking about events/joins/events)\r\n- one for events - all the matches (potentially within sequences/joins)\r\n\r\nWhat about aggregations like count? What should the totals be there?\r\n\r\n> should we remove a notion of total_hits when it's not relevant? it's nontrivial what it means for sequences/joins and is harder to estimate\r\n\r\nI'm tempted to say yes because it seems to be already included in the other totals that we add.\r\n\r\n> That will add a _count to each result. But I don't think to each event in each result. Would you then want to capture the count key and the join key?\r\n\r\nI'm not familiar with `unique_count` - what does it return currently. Since it's an aggregation, I would have expected only the count to be returned but it seems the unique values are returned as well.\r\nProbably that means we'll have to come up with a dedicated document for it, potentially breaking the count, key and other fields per entry...\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/637399052","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-637399052","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":637399052,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNzM5OTA1Mg==","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2020-06-02T08:59:51Z","updated_at":"2020-06-02T08:59:51Z","author_association":"MEMBER","body":"Prefacing this with that my understanding of EQL is extremely limited. \r\n\r\nI am worried about shoehorning everything in to `results` \r\n\r\nAs it is now conceptually there is: \r\n\r\n`results: EventResult[]`\r\n\r\n`results: EventResultWithKeys[]`\r\n\r\nWhere `EventResultsWithKeys` has another `result` array with different `\"shapes`\" \r\n\r\n`join` `sequence` return the same hit shape but `count` queries return values. \r\n\r\nIn types this would mean abstracting to interfaces and figuring out at run time what concrete implementation to deserialize too but the user would still only be  exposed to the interfaces and would need to do runtime inspection of these. \r\n\r\nTo that end I'd very strongly prefer the initial `events` and `sequences` and `counts` on `hits`. It would allow for these three to evolve independently too. \r\n\r\nThe `type` hint would be a welcome addition to dispatch.\r\n\r\nI can write a much larger reply on the implications to the exposed types to the user but tried to keep the initial reply to a bare minimum. Let me know if I need to expand my concerns.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/638022094","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-638022094","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":638022094,"node_id":"MDEyOklzc3VlQ29tbWVudDYzODAyMjA5NA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-06-03T07:43:58Z","updated_at":"2020-06-03T07:43:58Z","author_association":"MEMBER","body":"Thanks for the feedback @Mpdreamz.\r\n\r\n> In types this would mean abstracting to interfaces and figuring out at run time what concrete implementation to deserialize too but the user would still only be exposed to the interfaces and would need to do runtime inspection of these.\r\n\r\nCan you expand on that and how it is different from having dedicated json definitions for each result? Shouldn't the `type` presence make it possible to return the appropriate interface implementation?\r\n\r\n>As it is now conceptually there is:\r\n>\r\n>results: EventResult[]\r\n>\r\n>results: EventResultWithKeys[]\r\n\r\n> Where EventResultsWithKeys has another result array with different \"shapes\"\r\n\r\nA client can provide more tighter constrains than the json one which is fairly loose.\r\n\r\nTaking a step back:\r\nAn event query returns a list of events -> `event[]`\r\nA sequence/join returns a list of lists of events with potential keys -> `[<event[],keys>]`\r\nSome aggregations like `count` are out-of-band and are similar to event queries expect their data is synthetic, they don't return a `_source` but rather dedicated fields.\r\n\r\nThe objective is to formalize these into one response. Which essentially boils down to everything returns a list of lists.\r\n\r\nAn event query return `[event[1]]`, sequence/join return `[<event[],keys>]` and some aggs `[<synthetic_event[1]]`.\r\nThere are different \"shapes\" for each event but why is that an issue? \r\nDifferent hierarchies would force the same outcome - the upside of the proposed approach is that iterating over the data (list of lists) is common across different the different `result` types.\r\n\r\nThat is to say, would you be able to have different `events`/`sequences` and `counts` with this approach as well?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/638048887","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-638048887","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":638048887,"node_id":"MDEyOklzc3VlQ29tbWVudDYzODA0ODg4Nw==","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2020-06-03T08:35:48Z","updated_at":"2020-06-03T08:35:48Z","author_association":"MEMBER","body":"As it stands this warrants the following in pseudo code:\r\n\r\n```ts\r\n\r\ntype EqlSearchResponse<TSource> {\r\n   hits: Hits;\r\n}\r\n\r\ntype Hits {\r\n    results: ResultBase[]\r\n}\r\n\r\ntype ResultBase {}\r\n\r\ntype Event<TSource> inherits ResultBase {\r\n     results: EventResult<TSource>[]\r\n}\r\n\r\ntype KeyedEvent<TSource> inherits Event<TSource> {\r\n    keys: string[]\r\n}\r\n\r\ntype SyntheticEvent inherits ResultBase {\r\n    _count: int?; //etc\r\n}\r\n\r\ntype EventResult<TSource> {\r\n    _index: string; //etc\r\n    _source: TSource;\r\n}\r\n```\r\n\r\nWe can only present the lowest common denominator back to the user `ResultBase` which would require run time down casting to the proper subclass. The generic for `TSource` is also not persisted down. \r\n\r\nIf it was modeled as separate properties:\r\n\r\n```ts\r\ntype EqlSearchResponse<TSource> {\r\n   hits: Hits<TSource>;\r\n}\r\n\r\ntype Hits<TSource> {\r\n    events: Events<TSource>[];\r\n    sequences: KeyedEevnts<TSource>[]\r\n    counts: SyntheticEvent[]\r\n}\r\n\r\ntype Event<TSource> {\r\n     results: EventResult<TSource>[]\r\n}\r\n\r\ntype KeyedEvent<TSource> inherits Event<TSource> {\r\n    keys: string[]\r\n}\r\n\r\ntype SyntheticEvent {\r\n    _count: int?; //etc\r\n}\r\n\r\ntype EventResult<TSource> {\r\n    _index: string; //etc\r\n    _source: TSource;\r\n}\r\n```\r\n\r\nHere the user can use `response.hits.type` to choose the right property to itterate over and that property can hold concrete types without doing runtime introspection on the actual types. \r\n\r\n\r\n\r\nIt is entirely possible to read `type` and present back a discriminated union/algabraic type to the user: \r\n\r\n```ts\r\n\r\ntype Hits<TSource> {\r\n    results: (EventSource<TSource> | KeyedEvent<TSource> | SyntheticEvent)[]\r\n}\r\n```\r\n\r\n\r\nbut this poses several problems:\r\n\r\n* Not all ecosystems provide good OOTB support for those (I wish they all did)\r\n   * Even in those that do some are very weak and for intersecting types `KeyedEvent<TSource> might be treated as `EventSource` if the inspection happens in the wrong order.\r\n* It dictates a model where there needs to be a stateful deserializer which makes it hard to later introduce POJO based generation of this part of the API.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/639431308","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-639431308","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":639431308,"node_id":"MDEyOklzc3VlQ29tbWVudDYzOTQzMTMwOA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-06-05T11:45:08Z","updated_at":"2020-06-05T11:45:08Z","author_association":"MEMBER","body":"I had a discussion with @Mpdreamz which I'll try to summarize below - Martijn please check whether this is accurate:\r\n\r\n1. ### `type`\r\nspecifying the type of result (`type`) looks useful for serialization and received positive feedback. Thus there's consensus in adding that to response moving forward.\r\nHowever due to the JSON spec, there are no guarantees on field ordering and thus, by itself, cannot help the serializer find out the payload which would have to be buffered in order to properly interpret it.\r\n\r\n2. ### Desire to have 1:1 mapping\r\n@Mpdreamz pointed out that being able to map constructs in the response to entities allows the generation of high-level clients driven by the API.\r\nHaving dedicated elements `sequence` , `join`, etc.. makes the response type explicit and thus simplifies SerDes.\r\n\r\n3. ### the aggregation blocks still in-flux\r\n\r\nThe aggregations in EQL return customized responses - currently these are exposed as `synthetic` documents with a set of predefined fields. Take [`count`](https://eql.readthedocs.io/en/0.8/query-guide/pipes.html#count):\r\n\r\n```\r\n\"_count\": 40,\r\n\"_keys\": [...],\r\n\"_percent\": 0.4223148165093,\r\n\"_values\": [...]\r\n```\r\n\r\nThe other aggregation which is somewhat similar is [`unique_count`](https://eql.readthedocs.io/en/0.8/query-guide/pipes.html#unique-count) which is a combination between `count` and `unique` - that is, it not only filters things (so duplicates are not returned) but also adds the group count to the result (in SQL that would be the equivalent of `SELECT g, COUNT(*) FROM x GROUP BY g`).\r\n\r\nIt is likely that more aggregations will be added in the future - using a dedicated blog for them can be expensive from a backwards compatibility POV.\r\nIn other words, we can either be loose and essentially put results in a `bag`:\r\n```\r\n\"aggregation\" : [{ ... whatever fields we want }]\r\n```\r\nvs be explicit\r\n```\r\n\"agg1\" : [{ \"fieldA_agg1\" : \"\", \"fieldB_agg1\" : \"\", ... }]\r\n```\r\n\r\nBeing loose is misleading since a new agg can return different fields than those expected while explicit can break existing clients by introducing an unknown element.\r\n\r\n\r\n ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/640667974","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-640667974","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":640667974,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MDY2Nzk3NA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-06-08T14:35:26Z","updated_at":"2020-06-08T14:39:33Z","author_association":"MEMBER","body":"A lot of this discussion has been about the strictness of a good type system and the role that plays in the parser, but I think that sidesteps the initial concern raised during the EAH talk: can (and should) we use a generic result format, so that we can be more future-proof to other response types that don't exist yet? Would it result in simpler or more complex parsing code?\r\n\r\nI still don't see the problem with having a generic \"result\" object, where you just return an array of results. I don't understand what gain by having Sequence or Join objects vs just a generic result.\r\n\r\nI think constructing our interface via composition makes more sense than inheritance, since that's analogous to how we perform queries. The generic `Result` below has enough information to express all of these. \r\n* `<anything> | count`\r\n* `<anything> | count X`\r\n* `sequence`\r\n* `join`\r\n* `event where ...`\r\n* `event where ... | unique_count X`\r\n* `sequence ... | unique_count X`\r\n* `join | unique_count X`\r\n\r\n\r\n```ts\r\nclass Result {\r\n   _count: int?;\r\n   _percent: float?;\r\n   _count_keys: object[]?;\r\n   _join_keys: object[]?;\r\n   _type: string; // \"sequence\"/ \"join\" / \"event\"\r\n   _events: Event[]?;\r\n}\r\n\r\nclass Event {\r\n  _source: object;\r\n  // ...\r\n}\r\n```\r\n\r\nWe could also consolidate the `_count`, `_percent` and `_count_keys` fields separately if that makes more sense.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/642619339","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-642619339","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":642619339,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MjYxOTMzOQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-06-11T12:44:32Z","updated_at":"2020-06-11T12:44:32Z","author_association":"MEMBER","body":"If I understand your proposal correctly, you are suggesting to:\r\n- make the event list optional\r\n- promote non-source fields up top, such as join keys and any potential aggregation fields\r\n- have a `type` on each result\r\n\r\nThat to me is a step backwards since the response is even loser and reduces the data uniformity, that one entity to iterate on (the events) and encapsulation as the `Result` can have any possible combination of `_count`, `_join_keys` etc...\r\n\r\nI think we should have as little variability as possible in the response hence the preference to push that into `Event` (which already has `_source`  open-ended). With your approach, `Result` starts having a variable form as well due to a large number of optional fields.\r\nWe end up with fairly different responses under the same name: with fields but no events, events and no fields or both.\r\nI find that hard to interpret vs there's always a list of events.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/645213165","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-645213165","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":645213165,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NTIxMzE2NQ==","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2020-06-17T07:48:57Z","updated_at":"2020-06-17T07:51:02Z","author_association":"MEMBER","body":"@costin that's a fair summation 👍 \r\n\r\nA property (P1) should hold a single object with fixed keys `A`. If `P` sometimes returns `B` and `C` as well its more useful to introduce separate properties `P2` and `P3` for those. I am not the EQL domain expert and so I do not know if `A` `B` and `C` can be condensed to a meaningful single `D` representation. I'll leave that in yours and @rw-access (and everyone elses) capable hands :smile:. I just want to leave saying that if `D` ends up being a bag that can have many different properties its not a good abstraction. \r\n\r\nIn this particular case `D` always has to be open (generic) due to it holding a `_source` which the user needs to tell us what type it is. So having a `D<SourceType>` where `SourceType` is only exposed in some cases already seems like a smell to me. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/688977701","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-688977701","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":688977701,"node_id":"MDEyOklzc3VlQ29tbWVudDY4ODk3NzcwMQ==","user":{"login":"marshallmain","id":55718608,"node_id":"MDQ6VXNlcjU1NzE4NjA4","avatar_url":"https://avatars2.githubusercontent.com/u/55718608?v=4","gravatar_id":"","url":"https://api.github.com/users/marshallmain","html_url":"https://github.com/marshallmain","followers_url":"https://api.github.com/users/marshallmain/followers","following_url":"https://api.github.com/users/marshallmain/following{/other_user}","gists_url":"https://api.github.com/users/marshallmain/gists{/gist_id}","starred_url":"https://api.github.com/users/marshallmain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshallmain/subscriptions","organizations_url":"https://api.github.com/users/marshallmain/orgs","repos_url":"https://api.github.com/users/marshallmain/repos","events_url":"https://api.github.com/users/marshallmain/events{/privacy}","received_events_url":"https://api.github.com/users/marshallmain/received_events","type":"User","site_admin":false},"created_at":"2020-09-08T16:03:13Z","updated_at":"2020-09-08T16:03:13Z","author_association":"NONE","body":"One other adjustment that would be useful to have as an API user would be some representation of the field names for each join key in addition to the values. Currently if you do `sequence by host.id` then the `host.id` of the sequence comes back in the join_keys, but we have to either parse some of the original query or write extra logic to know which field the join was done on. I understand the general join case is more complex than `sequence by` since each sequence event could be using a different expression for the join but hopefully we can find a representation that provides additional details about the join in the response.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/688997306","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-688997306","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":688997306,"node_id":"MDEyOklzc3VlQ29tbWVudDY4ODk5NzMwNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-08T16:35:10Z","updated_at":"2020-09-08T16:35:10Z","author_association":"MEMBER","body":">  I understand the general join case is more complex than sequence by since each sequence event could be using a different expression for the join but hopefully we can find a representation that provides additional details about the join in the response.\r\n\r\nIf I understand correctly, you're preference would be for the current response, with dedicated formats per query and in case of `sequence`, `join` to enhance the key support to include their expression names.\r\nThe main issue that I see is dealing with keys at query level as you pointed out.\r\n\r\nTake the following sequence with declares a top-level join key (`t`) and a secondary key, at query-level key (`a`) and (`b`).\r\n\r\n```\r\n  sequence by t\r\n   [queryA] by a\r\n   [queryB] by b\r\n```\r\n\r\nThis currently produces the following response structure:\r\n \r\n```\r\n{\r\n    \"took\" : 5,\r\n    \"timed_out\" : false,\r\n    \"hits\" : {\r\n        \"total\" : {\r\n        },\r\n         \"sequences\" : [\r\n            {\r\n                \"keys\": [ \"firstKey\", \"secondKey\" ],\r\n                \"events\":[ ... ]\r\n            }\r\n        ]\r\n}\r\n```\r\n\r\nSince the key names are the same for the sequence, it doesn't make sense to add them for each result, however we could add the option to describe the sequence.\r\n\r\n \r\n```\r\n{\r\n    \"took\" : 5,\r\n    \"timed_out\" : false,\r\n    \"hits\" : {\r\n        \"total\" : {\r\n        },\r\n         \"sequences\" : [\r\n            {\r\n                \"keyNames\" : [ [\"t\", \"a\"], [\"t\", \"b\"]],\r\n                \"keys\": [ \"firstKey\", \"secondKey\" ],\r\n                \"events\":[ ... ]\r\n            }\r\n        ]\r\n}\r\n```\r\n\r\nThat is add a separate field which would contain an array of arrays, that is for each declared query, the list of declared key names as declared in the query.\r\nWould that work?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/689037969","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-689037969","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":689037969,"node_id":"MDEyOklzc3VlQ29tbWVudDY4OTAzNzk2OQ==","user":{"login":"marshallmain","id":55718608,"node_id":"MDQ6VXNlcjU1NzE4NjA4","avatar_url":"https://avatars2.githubusercontent.com/u/55718608?v=4","gravatar_id":"","url":"https://api.github.com/users/marshallmain","html_url":"https://github.com/marshallmain","followers_url":"https://api.github.com/users/marshallmain/followers","following_url":"https://api.github.com/users/marshallmain/following{/other_user}","gists_url":"https://api.github.com/users/marshallmain/gists{/gist_id}","starred_url":"https://api.github.com/users/marshallmain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshallmain/subscriptions","organizations_url":"https://api.github.com/users/marshallmain/orgs","repos_url":"https://api.github.com/users/marshallmain/repos","events_url":"https://api.github.com/users/marshallmain/events{/privacy}","received_events_url":"https://api.github.com/users/marshallmain/received_events","type":"User","site_admin":false},"created_at":"2020-09-08T17:50:34Z","updated_at":"2020-09-08T17:50:34Z","author_association":"NONE","body":"I think that would work. Could we even take it a step further and separate out the top level keys from the query-level keys, like\r\n```\r\n{\r\n    \"took\" : 5,\r\n    \"timed_out\" : false,\r\n    \"hits\" : {\r\n        \"total\" : {\r\n        },\r\n         \"sequences\" : [\r\n            {\r\n                \"topLevelKeys\": {\"t\": \"firstKey\"},\r\n                \"queryKeyNames\" : [ [\"a\"], [\"b\"]],\r\n                \"queryKeys\": [ \"secondKey\" ],\r\n                \"events\":[ ... ]\r\n            }\r\n        ]\r\n}\r\n```\r\nThe advantage here as an API user is I don't have to examine the key names to determine which ones are common across all sub-arrays in `keyNames`.\r\n\r\nFor context, the reason I'm particularly interested in the top level keys is that when generating an alert document based on a sequence match, I want to populate the alert with extra information about the sequence. If there's a specific field (or fields) that is the same in every event, it makes sense to include that field in the new generated alert document as well. For example I think `host.id` would be a common field to use `sequence by` with","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/689104922","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-689104922","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":689104922,"node_id":"MDEyOklzc3VlQ29tbWVudDY4OTEwNDkyMg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-08T20:00:31Z","updated_at":"2020-09-08T20:00:31Z","author_association":"MEMBER","body":"> Could we even take it a step further and separate out the top level keys from the query-level keys\r\n\r\nI don't think so since top level keys are just syntactic sugar:\r\n```\r\nsequence by x\r\n [queryA]\r\n [queryB]\r\n```\r\nis the same as\r\n```\r\nsequence\r\n [queryA] by x\r\n [queryB] by x\r\n```\r\n\r\nFurther more top-level keys don't cover all cases. For example, say you have two keys, the first per-query, the second one shared. One cannot declare the latter as a top-level key since that would change the joining order (the match should occur on the first then second key not vice versa):\r\n\r\n```\r\nsequence \r\n [queryA] by y, x\r\n [queryB] by z, x\r\n```\r\nis **not** the same as\r\n\r\n```\r\nsequence by x\r\n [queryA] by y\r\n [queryB] by z\r\n```\r\n\r\nEssentially, the only reliable way to find a common key across queries is to look at the key names and compare their value and position; the keys with the same name in the same position are the same since EQL does not support aliasing.\r\n\r\nTo wit, using the example I gave in my previous post:\r\n```\r\n \"keyNames\" : [ [\"t\", \"a\"], [\"t\", \"b\"]],\r\n```\r\n\r\nThere are 2 queries, both with 2 keys with the first one in-common (`t`) for both queries. \r\nThis is true for the following queries:\r\n\r\n```\r\n sequence by t\r\n  [queryA] by a\r\n  [queryB] by b\r\n```\r\nand \r\n```\r\n sequence\r\n  [queryA] by t, a\r\n  [queryB] by t, b\r\n```\r\n\r\nThey are equivalent and both have a key in common though only one uses the top-level declaration.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/700168964","html_url":"https://github.com/elastic/elasticsearch/issues/57036#issuecomment-700168964","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/57036","id":700168964,"node_id":"MDEyOklzc3VlQ29tbWVudDcwMDE2ODk2NA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T17:16:05Z","updated_at":"2020-09-28T17:16:05Z","author_association":"MEMBER","body":"The proposal in this ticket did not get enough support so I'll be closing the ticket without any changes to the existing request/response format.\r\nEvent the improvements discussed with @marshallmain turned out to be non-essential as the information already exists and the sequence structure itself needs to be parsed anyway.\r\n\r\nThanks for the feedback everyone.","performed_via_github_app":null}]