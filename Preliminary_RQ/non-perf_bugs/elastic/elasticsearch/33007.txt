{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/33007","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33007/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33007/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33007/events","html_url":"https://github.com/elastic/elasticsearch/issues/33007","id":352368662,"node_id":"MDU6SXNzdWUzNTIzNjg2NjI=","number":33007,"title":"[CCR] Auto follow patterns","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"labels":[{"id":912824565,"node_id":"MDU6TGFiZWw5MTI4MjQ1NjU=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/CCR","name":":Distributed/CCR","color":"0e8a16","default":false,"description":"Issues around the Cross Cluster State Replication features"},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"assignees":[{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2018-08-21T03:07:07Z","updated_at":"2018-12-24T09:32:58Z","closed_at":"2018-12-24T09:32:58Z","author_association":"MEMBER","active_lock_reason":null,"body":"## Tasks\r\n\r\n- [x] Implement auto follow patterns feature as described (minus tasks below). #33118\r\n- [x] Add license checks to to put and delete apis. Also add a license check to `AutoFollowCoordinator` to not try to auto follow if license is expired. Otherwise we fail when follow api gets invoked and then errors get messy, while it does not have to be that way. (@jasontedor) (yes) #33496\r\n- [x] Ensure that auto follow patterns work correctly with security. Security headers will need to be stored in `AutoFollowMetadata`. (similar to how headers are stored is shard follow persistent task) (@martijnvg) (yes)\r\n- [x] Add a component that purges already follow index UUIDS from the `AutoFollowMetadata` of leader indices that have been removed. (no) #36408\r\n- [x] Consider this situation: the `AutoFollowCoordinator` follows a leader index, but failed to update the `AutoFollowMetadata` about the fact it has followed that leader. Then in order to avoid the `AutoFollowCoordinator` to repeatedly trying to follow this index, there should be an additional check that verifies whether there is a follow index that has that leader index in its custom index metadata and if so then `AutoFollowCoordinator` should just update the `followedLeaderIndexUUIDs` entry in the `AutoFollowMetadata` instead of trying to follow that index first and then update the `followedLeaderIndexUUIDs` entry. (no) #36540\r\n- [x] Add get auto follow patterns api. (@martijnvg) (yes)\r\n- [x] The component should keep track of statistics such as last_checked_imd_version and followed indices. These stats can then be exposed via a auto-follow stats api (GET /_ccr/auto-follow/_stats) (@martijnvg) (yes) #33684\r\n- [x] The component should fetch leader cluster states via long polling instead of periodic polling as is described here. We could add `index_metadata_version` parameter to the cluster state api, that would make the cluster state api only return if cluster state’s index metadata version is higher than is specified in this parameter. (no) #36264\r\n- [x] Improve the auto follow stats api to include the time since the auto follow coordinator last fetched cluster state of all of the remote clusters. This is useful to see whether the auto follow coordinator is alive and functional. #36542\r\n- [x] Fail once if a leader index that matches an auto follow pattern cannot be followed, because soft deletes are not enabled. Currently those indices are silently ignored and that is confusing, because if a user expects a specific leader index to be followed. We need to ensure we fail once and this failure is reported in the auto follow stats. Currently if auto following fails then the auto follower will retry to follow on each run and for this kind of error that does not make sense, because if an index doesn't have soft deletes enabled then that will never change (it is controlled via a final setting). #36886\r\n\r\n## Description\r\n\r\nAuto Following Patterns is a cross cluster replication feature that keeps track whether in the leader cluster indices are being created with names that match with a specific pattern and if so automatically let the follower cluster follow these newly created indices.\r\n\r\nThe auto follow patterns are managed via a put auto follow api:\r\n\r\n```\r\nPUT /_ccr/_autofollow/{{remote_cluster}}\r\n{\r\n   \"leader_index_pattern\": [\"logs-*\"], \r\n   \"follow_index_pattern\": \"{{leader_index}}-copy\",\r\n   \"max_concurrent_read_batches\": 2\r\n   ... // other optional parameters\r\n}\r\n```\r\n\r\nThe follow index name used defaults the the leader index name. In certain cases (e.g. follow an index in the same cluster) this is unwanted and the `follow_index_pattern` parameter can be used to pick a different name.\r\n\r\nThis api will also support other parameters (`max_concurrent_read_batches` etc.) that the create_and_follow api supports. These parameters will be used instead of the defaults when the auto follow feature is invoking the create_and_follow api.\r\n\r\nand delete auto follow api:\r\n\r\n```\r\nDELETE /_ccr/_autofollow/{{remote_cluster_alias}}\r\n```\r\n\r\nThe auto follow patterns are stored as custom metadata in the cluster state.\r\n\r\nThe follow cluster should have a component that periodically checks the cluster states of multiple leader clusters (depends on the number of remote cluster aliases being followed) whether new indices have been created that match with patterns specified in the put autofollow api. If that is the case then this component invokes the create_and_follow api for each matching new index. The follow cluster will use the cluster state api to fetch cluster states from leader clusters. How often this component checks remote clusters for newly created indices dependents on the a poll interval setting (‘ccr.auto_follow.poll_interval’).\r\n\r\nThe component needs to keep track for what indices it already invoked the create_and_follow api for. The UUID of these indices should also be saved in the auto follow custom metadata. If a new a new pattern is added then the component should not follow existing indices matching this pattern, only indices created after this pattern was added to the auto_follow_patterns setting. This is achieved by including the index UUID of already created indices to the autofollow custom metadata (without actually following these indices). The component also need to keep track of indices in leader cluster that were auto followed and then removed. These index uuids need to be pruned in the custom index metadata.\r\n\r\nThe component can be implemented by a simple task that runs on the elected master node. In the background it schedules a task (ThreadPool#schedule(...)) that checks whether new leader indices need to be followed in remote clusters.\r\n\r\nRelates to #30086 -","closed_by":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"performed_via_github_app":null}