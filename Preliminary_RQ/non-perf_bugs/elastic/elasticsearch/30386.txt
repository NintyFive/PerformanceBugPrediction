{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386/events","html_url":"https://github.com/elastic/elasticsearch/issues/30386","id":320250012,"node_id":"MDU6SXNzdWUzMjAyNTAwMTI=","number":30386,"title":"SQL: SYS TYPES adjustments for ODBC","user":{"login":"bpintea","id":1562801,"node_id":"MDQ6VXNlcjE1NjI4MDE=","avatar_url":"https://avatars3.githubusercontent.com/u/1562801?v=4","gravatar_id":"","url":"https://api.github.com/users/bpintea","html_url":"https://github.com/bpintea","followers_url":"https://api.github.com/users/bpintea/followers","following_url":"https://api.github.com/users/bpintea/following{/other_user}","gists_url":"https://api.github.com/users/bpintea/gists{/gist_id}","starred_url":"https://api.github.com/users/bpintea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bpintea/subscriptions","organizations_url":"https://api.github.com/users/bpintea/orgs","repos_url":"https://api.github.com/users/bpintea/repos","events_url":"https://api.github.com/users/bpintea/events{/privacy}","received_events_url":"https://api.github.com/users/bpintea/received_events","type":"User","site_admin":false},"labels":[{"id":912794284,"node_id":"MDU6TGFiZWw5MTI3OTQyODQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Query%20Languages/SQL","name":":Query Languages/SQL","color":"0e8a16","default":false,"description":"SQL querying"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-05-04T12:04:38Z","updated_at":"2018-05-11T07:17:02Z","closed_at":"2018-05-11T07:17:02Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"<!-- Feature request -->\r\n**Elasticsearch version**: master @ 65dbc17510\r\n\r\nThe ODBC driver uses [now](https://github.com/elastic/elasticsearch-sql-odbc/pull/5) the results return by `SYS TYPES` query to answer app's inquiries on column types. The following is a list of proposed changes that would be needed to stay inline with the [ODBC spec](https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqlgettypeinfo-function): \r\n* `PRECISION` and `AUTO_INCREMENT` columns:\r\n  These have been renamed in ODBC 3.x to `COLUMN_SIZE` (just like already returned by `SYS COLUMNS`) and `AUTO_UNIQUE_VALUE` respectively. The plugin currently returns the JDBC nomenclature. Not positive what we should do here: in ODBC no application should ever look at the column names, because ODBC specifies what should be returned in each column by order, not name. If this is the case also for JDBC, I'd recommend renaming to the ODBC standard.\r\n* `DATE` data type:\r\n  * This type is currently assigned the value **93** in column `DATA_TYPE`. In both ODBC and JDBC specs, this value corresponds to a TIMESTAMP type (`SQL_TYPE_TIMESTAMP`). Moreover, ES/SQL does return a timestamp representation of it (ISO8601). So I'm not sure what we want to have here, but I believe we should either correct the value to **91** (`SQL_TYPE_DATE`) _or_ rename the type to 'TIMESTAMP'.\r\n  * The value for column `PRECISION`(/`COLUMN_SIZE`) for this type should be **20** (not 19). This is because this indicates the “number of characters in the character representation” and len(\"1953-09-02T00:00:00Z\")==20 (interestingly, `SYS COLUMNS` does return value 20 for `COLUMN_SIZE` column already). **Note**: this might need to be adjusted to 24, if #30002 is implemented; alternatively, if we choose not to implement that, we need to make sure we always return the date/time representation without the milliseconds component.\r\n* `SQL_DATA_TYPE` column: \r\n  The values in this column are always **0**. The JDBC doesn't make use of this column (\"unused\"). The ODBC spec mandates that “[t]his column is the same as the DATA_TYPE column, except for interval and datetime data types.”\r\n  Now, we don't have interval types, so that's fine. For the `DATE` data type, this column should have the value **9** (ODBC's `SQL_DATETIME` value) and column SQL_DATETIME_SUB should have either value **3** (ODBC's `SQL_CODE_TIMESTAMP` value) or **1** (ODBC's `SQL_CODE_DATE` value), according to the decision for the point above. Codes are concisely explained [here](https://docs.microsoft.com/en-us/sql/relational-databases/native-client-odbc-date-time/metadata-catalog) and the values lifted from the [specs](https://github.com/Microsoft/ODBC-Specification/blob/master/Windows/inc/sql.h).\r\n* `SQL_DATETIME_SUB` column:\r\n  This is currently `null`. The JDBC doesn't make use of the column (\"unused\"). For ODBC, it should be **0** for all types, except for DATE/TIMESTAMP where it should **3** or **1** (as per above).\r\n* `AUTO_INCREMENT`(/`AUTO_UNIQUE_VALUE`) column:\r\n  The column is currently always `null`. However, `SYS COLUMNS` returns `NO` in the equivalent `IS_AUTOINCREMENT` column, instead of a corresponding empty string for the unknown/not_applicable case (as `null` indicates). I believe we should synchronise these two columns to return  either `null`/\"\" or preferably `false`/`NO`.\r\n* `MINIMUM_SCALE` and `MAXIMUM_SCALE` columns:\r\n  The values here are always `null`, while they [should be](https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/decimal-digits) **0** for the exact numeric types (the ints); also if `DATE` is transitioned fully to `TIMESTAMP`, it's corresponding values should be **0** or **3**, depending on how #30002 is implemented. \r\n* `PRECISION` column:\r\n  For numeric types, this column should contain “the maximum number of digits used by the data type”. The values currently returned match the [ODBC spec](https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/column-size) for all the integral types and for the `FLOAT` data type (**7**). For `DOUBLE`, it is 1 higher (**16** returned vs 15 in the spec) and `HALF_` and `SCALED_FLOAT` have no direct equivalent since their data type (**6**) is reserved for variable precision floats. So I just wanted to make sure that the non-aligned values are accurate (which is possible).\r\n","closed_by":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"performed_via_github_app":null}