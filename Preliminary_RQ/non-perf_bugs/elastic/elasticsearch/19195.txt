{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/19195","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19195/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19195/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19195/events","html_url":"https://github.com/elastic/elasticsearch/issues/19195","id":163233979,"node_id":"MDU6SXNzdWUxNjMyMzM5Nzk=","number":19195,"title":" Add ranking evaluation API to Elasticsearch","user":{"login":"MaineC","id":70953,"node_id":"MDQ6VXNlcjcwOTUz","avatar_url":"https://avatars3.githubusercontent.com/u/70953?v=4","gravatar_id":"","url":"https://api.github.com/users/MaineC","html_url":"https://github.com/MaineC","followers_url":"https://api.github.com/users/MaineC/followers","following_url":"https://api.github.com/users/MaineC/following{/other_user}","gists_url":"https://api.github.com/users/MaineC/gists{/gist_id}","starred_url":"https://api.github.com/users/MaineC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MaineC/subscriptions","organizations_url":"https://api.github.com/users/MaineC/orgs","repos_url":"https://api.github.com/users/MaineC/repos","events_url":"https://api.github.com/users/MaineC/events{/privacy}","received_events_url":"https://api.github.com/users/MaineC/received_events","type":"User","site_admin":false},"labels":[{"id":418189364,"node_id":"MDU6TGFiZWw0MTgxODkzNjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Ranking","name":":Search/Ranking","color":"0e8a16","default":false,"description":"Scoring, rescoring, rank evaluation."},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2016-06-30T18:33:57Z","updated_at":"2017-12-14T15:48:02Z","closed_at":"2017-12-14T15:48:02Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"This relates to #18798.\n\nThis effort tries to help downstream users figure out whether the ranking function they are using produces good enough search result rankings.\n\nTo validate our API does the right thing we focus on annotation based quality metrics only (Prec@, MRR, ERR, see also https://en.wikipedia.org/wiki/Mean_reciprocal_rank and https://en.wikipedia.org/wiki/Learning_to_rank#Evaluation_measures).\n\nThe API takes a set of queries, each with a set of search results, and their relevance wrt. to the query. We focus on binary, maybe graded relevancy for now, it's explicitly not a goal to have very generic ratings per result.\n\nFor simplicity reasons those evaluation datasets will be supplied at query time instead of being stored and accessible in a dedicated index. Supporting to resume quality computations is something we decided to care about once users start asking for it.\n\nWhat we leave to the user:\n- Logging queries. We assume that what most users want to do with that API is to figure out how well their mapping from user supplied query and all sorts of additional information works for ranking search results. As a result logging plain elastic search queries isn't very helpful. What might be helpful is logging query parameters, like e.g. in template requests. We keep that in mind as future work.\n- Creating annotations. This step is left to the downstream user, who need to figure out how to assign some quality level to search results given a query. It's also left to the downstream user to build a query annotation UI.\n\nAs a second step we envision enabling users to automatically learn which weights to assign to query parameters.\n\nAs a third step we envision downstream users being able to monitor their ranking quality over time. This involves building a QA specific UI that helps talk to the API outlined above, maybe integrating watcher for constant monitoring.\n","closed_by":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"performed_via_github_app":null}