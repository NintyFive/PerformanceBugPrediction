{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/6109","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6109/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6109/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6109/events","html_url":"https://github.com/elastic/elasticsearch/issues/6109","id":33186375,"node_id":"MDU6SXNzdWUzMzE4NjM3NQ==","number":6109,"title":"Terms facet results retrieve and pick certain number products for top users","user":{"login":"yao23","id":3107449,"node_id":"MDQ6VXNlcjMxMDc0NDk=","avatar_url":"https://avatars1.githubusercontent.com/u/3107449?v=4","gravatar_id":"","url":"https://api.github.com/users/yao23","html_url":"https://github.com/yao23","followers_url":"https://api.github.com/users/yao23/followers","following_url":"https://api.github.com/users/yao23/following{/other_user}","gists_url":"https://api.github.com/users/yao23/gists{/gist_id}","starred_url":"https://api.github.com/users/yao23/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yao23/subscriptions","organizations_url":"https://api.github.com/users/yao23/orgs","repos_url":"https://api.github.com/users/yao23/repos","events_url":"https://api.github.com/users/yao23/events{/privacy}","received_events_url":"https://api.github.com/users/yao23/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2014-05-09T16:21:53Z","updated_at":"2014-05-12T12:00:43Z","closed_at":"2014-05-12T12:00:43Z","author_association":"NONE","active_lock_reason":null,"body":"I have a collection of products which belong to few users,  like \n\n[ \n  { id: 1, user_id: 1, description: \"blabla...\", ... }, \n  { id: 2, user_id: 2, description: \"blabla...\", ... }, \n  { id: 3, user_id: 2, description: \"blabla...\", ... }, \n  { id: 4, user_id: 3, description: \"blabla...\", ... }, \n  { id: 5, user_id: 4, description: \"blabla...\", ... }, \n  { id: 6, user_id: 2, description: \"blabla...\", ... }, \n  { id: 7, user_id: 3, description: \"blabla...\", ... }, \n  { id: 8, user_id: 4, description: \"blabla...\", ... }, \n  { id: 9, user_id: 2, description: \"blabla...\", ... }, \n  { id: 10, user_id: 3, description: \"blabla...\", ... }, \n  { id: 11, user_id: 4, description: \"blabla...\", ... }, \n  ... \n] \n\n(the real data has more fields, but most important ones like 1st for product id, 2nd for user id, 3rd for product description.) \n\nI'd like to retrieve 2 products for top 3 users whose products have highest matching score (matching condition is description includes \"fashion\" and some other keywords, in this case just use \"fashion\" as example) : \n\n[ \n  { id: 2, user_id: '2', description: \"blabla...\", ..., _score: 100}, \n  { id: 3, user_id: '2', description: \"blabla...\", ..., _score: 95}, \n  { id: 4, user_id: '3', description: \"blabla...\", ..., _score: 90}, \n  { id: 5, user_id: '4', description: \"blabla...\", ..., _score: 80}, \n  { id: 7, user_id: '3', description: \"blabla...\", ..., _score: 70}, \n  { id: 8, user_id: '4', description: \"blabla...\", ..., _score: 65}, \n  ... \n] \n\nI have 3 possible ways to try: \n\n(1) use term facet to get unique user_id in nested query, then use them for the user id range of outside query which focus on match description with keywords like \"fashion\". \n\nI don't know how to implement it in ES (stuck in facet terms iteration and construct user_id range with subquery with facet), try in sql like: \n\nselect id, user_id, description \nfrom product \nwhere user_id in ( \n  select distinct user_id \n  from product \n  limit 3) \norder by _score \nlimit 6 \n/\\* 6  = 2 \\* 3 */ \n\nBut it cannot guarantee top 6 products coming from 3 different user. \n\nAlso, according to the following two links, it seems facet terms specific information iteration feature has not been implemented in ES so far. \nhttp://elasticsearch-users.115913.n3.nabble.com/Terms-stats-facet-Additional-information-td4035199.html\n\nhttps://github.com/elasticsearch/elasticsearch/issues/256\n\n(2)  query with term filed in description matched with keywords like \"fashion\", at same time do statistics for each user_id with aggregation and limit the count to 2, then pick top 6 products with highest matching score. \n\nI still don't know how to implement in ES. \n\n(3) use brute force with multiple queries until find top 3 users, each one has 2 products with highest matching scores. \n\nI mean use a hash map, key is user_id, value is how many times it appears. Query with matching keywords first, then iterate immediate results and check hash map, if value is less than 2, add to final result product list, otherwise skip it. \n\nPlease let me know if you can figure it out in the above 1st or 2nd way. \n\nAppreciate in advance. \nYao\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}