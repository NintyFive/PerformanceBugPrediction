[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/484911529","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-484911529","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":484911529,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDkxMTUyOQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2019-04-19T14:25:08Z","updated_at":"2019-04-19T14:25:08Z","author_association":"MEMBER","body":"@Mekk Thanks for reporting this issue. I agree that the error message should be improved, along the line of `field [call.component] doesn't except an empty object`. \r\n\r\nOn top of that like you describe a `ignore_malformed` would be help in this case too. Currently only number based fields support this, but looks like the support for this should be extended to keyword and text field types too. In the case that the field mapping doesn't allow malformed, then at least an improved error message should be returned.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/484911651","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-484911651","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":484911651,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDkxMTY1MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-04-19T14:25:22Z","updated_at":"2019-04-19T14:25:22Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/485019103","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-485019103","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":485019103,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NTAxOTEwMw==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2019-04-19T21:31:01Z","updated_at":"2019-04-19T23:05:18Z","author_association":"MEMBER","body":"As a note, this issue is related to #12366, where we decided to add support for `ignore_malformed` to other field types, and also to make sure `ignore_malformed` handles object data. It would be good to use the other issue to track these enhancements.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/487949119","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-487949119","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":487949119,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4Nzk0OTExOQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2019-04-30T13:20:15Z","updated_at":"2019-04-30T13:25:15Z","author_association":"MEMBER","body":"This issue would be fixed by #12366 but in the mean time it would be good to improve the error message here especially as the error message would still be relevant when `ignore_malformed = false`. We will leave this open to fix the error message part of this","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/488129666","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-488129666","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":488129666,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4ODEyOTY2Ng==","user":{"login":"Mekk","id":161873,"node_id":"MDQ6VXNlcjE2MTg3Mw==","avatar_url":"https://avatars2.githubusercontent.com/u/161873?v=4","gravatar_id":"","url":"https://api.github.com/users/Mekk","html_url":"https://github.com/Mekk","followers_url":"https://api.github.com/users/Mekk/followers","following_url":"https://api.github.com/users/Mekk/following{/other_user}","gists_url":"https://api.github.com/users/Mekk/gists{/gist_id}","starred_url":"https://api.github.com/users/Mekk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mekk/subscriptions","organizations_url":"https://api.github.com/users/Mekk/orgs","repos_url":"https://api.github.com/users/Mekk/repos","events_url":"https://api.github.com/users/Mekk/events{/privacy}","received_events_url":"https://api.github.com/users/Mekk/received_events","type":"User","site_admin":false},"created_at":"2019-04-30T21:56:22Z","updated_at":"2019-04-30T21:56:22Z","author_association":"NONE","body":"Regarding the fix of error message: PLEASE QUOTE THE PROBLEMATIC VALUE. No matter what. Quote it. Please. Quote it. Escape if necessary, truncate if necessary, but quote it. Please.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/488132557","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-488132557","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":488132557,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4ODEzMjU1Nw==","user":{"login":"Mekk","id":161873,"node_id":"MDQ6VXNlcjE2MTg3Mw==","avatar_url":"https://avatars2.githubusercontent.com/u/161873?v=4","gravatar_id":"","url":"https://api.github.com/users/Mekk","html_url":"https://github.com/Mekk","followers_url":"https://api.github.com/users/Mekk/followers","following_url":"https://api.github.com/users/Mekk/following{/other_user}","gists_url":"https://api.github.com/users/Mekk/gists{/gist_id}","starred_url":"https://api.github.com/users/Mekk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mekk/subscriptions","organizations_url":"https://api.github.com/users/Mekk/orgs","repos_url":"https://api.github.com/users/Mekk/repos","events_url":"https://api.github.com/users/Mekk/events{/privacy}","received_events_url":"https://api.github.com/users/Mekk/received_events","type":"User","site_admin":false},"created_at":"2019-04-30T22:06:06Z","updated_at":"2019-04-30T22:06:06Z","author_association":"NONE","body":"Also it would not hurt to name the index, and mayhaps the mapping.\r\n\r\nSome suggestion for the error message:\r\n```\r\nDocument rejected due to invalid content: field [call.component] is expected to be of type [keyword] (according to the current mapping of index cdx-2019.13) but can not be converted to this type. Problematic value: '{}' (type: dict). Document id: '4188698c-2348-4c45-b364-0cd512f8126f'. See http://some.where\r\n```\r\n(and java stacktrace doesn't seem to be necessary, and linked help page tells about ignore_malformed, and about dead letter queue, and about typical incompatibilities…)\r\n\r\nIn case of ignore malformed, similar note would also be nice (```Malformed field stripped…```).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/489463706","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-489463706","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":489463706,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4OTQ2MzcwNg==","user":{"login":"sandmannn","id":8274566,"node_id":"MDQ6VXNlcjgyNzQ1NjY=","avatar_url":"https://avatars2.githubusercontent.com/u/8274566?v=4","gravatar_id":"","url":"https://api.github.com/users/sandmannn","html_url":"https://github.com/sandmannn","followers_url":"https://api.github.com/users/sandmannn/followers","following_url":"https://api.github.com/users/sandmannn/following{/other_user}","gists_url":"https://api.github.com/users/sandmannn/gists{/gist_id}","starred_url":"https://api.github.com/users/sandmannn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sandmannn/subscriptions","organizations_url":"https://api.github.com/users/sandmannn/orgs","repos_url":"https://api.github.com/users/sandmannn/repos","events_url":"https://api.github.com/users/sandmannn/events{/privacy}","received_events_url":"https://api.github.com/users/sandmannn/received_events","type":"User","site_admin":false},"created_at":"2019-05-05T21:11:05Z","updated_at":"2019-05-05T21:11:05Z","author_association":"CONTRIBUTOR","body":"Hi, I looked a bit on what has to be adjusted for this change. Since every implementation of `FieldMapper` has its own realization of `parseCreateField()` where this issue can occur, looks like every such implementation should be extended to provide information about partially read value. For the cases where we can provide information about read value, we can throw a more specific exceptioin with this value which will be used to construct in generic `FieldMapper` handler. \r\n\r\nJust for the purposes of communication I pushed the dirty draft of this approach in my fork https://github.com/Sandmannn/elasticsearch/compare/master...Sandmannn:extend-logging-misread?expand=1 It may make sense to align on approach before starting the refactoring in all the inheritors of `FieldMapper` . In case we validate this approach, I can clean up the draft and create a first PR of this refactoring.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/489796044","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-489796044","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":489796044,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4OTc5NjA0NA==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2019-05-06T21:49:05Z","updated_at":"2019-05-06T21:49:05Z","author_association":"CONTRIBUTOR","body":"@Sandmannn  Thanks for taking a look at this.  For starting, I would suggest a little simpler approach with code changes only in `FieldMapper:parse` function.\r\n\r\nIn the catch exception section of this function, may be it would be just enough to look at `context.parser.currentToken()`, and read the value from the parser accordingly. For example, if the token is `VALUE_STRING`, we can do `parser.text()` to get the final value to display to a user. Another example, if the token is `START_OBJECT`, we can continue to read until the `END_OBJECT` to get the final value for display. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/490173027","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-490173027","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":490173027,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MDE3MzAyNw==","user":{"login":"sandmannn","id":8274566,"node_id":"MDQ6VXNlcjgyNzQ1NjY=","avatar_url":"https://avatars2.githubusercontent.com/u/8274566?v=4","gravatar_id":"","url":"https://api.github.com/users/sandmannn","html_url":"https://github.com/sandmannn","followers_url":"https://api.github.com/users/sandmannn/followers","following_url":"https://api.github.com/users/sandmannn/following{/other_user}","gists_url":"https://api.github.com/users/sandmannn/gists{/gist_id}","starred_url":"https://api.github.com/users/sandmannn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sandmannn/subscriptions","organizations_url":"https://api.github.com/users/sandmannn/orgs","repos_url":"https://api.github.com/users/sandmannn/repos","events_url":"https://api.github.com/users/sandmannn/events{/privacy}","received_events_url":"https://api.github.com/users/sandmannn/received_events","type":"User","site_admin":false},"created_at":"2019-05-07T17:25:16Z","updated_at":"2019-05-07T17:25:16Z","author_association":"CONTRIBUTOR","body":"@mayya-sharipova that approach is indeed more simple and elegant. We should follow it if possible.\r\n\r\nOne small question though: It implicitly assumes that the implementations of `FieldMapper:parseCreateField` are not calling `parser:nextToken()` (then the current token of parser at the moment of handling the exception can differ from the first token of JSON representation of the value), but I did not find any such activity happening in current implementors. Any mappers that could potentially consist of several JSON tokens seem to reimplement the whole `FieldMapper:parse` method instead, e.g. `GeoPointFieldMapper`. We can assume any future implementors will also behave in similar way, or?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/490212600","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-490212600","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":490212600,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MDIxMjYwMA==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2019-05-07T18:56:07Z","updated_at":"2019-05-07T18:56:07Z","author_association":"CONTRIBUTOR","body":"@Sandmannn  Right, I think  we can assume that future implementations of `FieldMapper:parseCreateField` will also have the same behaviour. We can put a small comment in the \r\n`FieldMapper:parseCreateField` to say that implementations of this method should ensure that on failing to parse `parser.currentToken()` must be the current failing token. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/490856502","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-490856502","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":490856502,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5MDg1NjUwMg==","user":{"login":"sandmannn","id":8274566,"node_id":"MDQ6VXNlcjgyNzQ1NjY=","avatar_url":"https://avatars2.githubusercontent.com/u/8274566?v=4","gravatar_id":"","url":"https://api.github.com/users/sandmannn","html_url":"https://github.com/sandmannn","followers_url":"https://api.github.com/users/sandmannn/followers","following_url":"https://api.github.com/users/sandmannn/following{/other_user}","gists_url":"https://api.github.com/users/sandmannn/gists{/gist_id}","starred_url":"https://api.github.com/users/sandmannn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sandmannn/subscriptions","organizations_url":"https://api.github.com/users/sandmannn/orgs","repos_url":"https://api.github.com/users/sandmannn/repos","events_url":"https://api.github.com/users/sandmannn/events{/privacy}","received_events_url":"https://api.github.com/users/sandmannn/received_events","type":"User","site_admin":false},"created_at":"2019-05-09T10:56:29Z","updated_at":"2019-05-09T10:56:29Z","author_association":"CONTRIBUTOR","body":"So I guess I would go on creating a PR according to the current plan, or?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/494363585","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-494363585","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":494363585,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NDM2MzU4NQ==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2019-05-21T12:08:13Z","updated_at":"2019-05-21T12:08:13Z","author_association":"CONTRIBUTOR","body":"@sandmannn  Thanks, please go ahead creating a PR according to the current plan.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510237907","html_url":"https://github.com/elastic/elasticsearch/issues/41372#issuecomment-510237907","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/41372","id":510237907,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDIzNzkwNw==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T21:35:01Z","updated_at":"2019-07-10T21:35:01Z","author_association":"MEMBER","body":"Closing this out now that #42321 has merged. The PR adds a preview of the field value to the error message. This should help to clarify the confusing error message mentioned in the issue description (\"Can't get text on a START OBJECT\").\r\n\r\nThis issue also suggested extending `ignore_malformed` to more field types, and to apply it to JSON input as well. The discussion + implementation of this work is tracked in #12366.","performed_via_github_app":null}]