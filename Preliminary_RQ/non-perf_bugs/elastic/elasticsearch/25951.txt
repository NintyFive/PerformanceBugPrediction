{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/25951","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25951/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25951/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25951/events","html_url":"https://github.com/elastic/elasticsearch/issues/25951","id":246378899,"node_id":"MDU6SXNzdWUyNDYzNzg4OTk=","number":25951,"title":"RestClient: retry timeout starts when the request is submitted to the client, disabling retry when client is under heavy load","user":{"login":"yrodiere","id":412878,"node_id":"MDQ6VXNlcjQxMjg3OA==","avatar_url":"https://avatars1.githubusercontent.com/u/412878?v=4","gravatar_id":"","url":"https://api.github.com/users/yrodiere","html_url":"https://github.com/yrodiere","followers_url":"https://api.github.com/users/yrodiere/followers","following_url":"https://api.github.com/users/yrodiere/following{/other_user}","gists_url":"https://api.github.com/users/yrodiere/gists{/gist_id}","starred_url":"https://api.github.com/users/yrodiere/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yrodiere/subscriptions","organizations_url":"https://api.github.com/users/yrodiere/orgs","repos_url":"https://api.github.com/users/yrodiere/repos","events_url":"https://api.github.com/users/yrodiere/events{/privacy}","received_events_url":"https://api.github.com/users/yrodiere/received_events","type":"User","site_admin":false},"labels":[{"id":407508641,"node_id":"MDU6TGFiZWw0MDc1MDg2NDE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Java%20Low%20Level%20REST%20Client","name":":Core/Features/Java Low Level REST Client","color":"0e8a16","default":false,"description":"Minimal dependencies Java Client for Elasticsearch"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-07-28T15:19:37Z","updated_at":"2019-02-06T07:47:37Z","closed_at":"2019-02-06T07:47:36Z","author_association":"NONE","active_lock_reason":null,"body":"**Elasticsearch version**: Any\r\n\r\n**Plugins installed**: N/A\r\n\r\n**JVM version** (`java -version`): Any\r\n\r\n**OS version** (`uname -a` if on a Unix-like system): Any\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nThe starting point for the retry timeout implemented in RestClient is when the request is submitted to the Apache HTTP client, instead of when the request is actually sent to the Elasticsearch cluster. But the client has an unbounded request queue, so the request may be sent a long time after it got submitted.\r\nAs a result, when the HTTP client is already busy handling a lot of requests, the RestClient will never retry failing requests, because failures will always occur more than 30s after the failing request has been submitted (or whatever your timeout is, 30s is just the default).\r\nThe problem is even worse when you try to use more reasonable timeouts, such as 1 or 2 seconds. As soon as the client gets clogged up with more than 1 or 2 seconds worth of requests, retry is basically disabled.\r\n\r\nWith synchronous requests, this is not really a problem, because the submitting thread will stop waiting after `maxRequestTimeout` anyway, so the failure will happen long after the submitting thread gave up on the request.\r\nWith asynchronous requests, though, there's a good chance you chose asynchonous execution because you knew the request could take a lot of time executing. In which case, the problem will happen every time a request fails.\r\n\r\nOne example of a use case where this behavior is undesirable is when indexing a huge amount of data, for example when initializing the indexes from an external data source. In this case, you want to send a lot of asynchronous requests to the client, so as to be sure you're using the cluster to the maximum of its capacity, and as a result the client's request queue will probably be very long. Yet you still want failing requests to be retried...\r\n\r\n**Steps to reproduce**:\r\n\r\n1. Set the max retry timeout to 10s, and use a single Elasticsearch host\r\n2. Submit (asynchronously) 40 requests, each taking about 1s to execute, to the RestClient; this will keep the two transport threads busy for approximately 20s.\r\n3. Just after that, submit (still asynchronously) another request that will fail after, say, 1s.\r\n4. The request from 3 will fail, but will not be retried, despite the fact it only had 1 second to execute.\r\n\r\n**Solution**:\r\n\r\nOne solution would be to set the starting point for the retry timeout when the Apache HTTP client actually starts processing the request.\r\nThis would not affect the timeout for synchronous requests, but would still provide a significant improvement for asynchronous requests.","closed_by":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"performed_via_github_app":null}