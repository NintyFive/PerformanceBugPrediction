{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/43820","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43820/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43820/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43820/events","html_url":"https://github.com/elastic/elasticsearch/issues/43820","id":462685179,"node_id":"MDU6SXNzdWU0NjI2ODUxNzk=","number":43820,"title":"Avg aggregation over 0 documents/values yields Double.NaN if using transport client, but Double.POSITIVE_INFINITY if using REST client","user":{"login":"ahubmann","id":5640706,"node_id":"MDQ6VXNlcjU2NDA3MDY=","avatar_url":"https://avatars0.githubusercontent.com/u/5640706?v=4","gravatar_id":"","url":"https://api.github.com/users/ahubmann","html_url":"https://github.com/ahubmann","followers_url":"https://api.github.com/users/ahubmann/followers","following_url":"https://api.github.com/users/ahubmann/following{/other_user}","gists_url":"https://api.github.com/users/ahubmann/gists{/gist_id}","starred_url":"https://api.github.com/users/ahubmann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahubmann/subscriptions","organizations_url":"https://api.github.com/users/ahubmann/orgs","repos_url":"https://api.github.com/users/ahubmann/repos","events_url":"https://api.github.com/users/ahubmann/events{/privacy}","received_events_url":"https://api.github.com/users/ahubmann/received_events","type":"User","site_admin":false},"labels":[{"id":493198109,"node_id":"MDU6TGFiZWw0OTMxOTgxMDk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Java%20High%20Level%20REST%20Client","name":":Core/Features/Java High Level REST Client","color":"0e8a16","default":false,"description":"Expressive Java Client for Elasticsearch"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2019-07-01T12:25:21Z","updated_at":"2019-10-15T18:53:15Z","closed_at":"2019-10-15T18:53:10Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\r\n\r\n** Please read the guidelines below. **\r\n\r\nIssues that do not follow these guidelines are likely to be closed.\r\n\r\n1.  GitHub is reserved for bug reports and feature requests. The best place to\r\n    ask a general question is at the Elastic [forums](https://discuss.elastic.co).\r\n    GitHub is not the place for general questions.\r\n\r\n2.  Is this bug report or feature request for a supported OS? If not, it\r\n    is likely to be closed.  See https://www.elastic.co/support/matrix#show_os\r\n\r\n3.  Please fill out EITHER the feature request block or the bug report block\r\n    below, and delete the other block.\r\n\r\n-->\r\n\r\n<!-- Feature request -->\r\n\r\n**Describe the feature**: Running an `avg` aggregation when 0 documents/values match yields different values depending on connection type (TransportClient vs RestClient).\r\n\r\n<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`): 7.2.0 (and 6.x as well)\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (`java -version`): 11.0.3\r\n\r\n**OS version** (`uname -a` if on a Unix-like system): Linux sascha 4.15.0-54-generic #58-Ubuntu SMP Mon Jun 24 10:55:24 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n**Description of the problem including expected versus actual behavior**: Calculation of `avg` metric over 0 documents yields `NaN` if connected to Elasticsearch using transport client, but `Double.POSITIVE_INFINITY` if using REST client. IMHO the result of an operation should not depend on the connection type to the Elasticsearch cluster.\r\n\r\nThis seems to be related to the fact that internally, Elasticsearch takes two different routes to create the result of an `avg` aggregation:\r\n\r\n* When using the TransportClient, this is done in `InternalAvg` as `sum / count` (https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/search/aggregations/metrics/InternalAvg.java#L69), where in case of `count == 0` Java returns `Double.NaN`\r\n\r\n* Whereas when using REST, this is done in `ParsedAvg`, explicitly setting `Double.POSITIVE_INFINITY` as the default (https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/search/aggregations/metrics/ParsedAvg.java#L55)\r\n\r\n**Steps to reproduce**: (see also attached [elastic-avg.zip](https://github.com/elastic/elasticsearch/files/3345500/elastic-avg.zip))\r\n\r\n 1. Run Elasticsearch via Docker as `run -it --rm -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e \"discovery.type=single-node\" -e \"cluster.name=elasticsearch\" docker.elastic.co/elasticsearch/elasticsearch:7.2.0`\r\n\r\n 2. Index a sample document:\r\n```\r\nIndexRequest indexRequest = new IndexRequest(\"test\").id(\"1\").source(XContentFactory.jsonBuilder().startObject().field(\"value\", 1).endObject());\r\nclient.index(indexRequest, RequestOptions.DEFAULT);\r\n```\r\n\r\n 3. Aggregate over a field with count `0`:\r\n```\r\nprotected static final AvgAggregationBuilder aggregation = AggregationBuilders.avg(\"test\").field(\"value2\");\r\n```\r\n\r\n4. Run aggregation using TransportClient:\r\n```\r\n// execute aggregation over transport client\r\nSearchResponse response = client.prepareSearch().addAggregation(aggregation).execute().actionGet();\r\nAvg result = response.getAggregations().get(\"test\");\r\n\r\n// for transport client, the result is NaN\r\nassertTrue(Double.isNaN(result.value()));\r\n```\r\n\r\n5. Run aggregation using RestClient:\r\n```\r\n// execute aggregation over rest client\r\nSearchRequest searchRequest = new SearchRequest();\r\nSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\r\nsearchRequest.source(searchSourceBuilder);\r\nsearchSourceBuilder.aggregation(aggregation);\r\nSearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);\r\nAvg result = response.getAggregations().get(\"test\");\r\n\r\n// for rest client, the result is positive infinity\r\nassertTrue(Double.isInfinite(result.value()));\r\n```\r\n\r\n**Provide logs (if relevant)**:\r\n","closed_by":{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},"performed_via_github_app":null}