{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/44074","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44074/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44074/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44074/events","html_url":"https://github.com/elastic/elasticsearch/issues/44074","id":465298279,"node_id":"MDU6SXNzdWU0NjUyOTgyNzk=","number":44074,"title":"Search result pinning","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":1194435738,"node_id":"MDU6TGFiZWwxMTk0NDM1NzM4","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v8.0.0","name":"v8.0.0","color":"dddddd","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"assignees":[{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2019-07-08T14:42:12Z","updated_at":"2019-08-22T15:37:38Z","closed_at":"2019-08-16T13:46:07Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Result pinning will be a licensed feature of Elasticsearch (not OSS).\r\n\r\n## Background and requirements\r\nSometimes it is desirable to artificially boost certain search results for a query and arrange them on page 1 of the search results. To frame the discussion let's start with an outline of a typical search UI that has result pinning:\r\n\r\n![Pinning 001](https://user-images.githubusercontent.com/170925/60816875-86c70d80-a192-11e9-9b15-7221f706a79c.jpeg)\r\n\r\n#### This is about making ranking fixes, not serving Ads...\r\nAdvertisements that are triggered off keyword searches typically appear above organic results (eg when searching Google for product X youâ€™ll typically see competitor ads). In that scenario the promoted content does not typically share the same index/schema as the organic results so does not respond to filtering or sorting selections. The ads are seen as separate content and can be held in independent stores and queried using separate requests.\r\n\r\nIn contrast, this proposal is about promoting selected documents from the same index that holds the organic results. It is about fixing ranking issues. The artificially placed documents should blend in naturally with organic results so they look the same, are highlighted the same, and  respond to any filtering, pagination and sorting actions performed by the user.\r\n\r\nThe proposed behaviour is as follows:\r\n\r\n1) Pinned hits are always displayed above organic hits, not intermingled. Think oil on water.\r\n2) Like organic hits, pinned results can be:\r\n  a) subject to any structured filter selections (price, distance etc)\r\n  b) accounted for in aggregations (typically shown  in facet filters)\r\n  c) pageable (meaning they disappear on page 2)\r\n  d) not duplicated (a pinned hit should not also appear as an organic hit)\r\n  e) highlighted\r\n3) Unlike organic hits, they:\r\n\ta) are NOT filtered by free-text search input\r\n\tb) have an admin-supplied ranking order\r\n\tc) are NOT pinned when the  primary sort order is anything other than relevance.\r\n\t  \r\nPinned hits will not be offered as part of searches using field-collapsing - a flat list of pinned docs does not blend naturally when sat above search results that are organised under grouping keys.\r\n\r\nThe `top_hits` aggregation is another elasticsearch feature but is not commonly used in search UIs like the one shown above so it remains unclear what if any rules apply to pinning here.\r\n\r\n## Proposed solution - score manipulation\r\nGiven the above requirements it seems natural to think of this problem as finding a way to give a reliable boost to scores of selected documents to always place them above all other organic results. This can be achieved by wrapping the organic Query clauses in a new PinnedQuery which lists the results to be pinned e.g.:\r\n\r\n\tGET test\r\n\t{\r\n\t  \"query\": {\r\n\t\t\"pinned_query\": {\r\n\t\t  \"pinned_ids\": [\r\n\t\t\t\"9nht3GgBe1Qo_SrLzRCJ\",\r\n\t\t\t\"-Hht3GgBe1Qo_SrLzRCJ\"\r\n\t\t  ],\r\n\t\t  \"organic\": {\r\n\t\t\t\"match\": {\r\n\t\t\t  \"my_field\": \"my free-text query\"\r\n\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n\t  }\r\n\t}\r\n\r\nIn this example the `pinned_ids` contains the ids of documents to be placed at the top of the results, in order of relevance.\r\nThe `organic` clause contains any other valid elasticsearch query.\r\nThe `pinned_query` clause will essentially run a form of Boolean query where the IDs of the pinned docs are an \"OR\" to the clause in the `organic` clause. \r\nThe pinned_query would manipulate the floats of scores produced by the `organic` clause, reserving the  greatest float exponent of scores to encode the positions of pinned results. This will ensure that pinned documents will be ranked in the right positions while preserving the ranking order of matches in the organic results.\r\n\r\nSometimes there will be additional criteria such as price-range filters that need to apply to both organic and pinned documents. These would be enforced by wrapping the `pinned_query` clause in a regular `Boolean` query alongside these additional constraints.","closed_by":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"performed_via_github_app":null}