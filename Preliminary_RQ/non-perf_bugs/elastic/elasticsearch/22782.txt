{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/22782","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22782/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22782/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22782/events","html_url":"https://github.com/elastic/elasticsearch/issues/22782","id":203059986,"node_id":"MDU6SXNzdWUyMDMwNTk5ODY=","number":22782,"title":"Nagios Grok pattern matching seems to be broken in Ingest node processor","user":{"login":"jlecour","id":5142,"node_id":"MDQ6VXNlcjUxNDI=","avatar_url":"https://avatars3.githubusercontent.com/u/5142?v=4","gravatar_id":"","url":"https://api.github.com/users/jlecour","html_url":"https://github.com/jlecour","followers_url":"https://api.github.com/users/jlecour/followers","following_url":"https://api.github.com/users/jlecour/following{/other_user}","gists_url":"https://api.github.com/users/jlecour/gists{/gist_id}","starred_url":"https://api.github.com/users/jlecour/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jlecour/subscriptions","organizations_url":"https://api.github.com/users/jlecour/orgs","repos_url":"https://api.github.com/users/jlecour/repos","events_url":"https://api.github.com/users/jlecour/events{/privacy}","received_events_url":"https://api.github.com/users/jlecour/received_events","type":"User","site_admin":false},"labels":[{"id":268963484,"node_id":"MDU6TGFiZWwyNjg5NjM0ODQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Ingest","name":":Core/Features/Ingest","color":"0e8a16","default":false,"description":"Execution or management of Ingest Pipelines"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"assignees":[{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2017-01-25T10:08:24Z","updated_at":"2017-01-26T09:36:53Z","closed_at":"2017-01-26T08:57:02Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Elasticsearch version**: 5.1.2\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version**: 1.8.0_102\r\n\r\n**OS version**: Debian 8.7.1\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nI'm trying to move my logstash basic pipelines to a more direct Ingest node setup.\r\n\r\nThe `NAGIOSLOGLINE` is a core pattern provided by Elasticsearch in the Ingest node family of processors.\r\n\r\nIn the first example, I've overwritten the pattern to simplify it at the extreme and show the simplest expected behavior.\r\n\r\nIt is using regular existing sub-patterns (they are here : https://raw.githubusercontent.com/elastic/elasticsearch/master/modules/ingest-common/src/main/resources/patterns/nagios)\r\n\r\nRequest : \r\n\r\n```js\r\n{\r\n  \"pipeline\": {\r\n    \"processors\" : [\r\n      {\r\n        \"grok\": {\r\n          \"field\": \"message\",\r\n          \"patterns\": [\"%{NAGIOSLOGLINE}\"],\r\n          \"pattern_definitions\" : {\r\n            \"NAGIOSLOGLINE\": \"%{NAGIOSTIME} (?:%{NAGIOS_CURRENT_SERVICE_STATE})\"\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"remove\": {\r\n          \"field\": \"message\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"docs\": [\r\n    {\r\n      \"_source\": {\r\n        \"message\": \"[1466460000] CURRENT SERVICE STATE: myhostname;myservice;CRITICAL;HARD;3;DISK CRITICAL - free space: / 554 MB (62% inode=78%): /run 100 MB (99% inode=99%): /run/lock 5 MB (100% inode=99%): /run/shm 200 MB (100% inode=99%): /boot 395 MB (90% inode=99%): /home 2992 MB (2% inode=94%): /tmp 426 MB (97% inode=99%): /usr 3435 MB (77% inode=84%): /var 4180 MB (46% inode=97%):\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n```\r\n\r\nResponse (perfectly matched) : \r\n\r\n```js\r\n    {\r\n        \"docs\":\r\n        [\r\n            {\r\n                \"doc\":\r\n                {\r\n                    \"_type\": \"_type\",\r\n                    \"_id\": \"_id\",\r\n                    \"_index\": \"_index\",\r\n                    \"_source\":\r\n                    {\r\n                        \"nagios_message\": \"DISK CRITICAL - free space: / 554 MB (62% inode=78%): /run 100 MB (99% inode=99%): /run/lock 5 MB (100% inode=99%): /run/shm 200 MB (100% inode=99%): /boot 395 MB (90% inode=99%): /home 2992 MB (2% inode=94%): /tmp 426 MB (97% inode=99%): /usr 3435 MB (77% inode=84%): /var 4180 MB (46% inode=97%):\",\r\n                        \"nagios_epoch\": \"1466460000\",\r\n                        \"nagios_statecode\": \"3\",\r\n                        \"nagios_hostname\": \"myhostname\",\r\n                        \"nagios_state\": \"CRITICAL\",\r\n                        \"nagios_statetype\": \"HARD\",\r\n                        \"nagios_service\": \"myservice\",\r\n                        \"nagios_type\": \"CURRENT SERVICE STATE\"\r\n                    },\r\n                    \"_ingest\":\r\n                    {\r\n                        \"timestamp\": \"2017-01-25T10:00:01.671+0000\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n```\r\n\r\nHere is the request, using the top level pattern : \r\n\r\n```js\r\n{\r\n  \"pipeline\": {\r\n    \"processors\" : [\r\n      {\r\n        \"grok\": {\r\n          \"field\": \"message\",\r\n          \"patterns\": [\"%{NAGIOSLOGLINE}\"]\r\n        }\r\n      },\r\n      {\r\n        \"remove\": {\r\n          \"field\": \"message\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"docs\": [\r\n    {\r\n      \"_source\": {\r\n        \"message\": \"[1466460000] CURRENT SERVICE STATE: myhostname;myservice;CRITICAL;HARD;3;DISK CRITICAL - free space: / 554 MB (62% inode=78%): /run 100 MB (99% inode=99%): /run/lock 5 MB (100% inode=99%): /run/shm 200 MB (100% inode=99%): /boot 395 MB (90% inode=99%): /home 2992 MB (2% inode=94%): /tmp 426 MB (97% inode=99%): /usr 3435 MB (77% inode=84%): /var 4180 MB (46% inode=97%):\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nHere is the response, where many fields are missing : \r\n\r\n```js\r\n    {\r\n        \"docs\":\r\n        [\r\n            {\r\n                \"doc\":\r\n                {\r\n                    \"_type\": \"_type\",\r\n                    \"_id\": \"_id\",\r\n                    \"_index\": \"_index\",\r\n                    \"_source\":\r\n                    {\r\n                        \"nagios_epoch\": \"1466460000\",\r\n                        \"nagios_statecode\": \"3\",\r\n                        \"nagios_state\": \"CRITICAL\",\r\n                        \"nagios_statetype\": \"HARD\"\r\n                    },\r\n                    \"_ingest\":\r\n                    {\r\n                        \"timestamp\": \"2017-01-25T10:05:21.804+0000\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n```\r\n\r\nWith trial and error I've found that the very complex regular expression, with its many sub-patterns, might swallow fields.\r\nIt is working fine in Logstash (in production for months) but fails miserably in Elasticsearch. Maybe it's because of a different implementation of the Grok between Logstash and Elasticsearch.\r\n\r\nI didn't find any unit test for Nagios grok patterns :/","closed_by":{"login":"jlecour","id":5142,"node_id":"MDQ6VXNlcjUxNDI=","avatar_url":"https://avatars3.githubusercontent.com/u/5142?v=4","gravatar_id":"","url":"https://api.github.com/users/jlecour","html_url":"https://github.com/jlecour","followers_url":"https://api.github.com/users/jlecour/followers","following_url":"https://api.github.com/users/jlecour/following{/other_user}","gists_url":"https://api.github.com/users/jlecour/gists{/gist_id}","starred_url":"https://api.github.com/users/jlecour/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jlecour/subscriptions","organizations_url":"https://api.github.com/users/jlecour/orgs","repos_url":"https://api.github.com/users/jlecour/repos","events_url":"https://api.github.com/users/jlecour/events{/privacy}","received_events_url":"https://api.github.com/users/jlecour/received_events","type":"User","site_admin":false},"performed_via_github_app":null}