{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201/events","html_url":"https://github.com/elastic/elasticsearch/issues/9201","id":53763293,"node_id":"MDU6SXNzdWU1Mzc2MzI5Mw==","number":9201,"title":"Fix Elasticsearch Client API to be less trappy","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"labels":[{"id":146829143,"node_id":"MDU6TGFiZWwxNDY4MjkxNDM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Transport%20API","name":":Core/Infra/Transport API","color":"0e8a16","default":false,"description":"Transport client API"},{"id":33660,"node_id":"MDU6TGFiZWwzMzY2MA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebreaking","name":">breaking","color":"d93f0b","default":false,"description":null},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":127075273,"node_id":"MDU6TGFiZWwxMjcwNzUyNzM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/PITA","name":"PITA","color":"e11d21","default":false,"description":null},{"id":442465389,"node_id":"MDU6TGFiZWw0NDI0NjUzODk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Pretty%20Bloody%20Important","name":"Pretty Bloody Important","color":"d93f0b","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":33,"created_at":"2015-01-08T15:36:51Z","updated_at":"2017-07-21T08:15:22Z","closed_at":"2017-07-21T08:15:03Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Today we have 3 flavors for each endpoint (for demonstration purpose I only use the `_health` API)\n\n``` Java\npublic interface ClusterAdminClient extends ElasticsearchClient<ClusterAdminClient> {\n\n    ActionFuture<ClusterHealthResponse> health(ClusterHealthRequest request);\n\n    void health(ClusterHealthRequest request, ActionListener<ClusterHealthResponse> listener);\n\n    ClusterHealthRequestBuilder prepareHealth(String... indices);\n```\n\nAt least one of them is redundant here already but lemme first explain what is trappy here. If you use the `prepareHealth().setWaitForGreenStatus()` basically nothing happens. you need to call `.get()` or `.execute().get()` or `.actionGet()` or any of the X flavors. This is not so much of a problem for health because you are waiting for a response, but for endpoints that don't return info that is generally consumed ie. update settings this has in the past lead to so many test bugs that I consider this evil.\n\nYet, I think we should remove this method entirely and detach the Builders entirely from the Client. Today once a builder is created like this:\n\n``` Java\n  ClusterHealthRequestBuilder builder = client.prepareHealth().setWaitForGreenStatus()\n```\n\nit's tied to a client and if you close that client the builder can't be executed. To me if we even keep the builder in the future it should only have a `build()` method that returns the corresponding request. Then you can call:\n\n``` Java\n  ClusterHealthRequestBuilder builder = AdminBuilders.health().setWaitForGreenStatus();\n  client.health(builder.build());\n```\n\nwhich is less trappy... oh wait... `client.health(builder.build());` returns an `ActionFuture<ClusterHealthResponse>` which is also redundant IMO. We already have a non-blocking API using a listener which is equally powerful.\n\nI think what we should move to is this:\n\n``` Java\npublic interface ClusterAdminClient extends ElasticsearchClient<ClusterAdminClient> {\n\n    ClusterHealthResponse health(ClusterHealthRequest request);\n\n    void health(ClusterHealthRequest request, ActionListener<ClusterHealthResponse> listener);\n\n```\n\nthat way it's clearly a blocking API and it's easy to use. We still keep the builder (for now ;) ) but remove it's coupling to the client which is super trappy.\n","closed_by":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"performed_via_github_app":null}