[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/514607135","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-514607135","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":514607135,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNDYwNzEzNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-07-24T12:16:35Z","updated_at":"2019-07-24T12:16:35Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/515495609","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-515495609","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":515495609,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNTQ5NTYwOQ==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-07-26T15:22:24Z","updated_at":"2019-07-26T15:22:24Z","author_association":"CONTRIBUTOR","body":"I looked some more; the easiest way to do this would be to simply return the `Optional<HttpRequestBase>` instance from all of the `*Async` methods. These currently return void so this should not pose any compatibility issues since the user can safely ignore the return value unless they want to abort it for whatever reason. It would return Optional.empty in case the request never executed because of validation issues and the running request otherwise. The user can then decide to call abort on this if needed.\r\n\r\nFor the callbacks from the Async methods a few modifications would be needed:\r\n\r\nIn `org.elasticsearch.client.RestClient#performRequestAsync(...)` there's a FutureCallback with a cancelled method that simply calls `org.elasticsearch.client.RestClient.FailureTrackingResponseListener#onDefinitiveFailure`, which calls `org.elasticsearch.client.ResponseListener#onFailure`.\r\n\r\nI don't think the `cancelled` method is ever called because the future is not used anywhere. But technically it should call abort on the request. Additionally, when `abort` is called there should be onAbort handlers in the listeners.\r\n\r\n\r\nI think I could do a PR for this. However, there are a couple of hundred of these calls in the different high level clients. So before I do this, I would like some consensus on whether this is desirable or if there are any concerns.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/515744756","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-515744756","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":515744756,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNTc0NDc1Ng==","user":{"login":"jesinity","id":1146901,"node_id":"MDQ6VXNlcjExNDY5MDE=","avatar_url":"https://avatars1.githubusercontent.com/u/1146901?v=4","gravatar_id":"","url":"https://api.github.com/users/jesinity","html_url":"https://github.com/jesinity","followers_url":"https://api.github.com/users/jesinity/followers","following_url":"https://api.github.com/users/jesinity/following{/other_user}","gists_url":"https://api.github.com/users/jesinity/gists{/gist_id}","starred_url":"https://api.github.com/users/jesinity/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jesinity/subscriptions","organizations_url":"https://api.github.com/users/jesinity/orgs","repos_url":"https://api.github.com/users/jesinity/repos","events_url":"https://api.github.com/users/jesinity/events{/privacy}","received_events_url":"https://api.github.com/users/jesinity/received_events","type":"User","site_admin":false},"created_at":"2019-07-28T08:46:06Z","updated_at":"2019-07-28T08:48:56Z","author_association":"CONTRIBUTOR","body":"I think you analysis is right, but I don't think it should return an `Optional<HttpRequestBase>`.\r\nLooking to the code the rest client calls the apache http async client that has already a cancellation handle (that is what you mention that it's likely that is not actually cancelled).\r\n\r\n```\r\n   /**\r\n     Initiates asynchronous HTTP request execution using the default\r\n     * context.\r\n     * <p>\r\n     * The request producer passed to this method will be used to generate\r\n     * a request message and stream out its content without buffering it\r\n     * in memory. The response consumer passed to this method will be used\r\n     * to process a response message without buffering its content in memory.\r\n     *\r\n     * @param <T> the result type of request execution.\r\n     * @param requestProducer request producer callback.\r\n     * @param responseConsumer response consumer callaback.\r\n     * @param callback future callback.\r\n     * @return future representing pending completion of the operation.\r\n     */\r\n    <T> Future<T> execute(\r\n            HttpAsyncRequestProducer requestProducer,\r\n            HttpAsyncResponseConsumer<T> responseConsumer,\r\n            FutureCallback<T> callback);\r\n```\r\n\r\nbut in the Rest client the `Future` is ignored and `void` is returned  (that's what you pointed out).\r\n\r\nSo I also think this `Future<T>` should not be ignored: I think that Optional is not a good idea.\r\nAs the API is wrapping all Http types probably also this `Future` should be wrapped to some internal type.\r\n\r\nSo it could be something like:\r\n\r\n1: expose the Future in the private method here:\r\n\r\nhttps://github.com/elastic/elasticsearch/blob/master/client/rest/src/main/java/org/elasticsearch/client/RestClient.java#L290\r\n\r\n`\r\n private Future<HttpResponse> performRequestAsync(final NodeTuple<Iterator<Node>> nodeTuple final InternalRequest request,\r\n                                     final FailureTrackingResponseListener listener) {\r\n...\r\n`\r\n\r\n2. have a cancellation token class such as (something like):\r\n\r\n```\r\n    static class CancellationToken {\r\n\r\n        private final Future<HttpResponse> response;\r\n        private final Exception cause;\r\n\r\n        CancellationToken(Future<HttpResponse> response) {\r\n            this.response = response;\r\n            this.cause = null;\r\n        }\r\n\r\n        CancellationToken(Exception cause) {\r\n            this.response = null;\r\n            this.cause = cause;\r\n        }\r\n\r\n        public void cancel(boolean mayInterruptIfRunning) throws Exception {\r\n            if (cause!= null){\r\n               throw  RestClient.extractAndWrapCause(cause);\r\n            }\r\n            response.cancel(mayInterruptIfRunning);\r\n        }\r\n    }\r\n```\r\n\r\n3. wrapping the Future in the Cancellation token\r\n\r\nhttps://github.com/elastic/elasticsearch/blob/master/client/rest/src/main/java/org/elasticsearch/client/RestClient.java#L280\r\n\r\ndoing something like\r\n```\r\n  public CancellationToken performRequestAsync(Request request, ResponseListener responseListener) {\r\n        CancellationToken token = null;\r\n        try {\r\n            FailureTrackingResponseListener failureTrackingResponseListener =\r\n                  new FailureTrackingResponseListener(responseListener);\r\n            InternalRequest internalRequest = new InternalRequest(request);\r\n            Future<HttpResponse> response =  performRequestAsync(nextNodes(), internalRequest, failureTrackingResponseListener);\r\n            token = new CancellationToken(response);\r\n        } catch (Exception e) {\r\n            token = new CancellationToken(e);\r\n            responseListener.onFailure(e);\r\n        }\r\n        return token;\r\n    }\r\n```\r\n\r\nWhat you think?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/515747747","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-515747747","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":515747747,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNTc0Nzc0Nw==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-07-28T09:30:40Z","updated_at":"2019-07-28T09:38:06Z","author_association":"CONTRIBUTOR","body":"A Future could work. The key thing would be to call abort on the request so it releases the file handle and closes the socket client side. \r\n\r\nThe FailureTrackingResponseListener could take care of this from it's `onCancel` method but it would need the `InternalRequest` as a constructor arg.\r\n\r\nThe `CancellationToken` looks a bit like a CompletableFuture. Java 9 apparently introduced a `CompletableFuture` for this purpose: https://stackoverflow.com/questions/49432257/completablefuture-immediate-failure. Given that ES still needs to run on Java 8, it may be necessary to implement something similar to that and switch in the future.\r\n\r\nThe question is what that Future should expose because we don't want user's to actually interact with the response. One option could be to simplify your `CancellationToken` to take a `CompletableFuture` as the only constructor arg and keep that field private.\r\n\r\n**update** it seems CompletableFuture was added in java 8 and has a [completeExceptionally](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#completeExceptionally-java.lang.Throwable-) method.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/516938111","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-516938111","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":516938111,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNjkzODExMQ==","user":{"login":"jesinity","id":1146901,"node_id":"MDQ6VXNlcjExNDY5MDE=","avatar_url":"https://avatars1.githubusercontent.com/u/1146901?v=4","gravatar_id":"","url":"https://api.github.com/users/jesinity","html_url":"https://github.com/jesinity","followers_url":"https://api.github.com/users/jesinity/followers","following_url":"https://api.github.com/users/jesinity/following{/other_user}","gists_url":"https://api.github.com/users/jesinity/gists{/gist_id}","starred_url":"https://api.github.com/users/jesinity/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jesinity/subscriptions","organizations_url":"https://api.github.com/users/jesinity/orgs","repos_url":"https://api.github.com/users/jesinity/repos","events_url":"https://api.github.com/users/jesinity/events{/privacy}","received_events_url":"https://api.github.com/users/jesinity/received_events","type":"User","site_admin":false},"created_at":"2019-07-31T17:10:28Z","updated_at":"2019-07-31T17:11:29Z","author_association":"CONTRIBUTOR","body":"Checking a bit the code I understood ( I think I did) that:\r\n\r\n1. the sync calls are actually async calls where it is done \"get\".\r\nhttps://github.com/elastic/elasticsearch/blob/master/client/rest/src/main/java/org/elasticsearch/client/RestClient.java#L214\r\nIdeally we could abort the call using the method `reset` on the inner `HttpAsyncRequestProducer`.\r\nGiven the structure of the method that tries on multiple nodes it looks complicated this change.\r\n\r\n2. The async calls are easier: to abort the call we should `cancel` the Future: we cannot call `abort` on the wrapped HttpRequest because it does not support it (it is in the hierarchy used in the synchronous calls). \r\nSo I would wrap the Future in a `CancellationToken` exposing the `cancel`.\r\n\r\nI forked the repo and I did the change here, so that is veisible and can be evaluated\r\n\r\nhttps://github.com/jesinity/elasticsearch/tree/rest-async-cancellation-token\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/517630839","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-517630839","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":517630839,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNzYzMDgzOQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-02T09:25:32Z","updated_at":"2019-08-02T09:25:32Z","author_association":"MEMBER","body":"Heya I am looking at this, as it may also be useful for #43332 where we are exposing automatic cancellation of search tasks whenever the underlying connection gets closed. It would be nice to expose the ability to abort a request using the java client, though there's a couple of steps to get there if we want to expose this to both low-level and high-level clients. Will keep you posted.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/517640229","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-517640229","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":517640229,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNzY0MDIyOQ==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-02T09:53:28Z","updated_at":"2019-08-02T09:53:28Z","author_association":"CONTRIBUTOR","body":"@jesinity agreed; this is only relevant for async calls. Calling abort on a synchronous connection would be less relevant; all that is needed there is proper cleanup, which is already taken care off.\r\n\r\nI looked at your fork and it seems fine. I also looked at the code exposing the future, we would indeed need to expose the original apache httpclient request in some way in order to be able to cancel it. Instead of the `CancelToken`, I recommend using a `CompletableFuture` instead as this seems intended for this use case.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/518311712","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-518311712","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":518311712,"node_id":"MDEyOklzc3VlQ29tbWVudDUxODMxMTcxMg==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-08-05T16:50:10Z","updated_at":"2019-08-05T16:50:10Z","author_association":"MEMBER","body":"It would be great if we could make our `ActionFuture` extend `CompletableFuture` rather than `Future`, it would allow us not only to use the `cancel` method, but add composability for users of the HLRC.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/518564774","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-518564774","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":518564774,"node_id":"MDEyOklzc3VlQ29tbWVudDUxODU2NDc3NA==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-06T08:22:36Z","updated_at":"2019-08-06T08:23:29Z","author_association":"MEMBER","body":"I spent some time looking at this, and it was enough to figure that adding the ability to cancel requests is quite a change. I would strive for not breaking backwards compatibility, also exposing it to low-level REST client is one challenge, while exposing it to the high-level REST client is a different one. We have made a design choice when developing the low-level REST client, to not return a future in our async methods, as accepting the listener was preferred. \r\n\r\nWe've had both listener and future in our transport client api for a long time and many many people found that confusing, see #9201 for the discussion around this topic. Maybe for this change it would make sense to return a future, but I want to raise awareness around the reasons why we have what we have today.\r\n\r\nAs this is quite an involving change that will require discussions and multiple iterations, I leave this to the core/features team as I don't have bandwidth to work on it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/518583574","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-518583574","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":518583574,"node_id":"MDEyOklzc3VlQ29tbWVudDUxODU4MzU3NA==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-06T09:11:22Z","updated_at":"2019-08-06T09:11:22Z","author_association":"CONTRIBUTOR","body":"My original proposal was to simply return something on async methods in both the low level and highlevel rest client where it currently returns void. Whether that's a Future of something or s CancelToken does not matter, as long as it exposes a cancel method that calls the abort method on the underlying request. This is 100% backwards compatible because ignoring the return value is perfectly fine. Doing something with it is optional. It should also be possible to do this such that the end user is shielded from direct access to the apache request or other internal state, which I agree is something that is not desirable. \r\n\r\nI agree that the call back architecture in place kind of conflicts with returning a Future. You could feasibly add a cancel method to that but that compromises the design of that in the sense that call back classes probably should not expose logic like that or hold state (like the original request). IMHO returning something where it currently returns void is probably the least invasive and most intuitive. \r\n\r\nI actually started doing the PR for this last week before realizing this needs more discussion. IMHO the main thing to decide is what to return instead of void. A `CompletableFuture` of something (e.g. a boolean indicating success or failure, etc.) or a `CancelToken` like @jesinity proposed would both work. The important thing is to expose a cancel method that calls abort on the apache request so higher level frameworks integrating elasticsearch async stuff (Koltin with co-routines, rx java, etc.) can do the right thing instead of dealing with needlessly blocked threads.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/519914247","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-519914247","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":519914247,"node_id":"MDEyOklzc3VlQ29tbWVudDUxOTkxNDI0Nw==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-09T13:13:57Z","updated_at":"2019-08-09T13:14:16Z","author_association":"MEMBER","body":"heya, I had another look at this and chatted to @jimczi about it. We came up with a reasonably easy way to expose the ability to cancel requests in the low-level client. It is based on the cancellation token idea, though I did not go for wrapping the future as the future changes every time we retry a request. Instead, it is sufficient to call `abort` on the underlying http request, which we reuse throughout the different retries. The only caveat is that we need to make sure that when cancel is called between retries, we still act on it (if we don't do it specifically we may end up calling abort on a request that's about to be sent, which will have no effect).\r\n\r\nLike @jillesvangurp mentioned, this is backwards compatible as we only change the return value of `performAsyncRequest` from `void` to `Cancellable`. It is also quite easy to expose in the high-level REST client as all we need to do is return a `Cancellable` anywhere we call `performRequestAsync`.\r\n\r\nI would prefer not touching `ActionListener` and not having a specific callback for when a request is cancelled, instead `onFailure` will be called and a `CancellationException` will be raised through it.\r\n\r\nCould you please have a look at the PR and let me know what you think? #45379","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/521632911","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-521632911","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":521632911,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMTYzMjkxMQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-15T13:03:19Z","updated_at":"2019-08-15T13:03:19Z","author_association":"MEMBER","body":"heya @jillesvangurp now that #45379 is in, would you like to open a PR to expose the feature to the high-level REST client? Otherwise I will get to it at some point ;)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/521659882","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-521659882","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":521659882,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMTY1OTg4Mg==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-15T14:24:26Z","updated_at":"2019-08-15T14:24:26Z","author_association":"CONTRIBUTOR","body":"@javanna Sure, I'll try to find some time to do this in the next few days. This should be straight forward but there quite a few async methods that need to be updated for this.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/521660899","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-521660899","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":521660899,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMTY2MDg5OQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-15T14:27:19Z","updated_at":"2019-08-15T14:27:19Z","author_association":"MEMBER","body":"sounds good!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/522240772","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-522240772","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":522240772,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMjI0MDc3Mg==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-17T14:11:58Z","updated_at":"2019-08-17T14:11:58Z","author_association":"CONTRIBUTOR","body":"@javanna see #45688\r\n\r\nI hope I did not miss any calls; there were a lot of them.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/522249013","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-522249013","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":522249013,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMjI0OTAxMw==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-17T15:53:21Z","updated_at":"2019-08-17T15:53:21Z","author_association":"CONTRIBUTOR","body":"Actually did miss some and I broke a test that would have pointed that out to me (nice test!). All fixed now. `gradle check` is now happy which should mean all end points have been updated.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/522485404","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-522485404","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":522485404,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMjQ4NTQwNA==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-19T09:17:20Z","updated_at":"2019-08-19T09:17:20Z","author_association":"CONTRIBUTOR","body":"It would be nice to get this in 7.4.0. I'd like to integrate this into my kotlin client ASAP.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/522554912","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-522554912","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":522554912,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMjU1NDkxMg==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-19T12:41:43Z","updated_at":"2019-08-19T12:41:43Z","author_association":"MEMBER","body":"Heya, I have bad news. We found a pretty bad bug in the apache client which\ncauses the io reactor the crash when cancelling requests. I have been\nlooking into possible workarounds, but it is very likely that we will back\nout the API change for the low-level client till an adequate fix is made.\nWill keep you posted.\n\nOn Mon, Aug 19, 2019, 11:17 Jilles van Gurp <notifications@github.com>\nwrote:\n\n> It would be nice to get this in 7.4.0. I'd like to integrate this into my\n> kotlin client ASAP.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/elastic/elasticsearch/issues/44802?email_source=notifications&email_token=AAGLHTHQH77YM7SA37BP333QFJQLJA5CNFSM4IGOY272YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD4SH5HA#issuecomment-522485404>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAGLHTDSFDUIBIJAOH7Z2UDQFJQLJANCNFSM4IGOY27Q>\n> .\n>\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/522569699","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-522569699","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":522569699,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMjU2OTY5OQ==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-19T13:16:12Z","updated_at":"2019-08-19T13:16:12Z","author_association":"CONTRIBUTOR","body":"OK, that's disappointing. Hopefully this can be resolved quickly on their side.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/523314756","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-523314756","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":523314756,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMzMxNDc1Ng==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2019-08-21T06:21:51Z","updated_at":"2019-08-21T06:22:25Z","author_association":"CONTRIBUTOR","body":"See #45577 and https://issues.apache.org/jira/browse/HTTPASYNC-152\r\n\r\n@javanna one option here is that we simply comment out the call to request.abort for now and get all the rest in until things are fixed in httpclient. From an API point of view having cancel plumbing in place is probably a good thing and I'd hate to have to do that pr for the high level client again as doing that was very tedious.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/523405644","html_url":"https://github.com/elastic/elasticsearch/issues/44802#issuecomment-523405644","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44802","id":523405644,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMzQwNTY0NA==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-08-21T10:53:39Z","updated_at":"2019-08-21T10:53:39Z","author_association":"MEMBER","body":"Thanks for posting the links. I am testing a possible fix as we speak, but it's unlikely that it will make it for 7.4. I haven't yet backported #45379 to 7.x anyways, so there is nothing to back out of the 7.4 release at the moment. I would not be happy with leaving all the cancellation work in but having it no-op due to this bug. Maybe we can though get your PR in anyways on master and only postpone it's backport. Let's wait a couple of days and see how long it takes for a fix to get in and possibly get released. ","performed_via_github_app":null}]