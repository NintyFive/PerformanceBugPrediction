{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/8339","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8339/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8339/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8339/events","html_url":"https://github.com/elastic/elasticsearch/issues/8339","id":47720901,"node_id":"MDU6SXNzdWU0NzcyMDkwMQ==","number":8339,"title":"Aggregations: date_histogram aggregation DST bug","user":{"login":"thanodnl","id":273145,"node_id":"MDQ6VXNlcjI3MzE0NQ==","avatar_url":"https://avatars2.githubusercontent.com/u/273145?v=4","gravatar_id":"","url":"https://api.github.com/users/thanodnl","html_url":"https://github.com/thanodnl","followers_url":"https://api.github.com/users/thanodnl/followers","following_url":"https://api.github.com/users/thanodnl/following{/other_user}","gists_url":"https://api.github.com/users/thanodnl/gists{/gist_id}","starred_url":"https://api.github.com/users/thanodnl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thanodnl/subscriptions","organizations_url":"https://api.github.com/users/thanodnl/orgs","repos_url":"https://api.github.com/users/thanodnl/repos","events_url":"https://api.github.com/users/thanodnl/events{/privacy}","received_events_url":"https://api.github.com/users/thanodnl/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null},{"id":144900127,"node_id":"MDU6TGFiZWwxNDQ5MDAxMjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.3.6","name":"v1.3.6","color":"dddddd","default":false,"description":null},{"id":144574777,"node_id":"MDU6TGFiZWwxNDQ1NzQ3Nzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.4.1","name":"v1.4.1","color":"DDDDDD","default":false,"description":null},{"id":127700367,"node_id":"MDU6TGFiZWwxMjc3MDAzNjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.5.0","name":"v1.5.0","color":"dddddd","default":false,"description":null},{"id":76184120,"node_id":"MDU6TGFiZWw3NjE4NDEyMA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v2.0.0-beta1","name":"v2.0.0-beta1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"assignees":[{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2014-11-04T14:49:46Z","updated_at":"2014-11-25T19:02:51Z","closed_at":"2014-11-25T16:07:37Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hi,\n\nSince it is the time of year where we adjust our clocks from daylight savings time to normal time again a bug in the date histogram struck us.\n\nWhen we run a date_histogram in a timezone other than UTC you will see some buckets being wrongfully combined. In the first example you see a `date_histogram` aggregate in UTC followed by the same aggregate in CET;\n\nUTC query:\n\n```\n{\n    \"size\": 0,\n    \"query\": {\n        \"range\": {\n           \"published\": {\n              \"gte\": 1414274400000,\n              \"lt\": 1414292400000\n           }\n        }\n    },\n    \"aggs\": {\n        \"vot\": {\n            \"date_histogram\": {\n                \"field\": \"published\",\n                \"interval\": \"hour\",\n                \"min_doc_count\": 0,\n                \"time_zone\": \"UTC\"\n            }\n        }\n    }\n}\n```\n\nUTC result:\n\n```\n{\n   \"took\": 12,\n   \"timed_out\": false,\n   \"_shards\": {\n      \"total\": 1,\n      \"successful\": 1,\n      \"failed\": 0\n   },\n   \"hits\": {\n      \"total\": 1130,\n      \"max_score\": 0,\n      \"hits\": []\n   },\n   \"aggregations\": {\n      \"vot\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2014-10-25T22:00:00.000Z\",\n               \"key\": 1414274400000,\n               \"doc_count\": 260\n            },\n            {\n               \"key_as_string\": \"2014-10-25T23:00:00.000Z\",\n               \"key\": 1414278000000,\n               \"doc_count\": 216\n            },\n            {\n               \"key_as_string\": \"2014-10-26T00:00:00.000Z\",\n               \"key\": 1414281600000,\n               \"doc_count\": 222\n            },\n            {\n               \"key_as_string\": \"2014-10-26T01:00:00.000Z\",\n               \"key\": 1414285200000,\n               \"doc_count\": 200\n            },\n            {\n               \"key_as_string\": \"2014-10-26T02:00:00.000Z\",\n               \"key\": 1414288800000,\n               \"doc_count\": 232\n            }\n         ]\n      }\n   }\n}\n```\n\nCET query:\n\n```\n{\n    \"size\": 0,\n    \"query\": {\n        \"range\": {\n           \"published\": {\n              \"gte\": 1414274400000,\n              \"lt\": 1414292400000\n           }\n        }\n    },\n    \"aggs\": {\n        \"vot\": {\n            \"date_histogram\": {\n                \"field\": \"published\",\n                \"interval\": \"hour\",\n                \"min_doc_count\": 0,\n                \"time_zone\": \"CET\"\n            }\n        }\n    }\n}\n```\n\nUTC result:\n\n```\n{\n   \"took\": 9,\n   \"timed_out\": false,\n   \"_shards\": {\n      \"total\": 1,\n      \"successful\": 1,\n      \"failed\": 0\n   },\n   \"hits\": {\n      \"total\": 1130,\n      \"max_score\": 0,\n      \"hits\": []\n   },\n   \"aggregations\": {\n      \"vot\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2014-10-25T22:00:00.000Z\",\n               \"key\": 1414274400000,\n               \"doc_count\": 260\n            },\n            {\n               \"key_as_string\": \"2014-10-25T23:00:00.000Z\",\n               \"key\": 1414278000000,\n               \"doc_count\": 0\n            },\n            {\n               \"key_as_string\": \"2014-10-26T00:00:00.000Z\",\n               \"key\": 1414281600000,\n               \"doc_count\": 216\n            },\n            {\n               \"key_as_string\": \"2014-10-26T01:00:00.000Z\",\n               \"key\": 1414285200000,\n               \"doc_count\": 422\n            },\n            {\n               \"key_as_string\": \"2014-10-26T02:00:00.000Z\",\n               \"key\": 1414288800000,\n               \"doc_count\": 232\n            }\n         ]\n      }\n   }\n}\n```\n\nPoints of interest in these queries are the result buckets for key: `1414278000000`. When ran in UTC it give a `doc_count` of `216`. When ran in CET it has a `doc_count` of `0`.\n\nFurther more, you will find a `doc_count` of `216` in the CET bucket of `1414281600000` (an hour to late). Last to point out is the next CET bucket, it contains the value of `422` which is the sum of `222` + `200`. As you can see these values can be found in the corresponding bucket and the previous bucket in UTC.\n\nAttached you will find a patch file adding some basic tests to the `org.elasticsearch.common.rounding` package. Here we test key rounding for the `CET` and `America/Chicago` timezones on the days of the DST switch.\n\nI tried diggin into the issue and found that it has to do with the recalculation of `preTz.getOffset` on the following lines [TimeZoneRounding.java:156](https://github.com/elasticsearch/elasticsearch/blob/5797682bd0b87e8efeffb046258287d480435395/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java#L156) and [TimeZoneRounding.java:163](https://github.com/elasticsearch/elasticsearch/blob/5797682bd0b87e8efeffb046258287d480435395/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java#L163).\n\nRunning this step by step on my first CET test case results the first time (line 156) in 7200000 (2 hours) and the second time in 3600000 (1 hour). This difference is causeing `2014-10-26T01:01:01 GMT+0200` to resolve to `2014-10-26T02:00:00 GMT+0200`. Explaining why the `1414278000000` (2014-10-26T01:01:01 GMT+0200) bucket to be empty, the next bucket containing the contents of this bucket, and the bucket after that a sum of two buckets.\n\n0001-Add-tests-for-timezone-problems.patch:\n\n```\nFrom 4e022035b25a141027be6aaae78c8ad2454e673f Mon Sep 17 00:00:00 2001\nFrom: Nils Dijk <me@thanod.nl>\nDate: Tue, 4 Nov 2014 07:56:05 -0600\nSubject: [PATCH 1/1] Add tests for timezone problems.\n\n---\n .../common/rounding/TimeZoneRoundingTests.java     | 39 ++++++++++++++++++++++\n 1 file changed, 39 insertions(+)\n\ndiff --git a/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java b/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java\nindex a3d70c7..e79ad1e 100644\n--- a/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java\n+++ b/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java\n@@ -83,6 +83,45 @@ public class TimeZoneRoundingTests extends ElasticsearchTestCase {\n         assertThat(tzRounding.round(utc(\"2009-02-03T01:01:01\")), equalTo(time(\"2009-02-03T01:00:00\", DateTimeZone.forOffsetHours(+2))));\n         assertThat(tzRounding.nextRoundingValue(time(\"2009-02-03T01:00:00\", DateTimeZone.forOffsetHours(+2))), equalTo(time(\"2009-02-03T02:00:00\", DateTimeZone.forOffsetHours(+2))));\n     }\n+    \n+    @Test\n+    public void testTimeTimeZoneRoundingDST() {\n+        Rounding tzRounding;\n+        // testing savings to non savings switch \n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"UTC\")).build();\n+        assertThat(tzRounding.round(time(\"2014-10-26T01:01:01\", DateTimeZone.forID(\"CET\"))), equalTo(time(\"2014-10-26T01:00:00\", DateTimeZone.forID(\"CET\"))));\n+        \n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"CET\")).build();\n+        assertThat(tzRounding.round(time(\"2014-10-26T01:01:01\", DateTimeZone.forID(\"CET\"))), equalTo(time(\"2014-10-26T01:00:00\", DateTimeZone.forID(\"CET\"))));\n+        \n+        // testing non savings to savings switch\n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"UTC\")).build();\n+        assertThat(tzRounding.round(time(\"2014-03-30T01:01:01\", DateTimeZone.forID(\"CET\"))), equalTo(time(\"2014-03-30T01:00:00\", DateTimeZone.forID(\"CET\"))));\n+        \n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"CET\")).build();\n+        assertThat(tzRounding.round(time(\"2014-03-30T01:01:01\", DateTimeZone.forID(\"CET\"))), equalTo(time(\"2014-03-30T01:00:00\", DateTimeZone.forID(\"CET\"))));\n+        \n+        // testing non savings to savings switch (America/Chicago)\n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"UTC\")).build();\n+        assertThat(tzRounding.round(time(\"2014-03-09T03:01:01\", DateTimeZone.forID(\"America/Chicago\"))), equalTo(time(\"2014-03-09T03:00:00\", DateTimeZone.forID(\"America/Chicago\"))));\n+        \n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"America/Chicago\")).build();\n+        assertThat(tzRounding.round(time(\"2014-03-09T03:01:01\", DateTimeZone.forID(\"America/Chicago\"))), equalTo(time(\"2014-03-09T03:00:00\", DateTimeZone.forID(\"America/Chicago\"))));\n+        \n+        // testing savings to non savings switch 2013 (America/Chicago)\n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"UTC\")).build();\n+        assertThat(tzRounding.round(time(\"2013-11-03T06:01:01\", DateTimeZone.forID(\"America/Chicago\"))), equalTo(time(\"2013-11-03T06:00:00\", DateTimeZone.forID(\"America/Chicago\"))));\n+        \n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"America/Chicago\")).build();\n+        assertThat(tzRounding.round(time(\"2013-11-03T06:01:01\", DateTimeZone.forID(\"America/Chicago\"))), equalTo(time(\"2013-11-03T06:00:00\", DateTimeZone.forID(\"America/Chicago\"))));\n+        \n+        // testing savings to non savings switch 2014 (America/Chicago)\n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"UTC\")).build();\n+        assertThat(tzRounding.round(time(\"2014-11-02T06:01:01\", DateTimeZone.forID(\"America/Chicago\"))), equalTo(time(\"2014-11-02T06:00:00\", DateTimeZone.forID(\"America/Chicago\"))));\n+        \n+        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID(\"America/Chicago\")).build();\n+        assertThat(tzRounding.round(time(\"2014-11-02T06:01:01\", DateTimeZone.forID(\"America/Chicago\"))), equalTo(time(\"2014-11-02T06:00:00\", DateTimeZone.forID(\"America/Chicago\"))));\n+    }\n\n     private long utc(String time) {\n         return time(time, DateTimeZone.UTC);\n-- \n1.9.3 (Apple Git-50)\n```\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}