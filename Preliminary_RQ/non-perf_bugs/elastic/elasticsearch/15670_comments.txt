[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/167518285","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-167518285","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":167518285,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NzUxODI4NQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-12-28T09:09:54Z","updated_at":"2015-12-28T09:09:54Z","author_association":"CONTRIBUTOR","body":"can't you just use the `weight` attribute of a function? instead of `influenceScore : 20%` you do `weight: 0.2`\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/169723140","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-169723140","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":169723140,"node_id":"MDEyOklzc3VlQ29tbWVudDE2OTcyMzE0MA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-01-07T16:46:37Z","updated_at":"2016-01-07T16:46:37Z","author_association":"CONTRIBUTOR","body":"@Vineeth-Mohan ping\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/169877447","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-169877447","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":169877447,"node_id":"MDEyOklzc3VlQ29tbWVudDE2OTg3NzQ0Nw==","user":{"login":"Vineeth-Mohan","id":977962,"node_id":"MDQ6VXNlcjk3Nzk2Mg==","avatar_url":"https://avatars3.githubusercontent.com/u/977962?v=4","gravatar_id":"","url":"https://api.github.com/users/Vineeth-Mohan","html_url":"https://github.com/Vineeth-Mohan","followers_url":"https://api.github.com/users/Vineeth-Mohan/followers","following_url":"https://api.github.com/users/Vineeth-Mohan/following{/other_user}","gists_url":"https://api.github.com/users/Vineeth-Mohan/gists{/gist_id}","starred_url":"https://api.github.com/users/Vineeth-Mohan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Vineeth-Mohan/subscriptions","organizations_url":"https://api.github.com/users/Vineeth-Mohan/orgs","repos_url":"https://api.github.com/users/Vineeth-Mohan/repos","events_url":"https://api.github.com/users/Vineeth-Mohan/events{/privacy}","received_events_url":"https://api.github.com/users/Vineeth-Mohan/received_events","type":"User","site_admin":false},"created_at":"2016-01-08T02:51:39Z","updated_at":"2016-01-08T02:51:39Z","author_association":"NONE","body":"Hello @s1monw , \n\nLet me walk through the motivation here.\nLets say , I am running the following query\n\n```\n{\n  \"explain\": true,\n  \"query\": {\n    \"function_score\": {\n      \"functions\": [\n        {\n          \"field_value_factor\": {\n            \"field\": \"dateOfJoining\",\n            \"modifier\": \"sqrt\",\n            \"missing\": 1\n          }\n        },\n        {\n          \"random_score\": {}\n        }\n      ],\n      \"score_mode\": \"sum\"\n    }\n  }\n}\n```\n\nWith this , I am seeing the following results - \n\n```\n{\n  \"_explanation\": {\n    \"value\": 1113172.4,\n    \"description\": \"function score, product of:\",\n    \"details\": [\n      {\n        \"value\": 1,\n        \"description\": \"ConstantScore(*:*), product of:\",\n        \"details\": [\n          {\n            \"value\": 1,\n            \"description\": \"boost\"\n          },\n          {\n            \"value\": 1,\n            \"description\": \"queryNorm\"\n          }\n        ]\n      },\n      {\n        \"value\": 1113172.4,\n        \"description\": \"Math.min of\",\n        \"details\": [\n          {\n            \"value\": 1113172.4,\n            \"description\": \"function score, score mode [sum]\",\n            \"details\": [\n              {\n                \"value\": 1113172.2,\n                \"description\": \"function score, product of:\",\n                \"details\": [\n                  {\n                    \"value\": 1,\n                    \"description\": \"match filter: *:*\"\n                  },\n                  {\n                    \"value\": 1113172.2,\n                    \"description\": \"field value function: sqrt(doc['dateOfJoining'].value?:1.0 * factor=1.0)\"\n                  }\n                ]\n              },\n              {\n                \"value\": 0.17271471,\n                \"description\": \"function score, product of:\",\n                \"details\": [\n                  {\n                    \"value\": 1,\n                    \"description\": \"match filter: *:*\"\n                  },\n                  {\n                    \"value\": 0.17271471,\n                    \"description\": \"random score function (seed: 519896482)\"\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"value\": 3.4028235e+38,\n            \"description\": \"maxBoost\"\n          }\n        ]\n      },\n      {\n        \"value\": 1,\n        \"description\": \"queryBoost\"\n      }\n    ]\n  }\n}\n```\n\nAs you can see the score by field_value_factor is always shadowing the score given by random_score , as in random_score has no relevance here.\n\nMy motivation for this issue came from this problem.\nOne solution would be to use the weight to  normalize the values , and that is how its currently done.\nBut then looking into the range of values for each function and deciding the weight score for all the functions and finding them manually seems like a hard case. And these weights that are computed manually might not be applicable across all documents. \n\nThe percentage suggestion was based on this , but I am finding it difficult to pen the maths behind the same. Only solution i found was to find the range of each score given by each function across all document and use that for percentage influence. But as scoring is per document , that wont be feasible. \n\nLet me know your thoughts on the subject.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/169929371","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-169929371","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":169929371,"node_id":"MDEyOklzc3VlQ29tbWVudDE2OTkyOTM3MQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-01-08T08:19:59Z","updated_at":"2016-01-08T08:19:59Z","author_association":"CONTRIBUTOR","body":"@Vineeth-Mohan I can see what you are saying and I admit it can be challenging. I personally don't see a good way to apply a general way of normalization here. I see the function score feature as a toolset of primitives that lets / forces the user to ensure that each element of the equation has it's relevant weight etc. I wonder if other ie. @brwe has some ideas?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/170012318","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-170012318","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":170012318,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MDAxMjMxOA==","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2016-01-08T14:07:35Z","updated_at":"2016-01-08T14:07:35Z","author_association":"CONTRIBUTOR","body":"It seems to me this is a case of \"learning to rank\". To find proper weights you would need to know what the expected ordering of result for different queries would be and the tune the weights accordingly. Without that the only thing you can do now is guess. \nWe currently have no way to scale functions either so they are comparable. This is something you will have to do in advance. Just in case you don't know aggregations help for that, see example below. Other than that we currently have no support to tune the weights automatically. \n\n```\n{\n  \"query\": {\n    \"function_score\": {\n      \"functions\": [\n        {\n          \"random_score\": {},\n          \"weight\": 1000\n        }\n      ]\n    }\n  },\n  \"aggs\": {\n    \"score_agg\": {\n      \"histogram\": {\n        \"script\": \"_score\",\n        \"interval\": 50\n      }\n    },\n    \"score_stats\": {\n      \"extended_stats\": {\n        \"script\": \"_score\"\n      }\n    }\n  }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/182026878","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-182026878","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":182026878,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MjAyNjg3OA==","user":{"login":"gkop","id":222582,"node_id":"MDQ6VXNlcjIyMjU4Mg==","avatar_url":"https://avatars3.githubusercontent.com/u/222582?v=4","gravatar_id":"","url":"https://api.github.com/users/gkop","html_url":"https://github.com/gkop","followers_url":"https://api.github.com/users/gkop/followers","following_url":"https://api.github.com/users/gkop/following{/other_user}","gists_url":"https://api.github.com/users/gkop/gists{/gist_id}","starred_url":"https://api.github.com/users/gkop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gkop/subscriptions","organizations_url":"https://api.github.com/users/gkop/orgs","repos_url":"https://api.github.com/users/gkop/repos","events_url":"https://api.github.com/users/gkop/events{/privacy}","received_events_url":"https://api.github.com/users/gkop/received_events","type":"User","site_admin":false},"created_at":"2016-02-09T19:44:07Z","updated_at":"2016-02-09T19:45:48Z","author_association":"NONE","body":"@brwe another benefit of what's proposed here if I understand correctly is one could use score_mode `avg` which could be weighted by `influenceScore` to generate scores nicely distributed on a range. This can be accounted for now in the client by passing `influenceScore` as a param to our script (which multiplies it by the nicely distributed intermediate score), and keeping a running sum of the influence scores, but it would be quite amazing if the server took care of it for us instead.\n\nIn fact, on reading the docs at https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html , I initially interpreted that we could pass `weight` in as an option to any kind of function_score score function to obtain this behavior, that just made sense to me. Alas I misunderstood.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/190386362","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-190386362","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":190386362,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDM4NjM2Mg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-02-29T20:58:03Z","updated_at":"2016-02-29T20:58:03Z","author_association":"CONTRIBUTOR","body":"The only other thing I could suggest is to apply a min/max score to each function, eg you could force `gauss` to be between 0 and 2.  With that, the weights would be easier to adjust.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/375080974","html_url":"https://github.com/elastic/elasticsearch/issues/15670#issuecomment-375080974","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15670","id":375080974,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTA4MDk3NA==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2018-03-21T20:15:46Z","updated_at":"2018-03-21T20:15:58Z","author_association":"CONTRIBUTOR","body":"Closing this in favour of https://github.com/elastic/elasticsearch/issues/27588, where one of the desired features could be to normalize scores","performed_via_github_app":null}]