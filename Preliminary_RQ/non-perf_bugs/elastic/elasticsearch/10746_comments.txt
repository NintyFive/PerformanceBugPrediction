[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/96378859","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-96378859","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":96378859,"node_id":"MDEyOklzc3VlQ29tbWVudDk2Mzc4ODU5","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-04-26T13:35:11Z","updated_at":"2015-04-26T13:35:11Z","author_association":"CONTRIBUTOR","body":"Hi @areek \n\nI like the look of this a lot.  Btw, at the top you say we can use an arbitrary filter, but then later you say only a prefix/regex/etc filter.  Which is it?\n\nAlso, under \"Context Query\" you say \"Prefix, Regex and Fuzzy queries can be used with this query.\"  Can you provide an example of this?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/96378874","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-96378874","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":96378874,"node_id":"MDEyOklzc3VlQ29tbWVudDk2Mzc4ODc0","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-04-26T13:35:31Z","updated_at":"2015-04-26T13:35:31Z","author_association":"CONTRIBUTOR","body":"@s1monw please could you review this as well.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/97102694","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-97102694","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":97102694,"node_id":"MDEyOklzc3VlQ29tbWVudDk3MTAyNjk0","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-04-28T15:17:30Z","updated_at":"2015-04-28T15:17:30Z","author_association":"CONTRIBUTOR","body":"I like this a lot the only thing that I think is confusing is that we use `text` as the property name if it's prefix  / fuzzy prefix, should we just name it `prefix` since we also use `regex`? I wonder if we finally plan to return the entire document here?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/97611309","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-97611309","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":97611309,"node_id":"MDEyOklzc3VlQ29tbWVudDk3NjExMzA5","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2015-04-29T23:10:34Z","updated_at":"2015-04-29T23:10:34Z","author_association":"CONTRIBUTOR","body":"@clintongormley & @s1monw thanks for taking a look!\n\nI have updated the **Query Interface** section to clarify how multiple queries can be used together (includes example). \n\n`text` has been renamed to `prefix` for prefix queries and `regex` for regex prefix queries. At the moment, `_source` and `fields` can be used to retrieve field values for all resulting documents (like the `_search` API).\n\nAlso updated the issue with link to [LUCENE-6459](https://issues.apache.org/jira/browse/LUCENE-6459), query interface for _suggest_ API.\n\nLet me know if there is still any confusion with the API.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/98648941","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-98648941","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":98648941,"node_id":"MDEyOklzc3VlQ29tbWVudDk4NjQ4OTQx","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T09:23:46Z","updated_at":"2015-05-04T09:23:46Z","author_association":"CONTRIBUTOR","body":"Looking awesome.  A few thoughts:\n-  The `search_analyzer` should default to the `analyzer` setting - just checking that this is the case.\n- We should probably remove the `fuzzy` wrapper and just allow specifying `fuzziness` directly?\n- For geo-context searching, you sort on distance and THEN on weight?  Feels like we should be able to combine these two factors in a user configurable way.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/99921185","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-99921185","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":99921185,"node_id":"MDEyOklzc3VlQ29tbWVudDk5OTIxMTg1","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2015-05-07T15:56:40Z","updated_at":"2015-05-07T15:56:40Z","author_association":"CONTRIBUTOR","body":"Thanks @clintongormley for the feedback!\n\n> The search_analyzer should default to the analyzer setting - just checking that this is the case.\n\nThat is the case :)\n\n> We should probably remove the fuzzy wrapper and just allow specifying fuzziness directly?\n\nIf we remove the fuzzy wrapper, there would be no way for the user to specify `transpositions`, `min_length`, `prefix_length` and `unicode_aware`. I think it is useful to expose at least the `min_length` and `prefix_length` to the user?\n\n> For geo-context searching, you sort on distance and THEN on weight? Feels like we should be able to combine these two factors in a user configurable way.\n\nWe can allow this to be configurable (distance then weight or weight then distance) in the future. I think sorting the suggestions by distance and then weight for the first iteration is good?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/100132007","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-100132007","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":100132007,"node_id":"MDEyOklzc3VlQ29tbWVudDEwMDEzMjAwNw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-05-08T07:26:34Z","updated_at":"2015-05-08T07:26:34Z","author_association":"CONTRIBUTOR","body":"> If we remove the fuzzy wrapper, there would be no way for the user to specify transpositions, min_length, prefix_length and unicode_aware. I think it is useful to expose at least the min_length and prefix_length to the user?\n\nOK, that's fine.  Btw, do we really need `unicode_aware`?  We use unicode everywhere, not sure why we would ever disable that?\n\n> We can allow this to be configurable (distance then weight or weight then distance) in the future. I think sorting the suggestions by distance and then weight for the first iteration is good?\n\nOK\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/142649858","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-142649858","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":142649858,"node_id":"MDEyOklzc3VlQ29tbWVudDE0MjY0OTg1OA==","user":{"login":"abhijitiitr","id":1880441,"node_id":"MDQ6VXNlcjE4ODA0NDE=","avatar_url":"https://avatars2.githubusercontent.com/u/1880441?v=4","gravatar_id":"","url":"https://api.github.com/users/abhijitiitr","html_url":"https://github.com/abhijitiitr","followers_url":"https://api.github.com/users/abhijitiitr/followers","following_url":"https://api.github.com/users/abhijitiitr/following{/other_user}","gists_url":"https://api.github.com/users/abhijitiitr/gists{/gist_id}","starred_url":"https://api.github.com/users/abhijitiitr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhijitiitr/subscriptions","organizations_url":"https://api.github.com/users/abhijitiitr/orgs","repos_url":"https://api.github.com/users/abhijitiitr/repos","events_url":"https://api.github.com/users/abhijitiitr/events{/privacy}","received_events_url":"https://api.github.com/users/abhijitiitr/received_events","type":"User","site_admin":false},"created_at":"2015-09-23T16:07:53Z","updated_at":"2015-09-23T16:08:02Z","author_association":"NONE","body":"@areek Scoring for fuzzy queries is still doesn't not appear to be correct. Results having exact match with the input string for suggest queries are not having better scores than fuzzy matches. I guess you have noted it in the code itself.\n [Code link](https://github.com/elastic/elasticsearch/blob/completion_suggester_v2/core/src/main/java/org/apache/lucene/search/suggest/xdocument/FuzzyCompletionQuery.java#L223)\nDo you have any suggestions for handling fuzziness correctly in the proposed Completion Suggester?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/143889686","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-143889686","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":143889686,"node_id":"MDEyOklzc3VlQ29tbWVudDE0Mzg4OTY4Ng==","user":{"login":"ivpusic","id":450140,"node_id":"MDQ6VXNlcjQ1MDE0MA==","avatar_url":"https://avatars0.githubusercontent.com/u/450140?v=4","gravatar_id":"","url":"https://api.github.com/users/ivpusic","html_url":"https://github.com/ivpusic","followers_url":"https://api.github.com/users/ivpusic/followers","following_url":"https://api.github.com/users/ivpusic/following{/other_user}","gists_url":"https://api.github.com/users/ivpusic/gists{/gist_id}","starred_url":"https://api.github.com/users/ivpusic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivpusic/subscriptions","organizations_url":"https://api.github.com/users/ivpusic/orgs","repos_url":"https://api.github.com/users/ivpusic/repos","events_url":"https://api.github.com/users/ivpusic/events{/privacy}","received_events_url":"https://api.github.com/users/ivpusic/received_events","type":"User","site_admin":false},"created_at":"2015-09-28T22:18:50Z","updated_at":"2015-09-28T22:18:50Z","author_association":"NONE","body":"what about `duplicate_output` option? It was mentioned here https://github.com/elastic/elasticsearch/issues/8909\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/144050702","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-144050702","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":144050702,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDA1MDcwMg==","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2015-09-29T12:59:00Z","updated_at":"2015-09-29T12:59:00Z","author_association":"CONTRIBUTOR","body":"@abhijitiitr fuzziness scoring can not distinguish between a perfect match and a match with only the last character being a typo. You could sort the results you get back in your application to correctly score the fuzziness. Unfortunately, this is what I would suggest atm.\nBTW, see https://github.com/elastic/elasticsearch/pull/13659 for https://github.com/elastic/elasticsearch/pull/11740#issuecomment-123989933, now you can return values of document fields, along with each suggestion.\n\n@ivpusic the `duplicate_output` has been removed. now each suggestion is associated with a unique document instead. If you have two identical `input`s for two documents, you will get suggestions back both the documents with the same input. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/144370545","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-144370545","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":144370545,"node_id":"MDEyOklzc3VlQ29tbWVudDE0NDM3MDU0NQ==","user":{"login":"abhijitiitr","id":1880441,"node_id":"MDQ6VXNlcjE4ODA0NDE=","avatar_url":"https://avatars2.githubusercontent.com/u/1880441?v=4","gravatar_id":"","url":"https://api.github.com/users/abhijitiitr","html_url":"https://github.com/abhijitiitr","followers_url":"https://api.github.com/users/abhijitiitr/followers","following_url":"https://api.github.com/users/abhijitiitr/following{/other_user}","gists_url":"https://api.github.com/users/abhijitiitr/gists{/gist_id}","starred_url":"https://api.github.com/users/abhijitiitr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhijitiitr/subscriptions","organizations_url":"https://api.github.com/users/abhijitiitr/orgs","repos_url":"https://api.github.com/users/abhijitiitr/repos","events_url":"https://api.github.com/users/abhijitiitr/events{/privacy}","received_events_url":"https://api.github.com/users/abhijitiitr/received_events","type":"User","site_admin":false},"created_at":"2015-09-30T11:37:58Z","updated_at":"2015-09-30T11:38:50Z","author_association":"NONE","body":"@areek :thumbsup: for the payload feature.\n\nFor fuzzy queries, we have to fetch (> N) results for getting N correct results. In some cases I tested I had to set the `size` option as 5N. That's a bummer I guess but its a Lucene issue and I think it would be solved in future.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/149642409","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-149642409","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":149642409,"node_id":"MDEyOklzc3VlQ29tbWVudDE0OTY0MjQwOQ==","user":{"login":"djschny","id":129643,"node_id":"MDQ6VXNlcjEyOTY0Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/129643?v=4","gravatar_id":"","url":"https://api.github.com/users/djschny","html_url":"https://github.com/djschny","followers_url":"https://api.github.com/users/djschny/followers","following_url":"https://api.github.com/users/djschny/following{/other_user}","gists_url":"https://api.github.com/users/djschny/gists{/gist_id}","starred_url":"https://api.github.com/users/djschny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djschny/subscriptions","organizations_url":"https://api.github.com/users/djschny/orgs","repos_url":"https://api.github.com/users/djschny/repos","events_url":"https://api.github.com/users/djschny/events{/privacy}","received_events_url":"https://api.github.com/users/djschny/received_events","type":"User","site_admin":false},"created_at":"2015-10-20T17:36:28Z","updated_at":"2015-10-20T17:36:28Z","author_association":"CONTRIBUTOR","body":"I have some concerns over performance with the change to remove the `payload` functionality. Let me try to elaborate and please let me know if I stated anything incorrectly.\n\nWith the current 1.X completion suggester, the entire FST (including payloads) is held on heap (but persisted to disk). By leveraging payloads we were able to strive extreme performance as we never had to do a FETCH of the associated docs for field values, parse the json, etc. This made for very fast response times.\n\nMy concern is not allowing clients who continue to want to make indices with completion suggester mappings that leverage payloads due to performance reasons. Instead I believe it would be really nice to default to the new approach, but one could still opt-in to using payloads. While payloads can be problematic if abused, many clients are smart about it and/or have small enough suggester FSTs that the extra memory associated with payloads is a non-issue compared to the performance expectation they have.\n\nHopefully there has been testing or other work that I missed reading this issue and the associated PRs that proves this a non-issue and apologies if I missed it. Just want to make sure we don't have surprises and regression for customers.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/152860851","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-152860851","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":152860851,"node_id":"MDEyOklzc3VlQ29tbWVudDE1Mjg2MDg1MQ==","user":{"login":"kabcampbell","id":15573793,"node_id":"MDQ6VXNlcjE1NTczNzkz","avatar_url":"https://avatars1.githubusercontent.com/u/15573793?v=4","gravatar_id":"","url":"https://api.github.com/users/kabcampbell","html_url":"https://github.com/kabcampbell","followers_url":"https://api.github.com/users/kabcampbell/followers","following_url":"https://api.github.com/users/kabcampbell/following{/other_user}","gists_url":"https://api.github.com/users/kabcampbell/gists{/gist_id}","starred_url":"https://api.github.com/users/kabcampbell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kabcampbell/subscriptions","organizations_url":"https://api.github.com/users/kabcampbell/orgs","repos_url":"https://api.github.com/users/kabcampbell/repos","events_url":"https://api.github.com/users/kabcampbell/events{/privacy}","received_events_url":"https://api.github.com/users/kabcampbell/received_events","type":"User","site_admin":false},"created_at":"2015-11-01T20:25:57Z","updated_at":"2015-11-01T20:25:57Z","author_association":"NONE","body":"Hi all,\nI am running up against the hard-coded limit to the number of context categories that a suggestion can have, as referenced in [#9466](https://github.com/elastic/elasticsearch/issues/9466). Is that limit still on track to be removed? Is this version of the completion suggester to be included in elastic 2.1?\nThanks!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/153682533","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-153682533","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":153682533,"node_id":"MDEyOklzc3VlQ29tbWVudDE1MzY4MjUzMw==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2015-11-04T10:52:49Z","updated_at":"2015-11-04T10:52:49Z","author_association":"CONTRIBUTOR","body":"> By leveraging payloads we were able to strive extreme performance as we never had to do a FETCH of the associated docs for field values, parse the json, etc. This made for very fast response times.\n\nHi @djschny, you are correct, that payloads are moving out of the FST to disk.\n\nHowever, with this PR, we 1) pull the payloads from doc values, which is much more efficient than loading from re-parsing `_source` or loading stored fields, and 2) we do so eagerly in a single pass (no second fetch phase), though this may change in the future if we merge suggest into search implementation.\n\nAlso, the number of values we are pulling is typically tiny (the `size` passed in the suggest request, i.e. number of suggestions, default is 5).  We pull them only once we have the top suggestions for that shard.\n\nSo while there will be some perf hit, I expect it won't matter in most use cases.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/153724649","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-153724649","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":153724649,"node_id":"MDEyOklzc3VlQ29tbWVudDE1MzcyNDY0OQ==","user":{"login":"djschny","id":129643,"node_id":"MDQ6VXNlcjEyOTY0Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/129643?v=4","gravatar_id":"","url":"https://api.github.com/users/djschny","html_url":"https://github.com/djschny","followers_url":"https://api.github.com/users/djschny/followers","following_url":"https://api.github.com/users/djschny/following{/other_user}","gists_url":"https://api.github.com/users/djschny/gists{/gist_id}","starred_url":"https://api.github.com/users/djschny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djschny/subscriptions","organizations_url":"https://api.github.com/users/djschny/orgs","repos_url":"https://api.github.com/users/djschny/repos","events_url":"https://api.github.com/users/djschny/events{/privacy}","received_events_url":"https://api.github.com/users/djschny/received_events","type":"User","site_admin":false},"created_at":"2015-11-04T13:52:32Z","updated_at":"2015-11-04T13:52:32Z","author_association":"CONTRIBUTOR","body":"> So while there will be some perf hit, I expect it won't matter in most use cases.\n\nI agree as well. Where my concern lies is in the 20%:\n- We don't have concrete numbers (that I'm aware of) to validate the expectation\n- For the 20% of folks (made up number following the 80/20 rule with our userbase) that need that blistering performance, that it will hurt them and they won't have an option to choose the old approach.\n\nGenerally speaking I tend to always follow the \"golden rule\" that says to \"always put the user in control\". So therefore allowing our users to choose which approach works best for them based upon a tradeoff of speed for increased memory, vs. large scale and off heap memory usage at the cost of some slight performance.\n\nHope I'm not being too noisy, but would hate to see it be an unpleasant surprise or an upgrade blocker for that 20% of our user base. One of the things that has made Elasticsearch so wonderfully accepted by everyone was that users had options to configure and use it for what made sense for their particular requirements/needs (since everyone is different) and just don't want to loose that.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/155166076","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-155166076","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":155166076,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NTE2NjA3Ng==","user":{"login":"djschny","id":129643,"node_id":"MDQ6VXNlcjEyOTY0Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/129643?v=4","gravatar_id":"","url":"https://api.github.com/users/djschny","html_url":"https://github.com/djschny","followers_url":"https://api.github.com/users/djschny/followers","following_url":"https://api.github.com/users/djschny/following{/other_user}","gists_url":"https://api.github.com/users/djschny/gists{/gist_id}","starred_url":"https://api.github.com/users/djschny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djschny/subscriptions","organizations_url":"https://api.github.com/users/djschny/orgs","repos_url":"https://api.github.com/users/djschny/repos","events_url":"https://api.github.com/users/djschny/events{/privacy}","received_events_url":"https://api.github.com/users/djschny/received_events","type":"User","site_admin":false},"created_at":"2015-11-09T19:29:30Z","updated_at":"2015-11-09T19:29:30Z","author_association":"CONTRIBUTOR","body":"Was this prematurely closed? I'm still pretty concerned about removing the payloads ability the users have now without concrete numbers that show the speed is the same.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/155175249","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-155175249","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":155175249,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NTE3NTI0OQ==","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2015-11-09T20:02:41Z","updated_at":"2015-11-09T20:02:41Z","author_association":"CONTRIBUTOR","body":"@djschny This was closed as the feature is merged to master and will be available for v2.2, but is still open for discussion. I will benchmark the feature and update this issue with the benchmark results.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/157276138","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-157276138","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":157276138,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NzI3NjEzOA==","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2015-11-17T05:41:20Z","updated_at":"2015-11-17T06:02:21Z","author_association":"CONTRIBUTOR","body":"@djschny I have [benchmarked](https://gist.github.com/areek/4fdd319b855be919e1ac) the completion suggester on a single shard environment using the [geonames](http://download.geonames.org/export/dump/allCountries.zip) dataset of ~9.3 million city names. The FST size for the dataset was ~201.5 mb. \nThe following shows the comparison of search performance (in KQPS) of the completion suggester (with and without using the newly added query-time doc-values based `payload`) and an equivalent `prefix` query with increasing number of prefix length:\n![benchmark_completion_master](https://cloud.githubusercontent.com/assets/753679/11201257/78eedf72-8caa-11e5-8ad0-34c944394d00.png)\n\nThe completion suggester was at most `+19KQPS` faster and at least `+9KQPS` faster compared with its prefix query counterpart for the prefix lengths of 1 to 6. Retrieving a non-analyzed doc-values based string `payload` at query-time was at most `-6KQPS` slower and at least `-2KQPS` slower compared to completion suggestions without `payload`.  \n\nThe same benchmark was run on pre-2.2 completion suggester. As `payloads` was an index-time setting the dataset produced a FST size of ~201.5mb without payload and ~352.5mb with payload. The alternate names of the cities were used for the `payload` values:\n![benchmar_completion_2 2](https://cloud.githubusercontent.com/assets/753679/11201252/6dc6be9e-8caa-11e5-8297-2fb133b93b69.png)\n\nThe pre-2.2 completion suggester was at most `+19KQPS` faster and at least `+11KQPS` faster compared with its prefix query counterpart and completions with index-time payloads were at most `-3KQPS` slower and at least `-1KQPS` slower than completions with no payloads.\n\nNote that the overall trend of the benchmarks are more interesting than the absolute KQPS values, as they seem to vary between runs unlike the overall trends seen in the graphs. \n\nOverall the query-time doc-values based payloads are slower than the previous index-time payloads that were stored as part of the FST, this is as expected and IMO justified by ensuring that the FST size is only bounded by its inputs instead of arbitrary index-time payload values (that could be anything from a small id to a full-blown json object) and the provided flexibility of specifying one or more query-time payloads. The current infrastructure also makes it possible to use FST index directly in the query DSL and for aggregations in the future. IMO, if needed, in a future optimization we can expose the index-time `payloads` option as a  more sane `_cache` option, where users can specify a single field to be stored in the FST for speeding up completions with payloads.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/157650480","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-157650480","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":157650480,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NzY1MDQ4MA==","user":{"login":"simplechris","id":520892,"node_id":"MDQ6VXNlcjUyMDg5Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/520892?v=4","gravatar_id":"","url":"https://api.github.com/users/simplechris","html_url":"https://github.com/simplechris","followers_url":"https://api.github.com/users/simplechris/followers","following_url":"https://api.github.com/users/simplechris/following{/other_user}","gists_url":"https://api.github.com/users/simplechris/gists{/gist_id}","starred_url":"https://api.github.com/users/simplechris/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/simplechris/subscriptions","organizations_url":"https://api.github.com/users/simplechris/orgs","repos_url":"https://api.github.com/users/simplechris/repos","events_url":"https://api.github.com/users/simplechris/events{/privacy}","received_events_url":"https://api.github.com/users/simplechris/received_events","type":"User","site_admin":false},"created_at":"2015-11-18T09:07:45Z","updated_at":"2015-11-18T09:07:45Z","author_association":"CONTRIBUTOR","body":"> Generally speaking I tend to always follow the \"golden rule\" that says to \"always put the user in control\". So therefore allowing our users to choose which approach works best for them based upon a tradeoff of speed for increased memory, vs. large scale and off heap memory usage at the cost of some slight performance  - [djschny](https://github.com/elastic/elasticsearch/issues/10746#issuecomment-153724649)\n\n:+1:  Yeah, I would like to have this option. I'm willing to use more memory to have my payloads stored within the FST.\n\n> ... where users can specify a single field to be stored in the FST for speeding up completions with payloads. - [areek](https://github.com/elastic/elasticsearch/issues/10746#issuecomment-157276138)\n\nThis sounds like a good compromise. Without it, honestly, I'd be very apprehensive about upgrading.\n\nThe rest of the ticket and progress sounds so exciting, I believe we should document this trade-off and allow users to make the informed decision of if/how to store their payloads. Let's keep the user in ultimate control, even if the default behaviour changes to best serve the 80% usecase. :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159103641","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-159103641","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":159103641,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTEwMzY0MQ==","user":{"login":"djschny","id":129643,"node_id":"MDQ6VXNlcjEyOTY0Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/129643?v=4","gravatar_id":"","url":"https://api.github.com/users/djschny","html_url":"https://github.com/djschny","followers_url":"https://api.github.com/users/djschny/followers","following_url":"https://api.github.com/users/djschny/following{/other_user}","gists_url":"https://api.github.com/users/djschny/gists{/gist_id}","starred_url":"https://api.github.com/users/djschny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djschny/subscriptions","organizations_url":"https://api.github.com/users/djschny/orgs","repos_url":"https://api.github.com/users/djschny/repos","events_url":"https://api.github.com/users/djschny/events{/privacy}","received_events_url":"https://api.github.com/users/djschny/received_events","type":"User","site_admin":false},"created_at":"2015-11-23T23:31:47Z","updated_at":"2015-11-23T23:31:47Z","author_association":"CONTRIBUTOR","body":"@areek Thanks for al the numbers, much appreciated. In your examples, do you have the average response time associated with performing a completion suggestion with the various prefix lengths? That is the more important measurement that I was expecting to see, as that results in the end user experience.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159993913","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-159993913","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":159993913,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTk5MzkxMw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2015-11-26T21:04:13Z","updated_at":"2015-11-26T21:05:07Z","author_association":"MEMBER","body":"> Overall the query-time doc-values based payloads are slower than the previous index-time payloads that were stored as part of the FST, this is as expected and IMO justified by ensuring that the FST size is only bounded by its inputs instead of arbitrary index-time payload values (that could be anything from a small id to a full-blown json object) and the provided flexibility of specifying one or more query-time payloads. - [areek](https://github.com/elastic/elasticsearch/issues/10746#issuecomment-157276138)\n\nHave you considered replacing the BytesRef in the FST by a pointer to a file where the payloads would be written ? Something like Pair<Long, Long> where the first value would still be the weight but the second value would be a pointer to the start of the payload for this entry. This would ensure that the FST size is only bounded by its inputs and also speed up the performance compared to the docvalues case (though it would rely on mmap reads in both cases).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159997107","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-159997107","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":159997107,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTk5NzEwNw==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-11-26T21:46:40Z","updated_at":"2015-11-26T21:46:40Z","author_association":"CONTRIBUTOR","body":"> ave you considered replacing the BytesRef in the FST by a pointer to a file where the payloads would be written ? Something like Pair<Long, Long> where the first value would still be the weight but the second value would be a pointer to the start of the payload for this entry. This would ensure that the FST size is only bounded by its inputs and also speed up the performance compared to the docvalues case (though it would rely on mmap reads in both cases)\n\nisn't this what we do now with putting the payloads in docvalues? I mean we use the doc ID to reference a payload on disk?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/160071395","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-160071395","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":160071395,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MDA3MTM5NQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2015-11-27T08:43:05Z","updated_at":"2015-11-27T08:43:05Z","author_association":"MEMBER","body":"@s1monw right but my point is that we can make the FST size only bounded by its input without the docvalues. Having the docvalues in the process adds an indirection (docid => file_ptr = > payload) that the direct pointer inside the FST could save. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/160088321","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-160088321","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":160088321,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MDA4ODMyMQ==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-11-27T09:24:42Z","updated_at":"2015-11-27T09:24:42Z","author_association":"CONTRIBUTOR","body":"> @s1monw right but my point is that we can make the FST size only bounded by its input without the docvalues. Having the docvalues in the process adds an indirection (docid => file_ptr = > payload) that the direct pointer inside the FST could save.\n\nthis breaks all feature isolation with no benefit IMO. We are using a compressed integer to reference the payload (the docID) all optimization on top of this is premature and IMO of no benefit. We would need to invent and maintain yet another file format which is not sustainable in our environment. IMO the doc-values indirection is already as specialized as it gets here. And remember we only fetching this for the topN.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161155861","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-161155861","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":161155861,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTE1NTg2MQ==","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2015-12-02T02:03:13Z","updated_at":"2015-12-02T02:03:13Z","author_association":"CONTRIBUTOR","body":"> In your examples, do you have the average response time associated with performing a completion suggestion with the various prefix lengths? That is the more important measurement that I was expecting to see, as that results in the end user experience.\n\n@djschny I think average response time for various prefix lengths is misleading when we are concerned with completion suggester's latency. If latency is a concern for completions, IMO the right question to ask is \"What is the highest latency I can tolerate?\" instead. From the result, we can see that latency decreases as the prefix length increases (as expected), hence the QPS for a prefix length of 1 is the most important measure in the benchmark, the rest just shows the relationship between the latency and increasing prefix lengths. So for this dataset, it happens to be in a range of `20` to `18` KQPS. In contrast, if we measure the average response time it would be somewhere in the low 30s in KQPS, which does not really help when you always see higher latency for smaller prefixes, which is the main use case for using completions to begin with.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/168853833","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-168853833","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":168853833,"node_id":"MDEyOklzc3VlQ29tbWVudDE2ODg1MzgzMw==","user":{"login":"djschny","id":129643,"node_id":"MDQ6VXNlcjEyOTY0Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/129643?v=4","gravatar_id":"","url":"https://api.github.com/users/djschny","html_url":"https://github.com/djschny","followers_url":"https://api.github.com/users/djschny/followers","following_url":"https://api.github.com/users/djschny/following{/other_user}","gists_url":"https://api.github.com/users/djschny/gists{/gist_id}","starred_url":"https://api.github.com/users/djschny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djschny/subscriptions","organizations_url":"https://api.github.com/users/djschny/orgs","repos_url":"https://api.github.com/users/djschny/repos","events_url":"https://api.github.com/users/djschny/events{/privacy}","received_events_url":"https://api.github.com/users/djschny/received_events","type":"User","site_admin":false},"created_at":"2016-01-05T00:31:59Z","updated_at":"2016-01-05T00:31:59Z","author_association":"CONTRIBUTOR","body":"@areek That is exactly my point, some users may not be able to tolerate the highest latency. For example if folks see their average completion suggest response time go from 5 millis to 20 millis due to the hit on disk to fetch from _source, then they would ideally want the original behavior of storing a payload in the FST.\n\nMost importantly, today you can make an FST and not actually have any relationship to source documents stored in ES. With the new change you cannot make a completion suggester with payloads but have your actual documents stored in a different system. Instead you would need to make fake/dummy documents that just contained the same fields that you would ultimately want in the FST. My apologies if I'm missing something there.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222167944","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-222167944","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":222167944,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjE2Nzk0NA==","user":{"login":"JeremyBYU","id":6628085,"node_id":"MDQ6VXNlcjY2MjgwODU=","avatar_url":"https://avatars1.githubusercontent.com/u/6628085?v=4","gravatar_id":"","url":"https://api.github.com/users/JeremyBYU","html_url":"https://github.com/JeremyBYU","followers_url":"https://api.github.com/users/JeremyBYU/followers","following_url":"https://api.github.com/users/JeremyBYU/following{/other_user}","gists_url":"https://api.github.com/users/JeremyBYU/gists{/gist_id}","starred_url":"https://api.github.com/users/JeremyBYU/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JeremyBYU/subscriptions","organizations_url":"https://api.github.com/users/JeremyBYU/orgs","repos_url":"https://api.github.com/users/JeremyBYU/repos","events_url":"https://api.github.com/users/JeremyBYU/events{/privacy}","received_events_url":"https://api.github.com/users/JeremyBYU/received_events","type":"User","site_admin":false},"created_at":"2016-05-27T14:54:54Z","updated_at":"2016-05-27T14:55:13Z","author_association":"NONE","body":"I'm having a difficult time understanding how to use the new payloads option.  I see that we are supposed to \"store\" our payload on the actual document now and access these properties through the `payloads: [property'` syntax.\nHowever my payload is a nested JSON document that has multiple fields, many of which are optional. So I map this JSON document to a property but I am forced to access the payload in this awkward way:\n\n```\n        \"prefix\": \"coupon mi\",\n        \"completion\": {\n            \"payload\": [\"search.prop1.nested.prop2\", \"search.prop2.nestedprop3\"], \n            \"field\": \"suggest\",\n            \"fuzzy\":{},\n            \"size\": 25\n        }\n```\n\nIs there any way to just tell the suggestion engine to just return back a payload that is simply a nested JSON object? Or maybe more clearly is there any way to **not** index a JSON object on the property of a document? So that when the suggestion engine 'looks up' a property it just return the JSON.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222516551","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-222516551","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":222516551,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjUxNjU1MQ==","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"created_at":"2016-05-30T15:37:01Z","updated_at":"2016-05-30T15:37:01Z","author_association":"CONTRIBUTOR","body":"Hey @JeremyBYU \n\n> Is there any way to just tell the suggestion engine to just return back a payload that is simply a nested JSON object?\n\nCurrently no, you have to specify the payload fields as you are currently doing. But we plan to return the entire document a suggestion hit is associated with. When that is supported, you can use source filtering to exclude/include fields from the document. \n\nIn general I would suggest using a dedicated index for suggestions, so the associated suggest documents contain fields only relevant for retrieving at suggest time. This might simplify the document structure and avoid the need to specify nested json fields as payloads altogether.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223045070","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-223045070","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":223045070,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzA0NTA3MA==","user":{"login":"JeremyBYU","id":6628085,"node_id":"MDQ6VXNlcjY2MjgwODU=","avatar_url":"https://avatars1.githubusercontent.com/u/6628085?v=4","gravatar_id":"","url":"https://api.github.com/users/JeremyBYU","html_url":"https://github.com/JeremyBYU","followers_url":"https://api.github.com/users/JeremyBYU/followers","following_url":"https://api.github.com/users/JeremyBYU/following{/other_user}","gists_url":"https://api.github.com/users/JeremyBYU/gists{/gist_id}","starred_url":"https://api.github.com/users/JeremyBYU/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JeremyBYU/subscriptions","organizations_url":"https://api.github.com/users/JeremyBYU/orgs","repos_url":"https://api.github.com/users/JeremyBYU/repos","events_url":"https://api.github.com/users/JeremyBYU/events{/privacy}","received_events_url":"https://api.github.com/users/JeremyBYU/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T16:16:13Z","updated_at":"2016-06-01T16:16:13Z","author_association":"NONE","body":"Thanks for the explanation. I was indeed using a dedicated index.  The structure of the object is important, so if I flatten it into one document, I will have to regenerate it for the client. Thanks\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258557551","html_url":"https://github.com/elastic/elasticsearch/issues/10746#issuecomment-258557551","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","id":258557551,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODU1NzU1MQ==","user":{"login":"Antonhansel","id":4123811,"node_id":"MDQ6VXNlcjQxMjM4MTE=","avatar_url":"https://avatars0.githubusercontent.com/u/4123811?v=4","gravatar_id":"","url":"https://api.github.com/users/Antonhansel","html_url":"https://github.com/Antonhansel","followers_url":"https://api.github.com/users/Antonhansel/followers","following_url":"https://api.github.com/users/Antonhansel/following{/other_user}","gists_url":"https://api.github.com/users/Antonhansel/gists{/gist_id}","starred_url":"https://api.github.com/users/Antonhansel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Antonhansel/subscriptions","organizations_url":"https://api.github.com/users/Antonhansel/orgs","repos_url":"https://api.github.com/users/Antonhansel/repos","events_url":"https://api.github.com/users/Antonhansel/events{/privacy}","received_events_url":"https://api.github.com/users/Antonhansel/received_events","type":"User","site_admin":false},"created_at":"2016-11-04T21:56:05Z","updated_at":"2016-11-04T21:56:05Z","author_association":"NONE","body":"Just dug up this issue, I'm trying to get duplicates documents.\nI'm not sure about [this](https://github.com/elastic/elasticsearch/issues/10746#issuecomment-144050702) answer from @areek, does it mean it should return duplicate documents?\n","performed_via_github_app":null}]