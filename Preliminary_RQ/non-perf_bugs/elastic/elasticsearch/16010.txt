{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/16010","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16010/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16010/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16010/events","html_url":"https://github.com/elastic/elasticsearch/issues/16010","id":126824627,"node_id":"MDU6SXNzdWUxMjY4MjQ2Mjc=","number":16010,"title":"[Ingest] Add more descriptive pipeline factory errors in _simulate and PUT pipeline/id","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"labels":[{"id":268963484,"node_id":"MDU6TGFiZWwyNjg5NjM0ODQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Ingest","name":":Core/Features/Ingest","color":"0e8a16","default":false,"description":"Execution or management of Ingest Pipelines"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":246685314,"node_id":"MDU6TGFiZWwyNDY2ODUzMTQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v5.0.0-alpha1","name":"v5.0.0-alpha1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"assignees":[{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false}],"milestone":null,"comments":8,"created_at":"2016-01-15T07:57:07Z","updated_at":"2016-01-29T21:44:31Z","closed_at":"2016-01-29T21:44:31Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"When someone issues the following request to `_simulate`, The pipeline factory will error out while \nattempting to construct the supplied pipeline. The reason for this is that the `date` processor is not configured correctly, `locale` is invalid. The exception is thrown in the processor's `create` here: https://github.com/elastic/elasticsearch/blob/feature/ingest/core/src/main/java/org/elasticsearch/ingest/processor/DateProcessor.java#L130.\n\n``` json\n{\n            \"pipeline\": {\n              \"description\": \"_description\",\n              \"processors\": [\n                {\n                  \"date\" : {\n                  \"processor_tag\" : \"date_processor\",\n                  \"match_field\" : \"date_source_field\",\n                  \"target_field\" : \"date_target_field\",\n                  \"match_formats\" : [\"dd/MM/yyyy\"],\n                  \"locale\": \"UNDEFINED\"\n                  }\n                },\n                {\n                  \"set\" : {\n                    \"field\" : \"field3\",\n                    \"value\" : \"third_val\"\n                  }\n                }\n              ]\n            },\n            \"docs\": [\n              {\n                \"_index\": \"index\",\n                \"_type\": \"type\",\n                \"_id\": \"id\",\n                \"_source\": {\n                  \"foo\": \"bar\"\n                }\n              }\n            ]\n          }\n```\n\nThe response from this is an internal server error. This makes it difficult to know which processor was incorrectly configured within the pipeline definition. What would be nicer is a response object that is similar to this:\n\n```\n{\n \"pipeline_configuration_error\": [\n   {\n     \"errors\": [\n       {\n         \"processor_tag\": \"date_processor\",\n         \"error\": {\n           \"root_cause\": [\n             {\n               \"type\": \"illegal_argument_exception\",\n               \"reason\": \"Invalid language tag specified: UNDEFINED\"\n             }\n           ],\n           \"type\": \"illegal_argument_exception\",\n           \"reason\": \"Invalid language tag specified: UNDEFINED\"\n         }\n       }\n     ]\n   }\n ]\n}\n```\n\nIt would be great if we can return this processor-level configuration error to all processors that are improperly configured, instead of just the first one. This would require extra logic in the pipline factory to record exceptions and collect them into one large exception instead of throwing the first one it receives.\n\n@martijnvg @javanna what do you think?\n\n@BigFunger, let me know if this is what you meant? The actual response object is still up in the air.\n","closed_by":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}