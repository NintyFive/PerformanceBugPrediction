{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/9866","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9866/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9866/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9866/events","html_url":"https://github.com/elastic/elasticsearch/issues/9866","id":58835693,"node_id":"MDU6SXNzdWU1ODgzNTY5Mw==","number":9866,"title":"Bool query with must query is matching all documents when the query doesn't match","user":{"login":"rayward","id":1217111,"node_id":"MDQ6VXNlcjEyMTcxMTE=","avatar_url":"https://avatars1.githubusercontent.com/u/1217111?v=4","gravatar_id":"","url":"https://api.github.com/users/rayward","html_url":"https://github.com/rayward","followers_url":"https://api.github.com/users/rayward/followers","following_url":"https://api.github.com/users/rayward/following{/other_user}","gists_url":"https://api.github.com/users/rayward/gists{/gist_id}","starred_url":"https://api.github.com/users/rayward/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rayward/subscriptions","organizations_url":"https://api.github.com/users/rayward/orgs","repos_url":"https://api.github.com/users/rayward/repos","events_url":"https://api.github.com/users/rayward/events{/privacy}","received_events_url":"https://api.github.com/users/rayward/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"assignees":[{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2015-02-25T01:27:55Z","updated_at":"2015-06-24T16:07:26Z","closed_at":"2015-06-24T16:07:25Z","author_association":"NONE","active_lock_reason":null,"body":"We're seeing an issue where if a query, such as a `simple_query_string` used in `must` clause (or multiple queries in `should` clauses) of a `bool` query, and the analyzed query string results in an empty query string (such as stop words being filtered out), then the it behaves like the entire query is ignored and all documents are matched. Even if the `simple_query_string` query is inside a `filtered` query, then the filters are ignored.\n\nThis is causing major issues for us in a multi-tenant environment as we're getting results not belonging to the correct tenant.\n\nThis issue started after we recently upgraded from 1.2.1 to 1.4.3.\n\nThis is issue appears to have been introduced in 1.3.3 (from testing various versions) and also affects 1.4.4.\n\nI've simplified our queries below with only query in the `must` clause. Real world, we're searching against multiple types.\n\nAnalysis:\n\n``` json\ncurl -XPUT 'localhost:9200/my_index' -d '\n{\n  \"index\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"html_strip\": {\n          \"filter\": [\n            \"standard\",\n            \"lowercase\",\n            \"stop\",\n            \"asciifolding\",\n            \"minimal_stemmer\"\n          ],\n          \"char_filter\": [\n            \"html_strip\"\n          ],\n          \"tokenizer\": \"standard\",\n          \"type\": \"custom\"\n        },\n        \"default_search\": {\n          \"filter\": [\n            \"standard\",\n            \"lowercase\",\n            \"stop\",\n            \"asciifolding\",\n            \"minimal_stemmer\"\n          ],\n          \"tokenizer\": \"standard\",\n          \"type\": \"custom\"\n        },\n        \"default_index\": {\n          \"filter\": [\n            \"standard\",\n            \"lowercase\",\n            \"stop\",\n            \"asciifolding\",\n            \"minimal_stemmer\"\n          ],\n          \"tokenizer\": \"standard\",\n          \"type\": \"custom\"\n        }\n      },\n      \"filter\": {\n        \"minimal_stemmer\": {\n          \"type\": \"stemmer\",\n          \"name\": \"minimal_english\"\n        }\n      }\n    }\n  }\n}\n'\n```\n\nCreate `page` type:\n\n``` json\ncurl -XPUT 'localhost:9200/my_index/page/_mapping' -d '\n{\n  \"page\" : {\n    \"properties\" : {\n      \"title\" : {\n        \"type\" : \"string\"\n      },\n      \"content\" : {\n        \"type\" : \"string\",\n        \"analyzer\": \"html_strip\"\n      },\n      \"is_visible\" : {\n        \"type\" : \"boolean\"\n      },\n      \"store_id\": {\n        \"index\": \"not_analyzed\",\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n'\n```\n\nCreate two documents with different `store_id`'s:\n\n``` json\ncurl -XPOST 'localhost:9200/my_index/page/store-1234-id-1' -d '\n{\n  \"title\": \"Page for store 1234\",\n  \"content\": \"The content for this page\",\n  \"is_visible\": true,\n  \"store_id\": 1234\n}\n'\n\ncurl -XPOST 'localhost:9200/my_index/page/store-5678-id-1' -d '\n{\n  \"title\": \"Page for store 5678\",\n  \"content\": \"The content for another page\",\n  \"is_visible\": true,\n  \"store_id\": 5678\n}\n'\n```\n\nExecute a search containing just a stop word `the`:\n\n``` json\ncurl -XPOST 'localhost:9200/my_index/page/_search' -d '\n{\n   \"explain\": true,\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"filtered\": {\n                        \"query\": {\n                            \"simple_query_string\": {\n                                \"query\": \"the\",\n                                \"fields\": [\n                                    \"title\",\n                                    \"content\"\n                                ]\n                            }\n                        },\n                        \"filter\": {\n                            \"and\": [\n                                {\n                                    \"term\": {\n                                        \"is_visible\": true\n                                    }\n                                },\n                                {\n                                    \"term\": {\n                                        \"store_id\": 1234\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}'\n```\n\nResult:\n\n``` json\n{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 5,\n    \"successful\": 5,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": 2,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_shard\": 1,\n        \"_node\": \"HGgHSCGZTwqLOWwDwSEo6w\",\n        \"_index\": \"my_index\",\n        \"_type\": \"page\",\n        \"_id\": \"store-1234-id-1\",\n        \"_score\": 1,\n        \"_source\": {\n          \"title\": \"Page for store 1234\",\n          \"content\": \"The content for this page\",\n          \"is_visible\": true,\n          \"store_id\": 1234\n        },\n        \"_explanation\": {\n          \"value\": 1,\n          \"description\": \"ConstantScore(cache(_type:page)), product of:\",\n          \"details\": [\n            {\n              \"value\": 1,\n              \"description\": \"boost\"\n            },\n            {\n              \"value\": 1,\n              \"description\": \"queryNorm\"\n            }\n          ]\n        }\n      },\n      {\n        \"_shard\": 4,\n        \"_node\": \"HGgHSCGZTwqLOWwDwSEo6w\",\n        \"_index\": \"my_index\",\n        \"_type\": \"page\",\n        \"_id\": \"store-5678-id-1\",\n        \"_score\": 1,\n        \"_source\": {\n          \"title\": \"Page for store 5678\",\n          \"content\": \"The content for another page\",\n          \"is_visible\": true,\n          \"store_id\": 5678\n        },\n        \"_explanation\": {\n          \"value\": 1,\n          \"description\": \"ConstantScore(cache(_type:page)), product of:\",\n          \"details\": [\n            {\n              \"value\": 1,\n              \"description\": \"boost\"\n            },\n            {\n              \"value\": 1,\n              \"description\": \"queryNorm\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\nAs you can see both documents are returned.\n\nWhen the query contains a different search term that _does_ exist in a document (eg `content`):\n\n``` json\ncurl -XPOST 'localhost:9200/my_index/page/_search' -d '{\n    \"explain\": true,\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"filtered\": {\n                        \"query\": {\n                            \"simple_query_string\": {\n                                \"query\": \"content\",\n                                \"fields\": [\n                                    \"name\",\n                                    \"content\"\n                                ]\n                            }\n                        },\n                        \"filter\": {\n                            \"and\": [\n                                {\n                                    \"term\": {\n                                        \"is_visible\": true\n                                    }\n                                },\n                                {\n                                    \"term\": {\n                                        \"store_id\": 1234\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n'\n```\n\nResult:\n\n``` json\n{\n  \"took\": 4,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 5,\n    \"successful\": 5,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": 1,\n    \"max_score\": 0.05626005,\n    \"hits\": [\n      {\n        \"_shard\": 1,\n        \"_node\": \"HGgHSCGZTwqLOWwDwSEo6w\",\n        \"_index\": \"my_index\",\n        \"_type\": \"page\",\n        \"_id\": \"store-1234-id-1\",\n        \"_score\": 0.05626005,\n        \"_source\": {\n          \"title\": \"Page for store 1234\",\n          \"content\": \"The content for this page\",\n          \"is_visible\": true,\n          \"store_id\": 1234\n        },\n        \"_explanation\": {\n          \"value\": 0.056260053,\n          \"description\": \"sum of:\",\n          \"details\": [\n            {\n              \"value\": 0.056260053,\n              \"description\": \"weight(content:content in 0) [PerFieldSimilarity], result of:\",\n              \"details\": [\n                {\n                  \"value\": 0.056260053,\n                  \"description\": \"score(doc=0,freq=1.0), product of:\",\n                  \"details\": [\n                    {\n                      \"value\": 0.29335263,\n                      \"description\": \"queryWeight, product of:\",\n                      \"details\": [\n                        {\n                          \"value\": 0.30685282,\n                          \"description\": \"idf(docFreq=1, maxDocs=1)\"\n                        },\n                        {\n                          \"value\": 0.9560043,\n                          \"description\": \"queryNorm\"\n                        }\n                      ]\n                    },\n                    {\n                      \"value\": 0.19178301,\n                      \"description\": \"fieldWeight in 0, product of:\",\n                      \"details\": [\n                        {\n                          \"value\": 1,\n                          \"description\": \"tf(freq=1.0), with freq of:\",\n                          \"details\": [\n                            {\n                              \"value\": 1,\n                              \"description\": \"termFreq=1.0\"\n                            }\n                          ]\n                        },\n                        {\n                          \"value\": 0.30685282,\n                          \"description\": \"idf(docFreq=1, maxDocs=1)\"\n                        },\n                        {\n                          \"value\": 0.625,\n                          \"description\": \"fieldNorm(doc=0)\"\n                        }\n                      ]\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\nWhen the query is executed outside the context of a `bool` query:\n\n``` json\ncurl -XPOST 'localhost:9200/my_index/page/_search' -d '{\n    \"explain\": true,\n    \"query\": {\n        \"filtered\": {\n            \"query\": {\n                \"simple_query_string\": {\n                    \"query\": \"the\",\n                    \"fields\": [\n                        \"name\",\n                        \"content\"\n                    ]\n                }\n            },\n            \"filter\": {\n                \"and\": [\n                    {\n                        \"term\": {\n                            \"is_visible\": true\n                        }\n                    },\n                    {\n                        \"term\": {\n                            \"store_id\": 1234\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n'\n```\n\nWe now correctly get no results:\n\n``` json\n{\n  \"took\": 1,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 5,\n    \"successful\": 5,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": 0,\n    \"max_score\": null,\n    \"hits\": []\n  }\n}\n```\n\nIn 1.3.2 or below you'll get the above empty result when using the original bool query.\n\nHas anything changed in mappings or analysis that's causing this or is this a regression?\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}