[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607369613","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-607369613","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":607369613,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzM2OTYxMw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-04-01T16:57:33Z","updated_at":"2020-04-01T16:57:33Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-ql (:Query Languages/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607376547","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-607376547","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":607376547,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzM3NjU0Nw==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-04-01T17:10:45Z","updated_at":"2020-04-01T17:22:39Z","author_association":"MEMBER","body":"> A sequence can be declared with both join keys and sequence params but the order does not matter. However in all our examples and test suite only the first form is present.\r\n\r\nI think if anything, this shows how insufficient our test suite is. We have examples of both in the EQL analytics library, and internally. A quick search shows both permutations: https://eqllib.readthedocs.io/en/latest/search.html?q=maxspan&check_keywords=yes&area=default#\r\n\r\nPersonally, I think this adds very little extra complexity to the grammar, and I think it's better to be more forgiving to the user than to seek the slightest bit of extra purity.\r\n\r\n>  maxspan number and time units\r\n\r\nWe'd have to create additional units if we wanted to require integer-only maximum spans. I think it's more desirable and clear to say 0.5sec than 500ms, so I'd prefer to keep it.\r\n\r\n> separate bool expressions from non-bool\r\n\r\nWe can try that, but I'm not totally sure if it'll completely work or how far it will get us.  Once we get to functions, we won't know what type it is until we resolve the function and check its return type.\r\n\r\nI think the main question with that is: is it better to have an uninformed syntax error when you type in `not 5`, or is it better to specifically handle it and raise a more informative error for a type mismatch? Here's how this looks presently in EQL if you have strict boolean typing on, and not implicit coercion to bools:\r\n```python\r\n>>> import eql\r\n>>> with eql.ParserConfig(implied_booleans=False):\r\n...    eql.parse_expression(\"not 5\")\r\n...\r\neql.errors.EqlTypeMismatchError: Error at line:1,column:5\r\nExpected boolean, not number\r\nnot 5\r\n    ^\r\n ```\r\n\r\nThe SQL grammar has the same problem, since we allow `predicated` through  as a boolean expression. Those errors aren't caught until the verifier. https://github.com/elastic/elasticsearch/blob/5d590b5be6ffaa28d5fd8c07fe8cda0cb94c8272/x-pack/plugin/sql/src/main/antlr/SqlBase.g4#L183\r\n```javascript\r\nGET /_sql\r\n{\r\n  \"query\": \"\"\"\r\n  select * from \"endgame-*\" where not 5\r\n  \"\"\"\r\n}\r\n```\r\n```json\r\n{\r\n  \"error\" : {\r\n    \"root_cause\" : [\r\n      {\r\n        \"type\" : \"verification_exception\",\r\n        \"reason\" : \"Found 1 problem\\nline 2:35: argument of [not 5] must be [boolean], found value [5] type [integer]\"\r\n      }\r\n    ],\r\n    \"type\" : \"verification_exception\",\r\n    \"reason\" : \"Found 1 problem\\nline 2:35: argument of [not 5] must be [boolean], found value [5] type [integer]\"\r\n  },\r\n  \"status\" : 400\r\n}\r\n```\r\n\r\n```javascript\r\nGET /_sql\r\n{\r\n  \"query\": \"\"\"\r\n  select * from \"endgame-*\" where 'a' + 5\r\n  \"\"\"\r\n}\r\n```\r\n```json\r\n{\r\n  \"error\" : {\r\n    \"root_cause\" : [\r\n      {\r\n        \"type\" : \"verification_exception\",\r\n        \"reason\" : \"Found 1 problem\\nline 2:35: first argument of ['a' + 5] must be [numeric], found value ['a'] type [keyword]\"\r\n      }\r\n    ],\r\n    \"type\" : \"verification_exception\",\r\n    \"reason\" : \"Found 1 problem\\nline 2:35: first argument of ['a' + 5] must be [numeric], found value ['a'] type [keyword]\"\r\n  },\r\n  \"status\" : 400\r\n}\r\n```\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607759523","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-607759523","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":607759523,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzc1OTUyMw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-04-02T10:26:12Z","updated_at":"2020-04-02T10:26:12Z","author_association":"MEMBER","body":">Personally, I think this adds very little extra complexity to the grammar, and I think it's better to be more forgiving to the user than to seek the slightest bit of extra purity.\r\n> https://eqllib.readthedocs.io/en/latest/search.html?q=maxspan&check_keywords=yes&area=default#\r\n\r\nI found only *one* use of a rule that uses `with` before `by` or 1/9 or 11%.\r\nI'm not sure the complexity in the whole ecosystem is trivial as any tool that looks for the pattern would have to take it into account.\r\n\r\n> We'd have to create additional units if we wanted to require integer-only maximum spans. I think it's more desirable and clear to say 0.5sec than 500ms, so I'd prefer to keep it.\r\n\r\nHow many units do you think are needed?\r\nIn terms of readability 10ms is better than 0.01s/sec, 15ms vs 0.015s or 3s vs 0.05m. \r\nI'm +1 on adding ms as a unit for precise control than supporting floating points and all the baggage that they bring including lack of precision, huge range and double notation.\r\n\r\n> The SQL grammar has the same problem, since we allow predicated through as a boolean expression.\r\n\r\nSQL is a bit more loose and while we do a good job in EQL to break down things into `booleanExpressions` I wonder whether we can improve that even further.\r\nSQL has subqueries and projections, EQL does not, it always returns a bool inside queries - is that something we can take into account?\r\nIt's not `predicated` that I see the issue,  which in EQL is used for `IN`,  but rather `booleanExpression` going to `valueExpression` going to `primaryExpression` which allows a `constant`.\r\n`NOT TRUE` is good but `NOT 5` is not.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607842756","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-607842756","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":607842756,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzg0Mjc1Ng==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2020-04-02T13:20:25Z","updated_at":"2020-04-02T13:20:25Z","author_association":"MEMBER","body":"> We'd have to create additional units if we wanted to require integer-only maximum spans. I think it's more desirable and clear to say 0.5sec than 500ms, so I'd prefer to keep it.\r\n\r\nWe removed fractional time values from other areas of Elasticsearch because it brings serialisation round trip issues and rounding issues. I'd prefer to also not allow fractional values in EQL for similar reasons. I also think we may find it very hard to support in EQL exactly because the search API does not allow fractional values.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607844755","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-607844755","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":607844755,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzg0NDc1NQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2020-04-02T13:24:00Z","updated_at":"2020-04-02T13:24:00Z","author_association":"MEMBER","body":"> I think it's better to be more forgiving to the user than to seek the slightest bit of extra purity.\r\n\r\nI think allowing flexibility for the user is a good thing but it needs to be weighed with the cost of providing ambiguous or surprising behaviours. It's also mot a great experience if there are two similar but subtly different ways of doing something and it's not very clear to the user which to use in which instance. I'm not saying this is the case here but rather than flexibility comes at a cost even to the user and we should weight the pros and cons to the user experience","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607912643","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-607912643","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":607912643,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzkxMjY0Mw==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-04-02T15:22:41Z","updated_at":"2020-04-02T16:07:36Z","author_association":"MEMBER","body":"My main point bringing in the SQL example was to show that it has the exact same problem with `NOT 5`, so it wasn't a unique problem to EQL.\r\n\r\nI think we can reorganize the grammar for boolean expressions if that makes it easier to maintain, follows better practice, etc. But I'm wary of making destructive changes. One plus-side for catching `not 5` in the verifier is that we have more informative error messages. Seeing an error that says \"you used a non-boolean value here but should've used a bool\" is more informative to a user that made a mistake than having an invalid syntax error.\r\n\r\n> I found only one use of a rule that uses with before by or 1/9 or 11%.\r\n\r\nFor external rules, yes. For internal rules, I'm not 100% sure but will have to check.\r\n\r\n> supporting floating points and all the baggage that they bring including lack of precision, huge range and double notation.\r\n\r\nAgreed that floating points are a nightmare, so those are really good points. Are there limited forms of syntax (such as decimal-only, no exponent, etc.) that would restrict the usage to avoid any of those?\r\n\r\nI'll do a quick look to see what the currently used values of `maxspan` are in production. I have a feeling that the only fractional usage will be in sub-second sequences, since there was no smaller interval. Adding `ms` sounds like a good add, both for Endpoint EQL and for Elasticsearch EQL. \r\n\r\n_Update: Only integer timespans are currently used in public and private EQL queries. I can't speak to what customers have in their own environments, but I think we're safe to remove float support for queries and to add the `ms` time unit._\r\n\r\nAre there currently any problems with sub-second intervals in ES? What is the time unit typically used for `@timestamp`? I think we'll still have to support sub-second intervals. I'm okay if we have to do that by having integer multiples of more granular time units.\r\n\r\n> I think allowing flexibility for the user is a good thing but it needs to be weighed with the cost of providing ambiguous or surprising behaviours. It's also mot a great experience if there are two similar but subtly different ways of doing something and it's not very clear to the user which to use in which instance.\r\n\r\nAgree 100%. In this particular case (`with` vs `by` ordering for sequences), the behavior is identical, so I think we're okay.\r\n\r\nI have a feeling that we'll need to provide some type of migration script to update EQL rules from the Endpoint platform to work in Elasticsearch. Particularly for schema changes. I think we can also handle additional things like converting time-units to integer values, etc.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/611620025","html_url":"https://github.com/elastic/elasticsearch/issues/54597#issuecomment-611620025","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54597","id":611620025,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMTYyMDAyNQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-04-09T16:23:41Z","updated_at":"2020-04-09T16:23:41Z","author_association":"MEMBER","body":"As this ticket has been discussed and concluded, it can be closed.","performed_via_github_app":null}]