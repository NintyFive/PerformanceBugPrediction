{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/1877","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1877/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1877/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1877/events","html_url":"https://github.com/elastic/elasticsearch/issues/1877","id":4223150,"node_id":"MDU6SXNzdWU0MjIzMTUw","number":1877,"title":"Concurrent update failure","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2012-04-21T11:54:57Z","updated_at":"2013-02-22T22:50:39Z","closed_at":"2013-02-22T22:50:39Z","author_association":"MEMBER","active_lock_reason":null,"body":"(the title is not amazing, but until we figure out whats going on, its good enough). more info in this thread: https://groups.google.com/d/topic/elasticsearch/oONRce0IbjA/discussion.\n\n```\ncurl -XPOST \"http://localhost:9200/sample-index\" -d '\n{\n  \"settings\" : { \"number_of_shards\" : 1, \"number_of_replicas\" : 0 },\n\n  \"mappings\" : {\n    \"sample\" : {\n       \"properties\" : {\n          \"names\": {\n            \"properties\" : {\n              \"value\": {  \"type\" : \"string\", \"index\" : \"no\" },\n              \"count\": { \"type\" : \"integer\", \"index\" : \"no\" }\n            }\n          }\n       }\n    }\n  }\n}\n'\n```\n\nAnd here is the self-contained java code:\n\n```\nimport org.elasticsearch.action.get.GetResponse;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\n\n\npublic class ElasticUpdateTest {\n\n  static final String updateScript = \n      \"int i=0; \"+\n      \"found=false; \"+\n      \"while (!found && i < ctx._source.names.size()) { \"+\n        \"if (ctx._source.names.get(i).value == name) { \" +\n           \"found = true; \" +\n        \"} \" +\n        \"i++; \" +\n      \"} \"+\n      \"if (found) { \" +\n        \"ctx._source.names.get(i-1).count += 1; \" +\n      \"} \" +\n      \"else { \" +\n        \"ctx._source.names.add({'value' : name, 'count' : 1 }); \" +\n      \"} \";\n\n   static final String indexName = \"sample-index\";\n\n   static final String indexType = \"sample\";\n\n    private static class ElasticUpdate\n        implements Runnable {\n        public void run() {\n          for(int i = 0; i<100000;i++) {\n            String name = \"name\"+(i % 100);\n            String key = \"key\"+ (i % 11);\n            //System.out.println(\"Thread \"+Thread.currentThread().getName()+\" updating \"+key+\" with name \"+name);\n            GetResponse getResponse = client.prepareGet(indexName, indexType, key).execute().actionGet();\n            if (!getResponse.exists()) {\n                client.prepareIndex(indexName, indexType, key).setSource(\"{ \\\"names\\\" : [] }\")\n                  .execute()\n                  .actionGet();\n            }\n            client.prepareUpdate(indexName, indexType, key)\n              .setRetryOnConflict(20)\n              .setScript(updateScript)\n              .addScriptParam(\"name\", name)\n              .execute()\n              .actionGet();\n          }  \n        }\n\n        Client client;\n\n        ElasticUpdate (Client client) { \n          this.client = client;\n        }\n    }\n\n    public static void main(String args[]) throws InterruptedException {\n        Client client = new TransportClient()\n          .addTransportAddress(new InetSocketTransportAddress(\"localhost\", 9300));\n\n        int nthreads = 4;\n        if (args.length > 0) {\n            try {\n                nthreads = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                System.err.println(\"Argument must be an integer.\");\n                System.exit(1);\n            }\n        }\n        System.out.println(\"Starting \"+nthreads+\" threads\");\n        for(int i=0;i<nthreads;i++) {\n          Thread t = new Thread(new ElasticUpdate(client));\n          t.start();\n        }\n    }\n}\n```\n","closed_by":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}