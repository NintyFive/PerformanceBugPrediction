[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/449082250","html_url":"https://github.com/elastic/elasticsearch/issues/36905#issuecomment-449082250","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36905","id":449082250,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTA4MjI1MA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-12-20T17:53:03Z","updated_at":"2018-12-20T17:53:03Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450954467","html_url":"https://github.com/elastic/elasticsearch/issues/36905#issuecomment-450954467","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36905","id":450954467,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDk1NDQ2Nw==","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"created_at":"2019-01-02T19:09:03Z","updated_at":"2019-01-02T19:09:03Z","author_association":"CONTRIBUTOR","body":"@jpcarey - wouldn't the implicit priority for roll over always be the current index ? \r\n\r\nFrom https://elastic.co/guide/en/elasticsearch/reference/6.5/recovery-prioritization.html :\r\n> This means that, by default, newer indices will be recovered before older indices.\r\n\r\nCan you describe your use case a bit more (or help me understand why the implicit recovery order isn't sufficient).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450956532","html_url":"https://github.com/elastic/elasticsearch/issues/36905#issuecomment-450956532","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36905","id":450956532,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDk1NjUzMg==","user":{"login":"jpcarey","id":5118470,"node_id":"MDQ6VXNlcjUxMTg0NzA=","avatar_url":"https://avatars2.githubusercontent.com/u/5118470?v=4","gravatar_id":"","url":"https://api.github.com/users/jpcarey","html_url":"https://github.com/jpcarey","followers_url":"https://api.github.com/users/jpcarey/followers","following_url":"https://api.github.com/users/jpcarey/following{/other_user}","gists_url":"https://api.github.com/users/jpcarey/gists{/gist_id}","starred_url":"https://api.github.com/users/jpcarey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpcarey/subscriptions","organizations_url":"https://api.github.com/users/jpcarey/orgs","repos_url":"https://api.github.com/users/jpcarey/repos","events_url":"https://api.github.com/users/jpcarey/events{/privacy}","received_events_url":"https://api.github.com/users/jpcarey/received_events","type":"User","site_admin":false},"created_at":"2019-01-02T19:16:38Z","updated_at":"2019-01-02T19:16:38Z","author_association":"MEMBER","body":"@jakelandis in the case of multiple rollover indices, you can have different size/document/age requirements for each rollover setup. This means you could have newer rolled over indices from rollover setup \"A\", vs the current target index setup for rollover \"B\".","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/450972715","html_url":"https://github.com/elastic/elasticsearch/issues/36905#issuecomment-450972715","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36905","id":450972715,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MDk3MjcxNQ==","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"created_at":"2019-01-02T20:17:11Z","updated_at":"2019-01-02T20:17:11Z","author_association":"CONTRIBUTOR","body":"Chatted with @jpcarey on this for a bit and the crux of the issues is to help ensure that current index, across all indexes, are prioritized for recovery. \r\n\r\nFor example, if you have a `logs` index that rolls every hour, and `monitoring` index that rolls every day, then you can have ~23 indexes (logs) that are newer than the current writable monitoring index. When recovery happens, those 23 old indexes will get prioritized before the 1 writable monitoring index. \r\n\r\nThe change here could be to add a high priority to current writable index and remove it when it rolls over or decrease the priority when it rolls over (assuming the the priority is already set). The goal to ensure/enable the ability to allow the current writable indexes that are managed by ILM to recover first.   \r\n\r\nProposal:\r\nAdd an `index_priority` option to `hot`, `warm`, and `cold` phases such that when an index enters that phase that priority is assigned to the index. \r\n\r\nThoughts?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452791819","html_url":"https://github.com/elastic/elasticsearch/issues/36905#issuecomment-452791819","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36905","id":452791819,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1Mjc5MTgxOQ==","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"created_at":"2019-01-09T17:57:27Z","updated_at":"2019-01-09T17:57:27Z","author_association":"CONTRIBUTOR","body":"We discussed this abit and will implement this as a new action available for the `hot`, `warm`, and `cold` phases. \r\n\r\nThe tentative API will look like this: (where the set_priority will always execute as the first action if multiple actions are defined)\r\n\r\n```\r\nPUT _ilm/policy/my_policy\r\n{\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"hot\": {\r\n        \"actions\": {\r\n          \"set_priority\": {\r\n            \"priority\": 100\r\n          },\r\n          \"rollover\": {\r\n            \"max_age\": \"10m\"\r\n          }\r\n        }\r\n      },\r\n      \"warm\": {\r\n        \"min_age\": \"1m\",\r\n        \"actions\": {\r\n          \"set_priority\": {\r\n            \"priority\": 90\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n","performed_via_github_app":null}]