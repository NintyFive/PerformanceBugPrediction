{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/19678","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19678/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19678/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19678/events","html_url":"https://github.com/elastic/elasticsearch/issues/19678","id":168283813,"node_id":"MDU6SXNzdWUxNjgyODM4MTM=","number":19678,"title":"Expose ExecutorService#submit() in ThreadPool","user":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"labels":[{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"assignees":[{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2016-07-29T09:17:31Z","updated_at":"2016-11-17T14:18:50Z","closed_at":"2016-11-17T14:18:50Z","author_association":"MEMBER","active_lock_reason":null,"body":"Often times we use the following code:\n\n``` java\nfinal CountDownLatch latch = new CountDownLatch(1);\nthreadPool.generic().execute(() -> {\n    try {\n       // do stuff\n    } finally {\n        latch.countDown();\n    }\n});\n\ntry {\n    latch.await(30, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\n    Thread.currentThread().interrupt();\n    // ignore\n}\n```\n\nthis is because we only expose the `Executor` interface. So we have to misuse latches to have poor man's futures.\n\nIf we'd expose (at least some) methods of `ExecutorService`, then we could write instead:\n\n``` java\nfinal Future<?> result = threadPool.generic().submit(() -> {\n    // do stuff\n});\ntry {\n    result.get(30, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\n    Thread.currentThread().interrupt();\n} catch (ExecutionException e) {\n    // ability to handle exceptions that have occurred in the lambda \n} catch (TimeoutException e) {\n    // ability to handle the timeout\n}\n```\n\nThe intended interface will expose the following methods of `ExecutorService` (with the same semantics):\n\n``` java\npublic interface EsExecutor extends Executor {\n    <T> Future<T> submit(Callable<T> task);\n\n    <T> Future<T> submit(Runnable task, T result);\n\n    Future<?> submit(Runnable task);\n}\n```\n\nAs all our thread pools are based on `EsThreadPoolExecutor` as implementation class (which implements the `ExecutorService` interface), it is a just needed to expose the respective methods (no complex implementation needed).\n\nWe should also add a helper class to simplify the common case of just waiting for a result. Here's a sketch:\n\n``` java\npublic final class FutureUtils {\n    private FutureUtils() {\n        throw new AssertionError(\"no instances!\");\n    }\n\n    public static <T> Optional<T> getSilently(Callable<T> result) {\n        try {\n            return Optional.ofNullable(result.call());\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } catch (TimeoutException e) {\n            // ignore\n        } catch (ExecutionException e) {\n            // ability to handle exceptions that have occurred in the callable\n        } catch (Exception e) {\n            // ability to handle exceptions that have occurred in the callable\n        }\n        return Optional.empty();\n    }\n}\n```\n\nThis would significantly reduce boilerplate for the standard use case:\n\n``` java\nfinal Future<?> result = Executors.newCachedThreadPool().submit(() -> {\n    // do something\n});\nFutureUtils.getSilently(() -> result.get());\n```\n","closed_by":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"performed_via_github_app":null}