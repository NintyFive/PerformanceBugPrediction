{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/18053","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18053/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18053/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18053/events","html_url":"https://github.com/elastic/elasticsearch/issues/18053","id":151747455,"node_id":"MDU6SXNzdWUxNTE3NDc0NTU=","number":18053,"title":"High contention on InternalIndex.innerIndex()","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"labels":[{"id":144797810,"node_id":"MDU6TGFiZWwxNDQ3OTc4MTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Core","name":":Core/Infra/Core","color":"0e8a16","default":false,"description":"Core issues without another label"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-04-28T21:27:09Z","updated_at":"2016-04-29T12:05:23Z","closed_at":"2016-04-29T12:05:23Z","author_association":"MEMBER","active_lock_reason":null,"body":"I was running some informal benchmarking on my home cluster for fun and found my max throughput.  Interestingly, the cluster didn't appear saturated on any particular resource and I was unable to coax the indexing rate higher no matter what I did.\n\nI reran the test while recording telemetry via Flight Recorder (using `XX:+DebugNonSafepoints` as recommended by @danielmitterdorfer and @rmuir).  I didn't notice anything too outrageous, but there was very high contention on `InternalEngine.innerIndex()`:\n\n![default_lock_count](https://cloud.githubusercontent.com/assets/1224228/14901215/4e2fa1a2-0d62-11e6-8698-eef84e99da27.png)\n\nOn a 6min test, it racked up **3242 contention events** and **~24min** of CPU time.  The [`innerIndex()` method synchronizes](https://github.com/elastic/elasticsearch/blob/master/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java#L359) on a pool of locks, which are [set to be numProcessors \\* 10](https://github.com/elastic/elasticsearch/blob/master/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java#L131)\n\nMy machine has 32 cores (16 physical + hyperthreading), so the pool has 320 locks.  @nik9000 and @jpountz suggested it may be an issue with collisions in that pool.  I wasn't really sure of the math to verify, but I found [an article which gives a formula](http://preshing.com/20110504/hash-collision-probabilities/) to calculate the probability of generating `k` unique draws out of `N` possible values.\n\nSince our case is a bit more complex -- pool count (`N`) scales in relation to core count (`k`) -- so I put together a spreadsheet to calculate everything<sup>1</sup>.  Assuming I didn't do anything silly with the math, the collision rate is grim.  For my machine, 32 simultaneous requests have a ~79% chance of at least one collision in a pool of 320 locks.\n\n![image](https://cloud.githubusercontent.com/assets/1224228/14901467/8bc05ca4-0d63-11e6-8d79-119b12817315.png)\n_y-axis: probability of collision_\n_x-axis: number of simultaneous requests on an equal number of cores_\n### Bumping the pool count\n\nAs a quick test, I bumped the lock multiplier from `* 10` to `* 1000`, meaning my machines had 32000 available locks, which gives a theoretical ~1.5% collision rate.  Rerunning the test consistently gives a **20k docs/s speedup**, and drops contention down to **297 events** and **~3min** CPU time.\n\n![high_lock_count](https://cloud.githubusercontent.com/assets/1224228/14901563/fd30f11e-0d63-11e6-8625-5b52bbeda89d.png)\n### Next?\n\nAll of this is touching delicate code that I don't understand, and my informal test may be biased by something I'm not accounting for.  So I'm not really sure what or if there is a next step.  But I thought these charts were interesting enough that more knowledgeable folks may want to have a look.\n#### Footnotes\n1. [Spreadsheet calculating collision probability](https://github.com/elastic/elasticsearch/files/241442/collision.xlsx)\n2. To verify my math, I pinned the pool count to 320 and calculated the same metric against 1-64 requests. [It shows a sigmoid like the original article](https://cloud.githubusercontent.com/assets/1224228/14901459/751cd9c8-0d63-11e6-8e7c-9e0f2a52b37d.png), so I think my math is correct.\n","closed_by":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"performed_via_github_app":null}