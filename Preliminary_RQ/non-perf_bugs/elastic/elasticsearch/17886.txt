{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/17886","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17886/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17886/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17886/events","html_url":"https://github.com/elastic/elasticsearch/issues/17886","id":149725352,"node_id":"MDU6SXNzdWUxNDk3MjUzNTI=","number":17886,"title":"Index template not working as expected","user":{"login":"jorgecorreiaptc","id":12597000,"node_id":"MDQ6VXNlcjEyNTk3MDAw","avatar_url":"https://avatars0.githubusercontent.com/u/12597000?v=4","gravatar_id":"","url":"https://api.github.com/users/jorgecorreiaptc","html_url":"https://github.com/jorgecorreiaptc","followers_url":"https://api.github.com/users/jorgecorreiaptc/followers","following_url":"https://api.github.com/users/jorgecorreiaptc/following{/other_user}","gists_url":"https://api.github.com/users/jorgecorreiaptc/gists{/gist_id}","starred_url":"https://api.github.com/users/jorgecorreiaptc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jorgecorreiaptc/subscriptions","organizations_url":"https://api.github.com/users/jorgecorreiaptc/orgs","repos_url":"https://api.github.com/users/jorgecorreiaptc/repos","events_url":"https://api.github.com/users/jorgecorreiaptc/events{/privacy}","received_events_url":"https://api.github.com/users/jorgecorreiaptc/received_events","type":"User","site_admin":false},"labels":[{"id":146829143,"node_id":"MDU6TGFiZWwxNDY4MjkxNDM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Transport%20API","name":":Core/Infra/Transport API","color":"0e8a16","default":false,"description":"Transport client API"},{"id":111624690,"node_id":"MDU6TGFiZWwxMTE2MjQ2OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/feedback_needed","name":"feedback_needed","color":"d4c5f9","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2016-04-20T10:14:51Z","updated_at":"2016-04-20T16:45:54Z","closed_at":"2016-04-20T16:33:48Z","author_association":"NONE","active_lock_reason":null,"body":"**Elasticsearch version**: 2.3.1\n\n**JVM version**: 1.8.0_77\n\n**OS version**: Ubuntu 14.04\n\n**Description of the problem including expected versus actual behavior**:\nAfter making the upgrade from version 1.7.1 to 2.3.1, index templates are not being correctly applied. Every time you restart the ElasticSearch, those templates disappears. \nThis issue occurs when using the Java API to create index templates. If you use curl requests, the functionality works as expected.\n\n**Steps to reproduce**:\n1. Create an Index Template using Java API:\n\n``` json{\n   \"index_template\": {\n      \"order\": 0,\n      \"template\": \"template*\",\n      \"settings\": {},\n      \"mappings\": {\n         \"type_b\": {\n            \"dynamic\": \"false\",\n            \"properties\": {\n               \"numMessages\": {\n                  \"type\": \"long\"\n               },\n               \"id\": {\n                  \"type\": \"long\"\n               }\n            }\n         },\n         \"type_a\": {\n            \"dynamic\": \"false\",\n            \"properties\": {\n               \"id\": {\n                  \"type\": \"long\"\n               },\n               \"type\": {\n                  \"properties\": {\n                     \"name\": {\n                        \"type\": \"string\",\n                        \"fields\": {\n                           \"raw\": {\n                              \"index\": \"not_analyzed\",\n                              \"type\": \"string\"\n                           }\n                        }\n                     },\n                     \"id\": {\n                        \"type\": \"long\"\n                     }\n                  }\n               },\n               \"uuid\": {\n                  \"type\": \"string\",\n                  \"fields\": {\n                     \"raw\": {\n                        \"index\": \"not_analyzed\",\n                        \"type\": \"string\"\n                     }\n                  }\n               }\n            }\n         }\n      },\n      \"aliases\": {}\n   }\n}\n```\n1. Creating documents in indices that doesn't exists in order to create a new index with the template mappings:\n   1. PUT a document in an index that doesn't exists and is suppose to match with the created template: \n      `PUT template_test/type_a/1\n      {\n      \"uuid\": \"abcd\"\n      }`\n   2. Check the mappings of the created index (**template_test**) and you will notice that the type_b will have the expected mappings (defined in the template created in the first step). However, the type_a won't have the mappings defined in the template:\n\n``` json{\n   \"template_test\": {\n      \"mappings\": {\n         \"type_b\": {\n            \"dynamic\": \"false\",\n            \"properties\": {\n               \"id\": {\n                  \"type\": \"long\"\n               },\n               \"numMessages\": {\n                  \"type\": \"long\"\n               }\n            }\n         },\n         \"type_a\": {\n            \"properties\": {\n               \"uuid\": {\n                  \"type\": \"string\"\n               }\n            }\n         }\n      }\n   }\n}\n```\n1. PUT a document in an index that doesn't exists and is suppose to match with the created template : \n   `PUT template_test2/type_b/1\n   {\n   \"id\": 1\n   }`\n2. This time, the type_a is with the expected mappings and the type_a was created without the mappings defined in the template:\n\n``` json{\n   \"template_test2\": {\n      \"mappings\": {\n         \"type_b\": {\n            \"properties\": {\n               \"id\": {\n                  \"type\": \"long\"\n               }\n            }\n         },\n         \"type_a\": {\n            \"dynamic\": \"false\",\n            \"properties\": {\n               \"id\": {\n                  \"type\": \"long\"\n               },\n               \"type\": {\n                  \"properties\": {\n                     \"id\": {\n                        \"type\": \"long\"\n                     },\n                     \"name\": {\n                        \"type\": \"string\",\n                        \"fields\": {\n                           \"raw\": {\n                              \"type\": \"string\",\n                              \"index\": \"not_analyzed\"\n                           }\n                        }\n                     }\n                  }\n               },\n               \"uuid\": {\n                  \"type\": \"string\",\n                  \"fields\": {\n                     \"raw\": {\n                        \"type\": \"string\",\n                        \"index\": \"not_analyzed\"\n                     }\n                  }\n               }\n            }\n         }\n      }\n   }\n```\n1. Restart the ElasticSearch and you'll lose the mappings of the created template `GET _template/index_template`: \n\n``` json{\n   \"index_template\": {\n      \"order\": 0,\n      \"template\": \"template*\",\n      \"settings\": {},\n      \"mappings\": {},\n      \"aliases\": {}\n   }\n```\n\n**Note that**, even if you don't create any index which will use the template, the mappings disappears with a restart of the ElasticSearch.\n\n**Provide logs (if relevant)**:\nWhen creating documents as was done in the in the previous section (**Steps to reproduce**, steps 2.i and 2.iii) the flowing logs appears in the console.\n- **For the step 2.i**\n\n```\n[2016-04-20 11:04:47,981][DEBUG][indices                  ] [Mikado] creating Index [template_test], shards [5]/[1]\n[2016-04-20 11:04:47,989][DEBUG][index.store              ] [Mikado] [template_test] using index.store.throttle.type [none], with index.store.throttle.max_bytes_per_sec [0b]\n[2016-04-20 11:04:47,991][DEBUG][index.mapper             ] [Mikado] [template_test] using dynamic[true]\n[2016-04-20 11:04:47,994][INFO ][cluster.metadata         ] [Mikado] [template_test] creating index, cause [auto(index api)], templates [index_template], shards [5]/[1], mappings [type_b, type_a]\n\n\n[2016-04-20 11:04:47,997][DEBUG][indices.cluster          ] [Mikado] [template_test] creating index\n[2016-04-20 11:04:47,997][DEBUG][indices                  ] [Mikado] creating Index [template_test], shards [5]/[1]\n[2016-04-20 11:04:48,001][DEBUG][index.store              ] [Mikado] [template_test] using index.store.throttle.type [none], with index.store.throttle.max_bytes_per_sec [0b]\n[2016-04-20 11:04:48,002][DEBUG][index.mapper             ] [Mikado] [template_test] using dynamic[true]\n[2016-04-20 11:04:48,003][DEBUG][indices.cluster          ] [Mikado] [template_test] adding mapping [type_a], source [{\"type_a\":{}}]\n[2016-04-20 11:04:48,003][DEBUG][indices.cluster          ] [Mikado] [template_test] adding mapping [type_b], source [{\"type_b\":{\"dynamic\":\"false\",\"properties\":{\"id\":{\"type\":\"long\"},\"numMessages\":{\"type\":\"long\"}}}}]\n```\n- **For the step 2.iii**\n\n```\n[2016-04-20 11:08:04,643][DEBUG][indices                  ] [Mikado] creating Index [template_test2], shards [5]/[1]\n[2016-04-20 11:08:04,649][DEBUG][index.store              ] [Mikado] [template_test2] using index.store.throttle.type [none], with index.store.throttle.max_bytes_per_sec [0b]\n[2016-04-20 11:08:04,651][DEBUG][index.mapper             ] [Mikado] [template_test2] using dynamic[true]\n[2016-04-20 11:08:04,655][INFO ][cluster.metadata         ] [Mikado] [template_test2] creating index, cause [auto(index api)], templates [index_template], shards [5]/[1], mappings [type_b, type_a]\n\n\n[2016-04-20 11:08:04,665][DEBUG][indices.cluster          ] [Mikado] [template_test2] creating index\n[2016-04-20 11:08:04,665][DEBUG][indices                  ] [Mikado] creating Index [template_test2], shards [5]/[1]\n[2016-04-20 11:08:04,676][DEBUG][index.store              ] [Mikado] [template_test2] using index.store.throttle.type [none], with index.store.throttle.max_bytes_per_sec [0b]\n[2016-04-20 11:08:04,680][DEBUG][index.mapper             ] [Mikado] [template_test2] using dynamic[true]\n[2016-04-20 11:08:04,680][DEBUG][indices.cluster          ] [Mikado] [template_test2] adding mapping [type_a], source [{\"type_a\":{\"dynamic\":\"false\",\"properties\":{\"id\":{\"type\":\"long\"},\"type\":{\"properties\":{\"id\":{\"type\":\"long\"},\"name\":{\"type\":\"string\",\"fields\":{\"raw\":{\"type\":\"string\",\"index\":\"not_analyzed\"}}}}},\"uuid\":{\"type\":\"string\",\"fields\":{\"raw\":{\"type\":\"string\",\"index\":\"not_analyzed\"}}}}}}]\n[2016-04-20 11:08:04,682][DEBUG][indices.cluster          ] [Mikado] [template_test2] adding mapping [type_b], source [{\"type_b\":{}}]\n[2016-04-20 11:08:04,683][DEBUG][indices.cluster          ] [Mikado] [template_test2][2] creating shard\n```\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}