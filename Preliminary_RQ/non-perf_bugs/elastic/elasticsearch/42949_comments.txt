[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/499540719","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-499540719","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":499540719,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5OTU0MDcxOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-06-06T15:19:52Z","updated_at":"2019-06-06T15:19:52Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-analytics-geo","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/503616093","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-503616093","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":503616093,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMzYxNjA5Mw==","user":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"created_at":"2019-06-19T15:42:51Z","updated_at":"2019-06-19T15:46:26Z","author_association":"CONTRIBUTOR","body":"### Notes from discussion on 2019-06-19\r\n\r\n#### `ValuesSourceType.ANY`\r\nThere are some aggregations, e.g. Value Count and Cardinality, which actually do accept any input type.  We need to continue to support this use case in some way, although it doesn't need to be specifically via `ValuesSourceType.ANY`.  We proposed using an array or enumÂ set of `ValuesSourceType`s to represent the valid input types for an aggregation, at the builder level.  We agreed that we do not want to have type specific builder classes (e.g. `StringTermsAggregationBuilder`), although the actual aggregators can be type specific.\r\n\r\n#### Does `ValuesSourceAggregationBuilder` need to be generic over `ValuesSource`\r\nVSAB takes a type parameter that extends `ValuesSource`, and we feel it is not clear why this is useful.  It seems redundant with the `ValuesSource` type hierarchy.  Aggregations which only operate on one `ValuesSource` know that, and aggregations which operate on multiple `ValuesSource`s just pass the base class as the type parameter.  (e.g. terms aggregation, which works on numbers and strings, declares its builder as `public class TermsAggregationBuilder extends ValuesSourceAggregationBuilder<ValuesSource, TermsAggregationBuilder>`)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/512291902","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-512291902","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":512291902,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMjI5MTkwMg==","user":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"created_at":"2019-07-17T14:55:34Z","updated_at":"2019-07-17T14:55:34Z","author_association":"CONTRIBUTOR","body":"We should also make sure that type errors are consistent in how they are reported to the user.  Currently, some situations throw `IllegalArgumentException` and others throw `AggregationExecutionException`.  Ideally, we'd pick one for type errors and just use that.  Most important though is that we use a 400 class error - type errors are user fixable, and shouldn't return 500s.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/548905504","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-548905504","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":548905504,"node_id":"MDEyOklzc3VlQ29tbWVudDU0ODkwNTUwNA==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2019-11-01T18:43:17Z","updated_at":"2019-11-01T18:43:17Z","author_association":"MEMBER","body":"Re: Immutability of VSConfig\r\n\r\nSpotted a location where we use the mutability: [`ParentAggregationBuilder`](https://github.com/elastic/elasticsearch/blob/master/modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregationBuilder.java#L107-L125).  We resolve the child field, then check to make sure the parent field is mapped.  If it's not mapped we set the config to unmapped, otherwise we set a new field context as the combined parent/child field context.\r\n\r\nWe can re-arrange the unmapped part (check parent first), but not sure how to handle the new fieldtype overwriting.  Maybe generate a new config builder from the first config, set the new context and re-build? Dunno. :)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/620896740","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-620896740","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":620896740,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMDg5Njc0MA==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2020-04-28T22:53:55Z","updated_at":"2020-04-28T22:53:55Z","author_association":"CONTRIBUTOR","body":"hey @not-napoleon, I notice there is some interdependence on ValuesSource and the CompositeValuesSourceBuilder#innerBuild, which I believe gets built after parsing in CompositeAggregationBuilder's parser. Given that this parsing assumes a one-to-one relation between builders and their supported valuessource types, I am not sure how to best generalize it across potential the registered aggregators. \r\n\r\nAre there any aspects of this that you've run into and have thoughts about?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/621397051","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-621397051","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":621397051,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMTM5NzA1MQ==","user":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"created_at":"2020-04-29T18:51:42Z","updated_at":"2020-04-29T18:51:42Z","author_association":"CONTRIBUTOR","body":"@talevy Yeah, Composite aggs work on a whole parallel system.  That's one of the things (along with Array and Multi values source aggregations) that we cut from supporting in the refactor for now.  Obviously at some point we need to come back to that, but it's not currently on my todo list.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/644373358","html_url":"https://github.com/elastic/elasticsearch/issues/42949#issuecomment-644373358","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","id":644373358,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NDM3MzM1OA==","user":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"created_at":"2020-06-15T20:33:21Z","updated_at":"2020-06-15T20:33:21Z","author_association":"CONTRIBUTOR","body":"With many thanks to everyone who's contributed code, reviews, comments, and moral support to this project, I'm happy to say that with #57762 merged, we can call this done.  There is still some related cleanup work that can be done, but it's pretty low priority right now and has other tickets tracking it (see #58139,  #58135, and #58136).  Please feel free to tag me with any values source related issues going forward.","performed_via_github_app":null}]