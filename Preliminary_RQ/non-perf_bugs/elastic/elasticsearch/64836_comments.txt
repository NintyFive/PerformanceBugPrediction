[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/724685508","html_url":"https://github.com/elastic/elasticsearch/issues/64836#issuecomment-724685508","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/64836","id":724685508,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNDY4NTUwOA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-11-10T12:58:25Z","updated_at":"2020-11-10T12:58:25Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-analytics-geo (:Analytics/Aggregations)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/724714950","html_url":"https://github.com/elastic/elasticsearch/issues/64836#issuecomment-724714950","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/64836","id":724714950,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNDcxNDk1MA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2020-11-10T13:52:07Z","updated_at":"2020-11-10T13:52:07Z","author_association":"CONTRIBUTOR","body":"You might find it better to issue two search requests - one for the top hits and one for the aggs with size=0. The \"with aggs\" request can take better advantage of request caching. That'll get you both counts. OTOH you might end up with a super long tail and the caching isn't all that useful. Then you'd need something like what you are asking for. I just think it is worth double checking if splitting the request on your side is a good idea.\r\n\r\nFor what it is worth we never added a raw counting aggregation because all of our bucketing aggregations count on their own. \r\n\r\nI'll set a label on this so a few of us can talk about it more.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/729888662","html_url":"https://github.com/elastic/elasticsearch/issues/64836#issuecomment-729888662","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/64836","id":729888662,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTg4ODY2Mg==","user":{"login":"jayaddison","id":55152140,"node_id":"MDQ6VXNlcjU1MTUyMTQw","avatar_url":"https://avatars0.githubusercontent.com/u/55152140?v=4","gravatar_id":"","url":"https://api.github.com/users/jayaddison","html_url":"https://github.com/jayaddison","followers_url":"https://api.github.com/users/jayaddison/followers","following_url":"https://api.github.com/users/jayaddison/following{/other_user}","gists_url":"https://api.github.com/users/jayaddison/gists{/gist_id}","starred_url":"https://api.github.com/users/jayaddison/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jayaddison/subscriptions","organizations_url":"https://api.github.com/users/jayaddison/orgs","repos_url":"https://api.github.com/users/jayaddison/repos","events_url":"https://api.github.com/users/jayaddison/events{/privacy}","received_events_url":"https://api.github.com/users/jayaddison/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T19:00:42Z","updated_at":"2020-11-18T19:11:05Z","author_association":"NONE","body":"Thanks @nik9000.  In the hope that it might save you and the team a bit of discussion time (i.e. not trying to solve this problem if it doesn't need to be!), I can add that there's a workaround for this use case that also neatly avoids the need for a two-query round-trip.\r\n\r\nThe application is using a [`terms` aggregation](https://www.elastic.co/guide/en/elasticsearch/reference/7.10/search-aggregations-bucket-terms-aggregation.html) that produces a `doc_count` for each corresponding response [bucket](https://www.elastic.co/guide/en/elasticsearch/reference/7.10/search-aggregations-bucket.html#search-aggregations-bucket) in the aggregation results.\r\n\r\nThe application can sum these `doc_count` values -- being careful only to sum across one aggregate dimension, so as not to double-count -- and use the resulting total as a 'pre-filtered' document count.  It's early days, but that approach is looking good so far.\r\n\r\nNB: I'm aware that bucket counts may be approximate; in this case, I think that's fine - it seems unlikely to be incorrect for small document counts, and even if it is, as long as it is *consistently* incorrect then the application behaviour (and user experience) will be consistent, too.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/729895504","html_url":"https://github.com/elastic/elasticsearch/issues/64836#issuecomment-729895504","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/64836","id":729895504,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTg5NTUwNA==","user":{"login":"jayaddison","id":55152140,"node_id":"MDQ6VXNlcjU1MTUyMTQw","avatar_url":"https://avatars0.githubusercontent.com/u/55152140?v=4","gravatar_id":"","url":"https://api.github.com/users/jayaddison","html_url":"https://github.com/jayaddison","followers_url":"https://api.github.com/users/jayaddison/followers","following_url":"https://api.github.com/users/jayaddison/following{/other_user}","gists_url":"https://api.github.com/users/jayaddison/gists{/gist_id}","starred_url":"https://api.github.com/users/jayaddison/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jayaddison/subscriptions","organizations_url":"https://api.github.com/users/jayaddison/orgs","repos_url":"https://api.github.com/users/jayaddison/repos","events_url":"https://api.github.com/users/jayaddison/events{/privacy}","received_events_url":"https://api.github.com/users/jayaddison/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T19:13:47Z","updated_at":"2020-11-18T19:13:47Z","author_association":"NONE","body":"Closing this issue since it's resolved and workaround-able in a fairly reasonable manner.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/729908369","html_url":"https://github.com/elastic/elasticsearch/issues/64836#issuecomment-729908369","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/64836","id":729908369,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTkwODM2OQ==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T19:37:31Z","updated_at":"2020-11-18T19:38:29Z","author_association":"MEMBER","body":"Another sorta-hacky workaround is to wrap your agg tree with a match-all `filter` agg.  The filter agg will tell you the number of docs that flowed through the agg tree, and the interior aggs will partition the docs into their various buckets for normal analysis.\r\n\r\nThe filter agg will add a bit of a performance penalty since it's doing unnecessary work, but it should be pretty lightweight in the scheme of things since the match-all is essentially a noop here.\r\n\r\nE.g.\r\n\r\n```js\r\nGET test/_search\r\n{\r\n  \"aggs\": {\r\n    \"all_docs\": {\r\n      \"filter\": {\r\n        \"match_all\": {}\r\n      },\r\n      \"aggs\": {\r\n        \"colors\": {\r\n          \"terms\": {\r\n            \"field\": \"color\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nReturns a result like:\r\n\r\n```js\r\n{\r\n  \"aggregations\" : {\r\n    \"all_docs\" : {\r\n      \"doc_count\" : 6,  <-- all docs seen by the agg tree\r\n      \"colors\" : {\r\n        \"doc_count_error_upper_bound\" : 0,\r\n        \"sum_other_doc_count\" : 0,\r\n        \"buckets\" : [\r\n          {\r\n            \"key\" : \"blue\",\r\n            \"doc_count\" : 3\r\n          },\r\n          {\r\n            \"key\" : \"red\",\r\n            \"doc_count\" : 3\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n_Edit: renamed agg for clarity_","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/729948575","html_url":"https://github.com/elastic/elasticsearch/issues/64836#issuecomment-729948575","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/64836","id":729948575,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTk0ODU3NQ==","user":{"login":"jayaddison","id":55152140,"node_id":"MDQ6VXNlcjU1MTUyMTQw","avatar_url":"https://avatars0.githubusercontent.com/u/55152140?v=4","gravatar_id":"","url":"https://api.github.com/users/jayaddison","html_url":"https://github.com/jayaddison","followers_url":"https://api.github.com/users/jayaddison/followers","following_url":"https://api.github.com/users/jayaddison/following{/other_user}","gists_url":"https://api.github.com/users/jayaddison/gists{/gist_id}","starred_url":"https://api.github.com/users/jayaddison/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jayaddison/subscriptions","organizations_url":"https://api.github.com/users/jayaddison/orgs","repos_url":"https://api.github.com/users/jayaddison/repos","events_url":"https://api.github.com/users/jayaddison/events{/privacy}","received_events_url":"https://api.github.com/users/jayaddison/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T20:56:23Z","updated_at":"2020-11-18T20:56:23Z","author_association":"NONE","body":"Thanks @polyfractal - making the pre-filtered doc count accessible at a single, fixed key path in the response is a nice property of that approach.\r\n\r\nDo you know if the performance impact is a constant / scales with doc count / scales with aggregates / other?  When time allows I'll try to test it out.","performed_via_github_app":null}]