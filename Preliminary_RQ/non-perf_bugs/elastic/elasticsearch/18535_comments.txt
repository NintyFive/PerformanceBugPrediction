[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221214002","html_url":"https://github.com/elastic/elasticsearch/issues/18535#issuecomment-221214002","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18535","id":221214002,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTIxNDAwMg==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-05-24T09:24:20Z","updated_at":"2016-05-24T09:24:20Z","author_association":"CONTRIBUTOR","body":"this is a parsing feature and nothing we do per field or per index. I am also on the fence here since I think we should rather go into the other direction and only accept `true` or `false` and  nothing else going forward. I am still putting a discuss lable on it and we will discuss how we move forward\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221376545","html_url":"https://github.com/elastic/elasticsearch/issues/18535#issuecomment-221376545","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18535","id":221376545,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTM3NjU0NQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-05-24T19:25:45Z","updated_at":"2016-05-24T19:25:57Z","author_association":"MEMBER","body":"I don't think this should be customizable, in the same way we should not have custom formatting for numbers (for example, trying to parse numbers from text like \"ten\"). The fact that we currently allow many different values for false, and \"not false\" is true is something we have been slowly working towards removing. We should allow `true`, or `false`, and fail otherwise.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221396485","html_url":"https://github.com/elastic/elasticsearch/issues/18535#issuecomment-221396485","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18535","id":221396485,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTM5NjQ4NQ==","user":{"login":"marshall007","id":877936,"node_id":"MDQ6VXNlcjg3NzkzNg==","avatar_url":"https://avatars2.githubusercontent.com/u/877936?v=4","gravatar_id":"","url":"https://api.github.com/users/marshall007","html_url":"https://github.com/marshall007","followers_url":"https://api.github.com/users/marshall007/followers","following_url":"https://api.github.com/users/marshall007/following{/other_user}","gists_url":"https://api.github.com/users/marshall007/gists{/gist_id}","starred_url":"https://api.github.com/users/marshall007/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshall007/subscriptions","organizations_url":"https://api.github.com/users/marshall007/orgs","repos_url":"https://api.github.com/users/marshall007/repos","events_url":"https://api.github.com/users/marshall007/events{/privacy}","received_events_url":"https://api.github.com/users/marshall007/received_events","type":"User","site_admin":false},"created_at":"2016-05-24T20:47:46Z","updated_at":"2016-05-24T20:47:46Z","author_association":"NONE","body":"@s1monw @rjernst thanks for the feedback and that totally makes sense. Just to provide a bit of background on this: in refactoring our logic for replicating into ES, I started to prefer doing as little transformation on the documents as possible prior to indexing. Since the `_source` then remains largely untouched, it's easier to reason about and compare documents coming from the search API with those fetched directly from the database.\n\nThe `transform` API, which was deprecated in 2.0.0, worked really well for this use-case despite being a bit clunky and hard to test. I totally get why that API was deprecated, but I was hoping we might see it eventually replaced with more discrete/structured transformations like what I was proposing here.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221732222","html_url":"https://github.com/elastic/elasticsearch/issues/18535#issuecomment-221732222","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18535","id":221732222,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTczMjIyMg==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-05-25T22:56:18Z","updated_at":"2016-05-25T22:56:18Z","author_association":"MEMBER","body":"@marshall007 You can use the `ingest` node feature which is coming in 5.0. See https://www.elastic.co/guide/en/elasticsearch/reference/master/ingest.html\n","performed_via_github_app":null}]