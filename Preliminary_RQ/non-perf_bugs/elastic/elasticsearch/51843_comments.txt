[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/581688774","html_url":"https://github.com/elastic/elasticsearch/issues/51843#issuecomment-581688774","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51843","id":581688774,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTY4ODc3NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-02-04T00:43:00Z","updated_at":"2020-02-04T00:43:00Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/Search)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/581688779","html_url":"https://github.com/elastic/elasticsearch/issues/51843#issuecomment-581688779","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51843","id":581688779,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTY4ODc3OQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-02-04T00:43:01Z","updated_at":"2020-02-04T00:43:01Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra (:Core/Infra/Logging)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/582473060","html_url":"https://github.com/elastic/elasticsearch/issues/51843#issuecomment-582473060","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51843","id":582473060,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MjQ3MzA2MA==","user":{"login":"altinp","id":6945923,"node_id":"MDQ6VXNlcjY5NDU5MjM=","avatar_url":"https://avatars2.githubusercontent.com/u/6945923?v=4","gravatar_id":"","url":"https://api.github.com/users/altinp","html_url":"https://github.com/altinp","followers_url":"https://api.github.com/users/altinp/followers","following_url":"https://api.github.com/users/altinp/following{/other_user}","gists_url":"https://api.github.com/users/altinp/gists{/gist_id}","starred_url":"https://api.github.com/users/altinp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/altinp/subscriptions","organizations_url":"https://api.github.com/users/altinp/orgs","repos_url":"https://api.github.com/users/altinp/repos","events_url":"https://api.github.com/users/altinp/events{/privacy}","received_events_url":"https://api.github.com/users/altinp/received_events","type":"User","site_admin":false},"created_at":"2020-02-05T15:50:33Z","updated_at":"2020-02-05T15:50:33Z","author_association":"NONE","body":"Thanks @jimczi, this should sort out #48910 ! One question (and pardon my ignorance): is it not possible for the coordinating node to do some (basic/partial?) parsing just to ensure that global circuit breakers like `too_many_clauses` are not tripped, so as to not even send the query to all shards? If not, when putting together the response, it could check the first shard failure's `reason.caused_by.caused_by.{type|reason}` and if something global like `too_many_clauses`, it could send back a much smaller response, omitting the rest of the shard failures.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/582792693","html_url":"https://github.com/elastic/elasticsearch/issues/51843#issuecomment-582792693","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51843","id":582792693,"node_id":"MDEyOklzc3VlQ29tbWVudDU4Mjc5MjY5Mw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2020-02-06T08:33:50Z","updated_at":"2020-02-06T08:33:50Z","author_association":"MEMBER","body":"> is it not possible for the coordinating node to do some (basic/partial?) parsing just to ensure that global circuit breakers like too_many_clauses are not tripped, so as to not even send the query to all shards?\r\n\r\nThe coordinating node doesn't have the mapping so it's not possible at the moment. The change I committed is just a small fix, there's a lot of follow up that we could try. One thing that I'd like to test is whether we can de-duplicate the shard failures at the coordinator level. We shouldn't have to save every shard failures if they are all the same (parsing failure, too many clauses, ...). Another possibility would be to try to early terminate the query if a shard failure is reported and `allow_partial_results` is set to `false`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/582948375","html_url":"https://github.com/elastic/elasticsearch/issues/51843#issuecomment-582948375","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51843","id":582948375,"node_id":"MDEyOklzc3VlQ29tbWVudDU4Mjk0ODM3NQ==","user":{"login":"altinp","id":6945923,"node_id":"MDQ6VXNlcjY5NDU5MjM=","avatar_url":"https://avatars2.githubusercontent.com/u/6945923?v=4","gravatar_id":"","url":"https://api.github.com/users/altinp","html_url":"https://github.com/altinp","followers_url":"https://api.github.com/users/altinp/followers","following_url":"https://api.github.com/users/altinp/following{/other_user}","gists_url":"https://api.github.com/users/altinp/gists{/gist_id}","starred_url":"https://api.github.com/users/altinp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/altinp/subscriptions","organizations_url":"https://api.github.com/users/altinp/orgs","repos_url":"https://api.github.com/users/altinp/repos","events_url":"https://api.github.com/users/altinp/events{/privacy}","received_events_url":"https://api.github.com/users/altinp/received_events","type":"User","site_admin":false},"created_at":"2020-02-06T15:06:47Z","updated_at":"2020-02-06T15:15:19Z","author_association":"NONE","body":"> The coordinating node doesn't have the mapping so it's not possible at the moment.\r\n\r\nAh, true. Would this (and other?) use cases perhaps benefit from an integrated \"schema\" (mapping) registry? This could be replicated on all nodes for fast access, since the overall size would be small.\r\nEven before getting to that though, would it not be possible to do some mapping-unaware, Lucene-syntactical parsing on the as-is user supplied query, like checking for the number of terms in a `terms` query, or of single `term` clauses, or of boolean OR clauses in `query_string`. I.e. skim over the query just to rule out a few early-termination opportunities. (But yes, perhaps worth waiting for a comprehensive approach instead.)\r\n\r\nI also do agree on deduping the shard failures as they stream in. Even without peeking too deep into the error strings and relying on string similarity etc., you could perhaps check `reason.caused_by.caused_by.type` etc. for some global limit breach like `too_many_clauses` and collapse on that.\r\n\r\nEarly termination when `allow_partial_search_results=false` would be great for us! In all our current use cases, and probably many others', partial results are worse than none. This would be a solid last line of defense since it's not dependent on the type of query/failure. (As you [noted](https://github.com/elastic/elasticsearch/pull/51885#issuecomment-582771951), the case of a large `query_string` would need a different fix than #51885)\r\n\r\nThanks again!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/582966008","html_url":"https://github.com/elastic/elasticsearch/issues/51843#issuecomment-582966008","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51843","id":582966008,"node_id":"MDEyOklzc3VlQ29tbWVudDU4Mjk2NjAwOA==","user":{"login":"altinp","id":6945923,"node_id":"MDQ6VXNlcjY5NDU5MjM=","avatar_url":"https://avatars2.githubusercontent.com/u/6945923?v=4","gravatar_id":"","url":"https://api.github.com/users/altinp","html_url":"https://github.com/altinp","followers_url":"https://api.github.com/users/altinp/followers","following_url":"https://api.github.com/users/altinp/following{/other_user}","gists_url":"https://api.github.com/users/altinp/gists{/gist_id}","starred_url":"https://api.github.com/users/altinp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/altinp/subscriptions","organizations_url":"https://api.github.com/users/altinp/orgs","repos_url":"https://api.github.com/users/altinp/repos","events_url":"https://api.github.com/users/altinp/events{/privacy}","received_events_url":"https://api.github.com/users/altinp/received_events","type":"User","site_admin":false},"created_at":"2020-02-06T15:43:12Z","updated_at":"2020-02-06T15:43:12Z","author_association":"NONE","body":"@jimczi just to reconfirm: current behavior is for coordinating node to hold on to all shard failures regardless of `allow_partial_search_results`, right? I.e. this param only governs what is sent to the client, so a code change is needed.\r\n\r\nOne remaining worry is that this is only a search param. We have users who go through a UI facade that we control tightly but also data scientists who have more freedom in writing queries directly to ES. In the latter case, we'd still be vulnerable if they omit this param in their searches. \r\n\r\nPerhaps this could also be made available as a global setting?\r\n\r\nFinally, would you still want/have to distinguish between shard failures that can be retried against another replica and those that should cause the query to be terminated right away? ","performed_via_github_app":null}]