{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/56195","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56195/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56195/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/56195/events","html_url":"https://github.com/elastic/elasticsearch/issues/56195","id":612564700,"node_id":"MDU6SXNzdWU2MTI1NjQ3MDA=","number":56195,"title":"Add a pre-filter query phase to field capabilities API  ","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":1967498216,"node_id":"MDU6TGFiZWwxOTY3NDk4MjE2","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Search","name":"Team:Search","color":"fef2c0","default":false,"description":"Meta label for search team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2020-05-05T12:28:46Z","updated_at":"2020-06-17T20:53:55Z","closed_at":"2020-06-17T20:53:55Z","author_association":"MEMBER","active_lock_reason":null,"body":"### Context\r\n\r\nThe `_field_caps` API allows to retrieve the capabilities of fields among multiple indices.\r\nThese capabilities can then be used to build search requests on these indices.\r\nToday this API checks index mapping directly to extract the list of fields that exist in each index. \r\n\r\nWith the removal of types, we emphasized the need to separate indices based on their mappings. Beats for instance, now creates one index per module in order to ensure that fields defined in the mapping are dense (they are needed for every document in the index).\r\nHowever, this strategy can be counter-productive for index patterns that mix multiple modules and rely on filters to select/eliminate specific modules. \r\n\r\nFor this specific use case, we added the `constant_keyword` field. The idea is to add a property that is shared by all documents in the index (e.g.: the Metricbeat module)\r\nin order to eliminate indices without checking their content when queries contain a specific list of modules to look at. \r\n\r\nFor instance the following query:\r\n`````\r\nGET metrics-*\r\n{\r\n  \"query\": {\r\n    \"term\": {\r\n        \"module\": \"apache\"\r\n     }\r\n  },\r\n  ...\r\n}\r\n`````\r\n\r\nwould query indices that define a constant_keyword like:\r\n\r\n`````\r\n\"module\": {\r\n    \"type\": \"constant_keyword\",\r\n     \"value\": \"apache\"\r\n}\r\n`````\r\nand would efficiently eliminate indices with other or no value for the module field.\r\n\r\nThis strategy should ease the usage of generic index pattern for search requests since the filtering can be done inside queries but it also emphasizes the need to handle field extraction on a per-request basis. \r\n\r\n### Proposal\r\n\r\nWhen using generic index patterns, the `_field_caps` API  returns the full list of fields that appear in all indices. Now that `constant_keyword` can be used to filter indices based on their mapping, it would be useful to provide the ability to apply such filters in the `_field_caps` API.\r\nSo, instead of applying `_field_caps` to an index pattern only, the field capabilities could be resolved on a per-request basis in order to eliminate fields that cannot appear in search results. \r\n\r\nThe API would look like this:\r\n\r\n`````\r\nGET metrics-*/_field_caps?fields=*\r\n{\r\n  \"filter\": {\r\n    \"term\": {\r\n        \"module\": \"apache\"\r\n     }\r\n  }\r\n}\r\n````` \r\n\r\nThis call would eliminate indices that defines a `constant_keyword` named `module` with a value different than `apache`. We already have  a special phase in search requests called the pre-filter phase that allows to check if a shard can match a query without executing the query.\r\nThe idea here is to apply this phase to the `_field_caps` API if a `filter` is provided. The query won't be executed, we only check if mandatory clauses can rewrite to match no docs from mapping informations and index statistics.\r\nIndices that cannot match the filter would not add their fields to the response.\r\nThe filtering would work exactly the same as the pre-filter search phase which checks that:\r\n- Disjoint range queries on numeric field can rewrite to match none.\r\n- Constant keyword queries can rewrite to match none.\r\n- Unmapped fields can rewrite to match none.\r\n\r\nThis phase is cheap to run (no I/O) so it shouldn't be an issue to perform multiple `_field_caps` call on a single index pattern, one per search request. \r\n \r\n \r\n\r\n  ","closed_by":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"performed_via_github_app":null}