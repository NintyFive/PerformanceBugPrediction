[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/462278219","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-462278219","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":462278219,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MjI3ODIxOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-02-11T10:23:06Z","updated_at":"2019-02-11T10:23:06Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/467188804","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-467188804","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":467188804,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NzE4ODgwNA==","user":{"login":"jonaf","id":456794,"node_id":"MDQ6VXNlcjQ1Njc5NA==","avatar_url":"https://avatars3.githubusercontent.com/u/456794?v=4","gravatar_id":"","url":"https://api.github.com/users/jonaf","html_url":"https://github.com/jonaf","followers_url":"https://api.github.com/users/jonaf/followers","following_url":"https://api.github.com/users/jonaf/following{/other_user}","gists_url":"https://api.github.com/users/jonaf/gists{/gist_id}","starred_url":"https://api.github.com/users/jonaf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonaf/subscriptions","organizations_url":"https://api.github.com/users/jonaf/orgs","repos_url":"https://api.github.com/users/jonaf/repos","events_url":"https://api.github.com/users/jonaf/events{/privacy}","received_events_url":"https://api.github.com/users/jonaf/received_events","type":"User","site_admin":false},"created_at":"2019-02-25T21:23:39Z","updated_at":"2019-02-25T21:23:39Z","author_association":"NONE","body":"How can I draw attention to this? I have found a way to resolve the issue for my needs, but ideally the kind of issue needs to be addressed holistically, taking into account the overall design and goals.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/467623690","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-467623690","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":467623690,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NzYyMzY5MA==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2019-02-26T21:36:13Z","updated_at":"2019-02-26T21:36:13Z","author_association":"CONTRIBUTOR","body":"@jonaf Sorry that it took long time to reply. We indeed,  may benefit from some refactoring in Metadata.  For now, I would like to understand what template do you use to disable indexing fields (can you provide your commands here)?  I wonder if disabling doesn't actually work in your case and it leads to a lot of changes in the mappings?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/467626880","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-467626880","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":467626880,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NzYyNjg4MA==","user":{"login":"jonaf","id":456794,"node_id":"MDQ6VXNlcjQ1Njc5NA==","avatar_url":"https://avatars3.githubusercontent.com/u/456794?v=4","gravatar_id":"","url":"https://api.github.com/users/jonaf","html_url":"https://github.com/jonaf","followers_url":"https://api.github.com/users/jonaf/followers","following_url":"https://api.github.com/users/jonaf/following{/other_user}","gists_url":"https://api.github.com/users/jonaf/gists{/gist_id}","starred_url":"https://api.github.com/users/jonaf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonaf/subscriptions","organizations_url":"https://api.github.com/users/jonaf/orgs","repos_url":"https://api.github.com/users/jonaf/repos","events_url":"https://api.github.com/users/jonaf/events{/privacy}","received_events_url":"https://api.github.com/users/jonaf/received_events","type":"User","site_admin":false},"created_at":"2019-02-26T21:45:46Z","updated_at":"2019-02-26T21:45:46Z","author_association":"NONE","body":"Hi @mayya-sharipova , thank you for your reply. I'm happy to open a PR against this issue to show how I solved it for my use-case, but it only remediates the issue fully for a very specific case (slowness due to dynamic mapping updates during indexing) and does not help in the general case. (Note that my PR is against 2.4.6, but the changes are pretty easy to adapt for later versions of ES, and of course I'm happy to do that as well.)\r\n\r\nTo answer your question, the dynamic template I use is much too large to paste here -- we use Elasticsearch at Bazaarvoice to index over 1.2 billion documents (all of which are queryable at anytime), and many of these documents contain multilingual fields, which are indexed with various analyzers. Moreover, we have many fields that are mapped dynamically (unknown at index creation time). I did run a lot of tests because I originally thought my problem was due to spurious mapping updates, but after some experimentation I found that Elasticsearch is doing a great job of only invoking mapping updates when there are effective changes to documents.\r\n\r\nI did attempt to disable dynamic mappings for sub-fields, but that had no noticeable effect on the number of updates or the slowness in general.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/468871612","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-468871612","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":468871612,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2ODg3MTYxMg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-03-02T02:09:36Z","updated_at":"2019-03-02T02:09:36Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/474794942","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-474794942","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":474794942,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NDc5NDk0Mg==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2019-03-20T11:42:53Z","updated_at":"2019-03-20T11:42:53Z","author_association":"CONTRIBUTOR","body":"Hi @jonaf, to be clear, you are interested in the performance of the following line that still exists in `master` today?\r\n\r\nhttps://github.com/elastic/elasticsearch/blob/74ba9cedcb72b5b94836e91af1a22c596b1db29c/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java#L1193\r\n\r\nSpecifically, you are saying that this is slow because your cluster has some 500k+ aliases and this means that each call to this method takes 30+ seconds to complete? I think we'd generally consider a setup with hundreds of thousands of aliases to be an error, and would encourage you to find a different way to achieve what you're trying to achieve with this setup. That said, it's always worth contemplating this sort of improvement, as long as we can balance the complexity it introduces against the benefits.\r\n\r\nI can't speak about the situation back in 2.4.6 but I can say that in the active development branches objects like `MetaData` are generally immutable, which hopefully means you do not need to worry deeply about concurrency. I would recommend doing your work with an actively developed version, ideally `master`, as forward-ports are tricky and any performance measurements you make against such an old version will not carry forward.\r\n\r\nThe codebase does include a microbenchmarking framework that should be suitable for this sort of work. There's a README at https://github.com/elastic/elasticsearch/tree/master/benchmarks that should help to get you started.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/474901765","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-474901765","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":474901765,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NDkwMTc2NQ==","user":{"login":"jonaf","id":456794,"node_id":"MDQ6VXNlcjQ1Njc5NA==","avatar_url":"https://avatars3.githubusercontent.com/u/456794?v=4","gravatar_id":"","url":"https://api.github.com/users/jonaf","html_url":"https://github.com/jonaf","followers_url":"https://api.github.com/users/jonaf/followers","following_url":"https://api.github.com/users/jonaf/following{/other_user}","gists_url":"https://api.github.com/users/jonaf/gists{/gist_id}","starred_url":"https://api.github.com/users/jonaf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonaf/subscriptions","organizations_url":"https://api.github.com/users/jonaf/orgs","repos_url":"https://api.github.com/users/jonaf/repos","events_url":"https://api.github.com/users/jonaf/events{/privacy}","received_events_url":"https://api.github.com/users/jonaf/received_events","type":"User","site_admin":false},"created_at":"2019-03-20T16:01:07Z","updated_at":"2019-03-20T16:01:07Z","author_association":"NONE","body":"@DaveCTurner thanks for your reply. Having spent plenty of time with 2.4.6 codebase, I can say that it was true back then that `MetaData` is treated as immutable. The issues with concurrency actually *arise* from this assumption, though -- one way to optimize the performance is to re-use the `MetaData` object instead of creating new instances all the time, because the slowness occurs when a new `MetaData` instance is created via `MetaDataBuilder#build()`.\r\n\r\nI am completely aware that having hundreds of thousands of aliases is considered a degenerate use-case. Unfortunately, there's really no alternative for Bazaarvoice, which has been relying on this capability since 2012. It's either hundreds of thousands of indices, or hundreds of thousands of aliases, and the former has even more insurmountable problems due to the sheer magnitude of cluster state, with the additional drawback that the ability to alias an index for swapping to new indices with no downtime is a critical business use-case. I wish our situation were different, but I see no way to make it so.\r\n\r\nI've looked at the codebase for versions 5.x, 6.x and master, and they all include code that traverses and reads + writes the `TreeMap` data structure when the `MetaData` object is built. In fact, the line you referenced has no performance impact because it returns a *view* of the underlying map, so no actual copying is happening here, just the methods that mutate the map are shadowed to prevent modification to the map.\r\n\r\nThe offending line, if I had to choose one, is https://github.com/elastic/elasticsearch/blob/74ba9cedcb72b5b94836e91af1a22c596b1db29c/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java#L1218 in current master. But really that whole method, and the structure of it, is extremely complex, I think it's `O(n * 2 log m)` on a TreeMap (so each operation itself is of complexity `O(log n)`. I have an implementation (in 2.4.6) that improves it by performing the work in `O(n)` time in the special case where the list of aliases and indices hasn't changed since the last `MetaData` object was initialized. In my performance tests, the results have been so dramatic, it out-performed Elasticsearch 1.7.3 by a wide margin (about twice).\r\n\r\nSadly, my fix works most effectively when the aliases or indices does not change frequently *during* indexing, so a more general solution to the problem is likely warranted, but probably a lot more involved.\r\n\r\nSince I don't expect to get much help fixing this simply by opening an issue, here's how I'd like to proceed. Please advise.\r\n\r\n1. Submit my pull request against master, including benchmarking. I hope this will show you guys that I'm serious about making changes. :) \r\n2. Elastic can review it, hopefully accept it, but at the very least, understand the very serious problem the use of `TreeMap` introduced in ES 2.0.0-alpha1, but more generally, the problem with the current design of rebuilding the `aliasAndIndexLookup` data structure so frequently and unnecessarily.\r\n3. If the PR is denied, I'm happy to continue working with Elastic on a change that is broader (i.e., design-level changes to avoid the problem of rebuilding the `aliasAndIndexLookup` data structure within `MetaData` objects -- the ideal solution, I think).\r\n\r\nDoes that sound good?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475136402","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-475136402","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":475136402,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTEzNjQwMg==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T07:43:36Z","updated_at":"2019-03-21T07:43:36Z","author_association":"CONTRIBUTOR","body":"> The offending line, if I had to choose one, is\r\n\r\nYes, that line is within the `buildAliasAndIndexLookup()` method called on the line I quoted. Good, we're talking about the same thing.\r\n\r\n>  my fix works most effectively when the aliases or indices does not change frequently during indexing, so a more general solution to the problem is likely warranted, but probably a lot more involved.\r\n\r\nLeaving the aliases/indices unchanged is a common case, so a simple fix that improves performance in only that case could well be preferable to a more involved change. As I said, we need to balance the complexity of any change against its benefits, and the benefits here might only be felt by a tiny number of users that require hundreds of thousands of aliases.\r\n\r\nPlease go ahead and open a PR so we can see more clearly what change you are proposing and how involved it is. Benchmarks and tests would be nice, and will be essential before any change is merged, but I also have some concerns about the design that might be worth discussing before you put a lot of effort into validating it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475372548","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-475372548","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":475372548,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTM3MjU0OA==","user":{"login":"jonaf","id":456794,"node_id":"MDQ6VXNlcjQ1Njc5NA==","avatar_url":"https://avatars3.githubusercontent.com/u/456794?v=4","gravatar_id":"","url":"https://api.github.com/users/jonaf","html_url":"https://github.com/jonaf","followers_url":"https://api.github.com/users/jonaf/followers","following_url":"https://api.github.com/users/jonaf/following{/other_user}","gists_url":"https://api.github.com/users/jonaf/gists{/gist_id}","starred_url":"https://api.github.com/users/jonaf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonaf/subscriptions","organizations_url":"https://api.github.com/users/jonaf/orgs","repos_url":"https://api.github.com/users/jonaf/repos","events_url":"https://api.github.com/users/jonaf/events{/privacy}","received_events_url":"https://api.github.com/users/jonaf/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T19:33:56Z","updated_at":"2019-03-21T19:33:56Z","author_association":"NONE","body":"OK, thanks, @DaveCTurner ! I'll open a pull request against master in short order. I appreciate your attention to the issue!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/476447180","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-476447180","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":476447180,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NjQ0NzE4MA==","user":{"login":"jonaf","id":456794,"node_id":"MDQ6VXNlcjQ1Njc5NA==","avatar_url":"https://avatars3.githubusercontent.com/u/456794?v=4","gravatar_id":"","url":"https://api.github.com/users/jonaf","html_url":"https://github.com/jonaf","followers_url":"https://api.github.com/users/jonaf/followers","following_url":"https://api.github.com/users/jonaf/following{/other_user}","gists_url":"https://api.github.com/users/jonaf/gists{/gist_id}","starred_url":"https://api.github.com/users/jonaf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonaf/subscriptions","organizations_url":"https://api.github.com/users/jonaf/orgs","repos_url":"https://api.github.com/users/jonaf/repos","events_url":"https://api.github.com/users/jonaf/events{/privacy}","received_events_url":"https://api.github.com/users/jonaf/received_events","type":"User","site_admin":false},"created_at":"2019-03-26T02:15:34Z","updated_at":"2019-03-26T02:15:34Z","author_association":"NONE","body":"@DaveCTurner I've opened PR #40432 for this issue against master. There is one additional optimization I did not include, in the interest of getting the more impactful (but smaller) change resolved, but I'm happy to make that change if you're interested.\r\n\r\nI had trouble with `./gradlew check` failing after running for 1-2 hours, but it fails for a variety of cryptic reasons. This is probably due to my lack of familiarity (running the tests in 2.x using Maven was easier for me, but I'm very comfortable with Maven). I'll continue trying to get the tests to complete, but in the meantime, at least we can discuss/review the PR itself and talk about the best benchmarks to perform against it. (I did look at Rally, but it looks like Rally might need some additional functionality added to its core to produce the kind of slowness I experienced in my degenerate use-case.)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/484501022","html_url":"https://github.com/elastic/elasticsearch/issues/38654#issuecomment-484501022","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38654","id":484501022,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4NDUwMTAyMg==","user":{"login":"jonaf","id":456794,"node_id":"MDQ6VXNlcjQ1Njc5NA==","avatar_url":"https://avatars3.githubusercontent.com/u/456794?v=4","gravatar_id":"","url":"https://api.github.com/users/jonaf","html_url":"https://github.com/jonaf","followers_url":"https://api.github.com/users/jonaf/followers","following_url":"https://api.github.com/users/jonaf/following{/other_user}","gists_url":"https://api.github.com/users/jonaf/gists{/gist_id}","starred_url":"https://api.github.com/users/jonaf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonaf/subscriptions","organizations_url":"https://api.github.com/users/jonaf/orgs","repos_url":"https://api.github.com/users/jonaf/repos","events_url":"https://api.github.com/users/jonaf/events{/privacy}","received_events_url":"https://api.github.com/users/jonaf/received_events","type":"User","site_admin":false},"created_at":"2019-04-18T13:10:56Z","updated_at":"2019-04-18T13:10:56Z","author_association":"NONE","body":"During deeper investigation on later versions of Elasticsearch (5.x and beyond) in PR #40432 , it was discovered that there is a change in 5.x (specifically, part of #21306) that resolves the problem that's happening in ES 2.4. We concluded that no changes were necessary in any version of ES >= 5.x, and so the PR has been closed, and I'm closing this issue as well.","performed_via_github_app":null}]