{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/10628","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10628/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10628/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10628/events","html_url":"https://github.com/elastic/elasticsearch/issues/10628","id":68900403,"node_id":"MDU6SXNzdWU2ODkwMDQwMw==","number":10628,"title":"Numeric fields can't make use of Lucene ranking behaviours","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":76184120,"node_id":"MDU6TGFiZWw3NjE4NDEyMA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v2.0.0-beta1","name":"v2.0.0-beta1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"assignees":[{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false}],"milestone":null,"comments":22,"created_at":"2015-04-16T11:07:00Z","updated_at":"2018-02-14T13:39:40Z","closed_at":"2015-04-27T09:05:35Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Why you need this\n\nI have a use case where I want the normal rules of Lucene relevance ranking to apply to numeric fields, the rules being\n1) TF - repetition of a term in a doc\n2) IDF - scarcity of the term in the index\n3) norms - normalizing for the length of the field.\n\nThe use case might be a product recommendation engine where each doc represents a user and the field of interest is a list of numeric product IDs that the user has liked (this is the format used in the MovieLens dataset to represent users and the movies they like).\nMy query might be to list the movies I like and find the users who share most of my interests. Lucene relevance ranking should be doing all the heavy-lifting here. The above rules would apply as follows:\n1) TF - would favour users who had repeatedly watched one of my choices\n2) IDF - would ensure any common movie IDs (e.g. most people have watched Shawshank Redemption) would be scored less highly.\n3) norms - would favour those users who have a concentrated list of movies than those with encyclopaedic lists of favourites.\n## Example failure\n\nIn [this gist](https://gist.github.com/markharwood/d94f8c4c1a167297b3dd) we can see a simple example of where 2 users have their list of \"likes\" encoded as both strings or numerics. One user has a short list of likes and the other a long list. When we search we would hope to rank the user with the short list of likes that reflect our movie choices higher than the user with many choices. The example queries show how all of the string-based queries use norms effectively and how none of the numeric-based queries make use of this.\n## Why it fails\n\nAll of the query parsers resolve the various different ways of expressing a numeric query down to a call to IntegerFieldMapper.termQuery(..) which produces a NumericRangeQuery with none of the usual Lucene ranking behaviour.\n## Solutions\n\nI can think of 4 options:\n1) Do nothing - users wanting this ranking behaviour would have to encode numerics as strings\n2) Add a new query clause to the DSL e.g. RankingNumericTerms\n3) Add a \"ranking_please\" flag to existing query clauses e.g. Terms\n4) Introduce ranking scores to all existing numeric queries\n\nOption 1 may not be awful as this is a bit of an edge case and we may want to just add some docs around this approach.\nOptions 2 and 3 may warrant further investigation\nOption 4 doesn't feel right for performance and backward compatibility reasons.\n","closed_by":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"performed_via_github_app":null}