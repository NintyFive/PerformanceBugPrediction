{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/9408","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9408/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9408/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9408/events","html_url":"https://github.com/elastic/elasticsearch/issues/9408","id":55443110,"node_id":"MDU6SXNzdWU1NTQ0MzExMA==","number":9408,"title":"Incorrect Sorting and Aggregation of Values in a Filtered Bucket","user":{"login":"netshade","id":3809,"node_id":"MDQ6VXNlcjM4MDk=","avatar_url":"https://avatars0.githubusercontent.com/u/3809?v=4","gravatar_id":"","url":"https://api.github.com/users/netshade","html_url":"https://github.com/netshade","followers_url":"https://api.github.com/users/netshade/followers","following_url":"https://api.github.com/users/netshade/following{/other_user}","gists_url":"https://api.github.com/users/netshade/gists{/gist_id}","starred_url":"https://api.github.com/users/netshade/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/netshade/subscriptions","organizations_url":"https://api.github.com/users/netshade/orgs","repos_url":"https://api.github.com/users/netshade/repos","events_url":"https://api.github.com/users/netshade/events{/privacy}","received_events_url":"https://api.github.com/users/netshade/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-01-26T03:15:51Z","updated_at":"2015-01-26T03:46:21Z","closed_at":"2015-01-26T03:46:21Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"When querying an index with numeric values, I have run into the case where the `term` aggregation seems to be incorrectly ordering its results, as well as failing to report aggregated values in a filtered child bucket aggregation.\n\nI've included a script that reproduces the behavior I'm seeing, running it requires `curl` and `jq` to be installed on your machine. ( `jq` primarily for extraction of values from the returned JSON )\n\nWhat the script does:\n1. Creates an index\n2. Populates it with spend records\n3. Performs a term aggregation returning only 1 result, ordered by the total spend associated with each term. This works correctly ( in the script, it returns `apple` )\n4. Performs a term aggregation returning only 1 result, ordered by the total spend only on \"Laptop\" associated with each term. This returns \"dell\", which is the incorrect result, as it should be \"sony\". Additionally, it does not include the correct sum of Dell's laptop spend. ( it includes 0, and the `doc_count` of the sub filter aggregation seems to indicate it found no candidate documents to perform any aggregation on )\n\nIs this a bug in aggregations, or have I made a mistake w/ how this query should be performed?\n\nThanks!\n\nelasticsearch -v output:\n\n``` sh\n-> % elasticsearch -v\nVersion: 1.4.2, Build: 927caff/2014-12-16T14:11:12Z, JVM: 1.8.0_25\n```\n\nScript:\n\n``` sh\n#!/bin/bash\nADDRESS=\"http://127.0.0.1:9200\"\necho \"Deleting index..\"\ncurl -X DELETE ${ADDRESS}/sort_test/?pretty\nsleep 1\necho \"Creating index...\"\nread -r -d '' MAPPING_CREATE <<'EOF'\n{\n  \"settings\": {\n    \"index.store.compress.stored\": true,\n    \"index.store.compress.tv\": true\n  },\n  \"mappings\": {\n    \"document\": {\n      \"_all\": {\n        \"enabled\": true\n      },\n      \"properties\": {\n        \"amount\": { \"type\": \"double\" }\n      },\n      \"dynamic_templates\": [\n        {\n          \"string_template\": {\n            \"match\": \"*\", \"mapping\": { \"type\": \"string\", \"index\": \"not_analyzed\" }\n          }\n        }\n      ]\n    }\n  }\n}\nEOF\ncurl -X POST ${ADDRESS}/sort_test?pretty -d \"${MAPPING_CREATE}\"\nsleep 1\necho \"Putting data...\"\ncurl -X POST ${ADDRESS}/sort_test/txn/?pretty -d '{ \"name\": \"Apple\", \"category\": \"Phone\",  \"amount\": 100.00 }'\ncurl -X POST ${ADDRESS}/sort_test/txn/?pretty -d '{ \"name\": \"Apple\", \"category\": \"Phone\",  \"amount\": 100.00 }'\ncurl -X POST ${ADDRESS}/sort_test/txn/?pretty -d '{ \"name\": \"Apple\", \"category\": \"Laptop\", \"amount\": 100.00 }'\ncurl -X POST ${ADDRESS}/sort_test/txn/?pretty -d '{ \"name\": \"Sony\",  \"category\": \"Laptop\", \"amount\": 200.00 }'\ncurl -X POST ${ADDRESS}/sort_test/txn/?pretty -d '{ \"name\": \"Dell\",  \"category\": \"Laptop\", \"amount\": 150.00 }'\necho \"Put data, requesting...\"\nread -r -d '' QUERY <<'EOF'\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"sort_example\": {\n      \"terms\": {\n        \"shard_size\": 0,\n        \"size\":       1,\n        \"order\": {\n          \"laptop_sum > filtered\": \"desc\"\n        },\n        \"field\": \"name\"\n      },\n      \"aggregations\": {\n        \"laptop_sum\": {\n          \"filter\": {\n            \"terms\": { \"category\": [\"Laptop\"] }\n          },\n          \"aggregations\": {\n            \"filtered\": {\n              \"sum\": { \"field\": \"amount\" }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nEOF\nread -r -d '' TERM_QUERY <<'EOF'\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"sort_example\": {\n      \"terms\": {\n        \"shard_size\": 0,\n        \"size\":       1,\n        \"order\": {\n          \"total_sum\": \"desc\"\n        },\n        \"field\": \"name\"\n      },\n      \"aggregations\": {\n        \"total_sum\": {\n          \"sum\": { \"field\": \"amount\" }\n        }\n      }\n    }\n  }\n}\nEOF\nsleep 1\necho \"Sorting without conditions, expect to see Apple with a total spend of \\$300...\"\ncurl -X GET -s -d \"${TERM_QUERY}\" ${ADDRESS}/sort_test/_search?pretty | jq \".aggregations.sort_example.buckets\"\necho \"Sorting with conditions, expect to see Sony with a laptop spend of \\$200...\"\ncurl -X GET -s -d \"${QUERY}\" ${ADDRESS}/sort_test/_search?pretty | jq \".aggregations.sort_example.buckets\"\n```\n\nRelevant output of the script:\n\n``` sh\nSorting without conditions, expect to see Apple with a total spend of $300...\n[\n  {\n    \"key\": \"apple\",\n    \"doc_count\": 3,\n    \"total_sum\": {\n      \"value\": 300\n    }\n  }\n]\nSorting with conditions, expect to see Sony with a laptop spend of $200...\n[\n  {\n    \"key\": \"dell\",\n    \"doc_count\": 1,\n    \"laptop_sum\": {\n      \"doc_count\": 0,\n      \"filtered\": {\n        \"value\": 0\n      }\n    }\n  }\n]\n```\n","closed_by":{"login":"netshade","id":3809,"node_id":"MDQ6VXNlcjM4MDk=","avatar_url":"https://avatars0.githubusercontent.com/u/3809?v=4","gravatar_id":"","url":"https://api.github.com/users/netshade","html_url":"https://github.com/netshade","followers_url":"https://api.github.com/users/netshade/followers","following_url":"https://api.github.com/users/netshade/following{/other_user}","gists_url":"https://api.github.com/users/netshade/gists{/gist_id}","starred_url":"https://api.github.com/users/netshade/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/netshade/subscriptions","organizations_url":"https://api.github.com/users/netshade/orgs","repos_url":"https://api.github.com/users/netshade/repos","events_url":"https://api.github.com/users/netshade/events{/privacy}","received_events_url":"https://api.github.com/users/netshade/received_events","type":"User","site_admin":false},"performed_via_github_app":null}