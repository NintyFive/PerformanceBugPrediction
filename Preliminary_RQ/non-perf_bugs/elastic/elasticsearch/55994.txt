{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/55994","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55994/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55994/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55994/events","html_url":"https://github.com/elastic/elasticsearch/issues/55994","id":609582903,"node_id":"MDU6SXNzdWU2MDk1ODI5MDM=","number":55994,"title":"Create Transform API returns HTTP 503 when ScriptException thrown","user":{"login":"russcam","id":208231,"node_id":"MDQ6VXNlcjIwODIzMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/208231?v=4","gravatar_id":"","url":"https://api.github.com/users/russcam","html_url":"https://github.com/russcam","followers_url":"https://api.github.com/users/russcam/followers","following_url":"https://api.github.com/users/russcam/following{/other_user}","gists_url":"https://api.github.com/users/russcam/gists{/gist_id}","starred_url":"https://api.github.com/users/russcam/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/russcam/subscriptions","organizations_url":"https://api.github.com/users/russcam/orgs","repos_url":"https://api.github.com/users/russcam/repos","events_url":"https://api.github.com/users/russcam/events{/privacy}","received_events_url":"https://api.github.com/users/russcam/received_events","type":"User","site_admin":false},"labels":[{"id":1272783040,"node_id":"MDU6TGFiZWwxMjcyNzgzMDQw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:ml/Transform","name":":ml/Transform","color":"0e8a16","default":false,"description":"Transform"}],"state":"closed","locked":false,"assignee":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"assignees":[{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2020-04-30T05:07:17Z","updated_at":"2020-05-05T15:34:41Z","closed_at":"2020-05-05T15:34:41Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"\r\n**Elasticsearch version** (`bin/elasticsearch --version`): 7.7.0-SNAPSHOT build 067daeb7\r\n\r\n**Plugins installed**: ingest-attachment\r\n\r\n**JVM version** (`java -version`): shipped Open JDK\r\n\r\n**OS version** (`uname -a` if on a Unix-like system): Windows 10 Pro 64-bit\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nWhen a transform is created with a `scripted_metric` aggregation on a `text` field, a `ScriptException` occurs, which is expected, but the HTTP status code is 503 Service Unavailable. I would have expected a HTTP status code in the 400-499 range e.g. 400 Bad Request, since the problem is with the request.\r\n\r\n**Steps to reproduce**:\r\n\r\n 1. Create an index with a text field mapping\r\n\r\n```JSON\r\nPUT project\r\n{\r\n  \"mappings\": {\r\n    \"properties\": {\r\n      \"branches\": {\r\n        \"type\": \"text\"\r\n      },\r\n      \"numberOfCommits\": {\r\n        \"type\": \"integer\"\r\n      },\r\n      \"lastActivity\": {\r\n        \"type\": \"date\"\r\n      },\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n 2. Make a call to the create transform API\r\n\r\n```json\r\nPUT /_transform/f-a3d3ab65?pretty=true&error_trace=true \r\n{\r\n  \"description\": \"f-a3d3ab65\",\r\n  \"source\": {\r\n    \"index\": [\"project\"],\r\n    \"query\": {\r\n      \"match_all\": {}\r\n    }\r\n  },\r\n  \"dest\": {\r\n    \"index\": \"transform-f-a3d3ab65\"\r\n  },\r\n  \"frequency\": \"1s\",\r\n  \"pivot\": {\r\n    \"aggs\": {\r\n      \"averageCommits\": {\r\n        \"avg\": {\r\n          \"field\": \"numberOfCommits\"\r\n        }\r\n      },\r\n      \"sumIntoMaster\": {\r\n        \"scripted_metric\": {\r\n          \"combine_script\": {\r\n            \"source\": \"long sum = 0; for (s in state.masterCommits) { sum += s } return sum\"\r\n          },\r\n          \"init_script\": {\r\n            \"source\": \"state.masterCommits = []\"\r\n          },\r\n          \"map_script\": {\r\n            \"source\": \"state.masterCommits.add(doc.branches.contains('master')? 1 : 0)\"\r\n          },\r\n          \"reduce_script\": {\r\n            \"source\": \"long sum = 0; for (s in states) { sum += s } return sum\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"group_by\": {\r\n      \"weekly_activity\": {\r\n        \"date_histogram\": {\r\n          \"calendar_interval\": \"week\",\r\n          \"field\": \"lastActivity\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n 3. Observe that the response is a HTTP status code 503 Service Unavailable with the following body\r\n\r\n```json\r\n{\r\n  \"error\" : {\r\n    \"root_cause\" : [\r\n      {\r\n        \"type\" : \"script_exception\",\r\n        \"reason\" : \"runtime error\",\r\n        \"script_stack\" : [\r\n          \"org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\",\r\n          \"org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\",\r\n          \"org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\",\r\n          \"org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\",\r\n          \"org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\",\r\n          \"java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\",\r\n          \"org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\",\r\n          \"org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\",\r\n          \"state.masterCommits.add(doc.branches.contains('master')? 1 : 0)\",\r\n          \"                           ^---- HERE\"\r\n        ],\r\n        \"script\" : \"state.masterCommits.add(doc.branches.contains('master')? 1 : 0)\",\r\n        \"lang\" : \"painless\",\r\n        \"position\" : {\r\n          \"offset\" : 27,\r\n          \"start\" : 0,\r\n          \"end\" : 63\r\n        },\r\n        \"stack_trace\" : \"ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.painless.PainlessScript.convertToScriptException(PainlessScript.java:96)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):37)\\r\\n\\tat org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregator$1.collect(ScriptedMetricAggregator.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.MultiBucketCollector$MultiLeafBucketCollector.collect(MultiBucketCollector.java:200)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator$3.collect(CompositeAggregator.java:406)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.LongValuesSource$1.collect(LongValuesSource.java:179)\\r\\n\\tat org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.runDeferredCollections(CompositeAggregator.java:388)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.buildAggregation(CompositeAggregator.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:130)\\r\\n\\tat org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:157)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$21(IndicesService.java:1344)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$22(IndicesService.java:1396)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:176)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:159)\\r\\n\\tat org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:433)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:125)\\r\\n\\tat org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1402)\\r\\n\\tat org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1341)\\r\\n\\tat org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:359)\\r\\n\\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:434)\\r\\n\\tat org.elasticsearch.search.SearchService.access$200(SearchService.java:135)\\r\\n\\tat org.elasticsearch.search.SearchService$2.lambda$onResponse$0(SearchService.java:395)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:411)\\r\\n\\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\\r\\n\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:692)\\r\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:832)\\r\\nCaused by: java.lang.IllegalArgumentException: Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\\r\\n\\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\\r\\n\\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\\r\\n\\tat org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\\r\\n\\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):28)\\r\\n\\t... 29 more\\r\\n\"\r\n      }\r\n    ],\r\n    \"type\" : \"status_exception\",\r\n    \"reason\" : \"Failed to validate configuration\",\r\n    \"caused_by\" : {\r\n      \"type\" : \"status_exception\",\r\n      \"reason\" : \"Failed to test query\",\r\n      \"caused_by\" : {\r\n        \"type\" : \"search_phase_execution_exception\",\r\n        \"reason\" : \"all shards failed\",\r\n        \"phase\" : \"query\",\r\n        \"grouped\" : true,\r\n        \"failed_shards\" : [\r\n          {\r\n            \"shard\" : 0,\r\n            \"index\" : \"project\",\r\n            \"node\" : \"q9SnhvthS8aXfRfHlsw3Tg\",\r\n            \"reason\" : {\r\n              \"type\" : \"script_exception\",\r\n              \"reason\" : \"runtime error\",\r\n              \"script_stack\" : [\r\n                \"org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\",\r\n                \"org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\",\r\n                \"org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\",\r\n                \"org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\",\r\n                \"org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\",\r\n                \"java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\",\r\n                \"org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\",\r\n                \"org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\",\r\n                \"state.masterCommits.add(doc.branches.contains('master')? 1 : 0)\",\r\n                \"                           ^---- HERE\"\r\n              ],\r\n              \"script\" : \"state.masterCommits.add(doc.branches.contains('master')? 1 : 0)\",\r\n              \"lang\" : \"painless\",\r\n              \"position\" : {\r\n                \"offset\" : 27,\r\n                \"start\" : 0,\r\n                \"end\" : 63\r\n              },\r\n              \"caused_by\" : {\r\n                \"type\" : \"illegal_argument_exception\",\r\n                \"reason\" : \"Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\",\r\n                \"stack_trace\" : \"java.lang.IllegalArgumentException: Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\\r\\n\\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\\r\\n\\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\\r\\n\\tat org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\\r\\n\\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):28)\\r\\n\\tat org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregator$1.collect(ScriptedMetricAggregator.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.MultiBucketCollector$MultiLeafBucketCollector.collect(MultiBucketCollector.java:200)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator$3.collect(CompositeAggregator.java:406)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.LongValuesSource$1.collect(LongValuesSource.java:179)\\r\\n\\tat org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.runDeferredCollections(CompositeAggregator.java:388)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.buildAggregation(CompositeAggregator.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:130)\\r\\n\\tat org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:157)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$21(IndicesService.java:1344)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$22(IndicesService.java:1396)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:176)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:159)\\r\\n\\tat org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:433)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:125)\\r\\n\\tat org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1402)\\r\\n\\tat org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1341)\\r\\n\\tat org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:359)\\r\\n\\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:434)\\r\\n\\tat org.elasticsearch.search.SearchService.access$200(SearchService.java:135)\\r\\n\\tat org.elasticsearch.search.SearchService$2.lambda$onResponse$0(SearchService.java:395)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:411)\\r\\n\\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\\r\\n\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:692)\\r\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:832)\\r\\n\"\r\n              },\r\n              \"stack_trace\" : \"ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.painless.PainlessScript.convertToScriptException(PainlessScript.java:96)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):37)\\r\\n\\tat org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregator$1.collect(ScriptedMetricAggregator.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.MultiBucketCollector$MultiLeafBucketCollector.collect(MultiBucketCollector.java:200)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator$3.collect(CompositeAggregator.java:406)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.LongValuesSource$1.collect(LongValuesSource.java:179)\\r\\n\\tat org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.runDeferredCollections(CompositeAggregator.java:388)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.buildAggregation(CompositeAggregator.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:130)\\r\\n\\tat org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:157)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$21(IndicesService.java:1344)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$22(IndicesService.java:1396)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:176)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:159)\\r\\n\\tat org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:433)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:125)\\r\\n\\tat org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1402)\\r\\n\\tat org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1341)\\r\\n\\tat org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:359)\\r\\n\\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:434)\\r\\n\\tat org.elasticsearch.search.SearchService.access$200(SearchService.java:135)\\r\\n\\tat org.elasticsearch.search.SearchService$2.lambda$onResponse$0(SearchService.java:395)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:411)\\r\\n\\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\\r\\n\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:692)\\r\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:832)\\r\\nCaused by: java.lang.IllegalArgumentException: Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\\r\\n\\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\\r\\n\\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\\r\\n\\tat org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\\r\\n\\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):28)\\r\\n\\t... 29 more\\r\\n\"\r\n            }\r\n          }\r\n        ],\r\n        \"stack_trace\" : \"Failed to execute phase [query], all shards failed; shardFailures {[q9SnhvthS8aXfRfHlsw3Tg][project][0]: RemoteTransportException[[xpack-node-722dce9200][127.0.0.1:9300][indices:data/read/search[phase/query]]]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.]; }{[q9SnhvthS8aXfRfHlsw3Tg][project][1]: RemoteTransportException[[xpack-node-722dce9200][127.0.0.1:9300][indices:data/read/search[phase/query]]]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.]; }\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseFailure(AbstractSearchAsyncAction.java:551)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.executeNextPhase(AbstractSearchAsyncAction.java:309)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseDone(AbstractSearchAsyncAction.java:580)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onShardFailure(AbstractSearchAsyncAction.java:393)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.access$100(AbstractSearchAsyncAction.java:68)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction$1.onFailure(AbstractSearchAsyncAction.java:245)\\r\\n\\tat org.elasticsearch.action.search.SearchExecutionStatsCollector.onFailure(SearchExecutionStatsCollector.java:73)\\r\\n\\tat org.elasticsearch.action.ActionListenerResponseHandler.handleException(ActionListenerResponseHandler.java:59)\\r\\n\\tat org.elasticsearch.action.search.SearchTransportService$ConnectionCountingHandler.handleException(SearchTransportService.java:402)\\r\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleException(TransportService.java:1139)\\r\\n\\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.processException(TransportService.java:1248)\\r\\n\\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1222)\\r\\n\\tat org.elasticsearch.transport.TaskTransportChannel.sendResponse(TaskTransportChannel.java:60)\\r\\n\\tat org.elasticsearch.action.support.ChannelActionListener.onFailure(ChannelActionListener.java:56)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:413)\\r\\n\\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\\r\\n\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:692)\\r\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:832)\\r\\nCaused by: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.painless.PainlessScript.convertToScriptException(PainlessScript.java:96)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):37)\\r\\n\\tat org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregator$1.collect(ScriptedMetricAggregator.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.MultiBucketCollector$MultiLeafBucketCollector.collect(MultiBucketCollector.java:200)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator$3.collect(CompositeAggregator.java:406)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.LongValuesSource$1.collect(LongValuesSource.java:179)\\r\\n\\tat org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.runDeferredCollections(CompositeAggregator.java:388)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.buildAggregation(CompositeAggregator.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:130)\\r\\n\\tat org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:157)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$21(IndicesService.java:1344)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$22(IndicesService.java:1396)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:176)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:159)\\r\\n\\tat org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:433)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:125)\\r\\n\\tat org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1402)\\r\\n\\tat org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1341)\\r\\n\\tat org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:359)\\r\\n\\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:434)\\r\\n\\tat org.elasticsearch.search.SearchService.access$200(SearchService.java:135)\\r\\n\\tat org.elasticsearch.search.SearchService$2.lambda$onResponse$0(SearchService.java:395)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:411)\\r\\n\\t... 6 more\\r\\nCaused by: java.lang.IllegalArgumentException: Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\\r\\n\\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\\r\\n\\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\\r\\n\\tat org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\\r\\n\\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):28)\\r\\n\\t... 29 more\\r\\n\"\r\n      },\r\n      \"stack_trace\" : \"ElasticsearchStatusException[Failed to test query]; nested: SearchPhaseExecutionException[all shards failed]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.xpack.transform.transforms.pivot.Pivot.lambda$validateQuery$1(Pivot.java:102)\\r\\n\\tat org.elasticsearch.action.ActionListener$1.onFailure(ActionListener.java:71)\\r\\n\\tat org.elasticsearch.action.support.TransportAction$1.onFailure(TransportAction.java:79)\\r\\n\\tat org.elasticsearch.action.support.ContextPreservingActionListener.onFailure(ContextPreservingActionListener.java:50)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.raisePhaseFailure(AbstractSearchAsyncAction.java:571)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseFailure(AbstractSearchAsyncAction.java:551)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.executeNextPhase(AbstractSearchAsyncAction.java:309)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseDone(AbstractSearchAsyncAction.java:580)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onShardFailure(AbstractSearchAsyncAction.java:393)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.access$100(AbstractSearchAsyncAction.java:68)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction$1.onFailure(AbstractSearchAsyncAction.java:245)\\r\\n\\tat org.elasticsearch.action.search.SearchExecutionStatsCollector.onFailure(SearchExecutionStatsCollector.java:73)\\r\\n\\tat org.elasticsearch.action.ActionListenerResponseHandler.handleException(ActionListenerResponseHandler.java:59)\\r\\n\\tat org.elasticsearch.action.search.SearchTransportService$ConnectionCountingHandler.handleException(SearchTransportService.java:402)\\r\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleException(TransportService.java:1139)\\r\\n\\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.processException(TransportService.java:1248)\\r\\n\\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1222)\\r\\n\\tat org.elasticsearch.transport.TaskTransportChannel.sendResponse(TaskTransportChannel.java:60)\\r\\n\\tat org.elasticsearch.action.support.ChannelActionListener.onFailure(ChannelActionListener.java:56)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:413)\\r\\n\\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\\r\\n\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:692)\\r\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:832)\\r\\nCaused by: Failed to execute phase [query], all shards failed; shardFailures {[q9SnhvthS8aXfRfHlsw3Tg][project][0]: RemoteTransportException[[xpack-node-722dce9200][127.0.0.1:9300][indices:data/read/search[phase/query]]]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.]; }{[q9SnhvthS8aXfRfHlsw3Tg][project][1]: RemoteTransportException[[xpack-node-722dce9200][127.0.0.1:9300][indices:data/read/search[phase/query]]]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.]; }\\r\\n\\t... 21 more\\r\\nCaused by: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.painless.PainlessScript.convertToScriptException(PainlessScript.java:96)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):37)\\r\\n\\tat org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregator$1.collect(ScriptedMetricAggregator.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.MultiBucketCollector$MultiLeafBucketCollector.collect(MultiBucketCollector.java:200)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator$3.collect(CompositeAggregator.java:406)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.LongValuesSource$1.collect(LongValuesSource.java:179)\\r\\n\\tat org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.runDeferredCollections(CompositeAggregator.java:388)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.buildAggregation(CompositeAggregator.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:130)\\r\\n\\tat org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:157)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$21(IndicesService.java:1344)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$22(IndicesService.java:1396)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:176)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:159)\\r\\n\\tat org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:433)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:125)\\r\\n\\tat org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1402)\\r\\n\\tat org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1341)\\r\\n\\tat org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:359)\\r\\n\\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:434)\\r\\n\\tat org.elasticsearch.search.SearchService.access$200(SearchService.java:135)\\r\\n\\tat org.elasticsearch.search.SearchService$2.lambda$onResponse$0(SearchService.java:395)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:411)\\r\\n\\t... 6 more\\r\\nCaused by: java.lang.IllegalArgumentException: Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\\r\\n\\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\\r\\n\\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\\r\\n\\tat org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\\r\\n\\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):28)\\r\\n\\t... 29 more\\r\\n\"\r\n    },\r\n    \"stack_trace\" : \"ElasticsearchStatusException[Failed to validate configuration]; nested: ElasticsearchStatusException[Failed to test query]; nested: SearchPhaseExecutionException[all shards failed]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.xpack.transform.action.TransportPutTransformAction.lambda$putTransform$5(TransportPutTransformAction.java:308)\\r\\n\\tat org.elasticsearch.action.ActionListener$1.onFailure(ActionListener.java:71)\\r\\n\\tat org.elasticsearch.xpack.transform.transforms.pivot.Pivot.lambda$validateQuery$1(Pivot.java:102)\\r\\n\\tat org.elasticsearch.action.ActionListener$1.onFailure(ActionListener.java:71)\\r\\n\\tat org.elasticsearch.action.support.TransportAction$1.onFailure(TransportAction.java:79)\\r\\n\\tat org.elasticsearch.action.support.ContextPreservingActionListener.onFailure(ContextPreservingActionListener.java:50)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.raisePhaseFailure(AbstractSearchAsyncAction.java:571)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseFailure(AbstractSearchAsyncAction.java:551)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.executeNextPhase(AbstractSearchAsyncAction.java:309)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onPhaseDone(AbstractSearchAsyncAction.java:580)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.onShardFailure(AbstractSearchAsyncAction.java:393)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction.access$100(AbstractSearchAsyncAction.java:68)\\r\\n\\tat org.elasticsearch.action.search.AbstractSearchAsyncAction$1.onFailure(AbstractSearchAsyncAction.java:245)\\r\\n\\tat org.elasticsearch.action.search.SearchExecutionStatsCollector.onFailure(SearchExecutionStatsCollector.java:73)\\r\\n\\tat org.elasticsearch.action.ActionListenerResponseHandler.handleException(ActionListenerResponseHandler.java:59)\\r\\n\\tat org.elasticsearch.action.search.SearchTransportService$ConnectionCountingHandler.handleException(SearchTransportService.java:402)\\r\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleException(TransportService.java:1139)\\r\\n\\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.processException(TransportService.java:1248)\\r\\n\\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1222)\\r\\n\\tat org.elasticsearch.transport.TaskTransportChannel.sendResponse(TaskTransportChannel.java:60)\\r\\n\\tat org.elasticsearch.action.support.ChannelActionListener.onFailure(ChannelActionListener.java:56)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:413)\\r\\n\\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\\r\\n\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:692)\\r\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\\r\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\\r\\n\\tat java.base/java.lang.Thread.run(Thread.java:832)\\r\\nCaused by: ElasticsearchStatusException[Failed to test query]; nested: SearchPhaseExecutionException[all shards failed]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\t... 26 more\\r\\nCaused by: Failed to execute phase [query], all shards failed; shardFailures {[q9SnhvthS8aXfRfHlsw3Tg][project][0]: RemoteTransportException[[xpack-node-722dce9200][127.0.0.1:9300][indices:data/read/search[phase/query]]]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.]; }{[q9SnhvthS8aXfRfHlsw3Tg][project][1]: RemoteTransportException[[xpack-node-722dce9200][127.0.0.1:9300][indices:data/read/search[phase/query]]]; nested: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.]; }\\r\\n\\t... 21 more\\r\\nCaused by: ScriptException[runtime error]; nested: IllegalArgumentException[Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.];\\r\\n\\tat org.elasticsearch.painless.PainlessScript.convertToScriptException(PainlessScript.java:96)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):37)\\r\\n\\tat org.elasticsearch.search.aggregations.metrics.ScriptedMetricAggregator$1.collect(ScriptedMetricAggregator.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.MultiBucketCollector$MultiLeafBucketCollector.collect(MultiBucketCollector.java:200)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator$3.collect(CompositeAggregator.java:406)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.LongValuesSource$1.collect(LongValuesSource.java:179)\\r\\n\\tat org.elasticsearch.search.aggregations.LeafBucketCollector.collect(LeafBucketCollector.java:82)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.runDeferredCollections(CompositeAggregator.java:388)\\r\\n\\tat org.elasticsearch.search.aggregations.bucket.composite.CompositeAggregator.buildAggregation(CompositeAggregator.java:142)\\r\\n\\tat org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:130)\\r\\n\\tat org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:157)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$21(IndicesService.java:1344)\\r\\n\\tat org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$22(IndicesService.java:1396)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:176)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache$Loader.load(IndicesRequestCache.java:159)\\r\\n\\tat org.elasticsearch.common.cache.Cache.computeIfAbsent(Cache.java:433)\\r\\n\\tat org.elasticsearch.indices.IndicesRequestCache.getOrCompute(IndicesRequestCache.java:125)\\r\\n\\tat org.elasticsearch.indices.IndicesService.cacheShardLevelResult(IndicesService.java:1402)\\r\\n\\tat org.elasticsearch.indices.IndicesService.loadIntoContext(IndicesService.java:1341)\\r\\n\\tat org.elasticsearch.search.SearchService.loadOrExecuteQueryPhase(SearchService.java:359)\\r\\n\\tat org.elasticsearch.search.SearchService.executeQueryPhase(SearchService.java:434)\\r\\n\\tat org.elasticsearch.search.SearchService.access$200(SearchService.java:135)\\r\\n\\tat org.elasticsearch.search.SearchService$2.lambda$onResponse$0(SearchService.java:395)\\r\\n\\tat org.elasticsearch.search.SearchService.lambda$runAsync$0(SearchService.java:411)\\r\\n\\t... 6 more\\r\\nCaused by: java.lang.IllegalArgumentException: Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [branches] in order to load field data by uninverting the inverted index. Note that this can use significant memory.\\r\\n\\tat org.elasticsearch.index.mapper.TextFieldMapper$TextFieldType.fielddataBuilder(TextFieldMapper.java:761)\\r\\n\\tat org.elasticsearch.index.fielddata.IndexFieldDataService.getForField(IndexFieldDataService.java:116)\\r\\n\\tat org.elasticsearch.index.query.QueryShardContext.lambda$lookup$0(QueryShardContext.java:320)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:97)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup$1.run(LeafDocLookup.java:94)\\r\\n\\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:94)\\r\\n\\tat org.elasticsearch.search.lookup.LeafDocLookup.get(LeafDocLookup.java:41)\\r\\n\\tat org.elasticsearch.painless.PainlessScript$Script.execute(state.masterCommits.add(doc.branches.contains('master')? 1 : 0):28)\\r\\n\\t... 29 more\\r\\n\"\r\n  },\r\n  \"status\" : 503\r\n}\r\n```\r\n  Would expect a response in the 400-499 range. With a 503 response, the official language clients will treat this as an error that can be retried.\r\n\r\n\r\n","closed_by":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"performed_via_github_app":null}