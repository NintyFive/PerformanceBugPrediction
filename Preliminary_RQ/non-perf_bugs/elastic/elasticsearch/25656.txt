{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/25656","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25656/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25656/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25656/events","html_url":"https://github.com/elastic/elasticsearch/issues/25656","id":242167634,"node_id":"MDU6SXNzdWUyNDIxNjc2MzQ=","number":25656,"title":"[Feature Request] Sharing nested documents across primary documents","user":{"login":"yazaddaruvala","id":812652,"node_id":"MDQ6VXNlcjgxMjY1Mg==","avatar_url":"https://avatars0.githubusercontent.com/u/812652?v=4","gravatar_id":"","url":"https://api.github.com/users/yazaddaruvala","html_url":"https://github.com/yazaddaruvala","followers_url":"https://api.github.com/users/yazaddaruvala/followers","following_url":"https://api.github.com/users/yazaddaruvala/following{/other_user}","gists_url":"https://api.github.com/users/yazaddaruvala/gists{/gist_id}","starred_url":"https://api.github.com/users/yazaddaruvala/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yazaddaruvala/subscriptions","organizations_url":"https://api.github.com/users/yazaddaruvala/orgs","repos_url":"https://api.github.com/users/yazaddaruvala/repos","events_url":"https://api.github.com/users/yazaddaruvala/events{/privacy}","received_events_url":"https://api.github.com/users/yazaddaruvala/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":176784422,"node_id":"MDU6TGFiZWwxNzY3ODQ0MjI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/won't%20fix","name":"won't fix","color":"f7c6c7","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-07-11T20:06:09Z","updated_at":"2018-02-14T13:26:35Z","closed_at":"2017-07-12T16:07:34Z","author_association":"NONE","active_lock_reason":null,"body":"<!-- Feature request -->\r\n\r\n**Describe the feature**:\r\n\r\nHey, I'm not very familiar with the internals of ElasticSearch, forgive me if this feature request is far fetched. If so, please educate me I'm happy to learn about any limitations.\r\n \r\nI work at Amazon. We have a use case where we use nested documents that can be shared across primary documents. Currently, the data is all denormalized, and there is a lot of duplication. What I'm looking for is to be able to specify the nested document's key+version at index time.\r\n \r\nYou may want to recommend we index these as two different types and do application side joins. We tried this, and apart from the latency impact, it was very limiting. Primarily, we need to be able to filter on both the fields of the primary document and the nested document at the same time (I can explain more about this if people would like).\r\n \r\nContrived Example:\r\n \r\nHouses have windows, but different houses can have the same window model.\r\n \r\nExample:\r\n```\r\n{\r\n  _id: \"House A\",\r\n  windows: [\r\n     {\r\n         manufacturer_id_part_number: \"Windows R Us_123456\",\r\n         inspections_passed: [12, 13123, 123, 31231, 13213, ...],\r\n     },\r\n     ...\r\n  ],\r\n  ...\r\n},\r\n{\r\n  _id: \"House B\",\r\n  windows: [\r\n     {\r\n         manufacturer_id_part_number: \"Windows R Us_987654\",\r\n         inspections_passed: [31231, 13213, ...],\r\n     },\r\n     {\r\n         manufacturer_id_part_number: \"Windows R Us_123456\",\r\n         inspections_passed: [12, 13123, 123, 31231, 13213, ...],\r\n     },\r\n     ...\r\n  ],\r\n  ...\r\n},\r\n```\r\n \r\nI imagine the inverted index looks something like:\r\nThere will be three nested documents (mapping to their primary document):\r\n```\r\n{\r\n    \"House A::<Random UUID>\" -> \"House A\", /* Represents: \"Windows R Us_123456\" */\r\n    \"House B::<Random UUID>\" -> \"House B\", /* Represents: \"Windows R Us_987654\" */\r\n    \"House B::<Random UUID>\" -> \"House B\", /* Represents: \"Windows R Us_123456\" */\r\n}\r\n```\r\n \r\nIdeally: There should only be two nested documents:\r\n```\r\n{\r\n    \"Windows R Us_123456\" -> [\"House A\", \"House B\"],\r\n    \"Windows R Us_987654\" -> [\"House B\"],\r\n}\r\n```\r\n \r\nQuery:\r\n```\r\nGET yazad_test/_search\r\n{\r\n \"query\": {\r\n   \"bool\": {\r\n     \"filter\": {\r\n       /* House fields */\r\n     }, \r\n     \"must\": [\r\n       {\"nested\": {\r\n         \"path\": \"windows\",\r\n         \"query\": {\r\n           \"bool\": {\r\n             \"minimum_number_should_match\": 2,\r\n             \"should\": [\r\n               { \"match\": { \"inspections_passed\": \"123\" }},\r\n               { \"match\": { \"inspections_passed\": \"987\" }}\r\n             ]\r\n           }\r\n         }\r\n       }\r\n     }]\r\n   }\r\n }\r\n}\r\n```\r\n \r\nIn the real usecase, there are a lot of window documents, and each is relatively large (`inspections_passed` has on average 1000 values). There are also a large ratio of these nested window documents which are duplicates.\r\n \r\nNow for the tricky parts: What we are asking for above, is basically joins across types, which we understand is not ideal. Multi-shard joins would be non-performant. As such, joins on nested documents are likely fast because they are colocated on the same shard.\r\n \r\nGiven that, we would be happy to see the reduction in duplicate nested documents, even at a per shard level (we have a lot of documents). Extending the example from above:\r\n```\r\n{\r\n    \"<Shard 1>::Windows R Us_123456\" -> [\"House A\", \"House B\"],\r\n    \"<Shard 1>::Windows R Us_987654\" -> [\"House B\"],\r\n},\r\n{\r\n    \"<Shard 2>::Windows R Us_123456\" -> [\"House C\"],\r\n}\r\n```\r\n \r\nLet me know what you think.\r\n \r\nThanks,\r\nYazad\r\n\r\nP.S. We can consider the \"window documents\" as immutable, as such I'm not so concerned about specifying an external version, but for the sake of completeness thought I'd include it in this request.","closed_by":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"performed_via_github_app":null}