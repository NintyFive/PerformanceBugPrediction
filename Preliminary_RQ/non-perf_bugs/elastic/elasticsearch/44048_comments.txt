[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509067976","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-509067976","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":509067976,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTA2Nzk3Ng==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-07-08T03:41:12Z","updated_at":"2019-07-08T03:41:12Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509068491","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-509068491","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":509068491,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTA2ODQ5MQ==","user":{"login":"bizybot","id":902768,"node_id":"MDQ6VXNlcjkwMjc2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/902768?v=4","gravatar_id":"","url":"https://api.github.com/users/bizybot","html_url":"https://github.com/bizybot","followers_url":"https://api.github.com/users/bizybot/followers","following_url":"https://api.github.com/users/bizybot/following{/other_user}","gists_url":"https://api.github.com/users/bizybot/gists{/gist_id}","starred_url":"https://api.github.com/users/bizybot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bizybot/subscriptions","organizations_url":"https://api.github.com/users/bizybot/orgs","repos_url":"https://api.github.com/users/bizybot/repos","events_url":"https://api.github.com/users/bizybot/events{/privacy}","received_events_url":"https://api.github.com/users/bizybot/received_events","type":"User","site_admin":false},"created_at":"2019-07-08T03:45:08Z","updated_at":"2019-07-08T03:45:08Z","author_association":"CONTRIBUTOR","body":"Hi @albertzaharovits, @jkakavas, @tvernum please provide your ideas around the refactoring of cluster privileges when you get some time. Thank you.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509869393","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-509869393","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":509869393,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTg2OTM5Mw==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T01:19:48Z","updated_at":"2019-07-10T01:25:52Z","author_association":"CONTRIBUTOR","body":"As promised here is a diagram of what we have right now.\r\n```\r\n        ┌─────────────────────────┐\r\n        │Privilege                │\r\n        │---------                │\r\n        │- name : *String         │\r\n        │- automaton : Automaton  │\r\n        └─────────────────────────┘\r\n                     ◇            ┌──────────────────────────────────────────────────┐\r\n              extends│            │                                                  │\r\n                     │            ◆                                                  │\r\n        ┌─────────────────────────┐      ╔═══════════════════╗                       │\r\n        │Cluster Privilege        │      ║\"VALUES\" : Map     ║                       │\r\n        │-----------------        │ has  ║--------------     ║                       │\r\n        │                         │─────◆║Predefined Names   ║◌─┐                    │\r\n        │                         │      ║                   ║  │                    │\r\n        └─────────────────────────┘      ╚═══════════════════╝  │calls               │\r\n                     ◆            │      ╔═══════════════════╗──┘                    │\r\n                     │            │      ║                   ║                       │\r\n                     │            └─────●║resolve(*String)   ║◌───────────────────┐  │\r\n                 has │          provides ║                   ║               calls│  │\r\n                     │                   ╚═══════════════════╝                    │  │\r\n                     │                                                            │  │\r\n    ┌─────────────────────────────────┐───────◇┌───────────────────┐              │  │\r\n    │Conditional Cluster Privilege    │extends │NamedWriteable     │              │  │\r\n    │-----------------------------    │        │--------------     │              │  │\r\n    │- category : Category            │        └───────────────────┘              │  │\r\n    │- privilege : Cluster Privilege  │        ┌───────────────────┐              │  │\r\n    │- request predicate : Predicate  │        │ToXContentFragment │              │  │\r\n    │                                 │extends │------------------ │              │  │\r\n    └─────────────────────────────────┘───────◇└───────────────────┘              │  │\r\n                                      ◆                                           │  │\r\n                                      │                                           │  │\r\n                                      └───────────────────────────────────────────┼──┼──┐\r\n                                                                                  │  │  │\r\n                                              ┌────────────────────────────────┐  │  │  │\r\n                                              │Role Descriptor                 │  │  │  │\r\n                                              │---------------                 │  │  │  │\r\n                                              │- cluster privileges : *String  │  │  │  │\r\n                                              │- conditional cluster privileges│  │  │  │\r\n                                              │  : *ConditionalClusterPrivilege│  │  │  │\r\n                                              │                                │  │  │  │\r\n                                              └────────────────────────────────┘  │  │  │\r\n                                                               ┼                  │  │  │\r\n                                                     references│                  │  │  │\r\n        ┌───────────────────────────┐                          │                  │  │  │\r\n        │Role Builder               │         ╔════════════════════════════════╗  │  │  │\r\nprovides│------------               │         ║new(Role Descriptor)            ║  │  │  │\r\n     ┌──│                           │────────●║  : Role Builder                ║──┘  │  │\r\n     │  │                           │provides ║                                ║     │  │\r\n     │  └───────────────────────────┘         ╚════════════════════════════════╝     │  │\r\n     │  ┌───────────────────────────┐                          │                     │  │\r\n     │  │Simple Cluster Permission  │                   creates│                     │  │\r\n     │  │-------------------------  │extends                   ┼                     │  │\r\n     │  │                           │──────◇┌─────────────────────────────────────┐  │  │\r\n     │  │                           │       │Cluster Permission                   │  │  │\r\n     │  └───────────────────────────┘       │------------------                   │  │  │\r\n     │                                ┌────◇│- privilege : Cluster Privilege      │──┘  │\r\n     │                        extends │     │                                     │has  │\r\n     │  ┌─────────────────────────────┐────◆└─────────────────────────────────────┘     │\r\n     │  │Composite Cluster Permission │has  ◆                  ◇                        │\r\n     │  │---------------------------- │     │           extends│                        │\r\n     │  │- children                   │ ┌───┘                  │                        │\r\n     │  │  : * Cluster Permission     │ │  ┌───────────────────────────────────────┐    │\r\n     │  │                             │ │  │Conditional Cluster Permission         │    │\r\n     │  └─────────────────────────────┘ │  │------------------------------         │    │\r\n     │                                  │  │- privilege                            │────┘\r\n     │                                  │  │  : Conditional Cluster Privilege      │has\r\n     │  ╔═══════════════════════════╗   │  └───────────────────────────────────────┘\r\n     │  ║                           ║   │\r\n     └─●║build() : Role             ║   └──┌───────────────────────────────────────┐\r\n        ║                           ║  has │Role                                   │\r\n        ╚═══════════════════════════╝      │----                                   │\r\n                      │                    │- cluster : Cluster Permission         │\r\n                      │ creates            │                                       │\r\n                      └───────────────────┼└───────────────────────────────────────┘\r\n```\r\n_My apologies for the lack of legend, etc. I wanted to keep the diagram as small as possible so it could be pasted directly into the issue._ \r\n\r\nThis diagram doesn't cover the various use cases that exist around `ClusterPermission` for things like  get-user-privileges and has-privileges. They complicate things slightly, but this is not the right diagram to represent them.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509875418","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-509875418","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":509875418,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTg3NTQxOA==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T01:52:09Z","updated_at":"2019-07-10T01:54:27Z","author_association":"CONTRIBUTOR","body":"In terms of calls into `ClusterPermission`, we have this:\r\n```\r\n┌───────────────────────────────┐ ┌───────────────────────┐ ┌───────────────────────────┐\r\n│      Cluster Permission       │ │         Role          │ │        RBAC Engine        │\r\n│      ══════════════════       │ │         ════          │ │        ═══════════        │\r\n│ ╔═══════════════════════════╗ │ │ ╔═══════════════════╗ │ │ ╔═══════════════════════╗ │\r\n│ ║check(action, request)     ║ │ │ ║checkClusterAction ║ │ │ ║authorizeClusterAction ║ │\r\n│ ║: Boolean                  ║◀┼─┼─║                   ║◀┼─┼─║                       ║ │\r\n│ ╚═══════════════════════════╝ │ │ ╚═══════════════════╝ │ │ ╚═══════════════════════╝ │\r\n│ ╔═══════════════════════════╗ │ │ ╔═══════════════════╗ │ │ ╔═══════════════════════╗ │\r\n│ ║grants(privilege)          ║ │ │ ║grants             ║ │ │ ║checkPrivileges        ║ │\r\n│ ║: Boolean                  ║◀┼─┼─║                   ║◀┼─┼─║                       ║ │\r\n│ ╚═══════════════════════════╝ │ │ ╚═══════════════════╝ │ │ ╚═══════════════════════╝ │\r\n│ ╔═══════════════════════════╗ │ │                       │ │ ╔═══════════════════════╗ │\r\n│ ║privileges()               ║ │ │                       │ │ ║getUserPrivileges      ║ │\r\n│ ║: *(ClusterPrivilege,      ║◀┼─┼───────────────────────┼─┼─║                       ║ │\r\n│ ║    ConditionalClusterPriv)║ │ │                       │ │ ╚═══════════════════════╝ │\r\n│ ╚═══════════════════════════╝ │ │                       │ │                           │\r\n└───────────────────────────────┘ └───────────────────────┘ └───────────────────────────┘\r\n```\r\n\r\nA cluster permission does 3 things:\r\n1. As part of the authorization process when actions are executed, the `check` method is called to authorize (or not) the execution.\r\n2. To support the has-privileges endpoint, the `grants` method determines whether a held permission grants access to a named privilege\r\n3. To support the get-user-privileges endpoint, the `privileges` method returns the privilege objects that represent this permission.\r\n\r\nThe first 2 methods are proxied through the `Role` object, because `LimitedRole` alters their behaviour. There is no reliable way to do that for _get-user-privileges_, so that endpoint does not reflect role limits in its response.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509882365","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-509882365","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":509882365,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTg4MjM2NQ==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T02:28:42Z","updated_at":"2019-07-10T02:28:42Z","author_association":"CONTRIBUTOR","body":"At the \"privilege\" level I think our model breaks down in a few ways:\r\n1. It overlaps into the \"permission\" space because it holds an `Automaton` which is really a runtime implementation detail\r\n2. The split between `ClusterPrivilege` and `ConditionalClusterPrivilege` should probably be more like `FixedClusterPrivilege` and `ConfigurableClusterPrivilege`, that correspond to the `\"cluster\": []` and `\"global\": {}` role definitions, but I need to explore that idea a bit more in code\r\n3. Within `FixedClusterPrivilege` we should differentiate between _Named_ privileges (\"monitor\", \"manage_own_api_key\"), and _Action_ (or _Pattern_) privileges (\"cluster:admin/xpack/security/user/get\", \"cluster:admin/xpack/security/user/*\")\r\n4. The \"resolve\" method tries to merge privileges together, but I think it makes more sense to do that when turning them into permissions.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510358230","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-510358230","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":510358230,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDM1ODIzMA==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T07:05:11Z","updated_at":"2019-07-11T07:05:11Z","author_association":"CONTRIBUTOR","body":"I did a tentative refactor based on where I thought the problems lie.\r\nhttps://github.com/tvernum/elasticsearch/tree/cluster-priv-refactor/1\r\n\r\nIt's not perfect, but it worked out pretty well.\r\nThe main issues are:\r\n- I think the _has-privileges_ support is wrong. It works OK, but the way it's currently implement it's going to be difficult to make has-privileges(\"manage_own_api_keys\") return true for a user with `manage_security` (despite the fact that they _can_ do everything that `manage_own_api_keys` provides).\r\n- I'm not sure that all the `*ClusterPrivilege` implementations are really useful.\r\n  - Do we really need `NamedClusterPrivilege` and `ActionClusterPrivilege` ?  \r\n  - `AutomatonClusterPrivilege` only exists to support has-privileges. Is it needed?\r\n\r\nOther than _has-privileges_ (`ClusterPermissions.grants`) the hardest part was making all the automaton based privileges merge into a single Automaton within the `ClusterPermission`.\r\nI think that's needed, and I think delaying it until the Permission is the right thing, but needing to do that made the implementation more complex.\r\n\r\nI don't propose that we merge that branch _as-is_, but I'd be happy for someone to based their own proposal on top of that (either directly by branching from it, or indirectly by incorporating ideas).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/511486907","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-511486907","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":511486907,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMTQ4NjkwNw==","user":{"login":"bizybot","id":902768,"node_id":"MDQ6VXNlcjkwMjc2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/902768?v=4","gravatar_id":"","url":"https://api.github.com/users/bizybot","html_url":"https://github.com/bizybot","followers_url":"https://api.github.com/users/bizybot/followers","following_url":"https://api.github.com/users/bizybot/following{/other_user}","gists_url":"https://api.github.com/users/bizybot/gists{/gist_id}","starred_url":"https://api.github.com/users/bizybot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bizybot/subscriptions","organizations_url":"https://api.github.com/users/bizybot/orgs","repos_url":"https://api.github.com/users/bizybot/repos","events_url":"https://api.github.com/users/bizybot/events{/privacy}","received_events_url":"https://api.github.com/users/bizybot/received_events","type":"User","site_admin":false},"created_at":"2019-07-15T17:06:31Z","updated_at":"2019-07-16T07:32:01Z","author_association":"CONTRIBUTOR","body":"Thank you @tvernum for the class diagrams and the refactoring direction.\r\n\r\nI went through the refactoring and worked out to implement the use case to manage own api key privilege. Given that I had a similar implementation it was easier to relate and get that working.\r\nFollowing were my observations:-\r\n- I like the part of moving the merging of privileges to the later stage when we build the cluster permission, that eases the resolver as well.\r\n- Prior to this refactoring, we had a cache in the resolver to map set of names to the combined automaton, we need to check the performance impact if any.\r\n- I think much is not achieved `AutomatonClusterPrivilege` as it seems we have just moved the automaton out of `ClusterPrivilege` but if the motivation is to get rid of Automatons at privilege level then anyways this would not matter.\r\n- I extended the refactoring such that we have a `GlobalConfigurableClusterPrivilege` which is renderable which extends `ConfigurableClusterPrivilege`. This allows us to define ~`FixedConfigurableClusterPrivilege`~ `NamedConfigurableClusterPrivilege` for the use case of `manage_own_api_key` privilege and similar use cases.\r\n `NamedConfigurableClusterPrivilege` and `NamedClusterPrivilege` both implement `NameableClusterPrivilege` which allows for defining named cluster privilege and can then be resolved by `ClusterPrivilegeResolver`\r\n- I also don't think we need `NamedClusterPrivilege` and `ActionClusterPrivilege` as it seems in case of ActionClusterPrivilege, the action is the name.\r\n\r\nhttps://github.com/bizybot/elasticsearch/commit/861ef6cb5ed62a3ba1370e9a6e5c50b59596eb49\r\n\r\nYou can see the resultant refactored class diagram below\r\n\r\n![refactoring-1](https://user-images.githubusercontent.com/902768/61260874-37e92b80-a7c3-11e9-95be-74b1e65e3ea7.jpg)\r\n\r\n- The other part that I spent some time was to think of a way to convey the root cause of the access denied. **Right now our interface for `ClusterPermission#check(action, request)` returns a boolean while execution, instead of that I am thinking of a `PermissionCheckResult` object which captures the boolean as well as an error message in case of a failure. This allows us to convey why it failed at the point (where we know what action, what request parameter, what context it failed) to the  `RBACEngine` and further to the user**. _This is a two-edged sword as we do not want to expose many details such that it exposes other details so will need to be careful._\r\nFor example, in the case of `manage_own_api_key` privilege, if the user tries to retrieve the API key of another user, in that case, the request predicate will evaluate to true or false and we would get a generic message for the user on access denied. Instead, if we were to send a `PermissionCheckResult` of (_boolean_,_error-msg_) that could be useful to let users know why it failed rather than just an error message stating cluster action is not permitted. What do you think?\r\n\r\nWhat we have from our refactoring solves most of the problems stated in the description except few where we need additional support.\r\nFor example:\r\n_- use case: granular watch privilege to a set of watches owned by (a user, group of users, users belonging to a realm, etc.)_\r\n  When operating on a watch, the request usually has just watch id and does not carry information on who owns the watch. This makes it difficult to create a privilege which can operate with our current state of refactoring. It requires to fetch the watch details to know who the owner is and then do the authorization, which is different than the scenarios that we have seen so far.\r\n\r\nIMO to cater this refactoring to solve these scenarios would make it an open-ended refactoring\r\nand to limit the scope I think we can see if we all agree to the current direction.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/511659784","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-511659784","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":511659784,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMTY1OTc4NA==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-16T04:26:51Z","updated_at":"2019-07-16T04:30:25Z","author_association":"CONTRIBUTOR","body":"> FixedConfigurableClusterPrivilege\r\n\r\nThis is probably just a naming thing, but it doesn't make sense to me.\r\nIf it's `Fixed` in what way is it `Configurable` ? That seems like a contradiction in terms.\r\n\r\nIn my head `ConfigurableClusterPrivilege` was the type of privilege that could be _configured_ by the security admin, within a `\"global\"` block of a role descriptor - what you've called `GlobalConfigurableClusterPrivilege`.\r\n\r\n`manage_own_api_key` isn't a `ConfigurableClusterPrivilege` because it cannot be configured by a user.\r\nA privilege which is _Named_ (i.e. fixed), but not (purely) Automaton based is something else, but I'm curious as to why we need a base class for that. In my head there would be a `ManageOwnApiKeyPrivilege` class with no need for any sort of base implementation/interface.\r\n\r\nIn your class diagram `ManageOwnApiKeyClusterPrivilege` is derived `AutomatonClusterPrivilege`, but I don't think it should be. It is not implemented purely as an Automaton over the action name, and I think it would be a mistake to treat it as one.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/511660592","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-511660592","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":511660592,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMTY2MDU5Mg==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-16T04:31:30Z","updated_at":"2019-07-16T04:31:30Z","author_association":"CONTRIBUTOR","body":"> - use case: granular watch privilege to a set of watches owned by (a user, group of users, users belonging to a realm, etc.)\r\n\r\nI think this is a different problem and we shouldn't make any attempt to tackle it here. \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/512174731","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-512174731","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":512174731,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMjE3NDczMQ==","user":{"login":"bizybot","id":902768,"node_id":"MDQ6VXNlcjkwMjc2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/902768?v=4","gravatar_id":"","url":"https://api.github.com/users/bizybot","html_url":"https://github.com/bizybot","followers_url":"https://api.github.com/users/bizybot/followers","following_url":"https://api.github.com/users/bizybot/following{/other_user}","gists_url":"https://api.github.com/users/bizybot/gists{/gist_id}","starred_url":"https://api.github.com/users/bizybot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bizybot/subscriptions","organizations_url":"https://api.github.com/users/bizybot/orgs","repos_url":"https://api.github.com/users/bizybot/repos","events_url":"https://api.github.com/users/bizybot/events{/privacy}","received_events_url":"https://api.github.com/users/bizybot/received_events","type":"User","site_admin":false},"created_at":"2019-07-17T09:20:15Z","updated_at":"2019-07-17T09:20:15Z","author_association":"CONTRIBUTOR","body":"> > FixedConfigurableClusterPrivilege\r\n> \r\n> This is probably just a naming thing, but it doesn't make sense to me.\r\n> If it's `Fixed` in what way is it `Configurable` ? That seems like a contradiction in terms.\r\n> \r\n\r\nSorry, I forgot to update the text part of my comment after I updated the image, it is supposed to be`NamedConfigurableClusterPrivilege`. Yes, it is `configurable` and does contradict, that's why during refactoring I also kept switching between _Named_ or _Fixed_. I think the name could be different maybe `FixedConfigurationClusterPrivilege` if we require one?\r\n\r\n> In my head `ConfigurableClusterPrivilege` was the type of privilege that could be _configured_ by the security admin, within a `\"global\"` block of a role descriptor - what you've called `GlobalConfigurableClusterPrivilege`.\r\n> \r\n> `manage_own_api_key` isn't a `ConfigurableClusterPrivilege` because it cannot be configured by a user.\r\n\r\nI was thinking of `ConfigurableClusterPrivilege` as one which is composed of an automaton for actions and a request predicate, a base for implementing either a named (*fixed configuration) cluster privilege or global configurable cluster privilege (exposed via \"global\").\r\n\r\n> A privilege which is _Named_ (i.e. fixed), but not (purely) Automaton based is something else,\r\n\r\nI was not sure if we needed one (which is _Named_ but not Automaton based) as till now all our operations are based on cluster actions + some additional predicate. Do you have a use case in mind?\r\n\r\nIn your refactoring, it `ConfigurableClusterPrivilege` is not Automaton based\r\nbut we while looking at the `ManageApplicationPrivileges` we do have an action predicate which we pass it to `ClusterPermission#build()`. I might have misunderstood your purpose if you were trying to make `ConfigurableClusterPrivilege` not based on `AutomatonClusterPrivilege` for a reason.\r\n\r\n> but I'm curious as to why we need a base class for that. In my head there would be a `ManageOwnApiKeyPrivilege` class with no need for any sort of base implementation/interface.\r\n> \r\n\r\nWe could definitely skip the intermediate base interface `NamedConfigurableClusterPrivilege`/`FixedConfigurationClusterPrivilege`. The base gave it a form\r\nto say it is a fixed configuration cluster privilege to differentiate it from `*ConfigurableClusterPrivilege`\r\n\r\n> In your class diagram `ManageOwnApiKeyClusterPrivilege` is derived `AutomatonClusterPrivilege`, but I don't think it should be. It is not implemented purely as an Automaton over the action name, and I think it would be a mistake to treat it as one.\r\n\r\nI think this is due to me considering `ConfigurableClusterPrivilege` to be derived from `AutomatonClusterPrivilege` and adding request predicate on that. When we building cluster permission we do use action predicate and request predicate for `ManageApplicationPrivileges` though it might be a case where similar privilege might not depend on any action predicate, in that case, it is the choice that the privilege builder has it. I am not sure if this is what you had in mind.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/512196181","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-512196181","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":512196181,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMjE5NjE4MQ==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2019-07-17T10:23:52Z","updated_at":"2019-07-17T10:26:47Z","author_association":"CONTRIBUTOR","body":"> I was thinking of ConfigurableClusterPrivilege as one which is composed of an automaton for actions and a request predicate\r\n\r\nMy intent is renaming it from `ConditionalClusterPrivilege` was to break that concept of \"a privilege that does things with the request\". I don't think (at the privilege level) that actually matters, I didn't feel there was really a need to have a base class that represented that type of thing, because you never do anything special with one. I don't think it would have any extra methods (at least not ones that anyone needs to call), nor would you ever need to do a type-check against it.\r\n\r\nWhat we do have, is the concept of a privilege that can be converted to/from XContent (`\"global\"`) and has internal state that needs to be serialized (it cannot simply be referred to by name). That's a _thing_ because the role descriptor needs to handle it in special ways (i.e. write it to XContent & serialize it).\r\n\r\n> I was not sure if we needed one (which is Named but not Automaton based) ... Do you have a use case in mind?\r\n\r\nNo, I was referring to your `NamedConfigurableClusterPrivilege`. That is Named, but not purely Automaton based (it has additional conditions beyond the action automaton), but I'm arguing that if you feel the need to name such a thing then it isn't a `ConfigurableClusterPrivilege` because the user cannot configure it. It simply doesn't have any configuration to speak of.\r\n\r\nPer my earlier comment \r\n> AutomatonClusterPrivilege only exists to support has-privileges. Is it needed?\r\n\r\nI added AutomatonClusterPrivilege so that `ClusterPermission.grant(ClusterPrivilege)` could do what it needed to do with as little change as possible from the current behaviour. I think that implementation of `has-privileges` is imperfect, but I didn't want to go down the rabbit hole of refactoring all of that when I could just replicate the existing behaviour.\r\n\r\nIt's OK for other privileges to implement that interface if we want, but it wasn't my intent. I intended it to be a lose representation of the old style `Privilege` where everything is automaton based and _exclusively automaton based_ so that you can make assumptions about merging automatons, etc because the automaton _is_ the complete definition of the privilege's rights.\r\n\r\nWe could change its definition such that it defines a sufficient (but not necessary) automaton for the user to hold in order to determine whether they have this privilege. That is, if you have full access to all actions defined by this automaton then you have access to this privilege. And that would work _OK_ in that a user with `manage_api_key` would then be said to _have_ the `manage_own_api_key` privilege. But a user with `manage_own_api_key` wouldn't have `manage_own_api_key` (because having `manage_own_api_key` does not give you _full access_ to the API key actions). So, while it sort of works a little, it's ultimately broken.\r\n\r\nI think we need to change the implementation details of `has-privileges` to no longer use `permission.grants(privilege)` check, and maybe reverse it to `privilege.impliedBy(permission)` and expand permission in some way so that we are able to inspect what it holds.  \r\nBut, per the above, I think that should be a separate refactoring and I didn't want to tackle it here.\r\n \r\n> if you were trying to make ConfigurableClusterPrivilege not based on AutomatonClusterPrivilege for a reason\r\n\r\nIf `ConfigurableClusterPrivilege` is based on `AutomatonClusterPrivilege` then _everything is_. Which is the case in your diagram - there is no value in having a distinction between `AutomatonClusterPrivilege` and `ClusterPrivilege` because there is nothing that extends `ClusterPrivilege` except for `AutomatonClusterPrivilege`.\r\n\r\n> The base gave it a form to say it is a fixed configuration cluster privilege to differentiate it from *ConfigurableClusterPrivilege\r\n\r\nBut my argument all along is that if it is _fixed_, then by definition it's not _configurable_. It's one or the other. It is either defined by a (string) _Name_ (`FixedClusterPrivilege`), or it is defined by artibrary JSON (`ConfigurableClusterPrivilege`) & it cannot be both.\r\n\r\n> When we building cluster permission we do use action predicate and request predicate for `ManageApplicationPrivileges`\r\n\r\nI was attempting to minimise implementation changes in the privileges for risk of changing their behaviour accidentally. Since `ManageApplicationPrivileges` was already an action-predicate and a request-predicate, I left it at that, and added a convenience method on `ClusterPermission.Builder` to take those 2 separate predicates and merge them into a `PermissionCheck`. But that's really an implementation detail inside `ManageApplicationPrivileges`, I cannot see any reason to push that implementation into a _type_. I would be more inclined to just inline that `Builder` method back into `ManageApplicationPrivileges`.\r\nI don't think we want to assume that all privileges will want to be implemented as separate action/request predicates & it doesn't gain us anything to do so. \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/514016471","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-514016471","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":514016471,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNDAxNjQ3MQ==","user":{"login":"bizybot","id":902768,"node_id":"MDQ6VXNlcjkwMjc2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/902768?v=4","gravatar_id":"","url":"https://api.github.com/users/bizybot","html_url":"https://github.com/bizybot","followers_url":"https://api.github.com/users/bizybot/followers","following_url":"https://api.github.com/users/bizybot/following{/other_user}","gists_url":"https://api.github.com/users/bizybot/gists{/gist_id}","starred_url":"https://api.github.com/users/bizybot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bizybot/subscriptions","organizations_url":"https://api.github.com/users/bizybot/orgs","repos_url":"https://api.github.com/users/bizybot/repos","events_url":"https://api.github.com/users/bizybot/events{/privacy}","received_events_url":"https://api.github.com/users/bizybot/received_events","type":"User","site_admin":false},"created_at":"2019-07-23T01:27:45Z","updated_at":"2019-07-26T08:24:04Z","author_association":"CONTRIBUTOR","body":"I see your intent now. My assumption was that _any_ cluster privilege would be dependent on the cluster action permission, but this may not be entirely true. We can have a cluster privilege which does not depend on cluster action and this could be a powerful construct.\r\n\r\nI see that there are only two types: `Named`/`Fixed` and `Configurable` and every privilege defines a `predicate` (right now we have `action` and a `request,authentication` predicate). This simplifies the intended cluster privilege structure.\r\n\r\n> I think we need to change the implementation details of has-privileges to no longer use permission.grants(privilege) check, and maybe reverse it to privilege.impliedBy(permission) and expand permission in some way so that we are able to inspect what it holds.\r\nBut, per the above, I think that should be a separate refactoring and I didn't want to tackle it here.\r\n\r\n+1 on `has-privileges` refactoring as a separate task rather than combining here. I like the proposal of `implies`.  `PermissionCheck` implementations could determine whether or not requester cluster permission is implied by this permission. I like to think of the outcome as `YES`, `NO` and `MAYBE` (when the whole context is not available like in case of `has-privilege` we do not have a well-formed request object to determine). This is just a thought and not well-formulated idea.\r\n\r\nFollowing is what it looks like if we were to implement `ManageOwnApiKeyClusterPrivilege`:\r\n![refactoring](https://user-images.githubusercontent.com/902768/61937579-7f956180-afd2-11e9-989b-b1aa43b188a5.jpg)\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/515683777","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-515683777","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":515683777,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNTY4Mzc3Nw==","user":{"login":"albertzaharovits","id":4568420,"node_id":"MDQ6VXNlcjQ1Njg0MjA=","avatar_url":"https://avatars2.githubusercontent.com/u/4568420?v=4","gravatar_id":"","url":"https://api.github.com/users/albertzaharovits","html_url":"https://github.com/albertzaharovits","followers_url":"https://api.github.com/users/albertzaharovits/followers","following_url":"https://api.github.com/users/albertzaharovits/following{/other_user}","gists_url":"https://api.github.com/users/albertzaharovits/gists{/gist_id}","starred_url":"https://api.github.com/users/albertzaharovits/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/albertzaharovits/subscriptions","organizations_url":"https://api.github.com/users/albertzaharovits/orgs","repos_url":"https://api.github.com/users/albertzaharovits/repos","events_url":"https://api.github.com/users/albertzaharovits/events{/privacy}","received_events_url":"https://api.github.com/users/albertzaharovits/received_events","type":"User","site_admin":false},"created_at":"2019-07-27T13:21:50Z","updated_at":"2019-07-27T13:21:50Z","author_association":"CONTRIBUTOR","body":"I am OK with the current privilege class hierarchy that differentiates `Configurable` and `Nameable`. Though I think this distinction is irrelevant in the authorization use-case ((1) from https://github.com/elastic/elasticsearch/issues/44048#issuecomment-509875418), it is important in the other use-cases (_has-privilege_ and _get-privilege_) as we might not always determine if a configuration of a `Configurable` privilege is a subset of another one, and the configuration might not be retrievable by the `get-priv` API because that configuration refers to internal classes (transport request types, authn internal classes, etc) which we don't want to make public the same way we make action names public.\r\n\r\nFor the authorization use-case, I am OK that we shift the control over the automaton build to the permission, the same class that runs the automaton. The privilege, though, `Configurable` or `Nameable`, must probably implement an interface that informs the permission of the request predicate.\r\n\r\nI might not have grasped everything, for example, `ClusterPermission#privileges` compared to `ClusterPermission#checks` in Tim's refactoring, but I think a lot of it can be figured out as we get down to the code.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/520288502","html_url":"https://github.com/elastic/elasticsearch/issues/44048#issuecomment-520288502","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44048","id":520288502,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDI4ODUwMg==","user":{"login":"bizybot","id":902768,"node_id":"MDQ6VXNlcjkwMjc2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/902768?v=4","gravatar_id":"","url":"https://api.github.com/users/bizybot","html_url":"https://github.com/bizybot","followers_url":"https://api.github.com/users/bizybot/followers","following_url":"https://api.github.com/users/bizybot/following{/other_user}","gists_url":"https://api.github.com/users/bizybot/gists{/gist_id}","starred_url":"https://api.github.com/users/bizybot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bizybot/subscriptions","organizations_url":"https://api.github.com/users/bizybot/orgs","repos_url":"https://api.github.com/users/bizybot/repos","events_url":"https://api.github.com/users/bizybot/events{/privacy}","received_events_url":"https://api.github.com/users/bizybot/received_events","type":"User","site_admin":false},"created_at":"2019-08-12T03:12:51Z","updated_at":"2019-08-12T03:12:51Z","author_association":"CONTRIBUTOR","body":"Closing this with commit b44c028 \r\n","performed_via_github_app":null}]