{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/21842","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21842/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21842/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21842/events","html_url":"https://github.com/elastic/elasticsearch/issues/21842","id":192153077,"node_id":"MDU6SXNzdWUxOTIxNTMwNzc=","number":21842,"title":"5.0: pipeline painless script error doesn't fail fast ","user":{"login":"niemyjski","id":1020579,"node_id":"MDQ6VXNlcjEwMjA1Nzk=","avatar_url":"https://avatars3.githubusercontent.com/u/1020579?v=4","gravatar_id":"","url":"https://api.github.com/users/niemyjski","html_url":"https://github.com/niemyjski","followers_url":"https://api.github.com/users/niemyjski/followers","following_url":"https://api.github.com/users/niemyjski/following{/other_user}","gists_url":"https://api.github.com/users/niemyjski/gists{/gist_id}","starred_url":"https://api.github.com/users/niemyjski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/niemyjski/subscriptions","organizations_url":"https://api.github.com/users/niemyjski/orgs","repos_url":"https://api.github.com/users/niemyjski/repos","events_url":"https://api.github.com/users/niemyjski/events{/privacy}","received_events_url":"https://api.github.com/users/niemyjski/received_events","type":"User","site_admin":false},"labels":[{"id":268963484,"node_id":"MDU6TGFiZWwyNjg5NjM0ODQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Ingest","name":":Core/Features/Ingest","color":"0e8a16","default":false,"description":"Execution or management of Ingest Pipelines"},{"id":146834791,"node_id":"MDU6TGFiZWwxNDY4MzQ3OTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Scripting","name":":Core/Infra/Scripting","color":"0e8a16","default":false,"description":"Scripting abstractions, Painless, and Mustache"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-11-29T00:10:46Z","updated_at":"2016-12-15T01:26:51Z","closed_at":"2016-12-15T01:26:51Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I'm in the process of converting a groovy script to painless (previously run as a transform). One thing I noticed was that even through the script was incorrect it was accepted. Part of the mantra for 5.x is fail fast so as to give you a good dev experience. \r\n\r\n```json\r\nPUT _ingest/pipeline/events-pipeline\r\n{\r\n  \"processors\": [\r\n    {\r\n      \"script\": {\r\n        \"inline\": \"\\r\\nif (!ctx._source.containsKey('data') || !(ctx._source.data.containsKey('@error') || ctx._source.data.containsKey('@simple_error')))\\r\\n    return\\r\\n\\r\\ndef types = []\\r\\ndef messages = []\\r\\ndef codes = []\\r\\ndef err = ctx._source.data.containsKey('@error') ? ctx._source.data['@error'] : ctx._source.data['@simple_error']\\r\\ndef curr = err\\r\\nwhile (curr != null) {\\r\\n    if (curr.containsKey('type'))\\r\\n        types.add(curr.type)\\r\\n    if (curr.containsKey('message'))\\r\\n        messages.add(curr.message)\\r\\n    if (curr.containsKey('code'))\\r\\n        codes.add(curr.code)\\r\\n    curr = curr.inner\\r\\n}\\r\\n\\r\\nerr['all_types'] = types.join(' ')\\r\\nerr['all_messages'] = messages.join(' ')\\r\\nerr['all_codes'] = codes.join(' ')\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nI don't see a failure until I try to ingest data.\r\n\r\n```json\r\nPUT /test-events-201502/events/54dbc16ca0f5c61398427b00?op_type=create&pipeline=events-pipeline\r\n{\r\n  \"id\": \"54dbc16ca0f5c61398427b00\",\r\n  \"organization_id\": \"1ecd0826e447ad1e78877555\",\r\n  \"project_id\": \"1ecd0826e447ad1e78877ab2\",\r\n  \"stack_id\": \"1ecd0826e447a44e78877ab1\",\r\n  \"is_first_occurrence\": false,\r\n  \"is_fixed\": true,\r\n  \"is_hidden\": false,\r\n  \"created_utc\": \"2015-02-11T20:54:04.4082284\",\r\n  \"type\": \"log\",\r\n  \"source\": \"GET /Print\",\r\n  \"date\": \"2015-02-11T20:54:04.3457274+00:00\",\r\n  \"data\": {\r\n    \"@version\": \"1.2.3.0\",\r\n    \"@level\": \"Error\"\r\n  }\r\n}\r\n```\r\n\r\nWith the error\r\n\r\n\r\n```json\r\n{\r\n  \"error\": {\r\n    \"root_cause\": [\r\n      {\r\n        \"type\": \"exception\",\r\n        \"reason\": \"java.lang.IllegalArgumentException: ScriptException[compile error]; nested: IllegalArgumentException[invalid sequence of tokens near ['types'].]; nested: NoViableAltException;\",\r\n        \"header\": {\r\n          \"processor_type\": \"script\"\r\n        }\r\n      }\r\n    ],\r\n    \"type\": \"exception\",\r\n    \"reason\": \"java.lang.IllegalArgumentException: ScriptException[compile error]; nested: IllegalArgumentException[invalid sequence of tokens near ['types'].]; nested: NoViableAltException;\",\r\n    \"caused_by\": {\r\n      \"type\": \"illegal_argument_exception\",\r\n      \"reason\": \"ScriptException[compile error]; nested: IllegalArgumentException[invalid sequence of tokens near ['types'].]; nested: NoViableAltException;\",\r\n      \"caused_by\": {\r\n        \"type\": \"script_exception\",\r\n        \"reason\": \"compile error\",\r\n        \"caused_by\": {\r\n          \"type\": \"illegal_argument_exception\",\r\n          \"reason\": \"invalid sequence of tokens near ['types'].\",\r\n          \"caused_by\": {\r\n            \"type\": \"no_viable_alt_exception\",\r\n            \"reason\": null\r\n          }\r\n        },\r\n        \"script_stack\": [\r\n          \"... r')))\\r\\n    return\\r\\n\\r\\ndef types = []\\r\\ndef messages  ...\",\r\n          \"                             ^---- HERE\"\r\n        ],\r\n        \"script\": \"\\r\\nif (!ctx._source.containsKey('data') || !(ctx._source.data.containsKey('@error') || ctx._source.data.containsKey('@simple_error')))\\r\\n    return\\r\\n\\r\\ndef types = []\\r\\ndef messages = []\\r\\ndef codes = []\\r\\ndef err = ctx._source.data.containsKey('@error') ? ctx._source.data['@error'] : ctx._source.data['@simple_error']\\r\\ndef curr = err\\r\\nwhile (curr != null) {\\r\\n    if (curr.containsKey('type'))\\r\\n        types.add(curr.type)\\r\\n    if (curr.containsKey('message'))\\r\\n        messages.add(curr.message)\\r\\n    if (curr.containsKey('code'))\\r\\n        codes.add(curr.code)\\r\\n    curr = curr.inner\\r\\n}\\r\\n\\r\\nerr['all_types'] = types.join(' ')\\r\\nerr['all_messages'] = messages.join(' ')\\r\\nerr['all_codes'] = codes.join(' ')\",\r\n        \"lang\": \"painless\"\r\n      }\r\n    },\r\n    \"header\": {\r\n      \"processor_type\": \"script\"\r\n    }\r\n  },\r\n  \"status\": 500\r\n}\r\n```","closed_by":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}