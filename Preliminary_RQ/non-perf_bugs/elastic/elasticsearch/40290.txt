{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/40290","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40290/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40290/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40290/events","html_url":"https://github.com/elastic/elasticsearch/issues/40290","id":423584646,"node_id":"MDU6SXNzdWU0MjM1ODQ2NDY=","number":40290,"title":"Optimize append-only indexing throughput by avoiding term searches for document id.","user":{"login":"itiyamas","id":45985097,"node_id":"MDQ6VXNlcjQ1OTg1MDk3","avatar_url":"https://avatars3.githubusercontent.com/u/45985097?v=4","gravatar_id":"","url":"https://api.github.com/users/itiyamas","html_url":"https://github.com/itiyamas","followers_url":"https://api.github.com/users/itiyamas/followers","following_url":"https://api.github.com/users/itiyamas/following{/other_user}","gists_url":"https://api.github.com/users/itiyamas/gists{/gist_id}","starred_url":"https://api.github.com/users/itiyamas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/itiyamas/subscriptions","organizations_url":"https://api.github.com/users/itiyamas/orgs","repos_url":"https://api.github.com/users/itiyamas/repos","events_url":"https://api.github.com/users/itiyamas/events{/privacy}","received_events_url":"https://api.github.com/users/itiyamas/received_events","type":"User","site_admin":false},"labels":[{"id":145572580,"node_id":"MDU6TGFiZWwxNDU1NzI1ODA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/CRUD","name":":Distributed/CRUD","color":"0e8a16","default":false,"description":"A catch all label for issues around indexing, updating and getting a doc by id. Not search."},{"id":111624690,"node_id":"MDU6TGFiZWwxMTE2MjQ2OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/feedback_needed","name":"feedback_needed","color":"d4c5f9","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-03-21T06:14:16Z","updated_at":"2019-03-21T07:43:23Z","closed_at":"2019-03-21T07:43:23Z","author_association":"NONE","active_lock_reason":null,"body":"ES indexing flow decides if a request is append-only and then uses addDocs instead of updateDocs to improve indexing performance. Just before addDocs is executed, there is a defensive assertion check that searches for the document in lucene as a term query. This turns out to be an expensive call as this is the first time the query is issued which results in cache-miss.\r\n\r\nI ran indexing benchmarks on a single shard, single node setup and got 70% improvement in indexing throughput by turning off the assertion for append-only cases. Also, ran the profiler while indexing and the lucene term query is the biggest hot-spot in indexing path.\r\n\r\nI don't see the reason of the check apart from a defensive mechanism to figure out issues with double \"append-only indexing\" in future. #21189 that introduced the change calls mentions that this was added an assertion to help find the source of the duplicates.\r\n\r\nWe should put the assertion as a debug check and have tests for double \"append-only indexing\" scenarios rather than impact the overall indexing throughput.\r\n\r\nAll tests are single shard and single node tests with a single bulk client.\r\nGeonames without assertDoc code\r\n```\r\n|   All |                                                 Min Throughput | index-append |    12477.8 | docs/s |\r\n|   All |                                              Median Throughput | index-append |    12542.8 | docs/s |\r\n|   All |                                                 Max Throughput | index-append |    12706.1 | docs/s |\r\n|   All |                                        50th percentile latency | index-append |    74.1304 |     ms |\r\n|   All |                                        90th percentile latency | index-append |    82.9246 |     ms |\r\n|   All |                                        99th percentile latency | index-append |    141.414 |     ms |\r\n|   All |                                      99.9th percentile latency | index-append |    288.353 |     ms |\r\n|   All |                                       100th percentile latency | index-append |    362.091 |     ms |\r\n|   All |                                   50th percentile service time | index-append |    74.1304 |     ms |\r\n|   All |                                   90th percentile service time | index-append |    82.9246 |     ms |\r\n|   All |                                   99th percentile service time | index-append |    141.414 |     ms |\r\n|   All |                                 99.9th percentile service time | index-append |    288.353 |     ms |\r\n|   All |                                  100th percentile service time | index-append |    362.091 |     ms |\r\n|   All |                                                     error rate | index-append |          0 |      % |\r\n```\r\nGeonames with assertDoc.\r\n```\r\n|   All |                                                 Min Throughput | index-append |   6249.53 | docs/s |\r\n|   All |                                              Median Throughput | index-append |    7016.6 | docs/s |\r\n|   All |                                                 Max Throughput | index-append |   8134.94 | docs/s |\r\n|   All |                                        50th percentile latency | index-append |   151.687 |     ms |\r\n|   All |                                        90th percentile latency | index-append |   206.094 |     ms |\r\n|   All |                                        99th percentile latency | index-append |   256.556 |     ms |\r\n|   All |                                      99.9th percentile latency | index-append |    307.09 |     ms |\r\n|   All |                                     99.99th percentile latency | index-append |    379.33 |     ms |\r\n|   All |                                       100th percentile latency | index-append |   493.511 |     ms |\r\n|   All |                                   50th percentile service time | index-append |   151.687 |     ms |\r\n|   All |                                   90th percentile service time | index-append |   206.094 |     ms |\r\n|   All |                                   99th percentile service time | index-append |   256.556 |     ms |\r\n|   All |                                 99.9th percentile service time | index-append |    307.09 |     ms |\r\n|   All |                                99.99th percentile service time | index-append |    379.33 |     ms |\r\n|   All |                                  100th percentile service time | index-append |   493.511 |     ms |\r\n|   All |                                                     error rate | index-append |         0 |      % |\r\n```\r\n\r\nhttp_logs without assertDoc\r\n```\r\n|   All |                                                 Min Throughput | index-append |    18323.8 | docs/s |\r\n|   All |                                              Median Throughput | index-append |    18578.5 | docs/s |\r\n|   All |                                                 Max Throughput | index-append |    18655.8 | docs/s |\r\n|   All |                                        50th percentile latency | index-append |    50.1166 |     ms |\r\n|   All |                                        90th percentile latency | index-append |    51.7728 |     ms |\r\n|   All |                                        99th percentile latency | index-append |    108.618 |     ms |\r\n|   All |                                      99.9th percentile latency | index-append |    136.434 |     ms |\r\n|   All |                                     99.99th percentile latency | index-append |    194.442 |     ms |\r\n|   All |                                       100th percentile latency | index-append |    215.519 |     ms |\r\n|   All |                                   50th percentile service time | index-append |    50.1166 |     ms |\r\n|   All |                                   90th percentile service time | index-append |    51.7728 |     ms |\r\n|   All |                                   99th percentile service time | index-append |    108.618 |     ms |\r\n|   All |                                 99.9th percentile service time | index-append |    136.434 |     ms |\r\n|   All |                                99.99th percentile service time | index-append |    194.442 |     ms |\r\n|   All |                                  100th percentile service time | index-append |    215.519 |     ms |\r\n|   All |                                                     error rate | index-append |          0 |      % |\r\n```\r\n\r\nhttp_logs with assertdocs:\r\n```\r\n|   All |                                                 Min Throughput | index-append |    10184.1 | docs/s |\r\n|   All |                                              Median Throughput | index-append |    10703.1 | docs/s |\r\n|   All |                                                 Max Throughput | index-append |      12104 | docs/s |\r\n|   All |                                        50th percentile latency | index-append |    96.5267 |     ms |\r\n|   All |                                        90th percentile latency | index-append |    122.029 |     ms |\r\n|   All |                                        99th percentile latency | index-append |     151.43 |     ms |\r\n|   All |                                      99.9th percentile latency | index-append |    221.228 |     ms |\r\n|   All |                                     99.99th percentile latency | index-append |    323.221 |     ms |\r\n|   All |                                       100th percentile latency | index-append |    492.083 |     ms |\r\n|   All |                                   50th percentile service time | index-append |    96.5267 |     ms |\r\n|   All |                                   90th percentile service time | index-append |    122.029 |     ms |\r\n|   All |                                   99th percentile service time | index-append |     151.43 |     ms |\r\n|   All |                                 99.9th percentile service time | index-append |    221.228 |     ms |\r\n|   All |                                99.99th percentile service time | index-append |    323.221 |     ms |\r\n|   All |                                  100th percentile service time | index-append |    492.083 |     ms |\r\n|   All |                                                     error rate | index-append |          0 |      % |\r\n```\r\n\r\n","closed_by":{"login":"itiyamas","id":45985097,"node_id":"MDQ6VXNlcjQ1OTg1MDk3","avatar_url":"https://avatars3.githubusercontent.com/u/45985097?v=4","gravatar_id":"","url":"https://api.github.com/users/itiyamas","html_url":"https://github.com/itiyamas","followers_url":"https://api.github.com/users/itiyamas/followers","following_url":"https://api.github.com/users/itiyamas/following{/other_user}","gists_url":"https://api.github.com/users/itiyamas/gists{/gist_id}","starred_url":"https://api.github.com/users/itiyamas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/itiyamas/subscriptions","organizations_url":"https://api.github.com/users/itiyamas/orgs","repos_url":"https://api.github.com/users/itiyamas/repos","events_url":"https://api.github.com/users/itiyamas/events{/privacy}","received_events_url":"https://api.github.com/users/itiyamas/received_events","type":"User","site_admin":false},"performed_via_github_app":null}