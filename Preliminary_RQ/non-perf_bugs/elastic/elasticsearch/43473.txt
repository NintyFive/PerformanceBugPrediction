{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/43473","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43473/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43473/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/43473/events","html_url":"https://github.com/elastic/elasticsearch/issues/43473","id":459086598,"node_id":"MDU6SXNzdWU0NTkwODY1OTg=","number":43473,"title":"[CI] testAddressInterfaceLookup fails","user":{"login":"andrershov","id":600624,"node_id":"MDQ6VXNlcjYwMDYyNA==","avatar_url":"https://avatars1.githubusercontent.com/u/600624?v=4","gravatar_id":"","url":"https://api.github.com/users/andrershov","html_url":"https://github.com/andrershov","followers_url":"https://api.github.com/users/andrershov/followers","following_url":"https://api.github.com/users/andrershov/following{/other_user}","gists_url":"https://api.github.com/users/andrershov/gists{/gist_id}","starred_url":"https://api.github.com/users/andrershov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrershov/subscriptions","organizations_url":"https://api.github.com/users/andrershov/orgs","repos_url":"https://api.github.com/users/andrershov/repos","events_url":"https://api.github.com/users/andrershov/events{/privacy}","received_events_url":"https://api.github.com/users/andrershov/received_events","type":"User","site_admin":false},"labels":[{"id":106454670,"node_id":"MDU6TGFiZWwxMDY0NTQ2NzA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Delivery/Build","name":":Delivery/Build","color":"0e8a16","default":false,"description":"Build or test infrastructure"},{"id":148612629,"node_id":"MDU6TGFiZWwxNDg2MTI2Mjk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Etest-failure","name":">test-failure","color":"207de5","default":false,"description":"Triaged test failures from CI"},{"id":2495976472,"node_id":"MDU6TGFiZWwyNDk1OTc2NDcy","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Delivery","name":"Team:Delivery","color":"fef2c0","default":false,"description":"Meta label for Delivery team"},{"id":1194435738,"node_id":"MDU6TGFiZWwxMTk0NDM1NzM4","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v8.0.0","name":"v8.0.0","color":"dddddd","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-06-21T08:51:03Z","updated_at":"2020-11-11T21:48:44Z","closed_at":"2019-06-21T09:07:10Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Got testAddressInterfaceLookup failure here https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+pull-request-1/814/testReport/junit/org.elasticsearch.common.network/NetworkUtilsTests/testAddressInterfaceLookup/. \r\nThanks to @original-brownbear PR #42109, we now know the name of the failing interface - veth141ef02.\r\n```\r\njava.lang.AssertionError: Failed to check if interface [name:veth141ef02 (veth141ef02)] is up\r\n\tat __randomizedtesting.SeedInfo.seed([1EE592F417283B9B:999EF5B3D26242ED]:0)\r\n\tat org.elasticsearch.common.network.NetworkUtilsTests.testAddressInterfaceLookup(NetworkUtilsTests.java:97)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1750)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:938)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:974)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:988)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:817)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:468)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:947)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:832)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:883)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:894)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: java.net.SocketException: No such device (getFlags() failed)\r\n\tat java.base/java.net.NetworkInterface.isUp0(Native Method)\r\n\tat java.base/java.net.NetworkInterface.isUp(NetworkInterface.java:446)\r\n\tat org.elasticsearch.common.network.NetworkUtilsTests.testAddressInterfaceLookup(NetworkUtilsTests.java:93)\r\n\t... 36 more\r\n```","closed_by":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"performed_via_github_app":null}