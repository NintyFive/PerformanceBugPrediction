{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/25065","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25065/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25065/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25065/events","html_url":"https://github.com/elastic/elasticsearch/issues/25065","id":233734250,"node_id":"MDU6SXNzdWUyMzM3MzQyNTA=","number":25065,"title":"Feature Request: Stored Filters","user":{"login":"ljcollins25","id":857364,"node_id":"MDQ6VXNlcjg1NzM2NA==","avatar_url":"https://avatars1.githubusercontent.com/u/857364?v=4","gravatar_id":"","url":"https://api.github.com/users/ljcollins25","html_url":"https://github.com/ljcollins25","followers_url":"https://api.github.com/users/ljcollins25/followers","following_url":"https://api.github.com/users/ljcollins25/following{/other_user}","gists_url":"https://api.github.com/users/ljcollins25/gists{/gist_id}","starred_url":"https://api.github.com/users/ljcollins25/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ljcollins25/subscriptions","organizations_url":"https://api.github.com/users/ljcollins25/orgs","repos_url":"https://api.github.com/users/ljcollins25/repos","events_url":"https://api.github.com/users/ljcollins25/events{/privacy}","received_events_url":"https://api.github.com/users/ljcollins25/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-06-05T22:58:42Z","updated_at":"2017-06-12T13:37:04Z","closed_at":"2017-06-12T13:37:03Z","author_association":"NONE","active_lock_reason":null,"body":"Feature Request:\r\n\r\nI'd like the ability to create stored filters (i.e. bitsets which are stored in the index and can be queried when searching to filter documents). I am working on a source control indexing tool and I would like to have filters corresponding to every commit which make it easy to search all documents at particular points in history. Note: this isn't just the changed documents in that commit but the full set of documents in the source tree at that commit. I'm not sure how useful this is to others, but I thought I'd see if there was any interest. Of course, any feedback for different ways of achieving this are also welcome.\r\n\r\nImplementation Details:\r\nI'm currently working on a prototype which does this by broadcasting a special stored filter document to be indexed on all nodes. When the stored filter document to a particular shard it does a query and captures the matching documents in each segment into a field. There needs to be some coordination with respect to segments which are currently being merged, so it waits for outstanding merges to complete. Further, as segments are merged they pull in the stored filter terms into their postings.\r\n\r\nScenario:\r\n```\r\nPUT inspect \r\n{\r\n    \"settings\": {\r\n        \"number_of_shards\": 1\r\n    }, \r\n  \"mappings\": {\r\n    \"stored_filter\": { \r\n      \"_all\":       { \"enabled\": false  }, \r\n      \"properties\": { \r\n        \"query\":    { \"type\": \"query\" }\r\n      }\r\n    },\r\n    \"user\": { \r\n      \"_all\":       { \"enabled\": false  }, \r\n      \"properties\": { \r\n        \"name\":    { \"type\": \"keyword\" }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPUT /inspect/user/user1?pretty\r\n{ \r\n    \"name\" : \"Test User\"\r\n}\r\n\r\nPOST _refresh\r\n\r\nPUT /inspect/stored_filter/myfilter2?pretty\r\n{ \r\n    \"name\" : \"My Filter\",\r\n    \"query\": {\r\n     \"constant_score\": {\r\n        \"filter\": {\r\n        \"term\": {\r\n           \"name\": \"Test User\"\r\n        }\r\n        }\r\n     }\r\n   }\r\n}\r\n\r\nPUT /inspect/user/user2?pretty\r\n{ \r\n    \"name\" : \"Test User\"\r\n}\r\n\r\nGET /inspect/_search\r\n{\r\n   \"query\" : {\r\n        \"stored_filter\" : { \"id\": \"myfilter2\" }\r\n    }\r\n}\r\n```\r\n\r\nIn this case the filter would return the user1 document but not user2.","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}