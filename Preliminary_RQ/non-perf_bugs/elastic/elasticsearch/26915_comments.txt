[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/334808723","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-334808723","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":334808723,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNDgwODcyMw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-10-06T16:44:57Z","updated_at":"2017-10-06T16:44:57Z","author_association":"MEMBER","body":"> It can be exposed in the bool query itself (via a minimum_should_match field or something like that), but that can be confusing as CoveringQuery Lucene query doesn't understand must, filter or must_not clauses and then we run into difficult to explain search results.\r\n\r\nIs it possible to extract the should clauses from the original bool query to build the `CoveringQuery` and then add this `CoveringQuery` as a should clause behind the scene ?\r\nI prefer this option because it means that we can extend `minimum_should_match` to support this covering query automatically (without adding a new query).\r\n\r\n> The field specified in the minimum_should_match_field must be a number field with doc values not turned off.\r\n\r\nIt could also be a script since it's a value source ?\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335079184","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335079184","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335079184,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTA3OTE4NA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2017-10-09T07:04:56Z","updated_at":"2017-10-09T07:04:56Z","author_association":"MEMBER","body":"> Is it possible to extract the should clauses from the original bool query to build the CoveringQuery and then add this CoveringQuery as a should clause behind the scene ?\r\nI prefer this option because it means that we can extend minimum_should_match to support this covering query automatically (without adding a new query).\r\n\r\nI think that might just work. In the case other clauses are specified too then we need to set `BooleanQuery.Builder#setMinimumNumberShouldMatch(...)` to 1 in order to let it behave as expected? (otherwise the should clauses become completely optional)\r\n\r\n> It could also be a script since it's a value source ?\r\n\r\nYes, I think it can be a script too.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335081639","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335081639","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335081639,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTA4MTYzOQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-10-09T07:21:53Z","updated_at":"2017-10-09T07:21:53Z","author_association":"MEMBER","body":"> I think that might just work. In the case other clauses are specified too then we need to set BooleanQuery.Builder#setMinimumNumberShouldMatch(...) to 1 in order to let it behave as expected? (otherwise the should clauses become completely optional)\r\n\r\nTrue or we can add the converted `covering` query as a `must` clause.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335100412","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335100412","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335100412,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTEwMDQxMg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-10-09T08:59:07Z","updated_at":"2017-10-09T08:59:07Z","author_association":"CONTRIBUTOR","body":"Had a brainstorm with @martijnvg, @jpountz, and @colings86.\r\n\r\nI'm not crazy about adding this to the `bool` query as:\r\n\r\n* this is a specialist use case\r\n* I can't think of example where you would want your queries to cover multiple fields\r\n* the `bool` query is a staple, so adding extra options makes it harder for a new user to get to grips with it\r\n\r\nThe typical use case is: I am querying a list of values in a single field, and a document should only match if all (or most) of the values that the document contains are mentioned.  \r\n\r\nMore concrete use cases: \r\n\r\n* The document field contains the list of required permissions, the query contains all the users permissions, the document should only match if all of the required permissions are a subset of the user's permissions.\r\n* The document field contains a list of keywords representing job experience (eg `java`, `ml`, `c++`).  The document should match if 75% of the document's keywords are queried, or if there are too few query terms, then all query terms must be present.\r\n\r\nThis leads me towards exposing the CoveringQuery in the `terms` query, except that the performance characteristics for this query will be quite different to the current `terms` query.\r\n\r\nAlso, if you have a `terms` query which support min-should-match-from-a-field/script, then why not also support standard min-should-match?  (Today, you'd have to use a `bool/should` clause for this).\r\n\r\nThis lead us to think of this as a query to look for super- or sub-sets: how well do the query and document terms intersect?\r\n\r\nSuggestion is to expose this as the `terms_set` query:\r\n\r\n```\r\n{\r\n  \"terms_set\": {\r\n    \"my_field\": {\r\n      \"terms\": [\"foo\", \"bar\", \"baz\"],\r\n      \"minimum_should_match\": \"50%\",\r\n  ||  \"minimum_should_match_field\": \"my_field_value_count\",\r\n  ||  \"minimum_should_match_script\": {\r\n        \"source\": \".....\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe `script` could inject a parameter with the number of query terms.\r\n\r\n> I can't think of example where you would want your queries to cover multiple fields\r\n\r\nIf users do have valid examples for how they'd like to use this, then we can revisit how to expose a multi-field version of this query, but I think the `terms_set` query will cover >95% of use cases already.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335816401","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335816401","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335816401,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTgxNjQwMQ==","user":{"login":"derickson","id":945150,"node_id":"MDQ6VXNlcjk0NTE1MA==","avatar_url":"https://avatars2.githubusercontent.com/u/945150?v=4","gravatar_id":"","url":"https://api.github.com/users/derickson","html_url":"https://github.com/derickson","followers_url":"https://api.github.com/users/derickson/followers","following_url":"https://api.github.com/users/derickson/following{/other_user}","gists_url":"https://api.github.com/users/derickson/gists{/gist_id}","starred_url":"https://api.github.com/users/derickson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/derickson/subscriptions","organizations_url":"https://api.github.com/users/derickson/orgs","repos_url":"https://api.github.com/users/derickson/repos","events_url":"https://api.github.com/users/derickson/events{/privacy}","received_events_url":"https://api.github.com/users/derickson/received_events","type":"User","site_admin":false},"created_at":"2017-10-11T13:51:14Z","updated_at":"2017-10-11T14:45:54Z","author_association":"CONTRIBUTOR","body":"@clintongormley  @skearns64  I like the DSL proposal.  \r\n\r\nI'd love to see \r\n> min_should_match_percent || min_should_match_count\r\n\r\nif you have 3 terms and 2 need to match using a percentage gets weird.\r\n\r\nI don't fully grok the script option, I'd need an example to know when and why it would be used","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335816803","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335816803","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335816803,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTgxNjgwMw==","user":{"login":"derickson","id":945150,"node_id":"MDQ6VXNlcjk0NTE1MA==","avatar_url":"https://avatars2.githubusercontent.com/u/945150?v=4","gravatar_id":"","url":"https://api.github.com/users/derickson","html_url":"https://github.com/derickson","followers_url":"https://api.github.com/users/derickson/followers","following_url":"https://api.github.com/users/derickson/following{/other_user}","gists_url":"https://api.github.com/users/derickson/gists{/gist_id}","starred_url":"https://api.github.com/users/derickson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/derickson/subscriptions","organizations_url":"https://api.github.com/users/derickson/orgs","repos_url":"https://api.github.com/users/derickson/repos","events_url":"https://api.github.com/users/derickson/events{/privacy}","received_events_url":"https://api.github.com/users/derickson/received_events","type":"User","site_admin":false},"created_at":"2017-10-11T13:52:32Z","updated_at":"2017-10-11T13:52:32Z","author_association":"CONTRIBUTOR","body":"having the default value for min_should_match_percent be 100% would make sense to me","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335818063","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335818063","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335818063,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTgxODA2Mw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-10-11T13:56:19Z","updated_at":"2017-10-11T13:56:19Z","author_association":"CONTRIBUTOR","body":"I think min_should_match as a percentage might bring some confusion as to whether the number that matters is the number of query terms of the number of terms in the document?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/335834537","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-335834537","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":335834537,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNTgzNDUzNw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-10-11T14:43:44Z","updated_at":"2017-10-11T14:43:44Z","author_association":"CONTRIBUTOR","body":"> I'd love to see\r\n>     min_should_match_percent || min_should_match_count\r\n\r\nThe standard minimum should match syntax already supports this (at least based on the number of terms in the query): https://www.elastic.co/guide/en/elasticsearch/reference/5.6/query-dsl-minimum-should-match.html\r\n\r\nA script could be used to do something similar on the document side.\r\n\r\n> I think min_should_match as a percentage might bring some confusion as to whether the number that matters is the number of query terms of the number of terms in the document?\r\n\r\ntrue, although the standard min should match syntax already supports percentages, so it'd be weird to prevent that in this query.  Better to just document it I think.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/336465483","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-336465483","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":336465483,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNjQ2NTQ4Mw==","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2017-10-13T14:16:31Z","updated_at":"2017-10-13T14:18:25Z","author_association":"MEMBER","body":"Huge +1 to your initial suggested exposure @martijnvg \r\n\r\n```json\r\n{\r\n   \"covering\" : {\r\n     \"minimum_should_match_field\": \"my_field\",\r\n     \"queries\": [\r\n        {\r\n          # query1\r\n        },\r\n        {\r\n          # query2\r\n        },\r\n       # etc\r\n     ]\r\n   }\r\n}\r\n```\r\n\r\nAlso liking the `covering` addition to the `match` family.\r\n\r\nIt's super explicit and does not complicate `bool` further. \r\n\r\nCan the `terms_set` suggestion be in addition to the the `covering` query and maybe renamed to `covering_terms` to signal its relation e.g like the `match_*` family of queries? This way we don't assume usecases and keep our tradition of exposing lucene queries as they are. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/336470020","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-336470020","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":336470020,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNjQ3MDAyMA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-10-13T14:31:48Z","updated_at":"2017-10-13T14:57:54Z","author_association":"CONTRIBUTOR","body":"Discussed in FixitFriday: if we support the `minimum_should_match` option, then there would be two ways to do the same thing (with `bool` or this new query), plus there is potential confusion around what the percentage applies to, so we'll start by just supporting `minimum_should_match_field` and `minimum_should_match_script` and then adapt the API based on feedback from users.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/341709377","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-341709377","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":341709377,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTcwOTM3Nw==","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T13:54:09Z","updated_at":"2017-11-03T13:54:09Z","author_association":"MEMBER","body":"Are we going with terms_set or opening it up completely to a list of any query as the covering query?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/341709753","html_url":"https://github.com/elastic/elasticsearch/issues/26915#issuecomment-341709753","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26915","id":341709753,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTcwOTc1Mw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T13:55:34Z","updated_at":"2017-11-03T13:55:34Z","author_association":"CONTRIBUTOR","body":"When discussing it, we couldn't think of use-cases for any other queries than term queries. So we decided to go with term queries only for now, we can potentially change our minds depending on the feedback we'll get from users.","performed_via_github_app":null}]