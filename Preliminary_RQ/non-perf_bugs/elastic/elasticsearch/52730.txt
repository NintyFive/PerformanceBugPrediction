{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/52730","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52730/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52730/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/52730/events","html_url":"https://github.com/elastic/elasticsearch/issues/52730","id":570141773,"node_id":"MDU6SXNzdWU1NzAxNDE3NzM=","number":52730,"title":"API to list non-empty fields matched by a query DSL","user":{"login":"wylieconlon","id":666475,"node_id":"MDQ6VXNlcjY2NjQ3NQ==","avatar_url":"https://avatars2.githubusercontent.com/u/666475?v=4","gravatar_id":"","url":"https://api.github.com/users/wylieconlon","html_url":"https://github.com/wylieconlon","followers_url":"https://api.github.com/users/wylieconlon/followers","following_url":"https://api.github.com/users/wylieconlon/following{/other_user}","gists_url":"https://api.github.com/users/wylieconlon/gists{/gist_id}","starred_url":"https://api.github.com/users/wylieconlon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wylieconlon/subscriptions","organizations_url":"https://api.github.com/users/wylieconlon/orgs","repos_url":"https://api.github.com/users/wylieconlon/repos","events_url":"https://api.github.com/users/wylieconlon/events{/privacy}","received_events_url":"https://api.github.com/users/wylieconlon/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":1967498216,"node_id":"MDU6TGFiZWwxOTY3NDk4MjE2","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Search","name":"Team:Search","color":"fef2c0","default":false,"description":"Meta label for search team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-02-24T20:56:13Z","updated_at":"2020-06-03T17:45:11Z","closed_at":"2020-06-03T17:45:10Z","author_association":"MEMBER","active_lock_reason":null,"body":"**Problem statement**\r\n\r\nA common interface element in Kibana is a list of \"fields\". These are displayed using the dotted path notation, such as `browser.useragent` and `browser.useragent.keyword`. To help the user with their choices, we want to provide the most accurate list possible. This usually involves starting with the list of `field_caps` and then filtering based on whether we think the paths returned contain data. To list some specific examples:\r\n\r\n* KQL autocompletion across Kibana shows the full list https://github.com/elastic/kibana/issues/24709\r\n* Filter creation across Kibana shows the full list\r\n* Discover shows a list of fields that are present in a sample of 500 documents, and is unable to show multi-mapped fields such as text/keyword\r\n* Lens shows a list of fields. It also loads 500 documents, but shows multi-mapping correctly\r\n* The ML data visualizer starts with many `exists` aggregations for each field from `field_caps`\r\n* The Infra apps limit the list based on some custom logic https://github.com/elastic/kibana/pull/43322\r\n\r\nAs you can see, this is a common request that is handled inconsistently.\r\n\r\n**Requirements of a solution**\r\n\r\n* Takes a search query as input\r\n* For each potential path, calculate whether that field `exists` any docs in the search\r\n* Same response format as `field_caps`: list of fields as JSON, like `{ fieldName: { keyword: { aggregatable: true } } }`.\r\n\r\n**Proposed API**:\r\n\r\n```\r\nGET my_sample_data-*/_non_empty_fields\r\n{\r\n  query: {\r\n    term: { 'event.dataset': 'system' }\r\n  },\r\n  include_unmapped: false,\r\n  ignore_unavailable: false\r\n}\r\n```\r\n\r\nResponse:\r\n```\r\n{\r\n  \"indices\": [\"my_sample_data-1\"],\r\n  \"fields\": {\r\n    \"myField\": { \r\n      \"text\": {\r\n          \"searchable\": true,\r\n          \"aggregatable\": false\r\n      }\r\n    },\r\n    \"myField.keyword\": { \r\n      \"keyword\": {\r\n        \"searchable\": true,\r\n        \"aggregatable\": true\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n","closed_by":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"performed_via_github_app":null}