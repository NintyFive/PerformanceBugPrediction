{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/28541","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28541/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28541/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28541/events","html_url":"https://github.com/elastic/elasticsearch/issues/28541","id":294928652,"node_id":"MDU6SXNzdWUyOTQ5Mjg2NTI=","number":28541,"title":"Enhancement on the Update by Query API ","user":{"login":"georgezoto","id":16548373,"node_id":"MDQ6VXNlcjE2NTQ4Mzcz","avatar_url":"https://avatars0.githubusercontent.com/u/16548373?v=4","gravatar_id":"","url":"https://api.github.com/users/georgezoto","html_url":"https://github.com/georgezoto","followers_url":"https://api.github.com/users/georgezoto/followers","following_url":"https://api.github.com/users/georgezoto/following{/other_user}","gists_url":"https://api.github.com/users/georgezoto/gists{/gist_id}","starred_url":"https://api.github.com/users/georgezoto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/georgezoto/subscriptions","organizations_url":"https://api.github.com/users/georgezoto/orgs","repos_url":"https://api.github.com/users/georgezoto/repos","events_url":"https://api.github.com/users/georgezoto/events{/privacy}","received_events_url":"https://api.github.com/users/georgezoto/received_events","type":"User","site_admin":false},"labels":[{"id":145572580,"node_id":"MDU6TGFiZWwxNDU1NzI1ODA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/CRUD","name":":Distributed/CRUD","color":"0e8a16","default":false,"description":"A catch all label for issues around indexing, updating and getting a doc by id. Not search."},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-02-06T22:01:47Z","updated_at":"2018-04-27T19:58:49Z","closed_at":"2018-04-27T19:58:49Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\r\n\r\n** Please read the guidelines below. **\r\n\r\nIssues that do not follow these guidelines are likely to be closed.\r\n\r\n1.  GitHub is reserved for bug reports and feature requests. The best place to\r\n    ask a general question is at the Elastic [forums](https://discuss.elastic.co).\r\n    GitHub is not the place for general questions.\r\n\r\n2.  Is this bug report or feature request for a supported OS? If not, it\r\n    is likely to be closed.  See https://www.elastic.co/support/matrix#show_os\r\n\r\n3.  Please fill out EITHER the feature request block or the bug report block\r\n    below, and delete the other block.\r\n\r\n-->\r\n\r\n<!-- Feature request -->\r\n\r\nHello everyone,\r\n\r\nPlease bear with me, this is my first feature request for elastic.\r\nI have combed the web, GitHub issues and the discussion forums but I haven't seen something close to this. So I need some expert opinion on how challenging this feature would be. In terms of benefits, the list just keeps growing as I will explain in detail.\r\n\r\n**Challenge**: \r\nI have a dataset of several thousands records, related to 10 custom fields and zip code being one of them. Initially only these 10 fields are available for analysis. Later on I have 2 new fields in another dataset that I want to analyze my data over, County and City for example. Note that I can associate each zip code to a County and City, i.e. I can join the 2 datasets on the common field/key zip code.\r\n(Before you immediately think that Elastic does not handle join please read along...)\r\nCurrently my mappings look like:\r\n\r\n\t\"index-zipcode: {\r\n\t\t\"mappings\": {\r\n\t\t\t\"doc\": {\r\n\t\t\t\t\"properties\": {\r\n\r\n\t  \t\t\t\t\"Zip Code\": {\r\n            \t\t\t\t\t\"type\": \"text\",\r\n            \t\t\t\t\t\"fields\": {\r\n              \t\t\t\t\t\t\"keyword\": {\r\n                \t\t\t\t\t\t\"type\": \"keyword\",\r\n                \t\t\t\t\t\t\"ignore_above\": 256\r\n              \t\t\t\t\t\t}\r\n            \t\t\t\t\t}\r\n          \t\t\t\t},\r\n\t  ...\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n**Current Approach**:\r\nWrite a custom script to perform that contains the newly added information.\r\nUse this script and utilize Elasticsearch’s Update by Query API (https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html) to update any individual records that match a criteria. For example a trivial script in bash would be:\r\n\r\n\t#Zip Code,City,County\r\n\t#59003,Ashland,Rosebud\r\n\t#59648,Wolf Creek,Lewis And Clark\r\n\t#59410,Augusta,Lewis And Clark\r\n\r\n\t#!/bin/bash\r\n\r\n\tmyindex=“my-always-updating-index-2018.01.23\"\r\n\r\n\tIFS=$'\\n';\r\n\tfor item in `cat $1`; do\r\n\t\tmyzipcode=$(echo $item|cut -d, -f1);\r\n\t\tmycity=$(echo $item|cut -d, -f2);\r\n\t\tmycounty=$(echo $item|cut -d, -f3);\r\n\t\techo $myzipcode,$mycity,$mycounty;\r\n\r\n\t\techo \"{\r\n          \t\\\"script\\\": {\r\n            \t\\\"lang\\\": \\\"painless\\\",\r\n            \t\\\"source\\\": \\\"ctx._source.County = params.county; ctx._source.City = params.city;\\\",\r\n           \t \\\"params\\\": {\r\n               \t \\\"county\\\": \\\"$mycounty\\\",\r\n               \t \\\"city\\\": \\\"$mycity\\\"\r\n            \t }\r\n\t   \t},\r\n\r\n         \t \\\"query\\\" : {\r\n                \t\\\"constant_score\\\" : {\r\n                   \t\t \\\"filter\\\" : {\r\n                       \t \t\t\\\"terms\\\" : {\r\n                           \t\t \t\t\\\"Zip Code\\\": [\\\"$myzipcode\\\"]\r\n                        \t\t\t}\r\n                    \t}\r\n               \t }\r\n            }\r\n\r\n        \t}\" | curl -XPOST “mycluster:9200/$myindex/_update_by_query?pretty\" -H 'Content-Type: application/json' -d \"$(</dev/stdin)\"\r\n\tdone\r\n\r\n\tunset $IFS;\r\n\r\n**Recommended Approach**:\r\nEnhance the Update by Query API or create a new API to perform something like (warning, this code will not run, it is used for demonstration purposes only):\r\n\r\n\tPOST “mycluster:9200/index-zipcode/_update_by_query?pretty\" -H 'Content-Type: application/json' -d \"\r\n\t{\r\n  \t\"script\": {\r\n    \t\"lang\": \"painless\",\r\n    \t\"source\": \"ctx._source.County = params.county; ctx._source.City = params.city;\",\r\n    \t\"params\": {\r\n\r\n      \t\t\"query\" : {\r\n        \t\t\t\"index\": \"index-county-city-zipcode\",\r\n\t\t\t\t\"constant_score\" : {\r\n\t  \t\t\t\t\"filter\" : {\r\n\t    \t\t\t\t\t\"terms\" : {\r\n              \t\t\t\t\t\t\"Zip Code\"\r\n\t    \t\t\t\t\t}\r\n\t  \t\t\t\t}\r\n\t\t\t\t},\r\n        \t\t\"_source\" : [\"County\",\"City\",\"Zip Code\"],\r\n\t\t\t\"namespace\": \"inner-query\"\r\n      \t\t},\r\n\r\n\t\t\"county\": \"inner-query.County\",\r\n\t\t\"city\": \"inner-query.City\"\r\n     \t}\r\n   \t}\r\n\t}\r\n\r\nNote that the params section is enhanced to incorporate a query that would return the County and City for each zip code in a second index and update this information on the first index. In other words, we are enabling document updates with the update criteria being the result of query instead of the trivial constants or counter increments I have seen in the documentations and on the discussion forums.\r\n\r\n**Issue with Current Approach and Benefits or Recommended Approach**:\r\nThe current approach takes away one dataset from Elastic (in this case stores is as a csv) and performs the join/document updates outside of it. If you take a step back and think that both datasets are present in Elastic with a common field, it would be natural to think that Elastic itself would support this capability. This would eliminate any offloading of data outside of Elastic which keeps updating over time. For performance reasons, the inner query could be limited at a batch of documents at a time.\r\n\r\n**Summary**: In the ever changing world, new fields and datasets become available over time. An Elastic only solution to updating or enriching documents based on another field in another index would solve many data engineering challenges of offloading data out of Elastic, enriching them and finally updating them in Elastic.\r\n\r\nI apologize for the long post, I just feel that the Elastic team has done a tremendous job in terms of APIs but I feel that these are all pieces of a greater puzzle that together would solve a much larger problem.\r\n\r\nThank you,\r\nGeorge Zoto\r\n\r\n<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`):\r\nelastic-6.1.0\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (`java -version`):\r\nopenjdk version \"1.8.0_151\"\r\n\r\n**OS version** (`uname -a` if on a Unix-like system):\r\nUbuntu 16.04.3 LTS\r\n\r\n","closed_by":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"performed_via_github_app":null}