{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/2751","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2751/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2751/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2751/events","html_url":"https://github.com/elastic/elasticsearch/issues/2751","id":11833434,"node_id":"MDU6SXNzdWUxMTgzMzQzNA==","number":2751,"title":"How to optimize   data structure with nested type","user":{"login":"hguchen","id":3806926,"node_id":"MDQ6VXNlcjM4MDY5MjY=","avatar_url":"https://avatars1.githubusercontent.com/u/3806926?v=4","gravatar_id":"","url":"https://api.github.com/users/hguchen","html_url":"https://github.com/hguchen","followers_url":"https://api.github.com/users/hguchen/followers","following_url":"https://api.github.com/users/hguchen/following{/other_user}","gists_url":"https://api.github.com/users/hguchen/gists{/gist_id}","starred_url":"https://api.github.com/users/hguchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hguchen/subscriptions","organizations_url":"https://api.github.com/users/hguchen/orgs","repos_url":"https://api.github.com/users/hguchen/repos","events_url":"https://api.github.com/users/hguchen/events{/privacy}","received_events_url":"https://api.github.com/users/hguchen/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2013-03-09T02:32:37Z","updated_at":"2013-03-09T07:12:55Z","closed_at":"2013-03-09T07:12:55Z","author_association":"NONE","active_lock_reason":null,"body":"My ES index and type mapping is as follows:\n\ncurl -XPUT 'http://192.168.1.1:9200/linkdb/' -d '{\n    \"settings\" : {\n        \"number_of_shards\" :20,\n        \"number_of_replicas\":1,\n        \"index.translog.flush_threshold_ops\": \"100000\" \n     }\n}'\n\ncurl -XPUT http://192.168.1.1:9200/linkdb/FriendLink/_mapping  -d '{\n     \"FriendLink\": {\n         \"_source\" : { \"compress\": \"true\"},\n           \"_all\" : {\"enabled\" : \"false\"},\n         \"properties\": {\n  \"_id\" : {\"type\" : \"string\", \"store\" : \"no\"},\n   \"Tl\" : {\"index\" : \"no\",\"type\" : \"string\", \"store\" : \"no\"},\n   \"DM\" : {\"index\" : \"not_analyzed\",\"type\" : \"string\", \"store\" : \"no\"},\n   \"SF\" : {\"index\" : \"not_analyzed\",\"type\" : \"string\", \"store\" : \"no\"},\n  \"Num\" : {\"index\" : \"not_analyzed\",\"type\" : \"integer\", \"store\" : \"no\"},\n  \"RK\" : {\"index\" : \"not_analyzed\",\"type\" : \"integer\", \"store\" : \"no\"},\n              \"LK\" : {\n               \"type\" : \"nested\",\n               \"properties\" : {\n                  \"D\" : {\"index\" : \"not_analyzed\",\"type\" : \"string\", \"store\" : \"no\"},\n                  \"H\" : {  \"index\" : \"not_analyzed\",\"type\" : \"string\" , \"store\" : \"no\"},\n                  \"P\" : {  \"index\" : \"not_analyzed\",\"type\" : \"string\" , \"store\" : \"no\"},\n                  \"T\" : {\n                          \"type\" : \"multi_field\",\n          \"fields\" : {\n               \"T\":{\"type\" : \"string\",\"indexAnalyzer\": \"standard\", \"searchAnalyzer\": \"standard\", \"store\" : \"no\"},\n                         \"UT\":{\"index\" : \"not_analyzed\", \"type\" :  \"string\", \"store\" : \"no\"}\n                    }\n               },\n                  \"I\" : {    \"index\" : \"not_analyzed\", \"type\" : \"boolean\", \"store\" : \"no\" }\n               }\n            }\n    }\n}\n}'\n\nMy query is as follows:\n\ncurl -XGET 'http://192.168.1.1:9200/linkdb/FriendLink/_search?pretty=true'  -d '{\nfrom: 0, size: 10,\nfields:[\"_id\",\"Tl\",\"Num\",\"RK\",\"LK\"],\n\"sort\":[\n         { \"Num\" : {\"order\" : \"desc\"} }\n],\n\n```\n    \"filter\" : {\n        \"nested\" : {\n            \"path\" : \"LK\",\n            \"query\" : {\n                \"bool\" : {\n                    \"must\" : [\n                       { \"term\" : { \"LK.D\" : \"baidu.com\" } } , \n                       { \"prefix\" : {  \"LK.P\" : \"/news\" } },\n                       { \"text\" : { \"LK.T\" : \"百度\" }\n                    ]\n                }\n            },\n            \"_cache\" : true\n        }\n    }\n```\n\n}'\n\nI use nested object type. There are about fifty million documents now,each document an average of 30 nested objects.\n  It takes an average of a few hundred milliseconds to query once。\nWith the growth of the data, the query speed is getting slower and slower.\nIf the data is more than 100 million documents  , I worry about more than one second average query.\nFor this nested type  , I do not know how to optimize my data structure.\nCan you help me? Thanks very much.\n","closed_by":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"performed_via_github_app":null}