[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202711272","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202711272","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202711272,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjcxMTI3Mg==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T04:58:26Z","updated_at":"2016-03-29T04:58:26Z","author_association":"MEMBER","body":"Filter and queries have been merged in 2.0.\nLook at breaking changes for 2.0\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202726759","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202726759","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202726759,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjcyNjc1OQ==","user":{"login":"MadeInChina","id":1201118,"node_id":"MDQ6VXNlcjEyMDExMTg=","avatar_url":"https://avatars0.githubusercontent.com/u/1201118?v=4","gravatar_id":"","url":"https://api.github.com/users/MadeInChina","html_url":"https://github.com/MadeInChina","followers_url":"https://api.github.com/users/MadeInChina/followers","following_url":"https://api.github.com/users/MadeInChina/following{/other_user}","gists_url":"https://api.github.com/users/MadeInChina/gists{/gist_id}","starred_url":"https://api.github.com/users/MadeInChina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MadeInChina/subscriptions","organizations_url":"https://api.github.com/users/MadeInChina/orgs","repos_url":"https://api.github.com/users/MadeInChina/repos","events_url":"https://api.github.com/users/MadeInChina/events{/privacy}","received_events_url":"https://api.github.com/users/MadeInChina/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T06:03:41Z","updated_at":"2016-03-29T06:03:41Z","author_association":"NONE","body":"@dadoonet \nThanks for response.And i read the breaking changes for 2.0.\n\n> Queries and filters have been merged — all filter clauses are now query clauses. Instead, query clauses can now be used in query context or in filter context:\n> \n> Query context\n> A query used in query context will calculate relevance scores and will not be cacheable. Query context is used whenever filter context does not apply.\n> Filter context\n> A query used in filter context will not calculate relevance scores, and will be cacheable. Filter context is introduced by:\n> \n> the constant_score query\n> the must_not and (newly added) filter parameter in the bool query\n> the filter and filters parameters in the function_score query\n> any API called filter, such as the post_filter search parameter, or in aggregations or index aliases\n\nBut i'm doing the elastic optimization stuffs\nWhen run below code, average tooks 200~300 milliseconds\n\n```\n{\n  \"from\" : 0,\n  \"size\" : 10,\n  \"query\":\n{\n  \"function_score\" : {\n      \"query\" : {\n            \"bool\" : {\n              \"must\" : [ {\n                \"range\" : {\n                  \"timestamp\" : {\n                    \"from\" : \"1457403235000\",\n                    \"to\" : \"1458008035000\",\n                    \"include_lower\" : true,\n                    \"include_upper\" : true\n                  }\n                }\n              }, {\n                \"term\" : {\n                  \"type\" : \"image\"\n                }\n              }, {\n                \"geo_bbox\" : {\n                  \"geo\" : {\n                    \"top_left\" : [ -110.80651, 43.44131 ],\n                    \"bottom_right\" : [ -110.804, 43.4403 ]\n                  },\n                \"type\": \"indexed\"\n                }\n              } ]\n            }\n          },\n      \"functions\" : [ {\n        \"script_score\" : {\n          \"script\" : {\n            \"file\" : \"hot_score\",\n            \"params\" : {\n              \"nowTime\" : \"1458008709945\",\n              \"gravity\" : \"2.0\"\n            }\n          }\n        }\n      } ]\n    }\n  }     \n}\n```\n\nBUT ONCE change query to filter after function_score,it's only tooks 37~38 milliseconds\n\n```\n{\n  \"from\" : 0,\n  \"size\" : 10,\n  \"query\":\n{\n  \"function_score\" : {\n      \"query\" : {\n            \"bool\" : {\n              \"must\" : [ {\n                \"range\" : {\n                  \"timestamp\" : {\n                    \"from\" : \"1457403235000\",\n                    \"to\" : \"1458008035000\",\n                    \"include_lower\" : true,\n                    \"include_upper\" : true\n                  }\n                }\n              }, {\n                \"term\" : {\n                  \"type\" : \"image\"\n                }\n              }, {\n                \"geo_bbox\" : {\n                  \"geo\" : {\n                    \"top_left\" : [ -110.80651, 43.44131 ],\n                    \"bottom_right\" : [ -110.804, 43.4403 ]\n                  },\n                \"type\": \"indexed\"\n                }\n              } ]\n            }\n          },\n      \"functions\" : [ {\n        \"script_score\" : {\n          \"script\" : {\n            \"file\" : \"hot_score\",\n            \"params\" : {\n              \"nowTime\" : \"1458008709945\",\n              \"gravity\" : \"2.0\"\n            }\n          }\n        }\n      } ]\n    }\n  }     \n}\n```\n\nSo i think the filter is better than query.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202739457","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202739457","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202739457,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjczOTQ1Nw==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T06:33:27Z","updated_at":"2016-03-29T06:33:27Z","author_association":"MEMBER","body":"You'd better follow up this discussion on discuss.elastic.co.\n\nWhat does it give in elasticsearch 2.2 in term of response time? Did you try it?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202741264","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202741264","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202741264,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjc0MTI2NA==","user":{"login":"MadeInChina","id":1201118,"node_id":"MDQ6VXNlcjEyMDExMTg=","avatar_url":"https://avatars0.githubusercontent.com/u/1201118?v=4","gravatar_id":"","url":"https://api.github.com/users/MadeInChina","html_url":"https://github.com/MadeInChina","followers_url":"https://api.github.com/users/MadeInChina/followers","following_url":"https://api.github.com/users/MadeInChina/following{/other_user}","gists_url":"https://api.github.com/users/MadeInChina/gists{/gist_id}","starred_url":"https://api.github.com/users/MadeInChina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MadeInChina/subscriptions","organizations_url":"https://api.github.com/users/MadeInChina/orgs","repos_url":"https://api.github.com/users/MadeInChina/repos","events_url":"https://api.github.com/users/MadeInChina/events{/privacy}","received_events_url":"https://api.github.com/users/MadeInChina/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T06:38:53Z","updated_at":"2016-03-29T06:38:53Z","author_association":"NONE","body":"@dadoonet Ok, We are using  elasticsearch  2.1.0. so not try it on 2.2.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202742240","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202742240","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202742240,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjc0MjI0MA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T06:45:26Z","updated_at":"2016-03-29T06:45:26Z","author_association":"MEMBER","body":"Ok. May be @brwe can comment.\n\nBut did you run it multiple times? Is it faster after some runs?\nAsking that because of the way filter cache works.\n\nIf your timestamp range query moves on every call, that could be a potential cause may be?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202743145","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202743145","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202743145,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjc0MzE0NQ==","user":{"login":"MadeInChina","id":1201118,"node_id":"MDQ6VXNlcjEyMDExMTg=","avatar_url":"https://avatars0.githubusercontent.com/u/1201118?v=4","gravatar_id":"","url":"https://api.github.com/users/MadeInChina","html_url":"https://github.com/MadeInChina","followers_url":"https://api.github.com/users/MadeInChina/followers","following_url":"https://api.github.com/users/MadeInChina/following{/other_user}","gists_url":"https://api.github.com/users/MadeInChina/gists{/gist_id}","starred_url":"https://api.github.com/users/MadeInChina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MadeInChina/subscriptions","organizations_url":"https://api.github.com/users/MadeInChina/orgs","repos_url":"https://api.github.com/users/MadeInChina/repos","events_url":"https://api.github.com/users/MadeInChina/events{/privacy}","received_events_url":"https://api.github.com/users/MadeInChina/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T06:49:14Z","updated_at":"2016-03-29T06:49:14Z","author_association":"NONE","body":"@dadoonet  Yes, just run them both multiple times.but filter is faster than query\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/202749021","html_url":"https://github.com/elastic/elasticsearch/issues/17374#issuecomment-202749021","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/17374","id":202749021,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMjc0OTAyMQ==","user":{"login":"MadeInChina","id":1201118,"node_id":"MDQ6VXNlcjEyMDExMTg=","avatar_url":"https://avatars0.githubusercontent.com/u/1201118?v=4","gravatar_id":"","url":"https://api.github.com/users/MadeInChina","html_url":"https://github.com/MadeInChina","followers_url":"https://api.github.com/users/MadeInChina/followers","following_url":"https://api.github.com/users/MadeInChina/following{/other_user}","gists_url":"https://api.github.com/users/MadeInChina/gists{/gist_id}","starred_url":"https://api.github.com/users/MadeInChina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MadeInChina/subscriptions","organizations_url":"https://api.github.com/users/MadeInChina/orgs","repos_url":"https://api.github.com/users/MadeInChina/repos","events_url":"https://api.github.com/users/MadeInChina/events{/privacy}","received_events_url":"https://api.github.com/users/MadeInChina/received_events","type":"User","site_admin":false},"created_at":"2016-03-29T07:09:05Z","updated_at":"2016-03-29T07:09:05Z","author_association":"NONE","body":"Fixed with\n\n```\npublic class FunctionScoreQueryBuilder extends QueryBuilder implements BoostableQueryBuilder<FunctionScoreQueryBuilder> {\n\n    private final QueryBuilder queryBuilder;\n\n    private Boolean isFilterMode = false;\n\n    private Float boost;\n\n    private Float maxBoost;\n\n    private String scoreMode;\n\n    private String boostMode;\n\n    private ArrayList<QueryBuilder> filters = new ArrayList<>();\n    private ArrayList<ScoreFunctionBuilder> scoreFunctions = new ArrayList<>();\n    private Float minScore = null;\n\n    /**\n     * Creates a function_score query that executes on documents that match query a query.\n     * Query and filter will be wrapped into a filtered_query.\n     *\n     * @param queryBuilder the query that defines which documents the function_score query will be executed on.\n     */\n    public FunctionScoreQueryBuilder(QueryBuilder queryBuilder) {\n        this.queryBuilder = queryBuilder;\n    }\n\n\n    /**\n     * Creates a function_score query that executes on documents that match query a query.\n     * Query and filter will be wrapped into a filtered_query.\n     *\n     * @param queryBuilder\n     * @param isFilterMode\n     */\n    public FunctionScoreQueryBuilder(QueryBuilder queryBuilder, Boolean isFilterMode) {\n        this.queryBuilder = queryBuilder;\n        this.isFilterMode = isFilterMode;\n    }\n\n    public FunctionScoreQueryBuilder() {\n        this.queryBuilder = null;\n    }\n\n    /**\n     * Creates a function_score query that will execute the function scoreFunctionBuilder on all documents.\n     *\n     * @param scoreFunctionBuilder score function that is executed\n     */\n    public FunctionScoreQueryBuilder(ScoreFunctionBuilder scoreFunctionBuilder) {\n        if (scoreFunctionBuilder == null) {\n            throw new IllegalArgumentException(\"function_score: function must not be null\");\n        }\n        queryBuilder = null;\n        this.filters.add(null);\n        this.scoreFunctions.add(scoreFunctionBuilder);\n    }\n\n\n    /**\n     * Adds a score function that will will execute the function scoreFunctionBuilder on all documents matching the filter.\n     *\n     * @param filter               the filter that defines which documents the function_score query will be executed on.\n     * @param scoreFunctionBuilder score function that is executed\n     */\n    public FunctionScoreQueryBuilder add(QueryBuilder filter, ScoreFunctionBuilder scoreFunctionBuilder) {\n        if (scoreFunctionBuilder == null) {\n            throw new IllegalArgumentException(\"function_score: function must not be null\");\n        }\n        this.filters.add(filter);\n        this.scoreFunctions.add(scoreFunctionBuilder);\n        return this;\n    }\n\n    /**\n     * Adds a score function that will will execute the function scoreFunctionBuilder on all documents.\n     *\n     * @param scoreFunctionBuilder score function that is executed\n     */\n    public FunctionScoreQueryBuilder add(ScoreFunctionBuilder scoreFunctionBuilder) {\n        if (scoreFunctionBuilder == null) {\n            throw new IllegalArgumentException(\"function_score: function must not be null\");\n        }\n        this.filters.add(null);\n        this.scoreFunctions.add(scoreFunctionBuilder);\n        return this;\n    }\n\n    /**\n     * Score mode defines how results of individual score functions will be aggregated.\n     * Can be first, avg, max, sum, min, multiply\n     */\n    public FunctionScoreQueryBuilder scoreMode(String scoreMode) {\n        this.scoreMode = scoreMode;\n        return this;\n    }\n\n    /**\n     * Score mode defines how the combined result of score functions will influence the final score together with the sub query score.\n     * Can be replace, avg, max, sum, min, multiply\n     */\n    public FunctionScoreQueryBuilder boostMode(String boostMode) {\n        this.boostMode = boostMode;\n        return this;\n    }\n\n    /**\n     * Score mode defines how the combined result of score functions will influence the final score together with the sub query score.\n     */\n    public FunctionScoreQueryBuilder boostMode(CombineFunction combineFunction) {\n        this.boostMode = combineFunction.getName();\n        return this;\n    }\n\n    /**\n     * Tha maximum boost that will be applied by function score.\n     */\n    public FunctionScoreQueryBuilder maxBoost(float maxBoost) {\n        this.maxBoost = maxBoost;\n        return this;\n    }\n\n    /**\n     * Sets the boost for this query. Documents matching this query will (in\n     * addition to the normal weightings) have their score multiplied by the\n     * boost provided.\n     */\n    @Override\n    public FunctionScoreQueryBuilder boost(float boost) {\n        this.boost = boost;\n        return this;\n    }\n\n    @Override\n    protected void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(FunctionScoreQueryParser.NAME);\n        if (queryBuilder != null) {\n            if (isFilterMode) {\n                builder.field(\"filter\");\n            } else {\n                builder.field(\"query\");\n            }\n            queryBuilder.toXContent(builder, params);\n        }\n        builder.startArray(\"functions\");\n        for (int i = 0; i < filters.size(); i++) {\n            builder.startObject();\n            if (filters.get(i) != null) {\n                builder.field(\"filter\");\n                filters.get(i).toXContent(builder, params);\n            }\n            scoreFunctions.get(i).toXContent(builder, params);\n            builder.endObject();\n        }\n        builder.endArray();\n\n        if (scoreMode != null) {\n            builder.field(\"score_mode\", scoreMode);\n        }\n        if (boostMode != null) {\n            builder.field(\"boost_mode\", boostMode);\n        }\n        if (maxBoost != null) {\n            builder.field(\"max_boost\", maxBoost);\n        }\n        if (boost != null) {\n            builder.field(\"boost\", boost);\n        }\n        if (minScore != null) {\n            builder.field(\"min_score\", minScore);\n        }\n\n        builder.endObject();\n    }\n\n    public FunctionScoreQueryBuilder setMinScore(float minScore) {\n        this.minScore = minScore;\n        return this;\n    }\n}\n```\n","performed_via_github_app":null}]