[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/394374590","html_url":"https://github.com/elastic/elasticsearch/issues/31065#issuecomment-394374590","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31065","id":394374590,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NDM3NDU5MA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-06-04T14:28:29Z","updated_at":"2018-06-04T14:28:29Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396134691","html_url":"https://github.com/elastic/elasticsearch/issues/31065#issuecomment-396134691","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31065","id":396134691,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjEzNDY5MQ==","user":{"login":"Edvinas01","id":8227320,"node_id":"MDQ6VXNlcjgyMjczMjA=","avatar_url":"https://avatars2.githubusercontent.com/u/8227320?v=4","gravatar_id":"","url":"https://api.github.com/users/Edvinas01","html_url":"https://github.com/Edvinas01","followers_url":"https://api.github.com/users/Edvinas01/followers","following_url":"https://api.github.com/users/Edvinas01/following{/other_user}","gists_url":"https://api.github.com/users/Edvinas01/gists{/gist_id}","starred_url":"https://api.github.com/users/Edvinas01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Edvinas01/subscriptions","organizations_url":"https://api.github.com/users/Edvinas01/orgs","repos_url":"https://api.github.com/users/Edvinas01/repos","events_url":"https://api.github.com/users/Edvinas01/events{/privacy}","received_events_url":"https://api.github.com/users/Edvinas01/received_events","type":"User","site_admin":false},"created_at":"2018-06-11T06:23:19Z","updated_at":"2018-06-11T06:23:19Z","author_association":"NONE","body":"This would also be very useful when creating mocks / writing tests. As now in order to validate `RestHighLevelClient` calls, I have to write my own non-final wrapper which could be substituted and validated against in tests.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396360557","html_url":"https://github.com/elastic/elasticsearch/issues/31065#issuecomment-396360557","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31065","id":396360557,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjM2MDU1Nw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2018-06-11T19:35:31Z","updated_at":"2018-06-11T19:35:31Z","author_association":"CONTRIBUTOR","body":"About a dozen contributors got together to talk about open issues and this came up. We decided against making this change. Here goes our reasoning:\r\n* These methods really weren't designed to be extension points and we feel like folks `@Override`ing them would be super confusing. `final` feels like the right choice for them.\r\n* But folks mocking them is totally reasonable! We could make an interface and folks could code to that and mock that.\r\n* But then we're not really sure which methods we should put in the interface. What about `getLowLevelClient`, `close`, `indices`?\r\n\r\nSo we came to conclusion that folks should make their own delegates and mock them if they need mocking, that way folks don't have a huge interface with weird stuff on it that they never use floating around.\r\n\r\nI admit a good deal of personal bias here: I've never liked mocking storage systems in tests. The tests just end up as brittle rituals that don't actually prove anything. But I've found mocking a reasonably high level construct around the storage system to be quite useful in testing the rest of my application. My experience with this kind of thing is fairly out of date but the other Elasticsearch contributors agreed so I have that going for me.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458086423","html_url":"https://github.com/elastic/elasticsearch/issues/31065#issuecomment-458086423","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31065","id":458086423,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODA4NjQyMw==","user":{"login":"purple52","id":1073363,"node_id":"MDQ6VXNlcjEwNzMzNjM=","avatar_url":"https://avatars1.githubusercontent.com/u/1073363?v=4","gravatar_id":"","url":"https://api.github.com/users/purple52","html_url":"https://github.com/purple52","followers_url":"https://api.github.com/users/purple52/followers","following_url":"https://api.github.com/users/purple52/following{/other_user}","gists_url":"https://api.github.com/users/purple52/gists{/gist_id}","starred_url":"https://api.github.com/users/purple52/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/purple52/subscriptions","organizations_url":"https://api.github.com/users/purple52/orgs","repos_url":"https://api.github.com/users/purple52/repos","events_url":"https://api.github.com/users/purple52/events{/privacy}","received_events_url":"https://api.github.com/users/purple52/received_events","type":"User","site_admin":false},"created_at":"2019-01-28T11:02:19Z","updated_at":"2019-01-28T11:02:19Z","author_association":"NONE","body":"The original reporter of this issue essentially needs to be able to proxy `RestHighLevelClient` for gathering metrics. This is the same need that brought me here. The discussion referred to above seems to completely miss the point, focusing on mocking. If it's so difficult to decide what should go in an interface, then maybe the purpose of the class needs a bit of a rethink? Having to write a delegate class yourself makes using the client in reusable way in library or framework code impossible.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458707493","html_url":"https://github.com/elastic/elasticsearch/issues/31065#issuecomment-458707493","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31065","id":458707493,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODcwNzQ5Mw==","user":{"login":"Edvinas01","id":8227320,"node_id":"MDQ6VXNlcjgyMjczMjA=","avatar_url":"https://avatars2.githubusercontent.com/u/8227320?v=4","gravatar_id":"","url":"https://api.github.com/users/Edvinas01","html_url":"https://github.com/Edvinas01","followers_url":"https://api.github.com/users/Edvinas01/followers","following_url":"https://api.github.com/users/Edvinas01/following{/other_user}","gists_url":"https://api.github.com/users/Edvinas01/gists{/gist_id}","starred_url":"https://api.github.com/users/Edvinas01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Edvinas01/subscriptions","organizations_url":"https://api.github.com/users/Edvinas01/orgs","repos_url":"https://api.github.com/users/Edvinas01/repos","events_url":"https://api.github.com/users/Edvinas01/events{/privacy}","received_events_url":"https://api.github.com/users/Edvinas01/received_events","type":"User","site_admin":false},"created_at":"2019-01-29T21:08:39Z","updated_at":"2019-01-29T21:08:39Z","author_association":"NONE","body":"@purple52 indeed mocking is only a tiny portion of what an interface would offer to its users and maintainers of this utility.\r\n\r\nFor example, if an interface were used and some factory or builder which would return instance of this interface, the maintainers would have the freedom to do what ever they want with `RestHighLevelClient` class (change its naming, constructor signature, return types - assuming that they would be interfaces as well). Now if you try to do any of those, quite a few people will be quite unhappy when upgrading.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/578089391","html_url":"https://github.com/elastic/elasticsearch/issues/31065#issuecomment-578089391","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31065","id":578089391,"node_id":"MDEyOklzc3VlQ29tbWVudDU3ODA4OTM5MQ==","user":{"login":"clakech","id":1169286,"node_id":"MDQ6VXNlcjExNjkyODY=","avatar_url":"https://avatars0.githubusercontent.com/u/1169286?v=4","gravatar_id":"","url":"https://api.github.com/users/clakech","html_url":"https://github.com/clakech","followers_url":"https://api.github.com/users/clakech/followers","following_url":"https://api.github.com/users/clakech/following{/other_user}","gists_url":"https://api.github.com/users/clakech/gists{/gist_id}","starred_url":"https://api.github.com/users/clakech/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clakech/subscriptions","organizations_url":"https://api.github.com/users/clakech/orgs","repos_url":"https://api.github.com/users/clakech/repos","events_url":"https://api.github.com/users/clakech/events{/privacy}","received_events_url":"https://api.github.com/users/clakech/received_events","type":"User","site_admin":false},"created_at":"2020-01-24T11:15:48Z","updated_at":"2020-01-24T11:15:48Z","author_association":"NONE","body":">     * These methods really weren't designed to be extension points and we feel like folks `@Override`ing them would be super confusing.\r\n\r\nHi, here are my 2 cents after a discussion on twitter https://twitter.com/cyril_lakech/status/1219356360766316545\r\n\r\nYou should not try to avoid confusion for your users by blocking them. Document your recommandations/warnings and if users want to extend the client, it is their problems, not yours.\r\n\r\nUnit tests are not Integration tests. Unit tests provide quick feedbacks, integration tests are slower.\r\n\r\nThis is not easy to mock final in Java (performance are so bad on mockito on this). Yes this is a Java problem. Still you provide a Java driver and should take care of ecosystem capabilities from the trenches and not only take care of the \"good\" design. A perfect design is not the good one here.\r\n\r\nI am ok to create a delegate for the client, but how to be able to use final SearchHit in unit tests ? I can't.","performed_via_github_app":null}]