{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/32534","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32534/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32534/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32534/events","html_url":"https://github.com/elastic/elasticsearch/issues/32534","id":346520450,"node_id":"MDU6SXNzdWUzNDY1MjA0NTA=","number":32534,"title":"[CI] WildflyIT is failing on FIPS-enabled JVMs","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"labels":[{"id":912838879,"node_id":"MDU6TGFiZWw5MTI4Mzg4Nzk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Security/Security","name":":Security/Security","color":"0e8a16","default":false,"description":"Security issues without another label"},{"id":148612629,"node_id":"MDU6TGFiZWwxNDg2MTI2Mjk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Etest-failure","name":">test-failure","color":"207de5","default":false,"description":"Triaged test failures from CI"},{"id":1009148120,"node_id":"MDU6TGFiZWwxMDA5MTQ4MTIw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v6.4.1","name":"v6.4.1","color":"DDDDDD","default":false,"description":""},{"id":1223177445,"node_id":"MDU6TGFiZWwxMjIzMTc3NDQ1","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v7.0.0-beta1","name":"v7.0.0-beta1","color":"dddddd","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"assignees":[{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false}],"milestone":null,"comments":8,"created_at":"2018-08-01T09:29:53Z","updated_at":"2019-02-07T08:24:45Z","closed_at":"2018-08-13T18:46:50Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"See for instance https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+matrix-java-periodic/ES_BUILD_JAVA=java11,ES_RUNTIME_JAVA=java8fips,nodes=virtual&&linux/210/consoleText\r\n\r\nNB `ES_RUNTIME_JAVA=java8fips` - it seems to be passing fine on other JVMs.\r\n\r\nThe exception from the log looks as follows:\r\n\r\n```\r\n  2> java.io.IOException: Invalid keystore format\r\n  2> \tat sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:658)\r\n  2> \tat sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:56)\r\n  2> \tat sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224)\r\n  2> \tat sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:70)\r\n  2> \tat java.security.KeyStore.load(KeyStore.java:1445)\r\n  2> \tat sun.security.util.AnchorCertificates$1.run(AnchorCertificates.java:61)\r\n  2> \tat sun.security.util.AnchorCertificates$1.run(AnchorCertificates.java:52)\r\n  2> \tat java.security.AccessController.doPrivileged(Native Method)\r\nSuite: org.elasticsearch.wildfly.WildflyIT\r\n  2> \tat sun.security.util.AnchorCertificates.<clinit>(AnchorCertificates.java:52)\r\n  2> \tat sun.security.provider.certpath.AlgorithmChecker.checkFingerprint(AlgorithmChecker.java:214)\r\n  2> \tat sun.security.provider.certpath.AlgorithmChecker.<init>(AlgorithmChecker.java:164)\r\nERROR   0.00s | WildflyIT (suite) <<< FAILURES!\r\n   > Throwable #1: java.lang.AssertionError: The test or suite printed 12890 bytes to stdout and stderr, even though the limit was set to 8192 bytes. Increase the limit with @Limit, ignore it completely with @SuppressSysoutChecks or run with -Dtests.verbose=true\r\n  2> \tat sun.security.provider.certpath.AlgorithmChecker.<init>(AlgorithmChecker.java:118)\r\n   > \tat __randomizedtesting.SeedInfo.seed([E6F2F43820D93CA5]:0)\r\n   > \tat java.lang.Thread.run(Thread.java:748)\r\nCompleted [1/1] in 4.07s, 1 test, 1 failure <<< FAILURES!\r\n\r\n  2> \tat sun.security.validator.SimpleValidator.engineValidate(SimpleValidator.java:157)\r\n  2> \tat sun.security.validator.Validator.validate(Validator.java:260)\r\n  2> \tat sun.security.validator.Validator.validate(Validator.java:236)\r\n  2> \tat sun.security.validator.Validator.validate(Validator.java:205)\r\n  2> \tat javax.crypto.JarVerifier.isTrusted(JarVerifier.java:610)\r\n  2> \tat javax.crypto.JarVerifier.verifySingleJar(JarVerifier.java:530)\r\n  2> \tat javax.crypto.JarVerifier.verifyJars(JarVerifier.java:363)\r\n  2> \tat javax.crypto.JarVerifier.verify(JarVerifier.java:289)\r\n  2> \tat javax.crypto.JceSecurity.verifyProviderJar(JceSecurity.java:164)\r\n  2> \tat javax.crypto.JceSecurity.getVerificationResult(JceSecurity.java:190)\r\n  2> \tat javax.crypto.JceSecurity.getInstance(JceSecurity.java:114)\r\n  2> \tat javax.crypto.KeyAgreement.getInstance(KeyAgreement.java:270)\r\n  2> \tat sun.security.ssl.JsseJce.getKeyAgreement(JsseJce.java:271)\r\n  2> \tat sun.security.ssl.JsseJce$EcAvailability.<clinit>(JsseJce.java:418)\r\n  2> \tat sun.security.ssl.JsseJce.isEcAvailable(JsseJce.java:194)\r\n  2> \tat sun.security.ssl.CipherSuite$KeyExchange.isAvailable(CipherSuite.java:371)\r\n  2> \tat sun.security.ssl.CipherSuite.isAvailable(CipherSuite.java:185)\r\n  2> \tat sun.security.ssl.SSLContextImpl.getApplicableCipherSuiteList(SSLContextImpl.java:304)\r\n  2> \tat sun.security.ssl.SSLContextImpl.access$100(SSLContextImpl.java:42)\r\n  2> \tat sun.security.ssl.SSLContextImpl$AbstractTLSContext.<clinit>(SSLContextImpl.java:425)\r\n  2> \tat java.lang.Class.forName0(Native Method)\r\n  2> \tat java.lang.Class.forName(Class.java:264)\r\n  2> \tat java.security.Provider$Service.getImplClass(Provider.java:1634)\r\n  2> \tat java.security.Provider$Service.newInstance(Provider.java:1592)\r\n  2> \tat sun.security.jca.GetInstance.getInstance(GetInstance.java:236)\r\n  2> \tat sun.security.jca.GetInstance.getInstance(GetInstance.java:164)\r\n  2> \tat javax.net.ssl.SSLContext.getInstance(SSLContext.java:156)\r\n  2> \tat org.apache.http.ssl.SSLContexts.createDefault(SSLContexts.java:51)\r\n  2> \tat org.apache.http.impl.client.HttpClientBuilder.build(HttpClientBuilder.java:966)\r\n  2> \tat org.elasticsearch.wildfly.WildflyIT.testTransportClient(WildflyIT.java:56)\r\n  2> \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n  2> \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n  2> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n  2> \tat java.lang.reflect.Method.invoke(Method.java:498)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1713)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:907)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:943)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:957)\r\n  2> \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n  2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n  2> \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n  2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n  2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n  2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\r\n  2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:817)\r\n  2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:468)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:916)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:802)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:852)\r\n  2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:863)\r\n  2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n  2> \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n  2> \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n  2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n  2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n  2> \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n  2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n  2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\r\n  2> \tat java.lang.Thread.run(Thread.java:748)\r\n\r\n```\r\n\r\nI guess that the `java.lang.AssertionError` seems to be because there's that stack trace, and isn't the root cause?\r\n\r\n```\r\n  > Throwable #1: java.lang.AssertionError: The test or suite printed 12890 bytes to stdout and stderr, even though the limit was set to 8192 bytes. Increase the limit with @Limit, ignore it completely with @SuppressSysoutChecks or run with -Dtests.verbose=true\r\n```","closed_by":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"performed_via_github_app":null}