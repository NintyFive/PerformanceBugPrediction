{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26034/events","html_url":"https://github.com/elastic/elasticsearch/issues/26034","id":247556694,"node_id":"MDU6SXNzdWUyNDc1NTY2OTQ=","number":26034,"title":"Either Painless documentation is misleading, or support for java 8 time is broke","user":{"login":"StuAtGit","id":9757762,"node_id":"MDQ6VXNlcjk3NTc3NjI=","avatar_url":"https://avatars2.githubusercontent.com/u/9757762?v=4","gravatar_id":"","url":"https://api.github.com/users/StuAtGit","html_url":"https://github.com/StuAtGit","followers_url":"https://api.github.com/users/StuAtGit/followers","following_url":"https://api.github.com/users/StuAtGit/following{/other_user}","gists_url":"https://api.github.com/users/StuAtGit/gists{/gist_id}","starred_url":"https://api.github.com/users/StuAtGit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StuAtGit/subscriptions","organizations_url":"https://api.github.com/users/StuAtGit/orgs","repos_url":"https://api.github.com/users/StuAtGit/repos","events_url":"https://api.github.com/users/StuAtGit/events{/privacy}","received_events_url":"https://api.github.com/users/StuAtGit/received_events","type":"User","site_admin":false},"labels":[{"id":146834791,"node_id":"MDU6TGFiZWwxNDY4MzQ3OTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Scripting","name":":Core/Infra/Scripting","color":"0e8a16","default":false,"description":"Scripting abstractions, Painless, and Mustache"},{"id":23715,"node_id":"MDU6TGFiZWwyMzcxNQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Edocs","name":">docs","color":"db755e","default":false,"description":"General docs changes"},{"id":1009148120,"node_id":"MDU6TGFiZWwxMDA5MTQ4MTIw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v6.4.1","name":"v6.4.1","color":"DDDDDD","default":false,"description":""},{"id":1222918656,"node_id":"MDU6TGFiZWwxMjIyOTE4NjU2","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v7.2.0","name":"v7.2.0","color":"DDDDDD","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"assignees":[{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2017-08-03T00:04:00Z","updated_at":"2019-04-26T23:26:31Z","closed_at":"2019-04-26T23:26:31Z","author_association":"NONE","active_lock_reason":null,"body":"\r\n<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`):\r\n /usr/share/elasticsearch/bin/elasticsearch --version\r\nVersion: 5.0.1, Build: 080bb47/2016-11-11T22:08:49.812Z, JVM: 1.8.0_45\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (`java -version`):\r\n java -version\r\nopenjdk version \"1.8.0_131\"\r\nOpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-2ubuntu1.16.04.3-b11)\r\nOpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\n**OS version** (`uname -a` if on a Unix-like system):\r\n2.6.32-431.el6.centos.plus.x86_64 #1 SMP Fri Nov 29 23:11:12 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nExpected Behavior:\r\nIf the documentation states all Java types are supported in Painless, I would expect to be able to assign a field of type OffsetDateTime to another field of type OffsetDateTime.\r\n\r\nAction Behavior:\r\nIt throws an exception.\r\n\r\nThe Painless documentation states that all Java types are supported:\r\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.0/modules-scripting-painless-syntax.html\r\nIt links to Oracles documentation on variables as an explanation:\r\nhttps://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html\r\nI don't understand what variables have to do with types in this context, though.\r\n\r\nJava 8 now comes with OffsetDateTime:\r\nhttps://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html\r\n\r\nHowever, when I try to update a field that is of type OffsetDateTime:\r\n```\r\nctx._source.messageDatetime = params.messageDatetime;\r\n```\r\n(note, I have a script, and it's along sequence of assignments, but with the above line it breaks, without it, it works fine).\r\n\r\nI get an error, with the apparent root cause being:\r\nCaused by: java.io.IOException: can not write type [class java.time.OffsetDateTime]\r\n\tat org.elasticsearch.common.io.stream.StreamOutput.writeGenericValue(StreamOutput.java:639)\r\n\tat org.elasticsearch.common.io.stream.StreamOutput.lambda$static$10(StreamOutput.java:554)\r\n\r\nLooking at the code, it looks like either the docs are wrong or I'm misunderstanding the code, because it looks like only *primitive* types, and a hodgepodge of other types are supported:\r\n\r\nIn writeGenericValue:\r\n```\r\n        final Writer writer = WRITERS.get(type);\r\n        if (writer != null) {\r\n            writer.write(this, value);\r\n        } else {\r\n            throw new IOException(\"can not write type [\" + type + \"]\");\r\n        }\r\n```\r\n\r\nIn StreamOutput:\r\n```\r\n    static {\r\n        Map<Class<?>, Writer> writers = new HashMap<>();\r\n        writers.put(String.class, (o, v) -> {\r\n            o.writeByte((byte) 0);\r\n            o.writeString((String) v);\r\n        });\r\n        writers.put(Integer.class, (o, v) -> {\r\n            o.writeByte((byte) 1);\r\n            o.writeInt((Integer) v);\r\n        });\r\n        writers.put(Long.class, (o, v) -> {\r\n            o.writeByte((byte) 2);\r\n            o.writeLong((Long) v);\r\n        });\r\n        writers.put(Float.class, (o, v) -> {\r\n            o.writeByte((byte) 3);\r\n            o.writeFloat((float) v);\r\n        });\r\n        writers.put(Double.class, (o, v) -> {\r\n            o.writeByte((byte) 4);\r\n            o.writeDouble((double) v);\r\n        });\r\n        writers.put(Boolean.class, (o, v) -> {\r\n            o.writeByte((byte) 5);\r\n            o.writeBoolean((boolean) v);\r\n        });\r\n        writers.put(byte[].class, (o, v) -> {\r\n            o.writeByte((byte) 6);\r\n            final byte[] bytes = (byte[]) v;\r\n            o.writeVInt(bytes.length);\r\n            o.writeBytes(bytes);\r\n        });\r\n        writers.put(List.class, (o, v) -> {\r\n            o.writeByte((byte) 7);\r\n            final List list = (List) v;\r\n            o.writeVInt(list.size());\r\n            for (Object item : list) {\r\n                o.writeGenericValue(item);\r\n            }\r\n        });\r\n        writers.put(Object[].class, (o, v) -> {\r\n            o.writeByte((byte) 8);\r\n            final Object[] list = (Object[]) v;\r\n            o.writeVInt(list.length);\r\n            for (Object item : list) {\r\n                o.writeGenericValue(item);\r\n            }\r\n        });\r\n        writers.put(Map.class, (o, v) -> {\r\n            if (v instanceof LinkedHashMap) {\r\n                o.writeByte((byte) 9);\r\n            } else {\r\n                o.writeByte((byte) 10);\r\n            }\r\n            @SuppressWarnings(\"unchecked\")\r\n            final Map<String, Object> map = (Map<String, Object>) v;\r\n            o.writeVInt(map.size());\r\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\r\n                o.writeString(entry.getKey());\r\n                o.writeGenericValue(entry.getValue());\r\n            }\r\n        });\r\n        writers.put(Byte.class, (o, v) -> {\r\n            o.writeByte((byte) 11);\r\n            o.writeByte((Byte) v);\r\n        });\r\n        writers.put(Date.class, (o, v) -> {\r\n            o.writeByte((byte) 12);\r\n            o.writeLong(((Date) v).getTime());\r\n        });\r\n        writers.put(ReadableInstant.class, (o, v) -> {\r\n            o.writeByte((byte) 13);\r\n            final ReadableInstant instant = (ReadableInstant) v;\r\n            o.writeString(instant.getZone().getID());\r\n            o.writeLong(instant.getMillis());\r\n        });\r\n        writers.put(BytesReference.class, (o, v) -> {\r\n            o.writeByte((byte) 14);\r\n            o.writeBytesReference((BytesReference) v);\r\n        });\r\n        writers.put(Text.class, (o, v) -> {\r\n            o.writeByte((byte) 15);\r\n            o.writeText((Text) v);\r\n        });\r\n        writers.put(Short.class, (o, v) -> {\r\n            o.writeByte((byte) 16);\r\n            o.writeShort((Short) v);\r\n        });\r\n        writers.put(int[].class, (o, v) -> {\r\n            o.writeByte((byte) 17);\r\n            o.writeIntArray((int[]) v);\r\n        });\r\n        writers.put(long[].class, (o, v) -> {\r\n            o.writeByte((byte) 18);\r\n            o.writeLongArray((long[]) v);\r\n        });\r\n        writers.put(float[].class, (o, v) -> {\r\n            o.writeByte((byte) 19);\r\n            o.writeFloatArray((float[]) v);\r\n        });\r\n        writers.put(double[].class, (o, v) -> {\r\n            o.writeByte((byte) 20);\r\n            o.writeDoubleArray((double[]) v);\r\n        });\r\n        writers.put(BytesRef.class, (o, v) -> {\r\n            o.writeByte((byte) 21);\r\n            o.writeBytesRef((BytesRef) v);\r\n        });\r\n        writers.put(GeoPoint.class, (o, v) -> {\r\n            o.writeByte((byte) 22);\r\n            o.writeGeoPoint((GeoPoint) v);\r\n        });\r\n        WRITERS = Collections.unmodifiableMap(writers);\r\n    }\r\n```\r\n\r\nSo either the documentation is wrong, or elasticsearch has a bug.\r\n\r\n**Steps to reproduce**:\r\n\r\nPlease include a *minimal* but *complete* recreation of the problem, including\r\n(e.g.) index creation, mappings, settings, query etc.  The easier you make for\r\nus to reproduce it, the more likely that somebody will take the time to look at it.\r\n\r\n 1.\r\n 2.\r\n 3.\r\n\r\n**Provide logs (if relevant)**:\r\n\r\n","closed_by":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"performed_via_github_app":null}