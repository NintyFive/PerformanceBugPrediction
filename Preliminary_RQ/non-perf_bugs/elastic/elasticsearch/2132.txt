{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/2132","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2132/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2132/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2132/events","html_url":"https://github.com/elastic/elasticsearch/issues/2132","id":5982687,"node_id":"MDU6SXNzdWU1OTgyNjg3","number":2132,"title":"Can't define multiple predefined date formats using `||`","user":{"login":"thomasst","id":68381,"node_id":"MDQ6VXNlcjY4Mzgx","avatar_url":"https://avatars1.githubusercontent.com/u/68381?v=4","gravatar_id":"","url":"https://api.github.com/users/thomasst","html_url":"https://github.com/thomasst","followers_url":"https://api.github.com/users/thomasst/followers","following_url":"https://api.github.com/users/thomasst/following{/other_user}","gists_url":"https://api.github.com/users/thomasst/gists{/gist_id}","starred_url":"https://api.github.com/users/thomasst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomasst/subscriptions","organizations_url":"https://api.github.com/users/thomasst/orgs","repos_url":"https://api.github.com/users/thomasst/repos","events_url":"https://api.github.com/users/thomasst/events{/privacy}","received_events_url":"https://api.github.com/users/thomasst/received_events","type":"User","site_admin":false},"labels":[{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":41588718,"node_id":"MDU6TGFiZWw0MTU4ODcxOA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.90.2","name":"v0.90.2","color":"DDDDDD","default":false,"description":null},{"id":37906111,"node_id":"MDU6TGFiZWwzNzkwNjExMQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.0.0.Beta1","name":"v1.0.0.Beta1","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2012-08-02T00:58:58Z","updated_at":"2017-01-24T05:04:09Z","closed_at":"2013-06-13T13:33:29Z","author_association":"NONE","active_lock_reason":null,"body":"The following mapping:\n\n```\n'index': {\n    'properties': {\n        'date_created': {\n            'type': 'date',\n            'index': 'not_analyzed',\n            'format: 'date_time||date_time_no_millis',\n        },\n    },\n}\n```\n\nGives an error:\n\n`ElasticSearchException[Illegal pattern component: t]; nested: IllegalArgumentException[Illegal pattern component: t];`\n\nI tried patching as follows, however didn't manage to get it working since `forPattern` wasn't called as expected:\n\n```\ndiff --git a/src/main/java/org/elasticsearch/common/joda/Joda.java b/src/main/java/org/elasticsearch/common/joda/Joda.java\nindex a4f3427..e8d6e53 100644\n--- a/src/main/java/org/elasticsearch/common/joda/Joda.java\n+++ b/src/main/java/org/elasticsearch/common/joda/Joda.java\n@@ -31,11 +31,11 @@ import org.joda.time.format.*;\n  */\n public class Joda {\n\n-    /**\n-     * Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).\n-     */\n-    public static FormatDateTimeFormatter forPattern(String input) {\n+    private  static DateTimeFormatter formatterForPattern(String input) {\n         DateTimeFormatter formatter;\n         if (\"basicDate\".equals(input) || \"basic_date\".equals(input)) {\n             formatter = ISODateTimeFormat.basicDate();\n         } else if (\"basicDateTime\".equals(input) || \"basic_date_time\".equals(input)) {\n@@ -76,9 +76,10 @@ public class Joda {\n             formatter = ISODateTimeFormat.dateHourMinuteSecondMillis();\n         } else if (\"dateOptionalTime\".equals(input) || \"date_optional_time\".equals(input)) {\n             // in this case, we have a separate parser and printer since the dataOptionalTimeParser can't print\n-            return new FormatDateTimeFormatter(input,\n-                    ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC),\n-                    ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC));\n+            DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()\n+                    .append(ISODateTimeFormat.dateTime().withZone(DateTimeZone.UTC).getPrinter(),\n+                            ISODateTimeFormat.dateOptionalTimeParser().withZone(DateTimeZone.UTC).getParser());\n+            formatter = builder.toFormatter();\n         } else if (\"dateTime\".equals(input) || \"date_time\".equals(input)) {\n             formatter = ISODateTimeFormat.dateTime();\n         } else if (\"dateTimeNoMillis\".equals(input) || \"date_time_no_millis\".equals(input)) {\n@@ -125,14 +126,27 @@ public class Joda {\n                 formatter = DateTimeFormat.forPattern(input);\n             } else {\n                 DateTimeParser[] parsers = new DateTimeParser[formats.length];\n+                DateTimePrinter printer = null;\n                 for (int i = 0; i < formats.length; i++) {\n-                    parsers[i] = DateTimeFormat.forPattern(formats[i]).withZone(DateTimeZone.UTC).getParser();\n+                    DateTimeFormatter f = formatterForPattern(formats[i]);\n+                    parsers[i] = f.getParser();\n+                    if (i == 0) {\n+                        printer = f.getPrinter();\n+                    }\n                 }\n                 DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder()\n-                        .append(DateTimeFormat.forPattern(formats[0]).withZone(DateTimeZone.UTC).getPrinter(), parsers);\n+                        .append(printer, parsers);\n                 formatter = builder.toFormatter();\n             }\n         }\n+        return formatter;\n+    }\n+\n+    /**\n+     * Parses a joda based pattern, including some named ones (similar to the built in Joda ISO ones).\n+     */\n+    public static FormatDateTimeFormatter forPattern(String input) {\n+        DateTimeFormatter formatter = formatterForPattern(input);\n         return new FormatDateTimeFormatter(input, formatter.withZone(DateTimeZone.UTC));\n     }\n```\n\nI'm happy to submit a full patch to make it work, but need a hint on where this exception is actually triggered.\n","closed_by":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"performed_via_github_app":null}