[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686009295","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-686009295","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":686009295,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjAwOTI5NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-09-02T21:16:03Z","updated_at":"2020-09-02T21:16:03Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-ql (:Query Languages/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686574176","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-686574176","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":686574176,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjU3NDE3Ng==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T15:33:24Z","updated_at":"2020-09-03T15:33:24Z","author_association":"CONTRIBUTOR","body":"I'm not a big fan of `insensitive(foo == bar)` as it's too verbose and hard to use. I'd be in favor of considering EQL case insensitive by default, remove the existent `case_sensitive` parameter and just be explicit about being case sensitive everywhere else and use something like `~=` (and `~!=`) for a case sensitive equality. For functions, I'd be in favor of an additional _optional_ parameter which will make that functions' functionality to be case sensitive.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686604357","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-686604357","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":686604357,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjYwNDM1Nw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T16:21:11Z","updated_at":"2020-09-03T16:21:11Z","author_association":"MEMBER","body":"> ~= (and ~!=) for a case sensitive equality\r\n\r\nThat to me is confusing. == is exact/case sensitive and ~= inexact/fuzzy/insensitive; not the other way around.\r\nIf we overload == to be inexact, I don't see any value in introducing another operator but instead add a parameter for the whole request to indicate the desired behavior.\r\nIn other words one cannot mix and match sensitive comparisons - which considering that Python EQL is insensitive, doesn't seem to be a problem.\r\n\r\nAnd if that's the case, there's no need to have a per-string function sensitivity switch.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686608698","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-686608698","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":686608698,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjYwODY5OA==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T16:29:08Z","updated_at":"2020-09-03T16:29:08Z","author_association":"CONTRIBUTOR","body":"> but instead add a parameter for the whole request to indicate the desired behavior.\r\n\r\nAnd then we have the other issue of having a wide parameter for case sensitivity that will not apply for comparisons and sorting...","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686711166","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-686711166","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":686711166,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjcxMTE2Ng==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T19:30:18Z","updated_at":"2020-09-03T19:30:18Z","author_association":"MEMBER","body":"> And then we have the other issue of having a wide parameter for case sensitivity that will not apply for comparisons and sorting...\r\n\r\nWe can rename the parameter to better indicate its scope `case_insensitive_equals` as oppose to` case_`insensitive` and even introduce one for functions `case_insensitive_functions` though I don't like the second idea since it applies all functions.\r\n\r\nI don't like the idea of a query wide parameter however it some kind of option for changing behavior","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686716529","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-686716529","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":686716529,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjcxNjUyOQ==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T19:41:53Z","updated_at":"2020-09-03T19:41:53Z","author_association":"CONTRIBUTOR","body":"There is one other significant advantage with not having wide (per request) values, imo: flexibility. A case sensitive equals and a case insensitive equals could not be used in the same query. One could argue though that eql is case insensitive by default and the number of scenarios where both are used is small. But if there is one scenario where an user will want to use a case sensitive equals, imo that scenario is likely to involve another at least one operation that’s case insensitive. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/690281936","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-690281936","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":690281936,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MDI4MTkzNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-10T13:18:16Z","updated_at":"2020-09-10T13:18:16Z","author_association":"MEMBER","body":"If we aim to use EQL (or sub parts of it) in other context, such as Elastic Agent (https://github.com/elastic/beats/pull/20994) or Kibana, I think there is no other way than to build it into the language while keeping the existing behavior around through a flag (like we do today) that we should consider deprecated.\r\n\r\nAs mentioned before, operators do not allow switches and since `==` means exact equality I propose to:\r\n\r\n1. `~==`/`~!=`\r\nIntroduce case-insensitive equal/non-equal.\r\n\r\n2. case-sensitivity parameter to string functions\r\n\r\nIntroduce case-sensitivity param to string comparison functions where this makes sense. Currently this affects `startsWith`, `endsWith`, `containsString`, `indexOf` and for regex `between`, `match`, `wildcard`.\r\n\r\n3. keep flag for EQL requests to preserve existing case sensitivity behavior but consider it deprecated.\r\n\r\nThis means queries such as `foo == \"foo\"` would be equivalent to `foo ~== \"foo\"` using said flag but one would get a deprecating warning to avoid using said flag moving forward. \r\nInternally this means whatever rules we push forward \r\n\r\nP.S. It's also worth considering dropping `=` and favor only `==` moving forward to avoid having to introduce `~=` instead of just `~==`.\r\n\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/690294945","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-690294945","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":690294945,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MDI5NDk0NQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-10T13:38:21Z","updated_at":"2020-09-10T15:09:20Z","author_association":"MEMBER","body":"I think custom overloaded operators is a strange leak into the syntax, and I don't understand the appeal. The global toggle should be sufficient. I'm strongly against this `~` proposal, and can share more in the weekly meetup if necessary. It also has a little bit of javascript-like smell, where it has `==` with coercion and `===` for equality without coercion. We might want to be more careful before we introduce a similarly controversial syntax to EQL.\r\n\r\nI don't see any problem continuing to support `=` and `==` from a technical perspective. Both are used very heavily already and there are no assignments in EQL so this could be okay. Although, I do like the idea of only having `==` for \"is equivalent to\" (depending on the case-sensitivity toggle), and the usual approach of raising a specific error message for this deprecation/break: _\"`=` is no longer supported, please use `==`\"_. I think in some contexts,  a single equals sign is more appropriate: `maxspan=1m`, `fork=true`,  etc. Raising an error on `=` in an expression would make `=` available to us later. One hypothetical example: an assignment pipe: `| set x = \"foo\"`\r\n\r\nI think we need to continue keeping the end user in mind, and I'm not so sure that `~!=` is a desired operator. Within the rules team which writes EQL and KQL rules, this syntax was not well received. There's also the collision with Lua which uses `~=` to mean \"not equals\" not case \"insensitive equals\".\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/690692458","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-690692458","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":690692458,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MDY5MjQ1OA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-10T20:10:52Z","updated_at":"2020-09-10T20:10:52Z","author_association":"MEMBER","body":"After discussing this topic again in our meeting, it was decided that EQL in Elasticsearch will be case insensitive where needed, without offering an option to turn this off.\r\nThat means the `case_sensitive` parameter will be removed, the equality for strings will be case insensitive as will be the string functions that needed it.\r\nWe need to make sure this is properly documented in the docs and individual functions to avoid any confusion.\r\n\r\nIf/when the topic of case sensitivity arises, we'll deal with it then.\r\n\r\nRaised #62255 to track down code changes.\r\n\r\nThanks for the discussions folks!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/694145374","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-694145374","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":694145374,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDE0NTM3NA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-17T10:32:14Z","updated_at":"2020-09-17T10:32:14Z","author_association":"MEMBER","body":"Opening this ticket again after the comments on https://github.com/elastic/elasticsearch/issues/62255","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696316376","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-696316376","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":696316376,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjMxNjM3Ng==","user":{"login":"sethpayne","id":5001370,"node_id":"MDQ6VXNlcjUwMDEzNzA=","avatar_url":"https://avatars2.githubusercontent.com/u/5001370?v=4","gravatar_id":"","url":"https://api.github.com/users/sethpayne","html_url":"https://github.com/sethpayne","followers_url":"https://api.github.com/users/sethpayne/followers","following_url":"https://api.github.com/users/sethpayne/following{/other_user}","gists_url":"https://api.github.com/users/sethpayne/gists{/gist_id}","starred_url":"https://api.github.com/users/sethpayne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sethpayne/subscriptions","organizations_url":"https://api.github.com/users/sethpayne/orgs","repos_url":"https://api.github.com/users/sethpayne/repos","events_url":"https://api.github.com/users/sethpayne/events{/privacy}","received_events_url":"https://api.github.com/users/sethpayne/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T19:15:08Z","updated_at":"2020-09-21T19:15:08Z","author_association":"NONE","body":"Given that we'll be supporting runtime fields in ES soon, should we reserve `=` for defining these fields in EQL?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696553707","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-696553707","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":696553707,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjU1MzcwNw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T07:23:28Z","updated_at":"2020-09-22T07:23:28Z","author_association":"MEMBER","body":"Closing per https://github.com/elastic/elasticsearch/issues/62255#issuecomment-696553609","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696553897","html_url":"https://github.com/elastic/elasticsearch/issues/61883#issuecomment-696553897","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","id":696553897,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjU1Mzg5Nw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T07:24:04Z","updated_at":"2020-09-22T07:24:04Z","author_association":"MEMBER","body":"@sethpayne Let's move the conversion over to https://github.com/elastic/elasticsearch/issues/62650","performed_via_github_app":null}]