{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/33459","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33459/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33459/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33459/events","html_url":"https://github.com/elastic/elasticsearch/issues/33459","id":357586525,"node_id":"MDU6SXNzdWUzNTc1ODY1MjU=","number":33459,"title":"Issues with using NSS PKCS#11 Provider in FIPS mode","user":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"labels":[{"id":912838879,"node_id":"MDU6TGFiZWw5MTI4Mzg4Nzk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Security/Security","name":":Security/Security","color":"0e8a16","default":false,"description":"Security issues without another label"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"assignees":[{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2018-09-06T10:09:53Z","updated_at":"2018-11-02T11:31:33Z","closed_at":"2018-11-02T11:31:33Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## NSS >= 3.27 cannot be used\r\n\r\nWhen using libnss >= 3.27 loading the PKCS11 token fails with `CKR_ATTRIBUTE_READ_ONLY` errors. There is an open BUG [`JDK-8180837`](https://bugs.openjdk.java.net/browse/JDK-8180837) that affects all Java versions and the RCA is not yet complete, nor is there an indication of when this will be resolved. \r\n\r\n## TLS1.2 cannot be used with PKCS11-NSS\r\nSee [unresolved jdk bug](https://bugs.openjdk.java.net/browse/JDK-8029661)\r\n\r\n## Loading system keystore/truststore from a PKCS11 token\r\n\r\n`PKCS#11` tokens can be used as keystores and truststores. To use a `PKCS#11` token as the JDK Default keystore and truststore ( a.k.a. `javax.net.ssl.keyStore` and `javax.net.ssk.TrustStore` ), one needs to set `jaxax.net.ssl.keyStore` and `javax.net.ssl.trustStore` to `NONE` (case sensitive) according to the [`PKCS#11` Reference Guide](https://docs.oracle.com/javase/8/docs/technotes/guides/security/p11guide.html#JSSE).\r\n\r\nWe do not handle the `NONE` parameter correctly, and this gets interpreted as the name of the keystore and truststore, relevant to `$ES_CONF_PATH`. \r\n\r\nIssue addressed in a PR shortly  (See : #33460)\r\n\r\n## Multiple PKCS#11 keystores\r\n\r\nWe can't have multiple `PKCS#11` keystores. PKCS#11 is supposed to be a wrapper to access HW/SW tokens and the token is configured in the provider's configuration that is referenced in `java.security`. As such, each JVM can only point to one token, i.e. one Keystore/Trustore. PKCS#11 KeyStores/TrustStores cannot be stored on disk and when loading the KeyStore via `KeyStore.load()` we need to pass `null` as the InputStream in order to access the token configured in the security properties. \r\n\r\nIn practice this means that keystores cannot be used with the NSS FIPS provider and only the System Truststore(`PKCS#11` token) can be used, adding trusted certificates to it, as needed. This is **NOT** an option for trust configuration for TLS on the transport layer as it means that all certificates signed by the JVM trusted CAs will be able to connect to an Elasticsearch node. \r\nIt can't either be used for storing key material, unless we introduce the option to define the key alias to be selected from a keystore when a keystore is configured, instead of assuming there will be only one key as we do now. (This  might be a nice todo irrespective to the FIPS effort)\r\n\r\nThis is not an issue per se, just a configuration limitation.\r\n\r\n## PKCS#11 tokens as password protected keystores\r\n\r\n`PKCS#11` tokens need to be password protected (NOTE: NSS tooling by default doesn't add a password to the db), otherwise loading the store fails with \r\n```\r\njavax.security.auth.login.LoginException: no password provided, and no callback handler available for retrieving password\r\n```\r\n\r\n`PKCS#11` keystores cannot be loaded from disk and in effect one can only use a single store so this only applies to the default `PKCS#11` token (accessed as the system default keystore) that needs to be password protected. The password for it is passed using `javax.net.ssl.keyStorePassword` and `javax.net.ssl.TrustStorePassword` that cannot be empty.\r\nAgain, a limitation rather than an issue.\r\n\r\nAnother way this affects us is that if no trust configuration is defined, we resolve to using the default JDK Trust Configuration and we do that by initializing an TrustManager with a null Keystore and no password. We need to detect that we're using a `PKCS11-NSS` Provider and that the default truststore is acually a `PKCS#11` token and pass the `javax.net.ssl.TrustStorePassword` when loading the null Keystore. \r\n\r\nIssue addressed in a PR shortly \r\n\r\n\r\n## In memory keystores\r\n\r\nWhen using PEM files for key and trust material, we create in memory KeyStores (of applicable type - in this case `PKCS#11`) and load these keys and certificates so that we can then initialize TrustManager and KeyManager objects using the keystores. We pass `null` as the InputStream parameter to indicate that it should be initialized as an empty keystore, but in the case of `PKCS#11` this will mean that the default `PKCS#11` token will be loaded in the `KeyStore`. This, in turn, adds a number of complications:\r\n\r\n- Adding a certificate using `KeyStore#setCertificateEntry()` doesn't work as the `CKA_ID` attribute which is required for the `PKCS#11` format is not set, and this fails with an NPE. We could code around this if needed. \r\n- The TrustManager that will be created, will be trusting all certificates that are in the default token, plus the PEM one we add, instead of just the one we add, which would be the intended behavior.\r\n- The KeyManager will be created containing all certificate entries plus the private key entry we add. This is not problematic, unless we need to load many private key entries (one for transport TLS, one for http TLS, etc. ), when the problem becomes how to select the correct entry, which can be solved with specifying aliases in the configuration as mentioned above. \r\n\r\nPEM files cannot be used as is. \r\n\r\n## PKCS#12 and FIPS 140 compliance\r\n\r\nLooking for possible solutions for the above, I revisited why `PKCS#12` keystores are not FIPS 140-2 compliant and came to the conclusion that a `PKCS#12` keystore **can** be FIPS 140-2 compliant. \r\n\r\nTo give some context, the original idea is that a `PKCS#12` is not FIPS 140-2 compliant\r\n(for example BCFIPS disallows the use of PKCS12 stores in fips-approved mode) because the algorithms required for PBE key generation (for the key that is generated from the store's password and is used to encrypt the actual keys that are stored in the keystore) are not FIPS 140-2 compliant. However, reading through the RFC, [PKCS#12](https://tools.ietf.org/html/rfc7292#appendix-B) defines that `PKCS#5` should be used and in particular\r\n\r\n> Specifically, PBES2 should be used as encryption scheme, with PBKDF2 as the key derivation function.\r\n\r\nNow, [PBES2](https://tools.ietf.org/html/rfc2898#section-6.2) combines a password-based key derivation function (`PBKDF2` is called out explicitly) with an underlying encryption scheme. [Appendix B2](https://tools.ietf.org/html/rfc2898#appendix-B.2) of RFC2898 defines `DES-EDE3-CBC-Pad` ( three-key triple-DES in CBC mode with the RFC 1423 padding operation) as one of the possible schemes of encryption. Triple-DES is a NIST Approved algorithm and as such FIPS 140-2 compliant. Additionally, common tooling (i.e. openssl) allows for creating `PKCS#12` keystores with arbitrary (even not specified in `PKCS#12` RFC) (FIPS 140-2 compliant) algorithms and encryption schemes.\r\nFor example\r\n\r\n```\r\nopenssl pkcs12 -inkey key.pem -in certificate.pem -macalg SHA256 -keypbe AES-192-CBC -certpbe AES-256-CFB -export -out test.p12\r\n```\r\n\r\nwill produce a `PKCS#12` store with the following information\r\n```\r\nopenssl pkcs12 -info -in test.p12 -noout\r\n\r\nMAC:sha256 Iteration 2048\r\nPKCS7 Encrypted data: PBES2, PBKDF2, AES-256-CFB, Iteration 2048, PRF hmacWithSHA256\r\nCertificate bag\r\nPKCS7 Data\r\nShrouded Keybag: PBES2, PBKDF2, AES-192-CBC, Iteration 2048, PRF hmacWithSHA256\r\n```\r\n\r\nwhich for all effects and purposes is FIPS 140-2 compliant since it only uses approved algorithms (`AES` for encryption and `PBKDF2` as the key derivation function. \r\n\r\nTo remain compliant to `PKCS#12` and `PKCS#5 2.0`, one could create a keystore with \r\n```\r\nopenssl pkcs12 -inkey key.pem -in certificate.pem -macalg SHA256 -keypbe DES-EDE3-CBC -certpbe DES-EDE3-CBC -export -out test.p12\r\n```\r\nGranted, existing `PKCS12` stores are not FIPS 140 compliant since the default algorithms schemes are `pbeWithSHA1And3-KeyTripleDES-CBC` for the inner (private key encryption) and `pbeWithSHA1And40BitRC2-CBC` for the outer (`PKCS#7`) encryption.\r\n\r\nThe problem with the above is that the `KeyManagerImpl` specifically requires that the keystore used to initialize a KeyManager, _must_ be created by the same Security Provider that is actually being used \r\n\r\nhttps://github.com/frohoff/jdk8u-jdk/blob/da0da73ab82ed714dc5be94acd2f0d00fbdfe2e9/src/share/classes/sun/security/ssl/KeyManagerFactoryImpl.java#L65\r\n\r\nUnfortunately `PKCS#12` stores created by openssl do not have a provider set and if they did, it wouldn't be the SunPKCS-NSS that will be in use in runtime, and using the `SunPCKS11-NSS` provider with keytool , i.e.\r\n```\r\n/usr/lib/jvm/java-8-openjdk-amd64-fips-nss/bin/keytool -genkeypair -keystore instance.p12 -storetype pkcs12 -storepass password -alias cert0 -keyalg RSA -keysize 2048 -validity 99999 -dname \"CN=My SSL Certificate\" -providerName SunPKCS11-NSS\r\n```\r\nyields an error as this provider can't handle `PKCS12` keystores. \r\n\r\n\r\n## Summary \r\n\r\n- `NONE` keyword needs to be handled accordingly ( #33460)\r\n- `PKCS#12` keystores , `JKS` keystores and `PEM` files cannot be used for key configuration. \r\n- `PKCS#12` keystores can be used for trust configuration and as shown above can be FIPS 140 compliant. \r\n- The HW/SW `PKCS#11` token that is used as the system keystore and truststore must be password protected.\r\n\r\n## Actions\r\n\r\n- Focus on supporting the use of PEM files for key configuration. This would require specific handling for adding keys and certificates to the `PKCS#11` token ~and to allow to specify in configuration the alias that should be used to read a key from a PKCS#11 token that might contain multiple private key entries~ (edited see [below](https://github.com/elastic/elasticsearch/issues/33459#issuecomment-420357934) for justification.) \r\n- Allow for selecting a Security Provider to use ( and in `PKCS#11` case, the associated keystore/token ) when configuring a keystore or key/certificate pair in any related configuration option.\r\n","closed_by":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"performed_via_github_app":null}