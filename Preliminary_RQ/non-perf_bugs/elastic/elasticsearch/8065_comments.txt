[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/59005811","html_url":"https://github.com/elastic/elasticsearch/issues/8065#issuecomment-59005811","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8065","id":59005811,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDA1ODEx","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2014-10-14T08:19:25Z","updated_at":"2014-10-14T08:19:25Z","author_association":"CONTRIBUTOR","body":"What I have in mind here is a two stage process. I think we should add a basic test class that can:\n- start & recover from a zipped index\n- run basic searches on that index on a field \n- run basic sort on a field (utilizes fielddata/docvalues)\n- uses realtime get to fetch document (check if hashing works ok)\n- expand / reduce number or replicas to check if relocation / recovery works just fine\n\neach of these can be a test method in that base test. The test itself then picks one or more bwc indices to run and iterates over them. `@Nightly` would build all of them I guess?\n\nto create the zipped version of the index I think we can modify the upgrade python script we have and build a `backwards_index.py` from it that creates those indices. That way we can directly create a BWC index when we do a release and push it directly to the relevant branches.\n\nOnce we have the infra for this I guess we can go through all previous releases and build those bwc indices. This would be essentially the same as our upgrade python test script but would run with the other unittests which I'd prefer since the upgrade script runs against releases not against dev / release branches and it would be more integrated.\n","performed_via_github_app":null}]