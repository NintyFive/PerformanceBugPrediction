{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/24254","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24254/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24254/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24254/events","html_url":"https://github.com/elastic/elasticsearch/issues/24254","id":223464469,"node_id":"MDU6SXNzdWUyMjM0NjQ0Njk=","number":24254,"title":"Enhancement: Range agg specified as max bucket count rather than explicit ranges","user":{"login":"mrec","id":4206148,"node_id":"MDQ6VXNlcjQyMDYxNDg=","avatar_url":"https://avatars0.githubusercontent.com/u/4206148?v=4","gravatar_id":"","url":"https://api.github.com/users/mrec","html_url":"https://github.com/mrec","followers_url":"https://api.github.com/users/mrec/followers","following_url":"https://api.github.com/users/mrec/following{/other_user}","gists_url":"https://api.github.com/users/mrec/gists{/gist_id}","starred_url":"https://api.github.com/users/mrec/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrec/subscriptions","organizations_url":"https://api.github.com/users/mrec/orgs","repos_url":"https://api.github.com/users/mrec/repos","events_url":"https://api.github.com/users/mrec/events{/privacy}","received_events_url":"https://api.github.com/users/mrec/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":1967499105,"node_id":"MDU6TGFiZWwxOTY3NDk5MTA1","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Analytics","name":"Team:Analytics","color":"fef2c0","default":false,"description":"Meta label for analytics/geo team"},{"id":110557212,"node_id":"MDU6TGFiZWwxMTA1NTcyMTI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/high%20hanging%20fruit","name":"high hanging fruit","color":"fc6149","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2017-04-21T18:43:37Z","updated_at":"2020-11-04T17:03:17Z","closed_at":"2020-11-04T16:49:20Z","author_association":"NONE","active_lock_reason":null,"body":"**NOTE:** This is very similar to #9572 about `histogram`, and is probably similarly blocked by #12316, but I didn't want to hijack that one given that it's a different aggregation. I also couldn't see any mention of the \"swamping\" problem described below as the second motivation.\r\n\r\nA [range aggregation](https://www.elastic.co/guide/en/elasticsearch/reference/5.3/search-aggregations-bucket-range-aggregation.html) is specified using an array of explicit bucket ranges:\r\n\r\n~~~\r\n\"range\" : {\r\n    \"field\" : \"price\",\r\n    \"ranges\" : [\r\n        { \"to\" : 50 },\r\n        { \"from\" : 50, \"to\" : 100 },\r\n        { \"from\" : 100 }\r\n    ]\r\n}\r\n~~~\r\n\r\nI'm proposing an alternative which just requests a maximum number of buckets to return; syntax is open to bikeshedding but could be e.g.\r\n\r\n~~~\r\n\"range\" : {\r\n    \"field\" : \"price\",\r\n    \"ranges\" : 3\r\n}\r\n~~~\r\n\r\nThe motivation for this is twofold:\r\n\r\n1. One very common use case for range aggs is creating drilldown UI to augment a primary text-based search. The end-user doesn't enter the range boundaries; rather, the client application will do a calibration request with something like a `percentiles` agg, aiming for ***N*** buckets with doc counts as even as possible, and set the `range` bucket boundaries for the main request based on the results of that. The problem here is duplicate work; it means two round-trips to Elastic rather than one, both trips will need to apply the request's filtering criteria, and the dependency on those criteria means that the result of the `percentiles` agg can't usefully be cached. Doing the `percentiles` internally on the server would avoid the network overhead of the second call, and could hopefully avoid repeating the document filtering step.\r\n2. Occasionally the matching docs are swamped by one value, meaning that (for example) requesting `[25,50,75]` percentiles can return the same value for all three making it almost useless for drilldown. We can work around this when using the Java client by binary-chopping the returned `Percentiles` until you find something useful, but this isn't possible via the REST API and won't be possible via the Java client either (see #23610) once it switches to REST transport.","closed_by":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}