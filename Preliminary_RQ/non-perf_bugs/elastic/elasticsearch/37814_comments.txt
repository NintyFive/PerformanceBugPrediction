[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458115750","html_url":"https://github.com/elastic/elasticsearch/issues/37814#issuecomment-458115750","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37814","id":458115750,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODExNTc1MA==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-01-28T12:38:00Z","updated_at":"2019-01-28T13:16:47Z","author_association":"MEMBER","body":"This one reproduces for me with the following seed, I am running on Fedora 28:\r\n\r\n```\r\nREPRODUCE WITH: ./gradlew :server:integTest -Dtests.seed=85FA1B5E67DEAE8C -Dtests.class=org.elasticsearch.search.query.SearchQueryIT -Dtests.method=\"testDateRangeInQueryStringWithTimeZone_7880\" -Dtests.security.manager=true -Dtests.locale=ru -Dtests.timezone=Europe/Riga -Dcompiler.java=11 -Druntime.java=8\r\n```\r\n\r\n```\r\nERROR   3.61s | SearchQueryIT.testDateRangeInQueryStringWithTimeZone_7880 <<< FAILURES!\r\n   > Throwable #1: MapperParsingException[failed to parse field [past] of type [date]]; nested: IllegalArgumentException[failed to parse date field [2019-01-28T12:33:28.264GMT0] with format [strict_date_optional_time||epoch_millis]]; nested: NotSerializableExceptionWrapper[date_time_parse_exception: Text '2019-01-28T12:33:28.264GMT0' could not be parsed: Conflict found: Fields resolved to two different dates: 2019-01-28 1970-01-01]; nested: NotSerializableExceptionWrapper[date_time_exception: Conflict found: Fields resolved to two different dates: 2019-01-28 1970-01-01];\r\n   >    at __randomizedtesting.SeedInfo.seed([85FA1B5E67DEAE8C:915D1E01064B70C9]:0)\r\n   >    at org.elasticsearch.index.mapper.FieldMapper.parse(FieldMapper.java:280)\r\n   >    at org.elasticsearch.index.mapper.DocumentParser.parseObjectOrField(DocumentParser.java:468)\r\n   >    at org.elasticsearch.index.mapper.DocumentParser.parseValue(DocumentParser.java:596)\r\n   >    at org.elasticsearch.index.mapper.DocumentParser.innerParseObject(DocumentParser.java:407)\r\n   >    at org.elasticsearch.index.mapper.DocumentParser.parseObjectOrNested(DocumentParser.java:381)\r\n   >    at org.elasticsearch.index.mapper.DocumentParser.internalParseDocument(DocumentParser.java:98)\r\n   >    at org.elasticsearch.index.mapper.DocumentParser.parseDocument(DocumentParser.java:71)\r\n   >    at org.elasticsearch.index.mapper.DocumentMapper.parse(DocumentMapper.java:264)\r\n   >    at org.elasticsearch.index.shard.IndexShard.prepareIndex(IndexShard.java:758)\r\n   >    at org.elasticsearch.index.shard.IndexShard.applyIndexOperation(IndexShard.java:735)\r\n   >    at org.elasticsearch.index.shard.IndexShard.applyIndexOperationOnPrimary(IndexShard.java:707)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.lambda$executeIndexRequestOnPrimary$3(TransportShardBulkAction.java:461)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.executeOnPrimaryWhileHandlingMappingUpdates(TransportShardBulkAction.java:484)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.executeIndexRequestOnPrimary(TransportShardBulkAction.java:459)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.executeBulkItemRequest(TransportShardBulkAction.java:218)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.performOnPrimary(TransportShardBulkAction.java:161)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.performOnPrimary(TransportShardBulkAction.java:153)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:141)\r\n   >    at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:79)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:1034)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:1012)\r\n   >    at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:102)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.runWithPrimaryShardReference(TransportReplicationAction.java:414)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.lambda$doRun$0(TransportReplicationAction.java:360)\r\n   >    at org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:61)\r\n   >    at org.elasticsearch.index.shard.IndexShardOperationPermits.acquire(IndexShardOperationPermits.java:269)\r\n   >    at org.elasticsearch.index.shard.IndexShardOperationPermits.acquire(IndexShardOperationPermits.java:236)\r\n   >    at org.elasticsearch.index.shard.IndexShard.acquirePrimaryOperationPermit(IndexShard.java:2401)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction.acquirePrimaryOperationPermit(TransportReplicationAction.java:971)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.doRun(TransportReplicationAction.java:359)\r\n   >    at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:314)\r\n   >    at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryOperationTransportHandler.messageReceived(TransportReplicationAction.java:306)\r\n   >    at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:63)\r\n   >    at org.elasticsearch.transport.TransportService$7.doRun(TransportService.java:687)\r\n   >    at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:751)\r\n   >    at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n   >    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n   >    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n   >    at java.lang.Thread.run(Thread.java:748)\r\n   > Caused by: java.lang.IllegalArgumentException: failed to parse date field [2019-01-28T12:33:28.264GMT0] with format [strict_date_optional_time||epoch_millis]\r\n   >    at org.elasticsearch.common.time.JavaDateFormatter.parse(JavaDateFormatter.java:127)\r\n   >    at org.elasticsearch.index.mapper.DateFieldMapper$DateFieldType.parse(DateFieldMapper.java:250)\r\n   >    at org.elasticsearch.index.mapper.DateFieldMapper.parseCreateField(DateFieldMapper.java:454)\r\n   >    at org.elasticsearch.index.mapper.FieldMapper.parse(FieldMapper.java:274)\r\n   >    ... 39 more\r\n   > Caused by: NotSerializableExceptionWrapper[date_time_parse_exception: Text '2019-01-28T12:33:28.264GMT0' could not be parsed: Conflict found: Fields resolved to two different dates: 2019-01-28 1970-01-01]; nested: NotSerializableExceptionWrapper[date_time_exception: Conflict found: Fields resolved to two different dates: 2019-01-28 1970-01-01];\r\n   >    at java.time.format.DateTimeFormatter.createError(DateTimeFormatter.java:1920)\r\n   >    at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1781)\r\n   >    at org.elasticsearch.common.time.JavaDateFormatter.parse(JavaDateFormatter.java:125)\r\n   >    ... 42 more\r\n   > Caused by: NotSerializableExceptionWrapper[date_time_exception: Conflict found: Fields resolved to two different dates: 2019-01-28 1970-01-01]\r\n   >    at java.time.format.Parsed.updateCheckConflict(Parsed.java:357)\r\n   >    at java.time.format.Parsed.resolveInstantFields0(Parsed.java:345)\r\n   >    at java.time.format.Parsed.resolveInstantFields(Parsed.java:331)\r\n   >    at java.time.format.Parsed.resolveFields(Parsed.java:310)\r\n   >    at java.time.format.Parsed.resolve(Parsed.java:244)\r\n   >    at java.time.format.DateTimeParseContext.toResolved(DateTimeParseContext.java:331)\r\n   >    at java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:1955)\r\n   >    at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1777)\r\n   >    ... 43 more\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458116669","html_url":"https://github.com/elastic/elasticsearch/issues/37814#issuecomment-458116669","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37814","id":458116669,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODExNjY2OQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2019-01-28T12:41:30Z","updated_at":"2019-01-28T12:41:30Z","author_association":"MEMBER","body":"I have muted this test on master","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/458528823","html_url":"https://github.com/elastic/elasticsearch/issues/37814#issuecomment-458528823","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37814","id":458528823,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1ODUyODgyMw==","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2019-01-29T12:53:25Z","updated_at":"2019-01-29T12:53:25Z","author_association":"MEMBER","body":"I found the reason for this. The timezone `GMT0` in is wrongly parsed in java8.\r\n\r\nOne can reproduce the behaviour with a test like this\r\n\r\n```\r\n    public void testGMT0Zone() {\r\n        ZoneId timeZone = ZoneId.of(\"GMT0\");\r\n        logger.info(\"zone [{}], normalized [{}]\", timeZone, timeZone.normalized());\r\n        DateFormatter dateFormatter = DateFormatter.forPattern(\"strict_date_optional_time\");\r\n        String now = dateFormatter.format(Instant.now().atZone(timeZone));\r\n        dateFormatter.parse(now);\r\n    }\r\n```\r\n\r\nThis one works on java10 and fails on java8, as the `GMT0` timezone cannot get properly be parsed under java 8.\r\n\r\nThis has been fixed in java9 and above but remains broken in java8. The JDK bug is at https://bugs.openjdk.java.net/browse/JDK-8138664 and the fix at http://hg.openjdk.java.net/jdk9/dev/jdk/rev/de39f994d657\r\n\r\nI am inclined to ignore GMT0 as a timezone in this test to make the test work for now.","performed_via_github_app":null}]