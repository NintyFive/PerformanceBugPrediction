{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/53101","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53101/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53101/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53101/events","html_url":"https://github.com/elastic/elasticsearch/issues/53101","id":575347703,"node_id":"MDU6SXNzdWU1NzUzNDc3MDM=","number":53101,"title":"Composable Templates","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"labels":[{"id":163824881,"node_id":"MDU6TGFiZWwxNjM4MjQ4ODE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Indices%20APIs","name":":Core/Features/Indices APIs","color":"0e8a16","default":false,"description":"APIs to create and manage indices"},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null},{"id":1967496097,"node_id":"MDU6TGFiZWwxOTY3NDk2MDk3","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Core/Features","name":"Team:Core/Features","color":"fef2c0","default":false,"description":"Meta label for core/features team"},{"id":1903451964,"node_id":"MDU6TGFiZWwxOTAzNDUxOTY0","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Top%20Ask","name":"Top Ask","color":"fef2c0","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"assignees":[{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},{"login":"andreidan","id":1217601,"node_id":"MDQ6VXNlcjEyMTc2MDE=","avatar_url":"https://avatars2.githubusercontent.com/u/1217601?v=4","gravatar_id":"","url":"https://api.github.com/users/andreidan","html_url":"https://github.com/andreidan","followers_url":"https://api.github.com/users/andreidan/followers","following_url":"https://api.github.com/users/andreidan/following{/other_user}","gists_url":"https://api.github.com/users/andreidan/gists{/gist_id}","starred_url":"https://api.github.com/users/andreidan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andreidan/subscriptions","organizations_url":"https://api.github.com/users/andreidan/orgs","repos_url":"https://api.github.com/users/andreidan/repos","events_url":"https://api.github.com/users/andreidan/events{/privacy}","received_events_url":"https://api.github.com/users/andreidan/received_events","type":"User","site_admin":false},{"login":"probakowski","id":3896475,"node_id":"MDQ6VXNlcjM4OTY0NzU=","avatar_url":"https://avatars1.githubusercontent.com/u/3896475?v=4","gravatar_id":"","url":"https://api.github.com/users/probakowski","html_url":"https://github.com/probakowski","followers_url":"https://api.github.com/users/probakowski/followers","following_url":"https://api.github.com/users/probakowski/following{/other_user}","gists_url":"https://api.github.com/users/probakowski/gists{/gist_id}","starred_url":"https://api.github.com/users/probakowski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/probakowski/subscriptions","organizations_url":"https://api.github.com/users/probakowski/orgs","repos_url":"https://api.github.com/users/probakowski/repos","events_url":"https://api.github.com/users/probakowski/events{/privacy}","received_events_url":"https://api.github.com/users/probakowski/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2020-03-04T12:02:33Z","updated_at":"2020-05-19T20:22:26Z","closed_at":"2020-05-07T20:08:54Z","author_association":"MEMBER","active_lock_reason":null,"body":"The meta issue will track the development of the second version of index templates.\r\n\r\nTasks:\r\n- [x] Introduce component templates in cluster state (@dakrone) #53290\r\n- [x] CRUD APIs for component templates. (@dakrone) #53558 \r\n  - [x] Add validation for component templates \"correctness\" (@probakowski) #54023\r\n  - [x] Add HLRC support for component template APIs (@probakowski) #54635\r\n  - [x] Add HLRC documentation for component template APIs (@andreidan) #56136\r\n- [x] Introduce v2 index template format (@dakrone) #53753\r\n- [x] CRUD APIs for v2 index templates (@dakrone) #54039 \r\n  - [x] Add HLRC support for v2 index templates (@probakowski) #54838\r\n  - [x] Add HLRC documentation for v2 index templates API (@andreidan) #56136\r\n- [x] Add `simulate` API for simulating template composition (@andreidan) #55686 \r\n  - [x] Add HLRC support for `simulate` API (@andreidan) #55936 \r\n  - [x] Add documentation for simulate API (@andreidan) #56136\r\n- [x] Change `GET` API for component and index templates to only support a single name or name wildcard (@dakrone) #54694\r\n- [x] Enforce v1 & v2 warnings and errors when templates overlap (@dakrone) #54367\r\n  - [x] Prevent putting v2 index template (with error) when it would overlap with existing v2 template of the same priority (@probakowski) #54933\r\n- [x] Enforce no `_doc` (or other) document types are specified in v2 component templates or v2 index templates (will be handled by #54669)\r\n- [x] Actually use v2 index templates for new index creation (@dakrone) #54669\r\n- [x] Add `?prefer_v2_templates` flag for all requests that can create an index (@dakrone) #55411\r\n  - [x] Default `prefer_v2_templates` to true for 8.0+ (@dakrone) #55489\r\n  - [ ] Add support for `prefer_v2_templates` to the Reindex API (@probakowski) #56253\r\n- [x] Merge mappings in a manner that allows only a single field configuration (@dakrone) #55607\r\n  - [x] Overwrite mappings for fields using dots in field names (@dakrone) #55982\r\n  - [x] Potentially disallow duplicate dynamic templates in mappings (@andreidan) #56291\r\n- [x] Remove 7.x error for template CRUD (@dakrone) #55611\r\n- [x] Emit deprecation warning if multiple v1 templates match with a new index (@probakowski) #55558\r\n- [x] Add support for V2 templates to `/_cat/templates` (@dakrone) #55829\r\n- [x] Documentation (@dakrone) #55755\r\n- [ ] Ensure security compatibility (may not be necessary, just need to double check)\r\n- [x] Mark APIs as experimental for 7.8 (@dakrone) #55874\r\n- [x] Remove feature flag hiding before release (@dakrone) #56123\r\n- [x] Fix issue with null != 0 and negative priority values (@dakrone) #56139\r\n- [x] Re-use MetadataIndexTemplateService#validate for V2 index templates, and add `*` validation (@dakrone) #56170\r\n\r\n---------\r\n\r\n**Tasks that may be done after initial release**:\r\n\r\n- [ ] Mark APIs as stable for 7.9\r\n- [ ] Switch internal use of templates to use v2 templates (like ILM/SLM history indices, ML, etc)\r\n- [ ] Switch all internal tests to use v2 templates instead of v1 templates\r\n- [ ] Enforce only delete or update operations for v1 templates are allowed on 8.0+ (no creation of new v1 templates)\r\n- [ ] Deprecate the entire v1 template API in 8.0+\r\n- [ ] Add a method to migrate a v1 template into a v2 template? (maybe)\r\n- [ ] Add simulate API for a template ie. /_index_template/{template-name}/_simulate, without any body. It will return the final resolved version of the template (merging the component templates)\r\n\r\n# Background\r\n\r\nIndex templates as it stands today has a number of shortcomings mainly around index template inheritance:\r\n* At index creation time, multiple index templates can be applied. If no template order is specified or templates have the same order then how templates are applied to create the final mappings and index setting is undefined. This can result in settings/mappings being applied in an unexpected manner.\r\n* With template inheritance, multiple index templates can merged together. The end result of that merge can result in invalid settings and mappings.\r\n\r\n# Version 2 changes\r\n\r\nThe biggest change is that reuse of template configuration via template inheritance that exists today is going to get replaced by template composition. A new index will no longer be able to match with multiple index templates. If a new index matches with multiple index templates then the index template with the highest priority is selected and used. If multiple index templates match that have the same priority then that results into an error. Either at alias template creation time or when alias templates are evaluated as part of index creation. \r\n\r\nNew indices may require the same index template configuration be applied to them, but their names may be so different that a single index template's index pattern can't capture them and because with index templates v2 only a single template can match with a new index. To solve this problem, we'll abstract the index template config into reusable ‘component templates', which users can refer to when composing index templates. A component template only contains settings, mappings and aliases. Index templates can be composed of one or more component templates. The order in which the names of component templates are specified in an index template determines the order in which the component templates are applied. The setting, mapping and aliases specified inside an index template are applied last. \r\n\r\nComponent templates never match at index creation time directly and are only included via a matching index template. Component templates can’t be composed of other component templates.\r\n\r\nIndex and component templates can only contain settings and mappings that are valid on their own. The settings and mappings of an individual index template should result in a successful index creation.\r\n\r\n## Component template merging\r\nThe order in which the names of component templates are specified in an index template determines the order in which the component templates are applied. The setting, mapping and aliases specified inside an index template are applied last. \r\n\r\nSettings and mappings are essentially nested key value pairs. If a component template is applied and a key already exists then it will replace the key and value even if that contains other key value pairs. \r\n\r\nFor example consider the following snippets:\r\n\r\n```\r\n{\r\n  \"my_field\": {\r\n      \"type\": \"integer\", \r\n      \"ignore_malformed\": true\r\n  }\r\n}\r\n{\r\n  \"my_field\": {\r\n     \"type\": \"keyword\", \r\n     \"ignore_above\": 1024\r\n  }\r\n}\r\n```\r\n\r\nWith the merging of index templates that exist today, the following result would be created:\r\n\r\n```\r\n{\r\n  \"my_field\": {\r\n      \"ignore_malformed\": true,\r\n      \"type\": \"keyword\", \r\n      \"ignore_above\": 1024\r\n  }\r\n}\r\n```\r\n\r\nIn order to avoid this, at the time a template with snippet B is applied then that would completely overwrite the ‘my_field’ key in order to avoid creating an illegal mapping. With this logic this would be the result:\r\n\r\n```\r\n{\r\n  \"my_field\": {\r\n     \"type\": \"keyword\", \r\n     \"ignore_above\": 1024\r\n  }\r\n}\r\n```\r\n\r\nMerging will happen on a field granular level, and the V2 templates will ensure no doc types are specified.\r\n\r\nAlso dynamic templates should be merged in the same manner.\r\n\r\n## Backwards compatibility\r\nWe should strive towards ensuring that existing index templates should be able to work like index templates v2. If index templates v1 are not relying on template inheritance then no action should be required.\t\r\n\r\nWith index templates v2 configuration reuse is achieved by selective composability whereas with index templates v1 this is achieved via template inheritance. Template inheritance should be allowed throughout the 7.x version timeline, so that users can upgrade their index templates to use component template. In this period of time we should emit deprecation warnings if a new index matches with more than one index template in the v1 structure. After the deprecation period, if multiple v1 templates match we should fail with an error at index creation time. Users will then have to upgrade to use component templates.\r\n\r\nFor interop with both v1 and v2 templates the following will be used:\r\n\r\n```\r\nIf * in v1, allow but warn to put v2\r\nRuntime resolution will favor v2\r\nIf PUT v1 (not ‘*’) and overlaps with v2, then error (v2 will take precedence)\r\nIf PUT v1 (with ‘*’) and overlaps with v2, then warn (v2 may take precedence)\r\nIf PUT v2 with ‘*’ allow the overlap, warn about taking precedence\r\nIf PUT v2 that matches a V1 template, warn that v2 will take precedence\r\nIn 8.0 - only allow update/delete of v1, not create (provide an escape hatch setting/property)\r\nIn 7.x, deprecate the entire /_template endpoint\r\n```\r\n\r\nIn 9.0 the deprecated `/_template` endpoint will be removed.\r\n\r\nThe structure and field names have changed slightly with index templates v1. The current structure and field names will be supported throughout the 7.x version timeline. ~~After which we can automatically rewrite the older format into the new format upon upgrading to version 8.~~ (we may be able to provide a conversion API, but we cannot automatically upgrade them since v1 templates rely on inheritance)\r\n\r\n# Config and APIs\r\n\r\nComponent templates are stored in the cluster state as separate resources. Index templates remain to be stored in the same place inside the cluster state.\r\n\r\n## Index Templates v2 Config\r\n\r\nConfig:\r\n\r\n```\r\n{\r\n    \"index_patterns\": [...],\r\n    \"priority\": 0-9223372036854775808,\r\n    \"template\": {\r\n       \"settings\": {...},\r\n       \"mappings\": {...},\r\n       \"aliases\": {...}\r\n    },\r\n    \"composed_of\": [...],\r\n    \"version\": 0-9223372036854775808,\r\n    \"_meta\": { ... }\r\n}\r\n```\r\n\r\nExplanation of the configuration fields:\r\n* `index_patterns` (required), a string array. Each string contains a wildcard pattern. \r\n* `template` (optional), a json object at least settings or mappings or aliases. \r\n  * `settings` (optional), a json object representing index settings. \r\n  * `mappings` (optional), a json object representing mappings.\r\n  * `aliases` (optional), a json object representing aliases.\r\n* `priority` (optional), a numeric value indicating precedence over other index templates. When indexing into a non existing index/alias, the name may match with patterns of multiple index templates, the alias template with the highest order value will be selected. Other index templates will be ignored. Defaults to 0.\r\n* `composed_of` (optional), a string array with the names of components templates that will be applied on a new index together with the current template. The order in the string array determines the order in which the component templates are applied. If composed_of is specified then the index template is applied last. This is to ensure that the settings/mappings for the index template are never overwritten by component templates it references to. \r\n* `version` (optional), a numeric value. External systems can use this version number to simplify template management. The version parameter is completely optional and not automatically generated by Elasticsearch. Defaults to null.\r\n* `_meta` (optional), a json object with meta information about a template, not used by Elasticsearch, but for third party systems and users.  \r\nIndex Template APIs\r\nIndex v2 templates will remain to use the existing index template APIs. Additionally there will be an api to simulate what index template would match with a given index name. Also the final index settings, mappings and aliases would be returned.\r\n\r\nSimulate index template api:\r\n\r\n```\r\nGET /_index_template/[index_name]/_simulate\r\n```\r\n\r\nWe should also support sending an index template (v2) body with the simulate API, so a UI can simulate adding an index template and seeing what it would look like.\r\n\r\n## Component Template Config\r\n\r\nConfig:\r\n\r\n```\r\n{\r\n    \"template\": {\r\n       \"settings\": {...},\r\n       \"mappings\": {...},\r\n       \"aliases\": {...}\r\n    },\r\n    \"version\": 0-9223372036854775808,\r\n    \"_meta\": { ... }\r\n}\r\n```\r\n\r\nExplanation of the configuration fields:\r\n* `template` (required), a json object at least settings or mappings or aliases.\r\n  * `settings` (optional), a json object representing index settings. \r\n  * `mappings` (optional), a json object representing mappings.\r\n  * `aliases` (optional), a json object representing aliases.\r\n* `version` (optional), a numeric value. External systems can use this version number to simplify template management. The version parameter is completely optional and not automatically generated by Elasticsearch. Defaults to null.\r\n* `_meta` (optional), a json object with meta information about a template, not used by Elasticsearch, but for third party systems and users.  \r\n\r\n## Component Template APIs\r\n\r\nPut component template api:\r\n\r\n```\r\nPUT /_component_template/[name]\r\n{\r\n   ...\r\n}\r\n```\r\n\r\nGet component template api:\r\n\r\n```\r\nGET /_component_template/[name]\r\n```\r\n\r\nDelete component template api:\r\n\r\n```\r\nDELETE /_component_template/[name]\r\n```","closed_by":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"performed_via_github_app":null}