{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/58395","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/58395/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/58395/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/58395/events","html_url":"https://github.com/elastic/elasticsearch/issues/58395","id":642535771,"node_id":"MDU6SXNzdWU2NDI1MzU3NzE=","number":58395,"title":"[ML] Should flush have a wait_for_completion option?","user":{"login":"droberts195","id":7405510,"node_id":"MDQ6VXNlcjc0MDU1MTA=","avatar_url":"https://avatars0.githubusercontent.com/u/7405510?v=4","gravatar_id":"","url":"https://api.github.com/users/droberts195","html_url":"https://github.com/droberts195","followers_url":"https://api.github.com/users/droberts195/followers","following_url":"https://api.github.com/users/droberts195/following{/other_user}","gists_url":"https://api.github.com/users/droberts195/gists{/gist_id}","starred_url":"https://api.github.com/users/droberts195/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/droberts195/subscriptions","organizations_url":"https://api.github.com/users/droberts195/orgs","repos_url":"https://api.github.com/users/droberts195/repos","events_url":"https://api.github.com/users/droberts195/events{/privacy}","received_events_url":"https://api.github.com/users/droberts195/received_events","type":"User","site_admin":false},"labels":[{"id":912833043,"node_id":"MDU6TGFiZWw5MTI4MzMwNDM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:ml","name":":ml","color":"0e8a16","default":false,"description":"Machine learning"},{"id":929267538,"node_id":"MDU6TGFiZWw5MjkyNjc1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/team-discuss","name":"team-discuss","color":"fbca04","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-06-21T10:21:21Z","updated_at":"2020-06-25T15:17:13Z","closed_at":"2020-06-25T15:17:13Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The [flush job](https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-flush-job.html) endpoint has evolved over the years, and now fulfils several roles that are only tenuously related.\r\n\r\n- When the endpoint was first introduced, it had no arguments and was all about ensuring that having sent data to a job you could query all the results generated from that data with the certainty that no results would be generated or changed after your results query was made.  In other words, it was aimed at programmatic users of the ML APIs. (The docs don't mention this aspect at all - they should be improved.)\r\n- After a time the option was added to tell ML to generate interim results as part of a flush.  This made sense at the time, as the users who wanted the interim results were programmatic users who had just sent data to ML, so _also_ wanted the searchability guarantee.\r\n- Then additional options were added to advance time or skip time.  It is not as clear that these fit well with the flush endpoint.  However, for a programmatic user who wants to tell ML there was no data for a bucket and then get results for that bucket having both requests combined is a convenience.\r\n- Finally, datafeeds were added.  Datafeeds need to request interim results be calculated and sometimes need to skip or advance time in the model.  But datafeeds do _not_ immediately require results be completely up-to-date when the flush request returns.  Datafeeds would be happy with async interim results calculation and time skip/advance.\r\n\r\nAt small scale these discrepancies do not matter.  But at large scale they do.\r\n\r\n- One aspect of making sure results reflect the impact of all previously sent data is waiting for any renormalization that is already in progress _or caused by advancing time_ to finish.\r\n- When there are many millions of results renormalization can take a long time.\r\n- Datafeeds _always_ ask for interim results to be calculated, so flush very regularly.  This means that datafeeds block for a considerable amount of time for large jobs where results renormalization takes a long time.\r\n- Additionally, now that category definitions contain the category count, a datafeed requesting interim results for a job will cause every category definition where we have incremented the count in the C++ process to be updated in the results index, and will block until this is done.  If we saw 100 different message categories in the 7.5 or 10 minutes between requesting interim results then that means the datafeed will need to wait for 100 document updates in the results index.\r\n\r\nSome possibilities for addressing this:\r\n\r\n1. Split the functions of flush into separate endpoints.  For example, if you want to calculate interim results and make sure they are searchable then you'd call the interim results endpoint followed by the flush endpoint.  If you wanted to advance time but didn't immediately require results you'd just call the advance time endpoint, and not bother with the (potentially expensive) flush afterwards.\r\n2. Add a `wait_for_completion` option to the current flush endpoint.  This would default to `true` to preserve existing behaviour.  But when set to `false` the flush endpoint would not block until all its effects were visible.\r\n\r\nOption 1 might be better in a green field situation, but given that that would be a breaking change option 2 seems more sensible.\r\n\r\nThen the datafeed would call flush with `wait_for_completion=false`.  The key benefit would be that subsequent iterations of the datafeed could run while renormalizations triggered by the previous flush chugged away in the background.  The datafeed would no longer pointlessly block waiting for renormalizations to complete.","closed_by":{"login":"benwtrent","id":4357155,"node_id":"MDQ6VXNlcjQzNTcxNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/4357155?v=4","gravatar_id":"","url":"https://api.github.com/users/benwtrent","html_url":"https://github.com/benwtrent","followers_url":"https://api.github.com/users/benwtrent/followers","following_url":"https://api.github.com/users/benwtrent/following{/other_user}","gists_url":"https://api.github.com/users/benwtrent/gists{/gist_id}","starred_url":"https://api.github.com/users/benwtrent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benwtrent/subscriptions","organizations_url":"https://api.github.com/users/benwtrent/orgs","repos_url":"https://api.github.com/users/benwtrent/repos","events_url":"https://api.github.com/users/benwtrent/events{/privacy}","received_events_url":"https://api.github.com/users/benwtrent/received_events","type":"User","site_admin":false},"performed_via_github_app":null}