[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/470645099","html_url":"https://github.com/elastic/elasticsearch/issues/39806#issuecomment-470645099","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39806","id":470645099,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDY0NTA5OQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-03-07T18:42:13Z","updated_at":"2019-03-07T18:42:13Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/470670918","html_url":"https://github.com/elastic/elasticsearch/issues/39806#issuecomment-470670918","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39806","id":470670918,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDY3MDkxOA==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2019-03-07T19:56:41Z","updated_at":"2019-03-07T19:56:41Z","author_association":"MEMBER","body":"> Alternatively, note that it only depends on the cluster state so maybe we can cache it and invalidate the cache on each cluster state update.\r\n\r\nThis sounds reasonable. Even if the state is 100MB or so it shouldn't take that much time to serialise it (I hope at least :)) so it seems like a reasonable improvement.\r\n\r\nThough I wonder, why not just run this serialization on the generic thread pool, just to be safe (we could still cache to save some CPU)?  That would seem like the cleaner approach and the cost of the context switches is probably well worth not having to see this in profiling on the transport thread when trying to reason out where the next slowness/blocker lives :)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/470871150","html_url":"https://github.com/elastic/elasticsearch/issues/39806#issuecomment-470871150","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39806","id":470871150,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MDg3MTE1MA==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2019-03-08T09:54:14Z","updated_at":"2019-03-08T09:54:14Z","author_association":"CONTRIBUTOR","body":"@original-brownbear I was missing knowledge of `PlainListenableActionFuture`. Turns out a cache is quite easy to implement once I discovered that. I opened #39827 which avoids any context switches if the computation is already done, but which runs the serialisation on the generic threadpool if not.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/471177637","html_url":"https://github.com/elastic/elasticsearch/issues/39806#issuecomment-471177637","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39806","id":471177637,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTE3NzYzNw==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2019-03-09T13:37:18Z","updated_at":"2019-03-09T13:37:18Z","author_association":"CONTRIBUTOR","body":"We discussed this and decided we'd like to remove the reporting of the compressed cluster state size here. Ideally we will deprecate this in 6.7 and remove it in 7.0 by following these steps:\r\n\r\n1. Introduce a flag on the cluster state API, `?compressed_cluster_state_size`, and a corresponding flag in a `ClusterStateRequest`, allowing users to suppress this calculation. The flag defaults to `true`. Emit a deprecation warning when processing a `ClusterStateRequest` with this flag set. Backport this change all the way to `6.7`.\r\n2. Remove the calculation, ignoring the flag. Emit a deprecation warning when the flag is mentioned. Backport this change to `7.0`.\r\n3. Remove the flag in `master` only.\r\n\r\nThe BWC involved in the first step seems to be tricky, because we process `ClusterStateRequest`s all over the place. Not only are they used directly in many REST tests (e.g. to find the master) but they are also used to serve other API endpoints like `GET _cluster/settings` and `GET _cat/nodes`. This means that in a mixed 6.7/6.x cluster (x < 7) with a 6.7 master we might call one of these APIs on a 6.6 node and the `ClusterStateRequest` it sends to the master would default this flag to `true`, resulting in a deprecation warning. This causes tests to fail.\r\n\r\nI'm currently stuck trying to work out how best to permit (but not require) this warning to happen only if sending requests via a 6.x node.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/479481315","html_url":"https://github.com/elastic/elasticsearch/issues/39806#issuecomment-479481315","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39806","id":479481315,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3OTQ4MTMxNQ==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2019-04-03T13:07:53Z","updated_at":"2019-04-03T13:07:53Z","author_association":"CONTRIBUTOR","body":"Closed by the PRs above.","performed_via_github_app":null}]