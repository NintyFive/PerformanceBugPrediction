[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/429889855","html_url":"https://github.com/elastic/elasticsearch/issues/34465#issuecomment-429889855","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34465","id":429889855,"node_id":"MDEyOklzc3VlQ29tbWVudDQyOTg4OTg1NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-10-15T15:02:43Z","updated_at":"2018-10-15T15:02:43Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/432010961","html_url":"https://github.com/elastic/elasticsearch/issues/34465#issuecomment-432010961","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34465","id":432010961,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMjAxMDk2MQ==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2018-10-22T22:18:46Z","updated_at":"2018-10-22T22:19:32Z","author_association":"CONTRIBUTOR","body":"Summarizing a discussion on Slack:\r\n\r\nRollover is unique in that it is an Async action, but inherently needs to be run periodically, rather than exactly once as is the case with other async actions (i.e. Shrink).  This makes it very difficult to force it to run only once, especially in the case where rollover has already been run successfully (or partially successfully), but the lifecycle state has not been updated to reflect that fact.\r\n\r\nBefore running the rollover call, we **could** check the `rolloverInfo` in the `IndexMetaData` to see if this index has already been rolled over, and if it has, skip the rollover call, and move to the next lifecycle step.  However, there's no way to tell whether that rollover happened due to ILM or a separate administrative call, but in either case, it's likely that the solution the administrator would take is to simply use the Move to Step API to force the index to the next lifecycle step anyway.\r\n\r\nHowever, even this is not a total solution. Per @talevy:\r\n> rollover action is not transactional, and 1) it will first update aliases 2) add rolloverInfo 3) wait for all shards to be active\r\n> so, master can go down after any one of these. if the cluster goes down before (2) we are stuck, no matter what\r\n\r\nThe solution above would still narrow the window in which the cluster would have to go down in order to cause the index to move to the error step.\r\n\r\nIf anyone has any other thoughts or feedback on this, please add them.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/432146828","html_url":"https://github.com/elastic/elasticsearch/issues/34465#issuecomment-432146828","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34465","id":432146828,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMjE0NjgyOA==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2018-10-23T08:23:56Z","updated_at":"2018-10-23T08:24:19Z","author_association":"CONTRIBUTOR","body":"Would it help to persist more state prior to (1) and/or between (1) and (2) so that if the master changes part-way through then the new master has enough information to pick up where the old one left off? E.g.:\r\n\r\n```\r\n½) update cluster state indicating that a (specific) ILM rollover action is taking place\r\n1) update aliases\r\n1½) update cluster state indicating that the aliases were updated in the action\r\n2) add rolloverInfo\r\n2½) update cluster state indicating success\r\n3) wait for active shards\r\n```\r\n\r\nBy being specific about the changes that are still to be made, a new master can see if they've already been made. E.g. if the master changed between steps 1 and 1½ then the new master would see that there were some aliases to update but also that the aliases look like they've already been correctly updated, and can proceed rather than erroring out.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/432175006","html_url":"https://github.com/elastic/elasticsearch/issues/34465#issuecomment-432175006","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34465","id":432175006,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMjE3NTAwNg==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-10-23T09:40:00Z","updated_at":"2018-10-23T09:40:00Z","author_association":"MEMBER","body":"I spoke to @DaveCTurner about this separately and I think I know whats going on here, and @DaveCTurner has offered what I think might be a good solution.\r\n\r\n### Whats going on?\r\n\r\nI accidentally left out a detail above which is that I had set the poll interval to 1 second. \r\n\r\nWhat I think is happening is that when the cluster restarts a master is elected and triggers the policy in ILM which sends off the rollover API request. At the same time the scheduler is initialised and it also triggers the policy sending off a second rollover API call after a second whilst the first is still in flight. When these return the error is processed first and so we move to the error step.\r\n\r\n### Proposed solution\r\n\r\nHave the `attempt_rollover` step catch `resource_already_exists_exception` and pass the step in this case (after all the new index exists which is what we expect to happen). This leave the case where the new index is created outside of ILM and is not configured with the policy which would be good to catch and warn the user about so we could add a new cluster state step that follows the `attempt_rollover` step that checks to make sure the new index has the `index.lifecycle.name` set correctly.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/432721812","html_url":"https://github.com/elastic/elasticsearch/issues/34465#issuecomment-432721812","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34465","id":432721812,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMjcyMTgxMg==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2018-10-24T16:07:54Z","updated_at":"2018-10-24T16:08:42Z","author_association":"CONTRIBUTOR","body":"After a Zoom discussion with @colings86, @talevy, and @dakrone, we have decided to go forward with Colin's proposed solution of catching `resource_already_exists_exception` and passing to the next step.  This should alleviate the issue of multiple instances of `RolloverStep` executing simultaneously, and we believe this is what an administrator would do in every case anyway. \r\n\r\nIf the new index was created via the Rollover API, simply moving on the with the policy is almost certainly the correct thing to do.\r\n\r\nIn the case where an administrator manually creates the index (e.g the current index is `test-000001` and the admin created `test-000002` before the rollover is triggered), the policy will fail on the `update-rollover-lifecycle-date` step with an `IllegalStateException` as it attempts to access data from the `RolloverInfo` on the index, which will not be present if `test-000002` was created manually, rather than via the Rollover API.\r\n","performed_via_github_app":null}]