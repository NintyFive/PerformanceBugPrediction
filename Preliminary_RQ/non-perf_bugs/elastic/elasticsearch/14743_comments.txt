[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/157546693","html_url":"https://github.com/elastic/elasticsearch/issues/14743#issuecomment-157546693","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14743","id":157546693,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NzU0NjY5Mw==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2015-11-17T23:43:20Z","updated_at":"2015-11-18T00:06:49Z","author_association":"MEMBER","body":"> This is because the LinkedHashMap is cast to a Map, and then it's entry set is iterated on, rather than iterating on the LinkedHashMap itself.\n\nThe `Map#entrySet` method is abstract and is [implemented on `LinkedHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#entrySet--). Even though `LinkedHashMap` extends `HashMap`, because of virtual method dispatch it is the implementation of `entrySet` on `LinkedHashMap` that will be the one invoked at runtime. It is this method that gives the predictable iteration order, and that is the order that the entries will be written to the stream. I wrote a test in #14812 that shows that this order is preserved by the serialization, and it is preserved whether or not the iteration order is insertion order or access order.\n\nCan you explain what led to you thinking that the iteration order is not preserved by serialization? Do you have a reproducible test case that you can share?\n","performed_via_github_app":null}]