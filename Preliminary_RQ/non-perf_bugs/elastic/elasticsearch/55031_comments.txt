[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/611729602","html_url":"https://github.com/elastic/elasticsearch/issues/55031#issuecomment-611729602","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55031","id":611729602,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMTcyOTYwMg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-04-09T20:10:38Z","updated_at":"2020-04-09T20:10:38Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security (:Security/Network)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/612033987","html_url":"https://github.com/elastic/elasticsearch/issues/55031#issuecomment-612033987","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55031","id":612033987,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMjAzMzk4Nw==","user":{"login":"jkakavas","id":10281256,"node_id":"MDQ6VXNlcjEwMjgxMjU2","avatar_url":"https://avatars2.githubusercontent.com/u/10281256?v=4","gravatar_id":"","url":"https://api.github.com/users/jkakavas","html_url":"https://github.com/jkakavas","followers_url":"https://api.github.com/users/jkakavas/followers","following_url":"https://api.github.com/users/jkakavas/following{/other_user}","gists_url":"https://api.github.com/users/jkakavas/gists{/gist_id}","starred_url":"https://api.github.com/users/jkakavas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jkakavas/subscriptions","organizations_url":"https://api.github.com/users/jkakavas/orgs","repos_url":"https://api.github.com/users/jkakavas/repos","events_url":"https://api.github.com/users/jkakavas/events{/privacy}","received_events_url":"https://api.github.com/users/jkakavas/received_events","type":"User","site_admin":false},"created_at":"2020-04-10T13:42:47Z","updated_at":"2020-04-10T13:46:47Z","author_association":"CONTRIBUTOR","body":"I tried with keys using the following curves:\r\n```\r\nsecp256k1 : SECG curve over a 256 bit prime field\r\nsecp384r1 : NIST/SECG curve over a 384 bit prime field\r\nsecp521r1 : NIST/SECG curve over a 521 bit prime field\r\n```\r\n\r\nand for each one of these using `SHA256` and `SHA384` for the certificate signatures, and all 6 outcomes cause the same behavior. \r\n\r\nexample key and certificate generation\r\n```\r\nopenssl ecparam -name secp384r1 -genkey -out key.pem\r\nopenssl req -new -x509 -sha384 -key key.pem -out server.pem -days 730\r\n```\r\n\r\nThe handshake fails after the server sends the message containing `Server hello`, `Change Cipher Spec` and `Application Data` , to which the client ( `curl` or `openssl s_client` ) reply with  an `Alert` with `Fatal` level and an `Illegal Parameter` description. The packet looks like this :\r\n```\r\nNo.     Time           Source                Destination           Protocol Length Info\r\n    344 3127.283492864 127.0.0.1             127.0.0.1             TLSv1.3  75     Alert (Level: Fatal, Description: Illegal Parameter)\r\n\r\nFrame 344: 75 bytes on wire (600 bits), 75 bytes captured (600 bits) on interface 0\r\nLinux cooked capture\r\nInternet Protocol Version 4, Src: 127.0.0.1, Dst: 127.0.0.1\r\nTransmission Control Protocol, Src Port: 50120, Dst Port: 9200, Seq: 518, Ack: 932, Len: 7\r\nTransport Layer Security\r\n    TLSv1.3 Record Layer: Alert (Level: Fatal, Description: Illegal Parameter)\r\n        Content Type: Alert (21)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 2\r\n        Alert Message\r\n            Level: Fatal (2)\r\n            Description: Illegal Parameter (47)\r\n```\r\n\r\nThe problem manifests when EC key and certificates are used for the key material in elasticsearch AND these are configured as PEM files. The same key material added in a keystore work fine and other types of keys (i.e. RSA ) work fine for key material configured as PEM files.\r\n\r\nInterestingly the server hello when using a keystore ( which doesn't cause the failure ) and when using the pem files ( which cause the error ) are not that different. \r\n\r\n##### Server hello that causes client to fail\r\n```\r\nNo.     Time           Source                Destination           Protocol Length Info\r\n    342 3127.283029102 127.0.0.1             127.0.0.1             TLSv1.3  999    Server Hello, Change Cipher Spec, Application Data\r\n\r\nFrame 342: 999 bytes on wire (7992 bits), 999 bytes captured (7992 bits) on interface 0\r\nLinux cooked capture\r\nInternet Protocol Version 4, Src: 127.0.0.1, Dst: 127.0.0.1\r\nTransmission Control Protocol, Src Port: 9200, Dst Port: 50120, Seq: 1, Ack: 518, Len: 931\r\nTransport Layer Security\r\n    TLSv1.3 Record Layer: Handshake Protocol: Server Hello\r\n        Content Type: Handshake (22)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 122\r\n        Handshake Protocol: Server Hello\r\n            Handshake Type: Server Hello (2)\r\n            Length: 118\r\n            Version: TLS 1.2 (0x0303)\r\n            Random: 47d8314f250b74f5663e1628040643aa056d006b22bc545c…\r\n            Session ID Length: 32\r\n            Session ID: 66102923f52ed1561d19d32bbbc4836d6ba54bfc08e5103e…\r\n            Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)\r\n            Compression Method: null (0)\r\n            Extensions Length: 46\r\n            Extension: supported_versions (len=2)\r\n                Type: supported_versions (43)\r\n                Length: 2\r\n                Supported Version: TLS 1.3 (0x0304)\r\n            Extension: key_share (len=36)\r\n                Type: key_share (51)\r\n                Length: 36\r\n                Key Share extension\r\n                    Key Share Entry: Group: x25519, Key Exchange length: 32\r\n                        Group: x25519 (29)\r\n                        Key Exchange Length: 32\r\n                        Key Exchange: 4e0f39e1d9f34ce482ee1f12e4a6f0026b4d70df5def943f…\r\n    TLSv1.3 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\r\n        Content Type: Change Cipher Spec (20)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 1\r\n        Change Cipher Spec Message\r\n    TLSv1.3 Record Layer: Application Data Protocol: Application Data\r\n        Opaque Type: Application Data (23)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 793\r\n        Encrypted Application Data: 6083d7f1e990e0554af40ccf90ad0716eec3a10cc0b4d74d…\r\n```\r\n\r\n##### Server hello that client can handle\r\n```\r\nNo.     Time           Source                Destination           Protocol Length Info\r\n    354 4293.373488091 127.0.0.1             127.0.0.1             TLSv1.3  1031   Server Hello, Change Cipher Spec, Application Data\r\n\r\nFrame 354: 1031 bytes on wire (8248 bits), 1031 bytes captured (8248 bits) on interface 0\r\nLinux cooked capture\r\nInternet Protocol Version 4, Src: 127.0.0.1, Dst: 127.0.0.1\r\nTransmission Control Protocol, Src Port: 9200, Dst Port: 50452, Seq: 1, Ack: 518, Len: 963\r\nTransport Layer Security\r\n    TLSv1.3 Record Layer: Handshake Protocol: Server Hello\r\n        Content Type: Handshake (22)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 122\r\n        Handshake Protocol: Server Hello\r\n            Handshake Type: Server Hello (2)\r\n            Length: 118\r\n            Version: TLS 1.2 (0x0303)\r\n            Random: 6e604e79a1c0cdcda2fbe91a21d86d3b32bd195e4b565f98…\r\n            Session ID Length: 32\r\n            Session ID: 6fe12d9a0a6e7157d7335293be3b895289d08f04431ea21a…\r\n            Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)\r\n            Compression Method: null (0)\r\n            Extensions Length: 46\r\n            Extension: supported_versions (len=2)\r\n                Type: supported_versions (43)\r\n                Length: 2\r\n                Supported Version: TLS 1.3 (0x0304)\r\n            Extension: key_share (len=36)\r\n                Type: key_share (51)\r\n                Length: 36\r\n                Key Share extension\r\n                    Key Share Entry: Group: x25519, Key Exchange length: 32\r\n                        Group: x25519 (29)\r\n                        Key Exchange Length: 32\r\n                        Key Exchange: 00d88691ec250e3be59ac044eed7b455d17bf1d2495ff5a6…\r\n    TLSv1.3 Record Layer: Change Cipher Spec Protocol: Change Cipher Spec\r\n        Content Type: Change Cipher Spec (20)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 1\r\n        Change Cipher Spec Message\r\n    TLSv1.3 Record Layer: Application Data Protocol: Application Data\r\n        Opaque Type: Application Data (23)\r\n        Version: TLS 1.2 (0x0303)\r\n        Length: 825\r\n        Encrypted Application Data: b74c2510ae9bcfc8adb6fa048d814bfc7ffb69c3bfdd7c39…\r\n```\r\n\r\nthe only difference is that the one that succeeds has a slightly bigger payload for Application Data, which might indicate that something is missing in the payload in the failing case. \r\n#### Client behavior \r\n\r\n##### Curl \r\n\r\nFor curl, when failing , it fails with \r\n```\r\n*   Trying 127.0.0.1:9200...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 9200 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* successfully set certificate verify locations:\r\n*   CAfile: none\r\n  CApath: /etc/ssl/certs\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.1 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.1 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.1 (OUT), TLS alert, decrypt error (563):\r\n* error:1416D07B:SSL routines:tls_process_key_exchange:bad signature\r\n* Closing connection 0\r\ncurl: (35) error:1416D07B:SSL routines:tls_process_key_exchange:bad signature\r\n```\r\n\r\nwhile  a successful handshake looks like\r\n```\r\n*   Trying 127.0.0.1:9200...\r\n* TCP_NODELAY set\r\n* Connected to localhost (127.0.0.1) port 9200 (#0)\r\n* ALPN, offering h2\r\n* ALPN, offering http/1.1\r\n* successfully set certificate verify locations:\r\n*   CAfile: none\r\n  CApath: /etc/ssl/certs\r\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\r\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\r\n* TLSv1.1 (IN), TLS handshake, Certificate (11):\r\n* TLSv1.1 (IN), TLS handshake, Server key exchange (12):\r\n* TLSv1.1 (IN), TLS handshake, Server finished (14):\r\n* TLSv1.1 (OUT), TLS handshake, Client key exchange (16):\r\n* TLSv1.1 (OUT), TLS change cipher, Change cipher spec (1):\r\n* TLSv1.1 (OUT), TLS handshake, Finished (20):\r\n* TLSv1.1 (IN), TLS handshake, Finished (20):\r\n* SSL connection using TLSv1.1 / ECDHE-ECDSA-AES256-SHA\r\n* ALPN, server did not agree to a protocol\r\n* Server certificate:\r\n*  subject: <subject DN was here>\r\n*  start date: Mar 18 16:09:54 2020 GMT\r\n*  expire date: Mar 18 16:09:54 2021 GMT\r\n*  issuer: <issuer DN was here>\r\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\r\n> GET / HTTP/1.1\r\n> Host: localhost:9200\r\n> User-Agent: curl/7.65.3\r\n> Accept: */*\r\n```\r\n\r\n##### Openssl s_client\r\n\r\nThis offers an indication\r\n\r\nFailed attempt: \r\n```\r\n---\r\nCertificate chain\r\n 0 s:C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n   i:C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n---\r\nServer certificate\r\n-----BEGIN CERTIFICATE-----\r\nMIICQzCCAcqgAwIBAgIUEqBCZK2/ev5HSDGUUxlo/09Wis4wCgYIKoZIzj0EAwMw\r\nWTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\r\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDESMBAGA1UEAwwJbG9jYWxob3N0MB4XDTIw\r\nMDQxMDA3NDk0OVoXDTIyMDQxMDA3NDk0OVowWTELMAkGA1UEBhMCQVUxEzARBgNV\r\nBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0\r\nZDESMBAGA1UEAwwJbG9jYWxob3N0MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEQy3Z\r\nC9lS5q593qQGpF8Ob0GDbQWN3lNkLcW+VdwQj2s4aw9XLR0vgjymCkEG7IaZ98O8\r\nM6xrEu+bsQ5x3I7HK6zoiCV6OCidb9rRBvGK7hM0Fcxja6t1QvjpL1TeEgnUo1Mw\r\nUTAdBgNVHQ4EFgQUNILtROSSq9Tp2rAxBCbXCUJEx2cwHwYDVR0jBBgwFoAUNILt\r\nROSSq9Tp2rAxBCbXCUJEx2cwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAwNn\r\nADBkAjBnVo8Mtv8yDQ/01UCvLDMQ8xnybVGDvRk2IOiyQPySbLos+WG+0McKoQWp\r\ns8SoknwCMHLvajGF4LKA5U+0qApytEjp6O0qkTE+GzqnvXMRyE28bY8+tqcYHa1S\r\n8r9dq8S+FA==\r\n-----END CERTIFICATE-----\r\nsubject=C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n\r\nissuer=C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n\r\n---\r\nNo client certificate CA names sent\r\nServer Temp Key: X25519, 253 bits\r\n---\r\nSSL handshake has read 929 bytes and written 300 bytes\r\nVerification: OK\r\n---\r\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\r\nServer public key is 384 bit\r\nSecure Renegotiation IS NOT supported\r\nCompression: NONE\r\nExpansion: NONE\r\nNo ALPN negotiated\r\nEarly data was not sent\r\nVerify return code: 0 (ok)\r\n---\r\n```\r\n\r\nwhile the successful attempt contains: \r\n\r\n```\r\n---\r\nCertificate chain\r\n 0 s:C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n   i:C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n---\r\nServer certificate\r\n-----BEGIN CERTIFICATE-----\r\nMIICQzCCAcqgAwIBAgIUEqBCZK2/ev5HSDGUUxlo/09Wis4wCgYIKoZIzj0EAwMw\r\nWTELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGElu\r\ndGVybmV0IFdpZGdpdHMgUHR5IEx0ZDESMBAGA1UEAwwJbG9jYWxob3N0MB4XDTIw\r\nMDQxMDA3NDk0OVoXDTIyMDQxMDA3NDk0OVowWTELMAkGA1UEBhMCQVUxEzARBgNV\r\nBAgMClNvbWUtU3RhdGUxITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0\r\nZDESMBAGA1UEAwwJbG9jYWxob3N0MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEQy3Z\r\nC9lS5q593qQGpF8Ob0GDbQWN3lNkLcW+VdwQj2s4aw9XLR0vgjymCkEG7IaZ98O8\r\nM6xrEu+bsQ5x3I7HK6zoiCV6OCidb9rRBvGK7hM0Fcxja6t1QvjpL1TeEgnUo1Mw\r\nUTAdBgNVHQ4EFgQUNILtROSSq9Tp2rAxBCbXCUJEx2cwHwYDVR0jBBgwFoAUNILt\r\nROSSq9Tp2rAxBCbXCUJEx2cwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAwNn\r\nADBkAjBnVo8Mtv8yDQ/01UCvLDMQ8xnybVGDvRk2IOiyQPySbLos+WG+0McKoQWp\r\ns8SoknwCMHLvajGF4LKA5U+0qApytEjp6O0qkTE+GzqnvXMRyE28bY8+tqcYHa1S\r\n8r9dq8S+FA==\r\n-----END CERTIFICATE-----\r\nsubject=C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n\r\nissuer=C = AU, ST = Some-State, O = Internet Widgits Pty Ltd, CN = localhost\r\n\r\n---\r\nNo client certificate CA names sent\r\nPeer signing digest: SHA384\r\nPeer signature type: ECDSA\r\nServer Temp Key: X25519, 253 bits\r\n---\r\nSSL handshake has read 962 bytes and written 373 bytes\r\nVerification: OK\r\n---\r\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\r\nServer public key is 384 bit\r\nSecure Renegotiation IS NOT supported\r\nCompression: NONE\r\nExpansion: NONE\r\nNo ALPN negotiated\r\nEarly data was not sent\r\nVerify return code: 0 (ok)\r\n---\r\n```\r\n\r\nIt looks like it can recognize that the certificate signature is `ECDSA` with `SHA384`\r\n```\r\nPeer signing digest: SHA384\r\nPeer signature type: ECDSA\r\n```\r\n\r\nwhile in the unsuccessful attempt, this information is missing and this might cause the `bad signature` error we see ( the client doesn't have the information about the signature that it is presented with and thus can't verify it ) \r\n","performed_via_github_app":null}]