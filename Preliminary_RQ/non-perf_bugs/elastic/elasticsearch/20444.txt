{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/20444","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20444/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20444/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20444/events","html_url":"https://github.com/elastic/elasticsearch/issues/20444","id":176592872,"node_id":"MDU6SXNzdWUxNzY1OTI4NzI=","number":20444,"title":"Cluster node unresponsive after parallel search","user":{"login":"xxwikluo","id":22166574,"node_id":"MDQ6VXNlcjIyMTY2NTc0","avatar_url":"https://avatars2.githubusercontent.com/u/22166574?v=4","gravatar_id":"","url":"https://api.github.com/users/xxwikluo","html_url":"https://github.com/xxwikluo","followers_url":"https://api.github.com/users/xxwikluo/followers","following_url":"https://api.github.com/users/xxwikluo/following{/other_user}","gists_url":"https://api.github.com/users/xxwikluo/gists{/gist_id}","starred_url":"https://api.github.com/users/xxwikluo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xxwikluo/subscriptions","organizations_url":"https://api.github.com/users/xxwikluo/orgs","repos_url":"https://api.github.com/users/xxwikluo/repos","events_url":"https://api.github.com/users/xxwikluo/events{/privacy}","received_events_url":"https://api.github.com/users/xxwikluo/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-09-13T09:30:33Z","updated_at":"2016-09-13T10:46:30Z","closed_at":"2016-09-13T09:36:14Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\nGitHub is reserved for bug reports and feature requests. The best place\nto ask a general question is at the Elastic Discourse forums at\nhttps://discuss.elastic.co. If you are in fact posting a bug report or\na feature request, please include one and only one of the below blocks\nin your new issue. Note that whether you're filing a bug report or a\nfeature request, ensure that your submission is for an\n[OS that we support](https://www.elastic.co/support/matrix#show_os).\nBug reports on an OS that we do not support or feature requests\nspecific to an OS that we do not support will be closed.\n-->\n\n<!--\nIf you are filing a bug report, please remove the below feature\nrequest block and provide responses for all of the below items.\n-->\n\n**Elasticsearch version**: 2.3.1\n\n**Plugins installed**: [head (+ our custom plugin)]\n\n**JVM version**: 1.8.0_40\n\n**OS version**: 2.6.32-358.23.2.el6.x86_64 (Linux)\n\n**Description of the problem including expected versus actual behavior**:\nHi, we're developing a custom plugin in Java with some restActions and we're experiencing some cluster node hangs/unresponsiveness after running some of our custom endpoints where we are doing some searches in parallel with a shared instance of org.elasticsearch.client.Client. Only the node handling the request is affected from what I could see.\n\nOur cluster is running 3 nodes where two are masters and one is a data node.\n\nI have been unable to reproduce the issue in a test environment running a single node (one shard, no replicas) on win7, but can constantly reproduce otherwise with the rest endpoint example below.\nUsually it requires a couple of refreshes (1-5) before hanging.\n\nWhen the node goes unresponsive not every operation seizes, for example another of our end points (not doing a `search` but only a simple `get`) will still work. Noted that `_cat/plugins` will become unresponsive but `_node/node_name/_all` still works.\n\nTests without the threading part seem to yield no issues; but client instances are supposedly thread safe and adding synchronization doesn't help.\n\nSearching on the issue have yielded little fruit, so any input is welcome.\n\n**Example code**\n\n```\npackage com.xxx.es.test.rest;\n\nimport static org.elasticsearch.rest.RestRequest.Method.GET;\n\nimport org.elasticsearch.action.ActionListener;\nimport org.elasticsearch.action.get.GetRequest;\nimport org.elasticsearch.action.get.GetResponse;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.common.inject.Inject;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.rest.BaseRestHandler;\nimport org.elasticsearch.rest.BytesRestResponse;\nimport org.elasticsearch.rest.RestChannel;\nimport org.elasticsearch.rest.RestController;\nimport org.elasticsearch.rest.RestRequest;\nimport org.elasticsearch.rest.RestStatus;\n\npublic class TestAction extends BaseRestHandler {\n\n    final static String EVENTS_INDEX = \"allevents\";\n    final static String TYPE = \"documents\";\n    private String eventIndices;\n\n    @Inject\n    public TestAction(Settings settings, RestController controller, Client client) {\n        super(settings, controller, client);\n        this.eventIndices = settings.get(\"indexes.events\", EVENTS_INDEX);\n        controller.registerHandler(GET, \"/_test/{id}\", this);\n    }\n\n    @Override\n    protected void handleRequest(RestRequest request, RestChannel channel, Client client) throws Exception {\n        final String id1 = request.param(\"id\");\n\n        GetRequest getRequest = new GetRequest(this.eventIndices.trim().split(\"//s*,//s*\")[0], TYPE, id1);\n\n        client.get(getRequest, new ActionListener<GetResponse>() {\n\n            @Override\n            public void onResponse(GetResponse response) {\n\n                Thread[] threads = new Thread[2];\n                for (int i = 0; i < threads.length; i++) {\n                    threads[i] = new Thread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            SearchResponse srsp = client.prepareSearch(\n                                    eventIndices.trim().split(\"//s*,//s*\"))\n                                    .setTypes(TYPE)\n                                    .setSize(0)\n                                    .execute().actionGet();\n                        }\n                    });\n                    threads[i].run();\n                }\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, \"Done.\"));\n            }\n\n            @Override\n            public void onFailure(Throwable e) {}\n        });\n    }\n}\n```\n\n**Steps to reproduce**:\n1. Setup a cluster and make a plugin with the test rest endpoint\n2. Run the endpoint a few times (5~6)\n3. Experience a 502 Proxy Error as the node becomes unresponsive.\n\n**Provide logs (if relevant)**:\nexcerpt from jstack on the unresponsive node:\n\n```\nelasticsearch[es102-xxx][transport_client_worker][T#1]{New I/O worker #1}\" #18 daemon prio=5 os_prio=0 tid=0x00007fbaa950a800 nid=0x4746 waiting on condition [0x00\n007fba88b33000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x0000000603b06e10> (a org.elasticsearch.common.util.concurrent.BaseFuture$Sync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\n        at org.elasticsearch.common.util.concurrent.BaseFuture$Sync.get(BaseFuture.java:276)\n        at org.elasticsearch.common.util.concurrent.BaseFuture.get(BaseFuture.java:116)\n        at org.elasticsearch.action.support.AdapterActionFuture.actionGet(AdapterActionFuture.java:42)\n        at com.xxx.es.test.rest.TestAction$1$1.run(TestAction.java:53)\n        at java.lang.Thread.run(Thread.java:745)\n        at com.xxx.es.test.rest.TestAction$1.onResponse(TestAction.java:56)\n...\n```\n","closed_by":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"performed_via_github_app":null}