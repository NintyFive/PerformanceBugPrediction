[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/20743679","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-20743679","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":20743679,"node_id":"MDEyOklzc3VlQ29tbWVudDIwNzQzNjc5","user":{"login":"damienalexandre","id":225704,"node_id":"MDQ6VXNlcjIyNTcwNA==","avatar_url":"https://avatars2.githubusercontent.com/u/225704?v=4","gravatar_id":"","url":"https://api.github.com/users/damienalexandre","html_url":"https://github.com/damienalexandre","followers_url":"https://api.github.com/users/damienalexandre/followers","following_url":"https://api.github.com/users/damienalexandre/following{/other_user}","gists_url":"https://api.github.com/users/damienalexandre/gists{/gist_id}","starred_url":"https://api.github.com/users/damienalexandre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/damienalexandre/subscriptions","organizations_url":"https://api.github.com/users/damienalexandre/orgs","repos_url":"https://api.github.com/users/damienalexandre/repos","events_url":"https://api.github.com/users/damienalexandre/events{/privacy}","received_events_url":"https://api.github.com/users/damienalexandre/received_events","type":"User","site_admin":false},"created_at":"2013-07-10T13:58:23Z","updated_at":"2013-07-10T13:58:23Z","author_association":"CONTRIBUTOR","body":"When I have this kind of error, I'm always opening my ElasticSearch logs. Errors are way more complete and usefull in there! Look at what I get for an undesirable `,` at the end of my query: https://gist.github.com/damienalexandre/5966477#file-gistfile1-txt-L38\n\nI have the full stack trace, and the exception line 38:\n\n> org.elasticsearch.common.jackson.core.JsonParseException: Unexpected character ('}' (code 125)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\n\nAnd my query is readable, as I sent it.\n\nI agree that errors returned by the API could be improved :+1: \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/54601040","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-54601040","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":54601040,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NjAxMDQw","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2014-09-05T09:01:56Z","updated_at":"2014-09-05T09:01:56Z","author_association":"CONTRIBUTOR","body":"I think the right long-term answer here (for query parse failures at least) is to change our query parsing logic so that when it encounters an error it can somehow annotate the point in the original JSON with the exact problem in the same way search highlighting shows where search terms are found in text or an IDE might highlight a compilation error.\n\nThis is clearly an ambitious goal so marking this issue as \"high hanging fruit\" in order to explore what can be done there. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/54626027","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-54626027","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":54626027,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NjI2MDI3","user":{"login":"missinglink","id":738069,"node_id":"MDQ6VXNlcjczODA2OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/738069?v=4","gravatar_id":"","url":"https://api.github.com/users/missinglink","html_url":"https://github.com/missinglink","followers_url":"https://api.github.com/users/missinglink/followers","following_url":"https://api.github.com/users/missinglink/following{/other_user}","gists_url":"https://api.github.com/users/missinglink/gists{/gist_id}","starred_url":"https://api.github.com/users/missinglink/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/missinglink/subscriptions","organizations_url":"https://api.github.com/users/missinglink/orgs","repos_url":"https://api.github.com/users/missinglink/repos","events_url":"https://api.github.com/users/missinglink/events{/privacy}","received_events_url":"https://api.github.com/users/missinglink/received_events","type":"User","site_admin":false},"created_at":"2014-09-05T13:42:25Z","updated_at":"2014-09-05T14:04:09Z","author_association":"CONTRIBUTOR","body":"In the case of `json` parser errors, I agree with @markharwood  that ideally it would behave somewhat like the `js` parser in nodejs; which highlights the position the error occurred and facilitates rapid debugging.\n\n``` bash\n/tmp/broken.js:5\nvar broken code here;\n           ^^^^\nSyntaxError: Unexpected identifier\n```\n\nThis however is presentation logic which should not be the role of the API layer; however if it provided such granular information that allowed me to produce a view like the above then I'd be pretty happy.\n\nThe general issue is that the error messages don't appear to be machine readable nor human readable.\n\nIn the gist example above, the message I am scanning for is:\n`JsonParseException[Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\\n at [Source: [B@16953ad9; line: 2, column: 13]]`\n\nThe rest of the message is pretty much just noise and contains a bunch of characters which make machine parsing this section very difficult. Also any attempt to parse error messages in such a way would be very bad practise as they are bound to change over time.\n\nSince we're talking `json` I think a familiar model for the errors could be one similar to the [native javascript Error object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) and would look roughly something like this:\n\n``` javascript\n{\n  \"error\": \"I exist for backward compatibility\",\n  \"status\": 500,\n  \"message\": \"I am a human readable short description of the error\",\n  \"class\": \"I am the Class of the error\",\n  \"lineNumber\": \"I am very useful\",\n  \"columnNumber\": \"as am I\",\n  \"input\": \"I am the original input as related to the line and column numbers\"\n}\n```\n\nI guess the discussion should really be about how external errors are modelled, as they are currently not structured at all?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/58176276","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-58176276","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":58176276,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTc2Mjc2","user":{"login":"missinglink","id":738069,"node_id":"MDQ6VXNlcjczODA2OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/738069?v=4","gravatar_id":"","url":"https://api.github.com/users/missinglink","html_url":"https://github.com/missinglink","followers_url":"https://api.github.com/users/missinglink/followers","following_url":"https://api.github.com/users/missinglink/following{/other_user}","gists_url":"https://api.github.com/users/missinglink/gists{/gist_id}","starred_url":"https://api.github.com/users/missinglink/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/missinglink/subscriptions","organizations_url":"https://api.github.com/users/missinglink/orgs","repos_url":"https://api.github.com/users/missinglink/repos","events_url":"https://api.github.com/users/missinglink/events{/privacy}","received_events_url":"https://api.github.com/users/missinglink/received_events","type":"User","site_admin":false},"created_at":"2014-10-07T12:28:53Z","updated_at":"2014-10-07T12:28:53Z","author_association":"CONTRIBUTOR","body":"@polyfractal I saw you wrote a 'pretty error' parser for inquisitor, do you have any suggestions? \n\nref: https://github.com/polyfractal/elasticsearch-inquisitor#pretty-errors\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/58267573","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-58267573","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":58267573,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MjY3NTcz","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2014-10-07T21:40:15Z","updated_at":"2014-10-07T21:40:15Z","author_association":"MEMBER","body":"@missinglink Not much useful help, unfortunately.  The parser in Inquisitor is _very_ naive.  It recognizes that ES exceptions tend to be large blocks of exceptions surrounded by brackets (`[...]`), with interior exceptions starting with `nested:`. It [uses those two rules to split](https://github.com/polyfractal/elasticsearch-inquisitor/blob/master/_site/js/controllers/QueryInput.js#L94-L114).\n\nIt's a good \"80%\" solution, but fails for a variety of exceptions that don't follow the same pattern.  And it definitely doesn't produce machine-readable output, just something that humans can digest (since the most \"interior\" exception is usually the one you want, that's what Inquisitor shows as the main error)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/58685021","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-58685021","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":58685021,"node_id":"MDEyOklzc3VlQ29tbWVudDU4Njg1MDIx","user":{"login":"rashidkpc","id":1250387,"node_id":"MDQ6VXNlcjEyNTAzODc=","avatar_url":"https://avatars1.githubusercontent.com/u/1250387?v=4","gravatar_id":"","url":"https://api.github.com/users/rashidkpc","html_url":"https://github.com/rashidkpc","followers_url":"https://api.github.com/users/rashidkpc/followers","following_url":"https://api.github.com/users/rashidkpc/following{/other_user}","gists_url":"https://api.github.com/users/rashidkpc/gists{/gist_id}","starred_url":"https://api.github.com/users/rashidkpc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rashidkpc/subscriptions","organizations_url":"https://api.github.com/users/rashidkpc/orgs","repos_url":"https://api.github.com/users/rashidkpc/repos","events_url":"https://api.github.com/users/rashidkpc/events{/privacy}","received_events_url":"https://api.github.com/users/rashidkpc/received_events","type":"User","site_admin":false},"created_at":"2014-10-10T17:06:30Z","updated_at":"2014-10-10T17:06:30Z","author_association":"NONE","body":"This is really important for Kibana as well, right now we have a rather difficult time informing the user what went wrong. +1 to the modeling it on the javascript error object. Error types/codes might be useful as well.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/62231129","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-62231129","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":62231129,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMjMxMTI5","user":{"login":"zakmagnus","id":1757886,"node_id":"MDQ6VXNlcjE3NTc4ODY=","avatar_url":"https://avatars2.githubusercontent.com/u/1757886?v=4","gravatar_id":"","url":"https://api.github.com/users/zakmagnus","html_url":"https://github.com/zakmagnus","followers_url":"https://api.github.com/users/zakmagnus/followers","following_url":"https://api.github.com/users/zakmagnus/following{/other_user}","gists_url":"https://api.github.com/users/zakmagnus/gists{/gist_id}","starred_url":"https://api.github.com/users/zakmagnus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zakmagnus/subscriptions","organizations_url":"https://api.github.com/users/zakmagnus/orgs","repos_url":"https://api.github.com/users/zakmagnus/repos","events_url":"https://api.github.com/users/zakmagnus/events{/privacy}","received_events_url":"https://api.github.com/users/zakmagnus/received_events","type":"User","site_admin":false},"created_at":"2014-11-07T23:32:14Z","updated_at":"2014-11-07T23:32:14Z","author_association":"NONE","body":"What if the \"parse error\" is just that the query is too long? It might not be a good idea to parrot the entire thing back out to the caller. Also, note how silly it is that each of your shards gives you the same exact error. Constructing that string in memory (again, consider the case of an overlong query) might kill your node. If you OOM trying to build an error message, then you're going to receive a very unhelpful response.\n\nHere is a thought: why is it necessary for the response to contain the request? Shouldn't the requester already know what its own request looks like? It seems reasonable to me that if the response is just \"parse error starting at character ###, unexpected XYZ\", then the requester can reasonably be expected to piece that together into a pretty display if it cares to.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/62259031","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-62259031","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":62259031,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMjU5MDMx","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2014-11-08T14:15:17Z","updated_at":"2014-11-08T14:15:17Z","author_association":"MEMBER","body":"> What if the \"parse error\" is just that the query is too long? It might not be a good idea to parrot the entire thing back out to the caller. Constructing that string in memory (again, consider the case of an overlong query) might kill your node. If you OOM trying to build an error message, then you're going to receive a very unhelpful response.\n\nThis generally isn't a problem, since ES places a limit on the size of the request body via the `http.max_content_length` setting (which defaults to 100mb).  \n\nSo unless the limit has been set unreasonably high, or the search threadpool has been increased to allow an unreasonable number of queries to execute simultaneously, I think it is unlikely you would get an OOM in this particular part of the code.\n\nNote: if the query would have caused an OOM when writing the parse error exception, it probably would have triggered an exception upstream in the networking stack first :)\n\n> Also, note how silly it is that each of your shards gives you the same exact error. \n\nIt's possible, although not common, for shards to return different errors (e.g. forgot to install a plugin on one node, different mappings if searching cross-index, corruption, etc).  \n\n> Here is a thought: why is it necessary for the response to contain the request? Shouldn't the requester already know what its own request looks like? It seems reasonable to me that if the response is just \"parse error starting at character ###, unexpected XYZ\", then the requester can reasonably be expected to piece that together into a pretty display if it cares to.\n\nI agree with your sentiment, but you'd be surprised (or disappointed) at how many production environments don't log their own queries.  Many systems have no idea what's going through them and rely on the ES logs for retrospective analysis.\n\nI think removing the queries from the exceptions would make them even more irritating, since many people don't log their own queries client-side.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/62319462","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-62319462","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":62319462,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMzE5NDYy","user":{"login":"zakmagnus","id":1757886,"node_id":"MDQ6VXNlcjE3NTc4ODY=","avatar_url":"https://avatars2.githubusercontent.com/u/1757886?v=4","gravatar_id":"","url":"https://api.github.com/users/zakmagnus","html_url":"https://github.com/zakmagnus","followers_url":"https://api.github.com/users/zakmagnus/followers","following_url":"https://api.github.com/users/zakmagnus/following{/other_user}","gists_url":"https://api.github.com/users/zakmagnus/gists{/gist_id}","starred_url":"https://api.github.com/users/zakmagnus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zakmagnus/subscriptions","organizations_url":"https://api.github.com/users/zakmagnus/orgs","repos_url":"https://api.github.com/users/zakmagnus/repos","events_url":"https://api.github.com/users/zakmagnus/events{/privacy}","received_events_url":"https://api.github.com/users/zakmagnus/received_events","type":"User","site_admin":false},"created_at":"2014-11-09T21:01:49Z","updated_at":"2014-11-09T21:01:49Z","author_association":"NONE","body":"I have actually seen OOM's like this. The problem is not the raw amount of data, but rather the fact that it all gets concatenated together into one contiguous string. Also, again, each shard reports the same thing, with the original query embedded in it. So, it tries to build up a string of length roughly (number of shards) x (length of query). That can be much longer than any individual request is allowed to be.\n\nI am indeed surprised to learn that many clients apparently don't know what query they're getting a response for. I didn't think about anything like that when I made my suggestion. Still, how about making it somehow configurable, whether the original request has to be part of an error message? The realistic set of clients should be supported, but I also think that reasonable clients should have a way to operate reasonably. If it's configurable, then everyone can have what they need.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/76969450","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-76969450","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":76969450,"node_id":"MDEyOklzc3VlQ29tbWVudDc2OTY5NDUw","user":{"login":"rashidkpc","id":1250387,"node_id":"MDQ6VXNlcjEyNTAzODc=","avatar_url":"https://avatars1.githubusercontent.com/u/1250387?v=4","gravatar_id":"","url":"https://api.github.com/users/rashidkpc","html_url":"https://github.com/rashidkpc","followers_url":"https://api.github.com/users/rashidkpc/followers","following_url":"https://api.github.com/users/rashidkpc/following{/other_user}","gists_url":"https://api.github.com/users/rashidkpc/gists{/gist_id}","starred_url":"https://api.github.com/users/rashidkpc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rashidkpc/subscriptions","organizations_url":"https://api.github.com/users/rashidkpc/orgs","repos_url":"https://api.github.com/users/rashidkpc/repos","events_url":"https://api.github.com/users/rashidkpc/events{/privacy}","received_events_url":"https://api.github.com/users/rashidkpc/received_events","type":"User","site_admin":false},"created_at":"2015-03-03T15:41:35Z","updated_at":"2015-03-03T15:41:35Z","author_association":"NONE","body":"Any additional thoughts on the `?pretty` method of returning developer/machine friendly errors? I'd love to at least get the name of the exceptions involved in an array. Ideally with key information points about each. But at least the names of the exceptions.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/91694988","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-91694988","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":91694988,"node_id":"MDEyOklzc3VlQ29tbWVudDkxNjk0OTg4","user":{"login":"rashidkpc","id":1250387,"node_id":"MDQ6VXNlcjEyNTAzODc=","avatar_url":"https://avatars1.githubusercontent.com/u/1250387?v=4","gravatar_id":"","url":"https://api.github.com/users/rashidkpc","html_url":"https://github.com/rashidkpc","followers_url":"https://api.github.com/users/rashidkpc/followers","following_url":"https://api.github.com/users/rashidkpc/following{/other_user}","gists_url":"https://api.github.com/users/rashidkpc/gists{/gist_id}","starred_url":"https://api.github.com/users/rashidkpc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rashidkpc/subscriptions","organizations_url":"https://api.github.com/users/rashidkpc/orgs","repos_url":"https://api.github.com/users/rashidkpc/repos","events_url":"https://api.github.com/users/rashidkpc/events{/privacy}","received_events_url":"https://api.github.com/users/rashidkpc/received_events","type":"User","site_admin":false},"created_at":"2015-04-10T21:23:43Z","updated_at":"2015-04-10T21:23:43Z","author_association":"NONE","body":"**poke**\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/92504776","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-92504776","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":92504776,"node_id":"MDEyOklzc3VlQ29tbWVudDkyNTA0Nzc2","user":{"login":"szeitlin","id":5185401,"node_id":"MDQ6VXNlcjUxODU0MDE=","avatar_url":"https://avatars0.githubusercontent.com/u/5185401?v=4","gravatar_id":"","url":"https://api.github.com/users/szeitlin","html_url":"https://github.com/szeitlin","followers_url":"https://api.github.com/users/szeitlin/followers","following_url":"https://api.github.com/users/szeitlin/following{/other_user}","gists_url":"https://api.github.com/users/szeitlin/gists{/gist_id}","starred_url":"https://api.github.com/users/szeitlin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szeitlin/subscriptions","organizations_url":"https://api.github.com/users/szeitlin/orgs","repos_url":"https://api.github.com/users/szeitlin/repos","events_url":"https://api.github.com/users/szeitlin/events{/privacy}","received_events_url":"https://api.github.com/users/szeitlin/received_events","type":"User","site_admin":false},"created_at":"2015-04-13T21:24:45Z","updated_at":"2015-04-13T21:24:45Z","author_association":"NONE","body":"yeah, I second this request. I just got one of these errors. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/92722917","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-92722917","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":92722917,"node_id":"MDEyOklzc3VlQ29tbWVudDkyNzIyOTE3","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2015-04-14T09:43:19Z","updated_at":"2015-04-14T09:43:19Z","author_association":"CONTRIBUTOR","body":"@s1monw  is keen to overhaul the parser framework and so this issue is likely to be addressed as part of that activity. Currently all data nodes parse the same JSON query and generally report the same parse issues. In Simon's proposal only the receiving node performs parsing/validation and for valid queries sends out non-JSON representations of the query to data nodes for execution. This is a big change and so improved error management will be addressed as part of that refactoring.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/92764101","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-92764101","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":92764101,"node_id":"MDEyOklzc3VlQ29tbWVudDkyNzY0MTAx","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-04-14T10:43:39Z","updated_at":"2015-04-14T10:43:39Z","author_association":"CONTRIBUTOR","body":"+1 to what @markharwood said. It's not helpful to add half baked solutions IMO we should get these exceptions when we parse the query and then we can render all the required things. Today we do that too late (on the executing node) and we are moving query parsing to the coordinating node (REST node) so we can throw the right exception and render more infos. I like to do these things right even if it takes much longer sorry for the delay.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/93117523","html_url":"https://github.com/elastic/elasticsearch/issues/3303#issuecomment-93117523","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3303","id":93117523,"node_id":"MDEyOklzc3VlQ29tbWVudDkzMTE3NTIz","user":{"login":"rashidkpc","id":1250387,"node_id":"MDQ6VXNlcjEyNTAzODc=","avatar_url":"https://avatars1.githubusercontent.com/u/1250387?v=4","gravatar_id":"","url":"https://api.github.com/users/rashidkpc","html_url":"https://github.com/rashidkpc","followers_url":"https://api.github.com/users/rashidkpc/followers","following_url":"https://api.github.com/users/rashidkpc/following{/other_user}","gists_url":"https://api.github.com/users/rashidkpc/gists{/gist_id}","starred_url":"https://api.github.com/users/rashidkpc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rashidkpc/subscriptions","organizations_url":"https://api.github.com/users/rashidkpc/orgs","repos_url":"https://api.github.com/users/rashidkpc/repos","events_url":"https://api.github.com/users/rashidkpc/events{/privacy}","received_events_url":"https://api.github.com/users/rashidkpc/received_events","type":"User","site_admin":false},"created_at":"2015-04-14T23:52:53Z","updated_at":"2015-04-15T15:01:08Z","author_association":"NONE","body":"Important to consider this isn't limited to query parsing. This goes much deeper than the node that generates the error.\n\nSimply moving validation to the coordinating node won't fix the premise of this ticket, which is that that REST errors are neither human nor machine readable. For example, invalid scripts will return a concatenated string leaving us with no way to tell the user what went wrong. \n\n```\n{\n    \"responses\": [\n        {\n            \"error\": \"SearchPhaseExecutionException[Failed to execute phase [query], all shards failed; shardFailures {[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.09][0]: SearchParseException[[logstash-2015.04.09][0]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@364f85f>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.10][0]: SearchParseException[[logstash-2015.04.10][0]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@222fa4da>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.11][0]: SearchParseException[[logstash-2015.04.11][0]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@6c4d674c>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.12][0]: SearchParseException[[logstash-2015.04.12][0]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@4db8e620>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.13][0]: SearchParseException[[logstash-2015.04.13][0]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@2ecffeb5>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.13][1]: SearchParseException[[logstash-2015.04.13][1]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@4db8e620>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.14][1]: SearchParseException[[logstash-2015.04.14][1]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@595b3515>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.13][2]: SearchParseException[[logstash-2015.04.13][2]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@6c4d674c>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.14][2]: SearchParseException[[logstash-2015.04.14][2]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@57f2c505>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.13][3]: SearchParseException[[logstash-2015.04.13][3]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@57f2c505>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.14][3]: SearchParseException[[logstash-2015.04.14][3]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@6ceec13a>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.13][4]: SearchParseException[[logstash-2015.04.13][4]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@65eff5be>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }{[Y0G3ct1dSgir04D--V8XEA][logstash-2015.04.14][4]: SearchParseException[[logstash-2015.04.14][4]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[-1],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@18841706>!]: Parse Failure [Failed to parse source [{\\\"size\\\":500,\\\"sort\\\":{\\\"@timestamp\\\":\\\"desc\\\"},\\\"query\\\":{\\\"filtered\\\":{\\\"query\\\":{\\\"query_string\\\":{\\\"analyze_wildcard\\\":true,\\\"query\\\":\\\"Squirrels*\\\"}},\\\"filter\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"range\\\":{\\\"@timestamp\\\":{\\\"gte\\\":1428649200000,\\\"lte\\\":1429426799999}}}],\\\"must_not\\\":[]}}}},\\\"highlight\\\":{\\\"pre_tags\\\":[\\\"@kibana-highlighted-field@\\\"],\\\"post_tags\\\":[\\\"@/kibana-highlighted-field@\\\"],\\\"fields\\\":{\\\"*\\\":{}}},\\\"aggs\\\":{\\\"2\\\":{\\\"date_histogram\\\":{\\\"field\\\":\\\"@timestamp\\\",\\\"interval\\\":\\\"3h\\\",\\\"pre_zone\\\":\\\"-07:00\\\",\\\"pre_zone_adjust_large_interval\\\":true,\\\"min_doc_count\\\":0,\\\"extended_bounds\\\":{\\\"min\\\":1428649200000,\\\"max\\\":1429426799999}}}},\\\"fields\\\":[\\\"*\\\",\\\"_source\\\"],\\\"script_fields\\\":{\\\"chunk\\\":{\\\"script\\\":\\\"deadbeef\\\",\\\"lang\\\":\\\"expression\\\"}},\\\"fielddata_fields\\\":[\\\"@timestamp\\\",\\\"utc_time\\\",\\\"relatedContent.article:modified_time\\\",\\\"relatedContent.article:published_time\\\"]}]]]; nested: ExpressionScriptCompilationException[Unknown variable [deadbeef] in expression]; }]\"\n        }\n    ]\n}\n```\n\nIn this it would be great to get something like (could certainly be improved upon):\n\n```\n[{\n exception: \"ExpressionScriptCompilationException\",\n details: {\n  type: \"UnknownVar\",\n  variable: \"deadbeef\"\n }\n}]\n```\n\nOr if a shard fails due to corruption, all we can tell the user is that the shard failed, we have no idea why, and neither do they. \n\n```\n\"failures\": [\n                    {\n                        \"index\": \"logstash-2015.04.14\",\n                        \"shard\": 1,\n                        \"status\": 500,\n                        \"reason\": \"QueryPhaseExecutionException[[logstash-2015.04.14][1]: query[filtered(_all:squirrels*)->BooleanFilter(+cache(@timestamp:[1428649200000 TO 1429426799999]))],from[0],size[500],sort[<custom:\\\"@timestamp\\\": org.elasticsearch.index.fielddata.fieldcomparator.LongValuesComparatorSource@2b92372>!]: Query Failed [Failed to execute main query]]; nested: RuntimeException[java.io.IOException: read past EOF: NIOFSIndexInput(path=\\\"/Users/khanr/Projects/elasticsearch/data/beer/nodes/0/indices/logstash-2015.04.14/1/index/_a_Lucene41_0.tim\\\") off: 0 len: 1024 pos: 9943 chunkLen: 1024 end: 25880: NIOFSIndexInput(path=\\\"/Users/khanr/Projects/elasticsearch/data/beer/nodes/0/indices/logstash-2015.04.14/1/index/_a_Lucene41_0.tim\\\")]; nested: IOException[read past EOF: NIOFSIndexInput(path=\\\"/Users/khanr/Projects/elasticsearch/data/beer/nodes/0/indices/logstash-2015.04.14/1/index/_a_Lucene41_0.tim\\\") off: 0 len: 1024 pos: 9943 chunkLen: 1024 end: 25880: NIOFSIndexInput(path=\\\"/Users/khanr/Projects/elasticsearch/data/beer/nodes/0/indices/logstash-2015.04.14/1/index/_a_Lucene41_0.tim\\\")]; nested: EOFException[read past EOF: NIOFSIndexInput(path=\\\"/Users/khanr/Projects/elasticsearch/data/beer/nodes/0/indices/logstash-2015.04.14/1/index/_a_Lucene41_0.tim\\\") off: 0 len: 1024 pos: 9943 chunkLen: 1024 end: 25880]; \"\n                    }\n                ]\n```\n\nHere I'd love to have:\n\n```\n[{\n exception: \"EOFException\",\n details: {\n  type: \"ReadPastEOF\",\n  path: \"/Users/khanr/Projects/elasticsearch/data/beer/nodes/0/indices/logstash-2015.04.14/1/index/_a_Lucene41_0.tim\",\n  off: 0, \n  len: 1024, \n  pos: 9943, \n  chunkLen: 1024, \n  end: 25880\n }\n}]\n```\n","performed_via_github_app":null}]