{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/636","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/636/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/636/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/636/events","html_url":"https://github.com/elastic/elasticsearch/issues/636","id":536763,"node_id":"MDU6SXNzdWU1MzY3NjM=","number":636,"title":"Percolate on Index and Bulk","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":65354,"node_id":"MDU6TGFiZWw2NTM1NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.15.0","name":"v0.15.0","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2011-01-19T14:45:08Z","updated_at":"2011-01-19T14:46:14Z","closed_at":"2011-01-19T14:46:14Z","author_association":"MEMBER","active_lock_reason":null,"body":"The index and bulk operation (for index bulk items) can now be automatically percolated and return the queries they matched on. The `percolate` parameter can be passed to control which percolation queries should be used (it follows the query string format). For example:\n\nCreate an index we will work on:\n\n```\ncurl -XPUT localhost:9200/test\n```\n\nNext, we will register a percolator query with a specific name called `kuku` against the `test` index:\n\n```\ncurl -XPUT localhost:9200/_percolator/test/kuku?refresh=true -d '{\n    \"color\" : \"blue\",\n    \"query\" : {\n        \"term\" : {\n            \"field1\" : \"value1\"\n        }\n    }\n}'\n```\n\nAnd now, we will index a doc, that has `field1` set to `value1`, and have it percolate:\n\n```\ncurl -XPUT localhost:9200/test/type1/1?percolate=* -d '{\n    \"field1\" : \"value1\"\n}'\n```\n\nWe will get this response:\n\n```\n{\"ok\":true,\"_index\":\"test\",\"_type\":\"type1\",\"_id\":\"1\",\"_version\":2,\"matches\":[\"kuku\"]}\n```\n\nPercolation query filtering is simple to do, lets register another query, for `bubu`, but now with `color` set to `green` and matching on `field2`:\n\n```\ncurl -XPUT localhost:9200/_percolator/test/bubu?refresh=true -d '{\n    \"color\" : \"green\",\n    \"query\" : {\n        \"term\" : {\n            \"field2\" : \"value2\"\n        }\n    }\n}'\n```\n\nNow, we can control which queries can be executed, for example:\n\n```\ncurl -XPUT localhost:9200/test/type1/1?percolate=* -d '{\n    \"field1\" : \"value1\",\n    \"field2\" : \"value2\"\n}'\n\ncurl -XPUT localhost:9200/test/type1/1?percolate=color:green -d '{\n    \"field1\" : \"value1\",\n    \"field2\" : \"value2\"\n}'\n\ncurl -XPUT localhost:9200/test/type1/1?percolate=color:blue -d '{\n    \"field1\" : \"value1\",\n    \"field2\" : \"value2\"\n}'\n```\n## Implementation Details\n\nPercolation on index operation is done while optimizing the distributed nature of elasticsearch. Once the index operation is done on the primary shard, it is sent to all the replicas, and while the operation is done on the replicas, the percolation is executed on the node hosting the primary shard. Also, the parsing operation done on the primary shard is reused for the percolation operation.\n","closed_by":null,"performed_via_github_app":null}