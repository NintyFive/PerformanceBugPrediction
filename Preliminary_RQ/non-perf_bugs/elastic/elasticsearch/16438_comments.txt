[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/179646532","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-179646532","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":179646532,"node_id":"MDEyOklzc3VlQ29tbWVudDE3OTY0NjUzMg==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T05:27:45Z","updated_at":"2016-02-04T05:27:45Z","author_association":"MEMBER","body":"Maybe I'm misunderstanding, but it sounds like you want the semantics of create not upsert, and you want the second creation attempt to fail? That is, you want the loser of the race to fail. Elasticsearch provides this is with the [index API if you use `_create` on the request](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#operation-type).\n\nFor future reference, questions like this are best asked on the [Elastic Discourse forums](https://discuss.elastic.co). GitHub is reserved for bug reports and feature requests.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/179651735","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-179651735","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":179651735,"node_id":"MDEyOklzc3VlQ29tbWVudDE3OTY1MTczNQ==","user":{"login":"rnagappan","id":8610755,"node_id":"MDQ6VXNlcjg2MTA3NTU=","avatar_url":"https://avatars3.githubusercontent.com/u/8610755?v=4","gravatar_id":"","url":"https://api.github.com/users/rnagappan","html_url":"https://github.com/rnagappan","followers_url":"https://api.github.com/users/rnagappan/followers","following_url":"https://api.github.com/users/rnagappan/following{/other_user}","gists_url":"https://api.github.com/users/rnagappan/gists{/gist_id}","starred_url":"https://api.github.com/users/rnagappan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rnagappan/subscriptions","organizations_url":"https://api.github.com/users/rnagappan/orgs","repos_url":"https://api.github.com/users/rnagappan/repos","events_url":"https://api.github.com/users/rnagappan/events{/privacy}","received_events_url":"https://api.github.com/users/rnagappan/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T05:35:24Z","updated_at":"2016-02-04T05:35:24Z","author_association":"NONE","body":"Ok thanks. But upsert still has that weakness that when two different clients both submit version 1, the first one will eventually get their data overwritten by the second one. This seems like a failure of the version semantics to me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/179652243","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-179652243","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":179652243,"node_id":"MDEyOklzc3VlQ29tbWVudDE3OTY1MjI0Mw==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T05:39:40Z","updated_at":"2016-02-04T05:59:05Z","author_association":"MEMBER","body":"But you shouldn't use upsert for create semantics. And _after_ the document is created, you can use [optimistic concurrency control](https://www.elastic.co/guide/en/elasticsearch/guide/current/optimistic-concurrency-control.html) to ensure that the scenario that you describe can't happen. That is, if a user thinks they are creating a new document, use the index API with `_create` and the request will fail if the document already exists. And if the user is updating a document, use the index API with the expected version on the index request which will fail if that version is wrong (i.e., two users grab version 1 of the document, they both submit index requests with expected version 1, only one of the requests will win and the second will fail).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/179657518","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-179657518","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":179657518,"node_id":"MDEyOklzc3VlQ29tbWVudDE3OTY1NzUxOA==","user":{"login":"rnagappan","id":8610755,"node_id":"MDQ6VXNlcjg2MTA3NTU=","avatar_url":"https://avatars3.githubusercontent.com/u/8610755?v=4","gravatar_id":"","url":"https://api.github.com/users/rnagappan","html_url":"https://github.com/rnagappan","followers_url":"https://api.github.com/users/rnagappan/followers","following_url":"https://api.github.com/users/rnagappan/following{/other_user}","gists_url":"https://api.github.com/users/rnagappan/gists{/gist_id}","starred_url":"https://api.github.com/users/rnagappan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rnagappan/subscriptions","organizations_url":"https://api.github.com/users/rnagappan/orgs","repos_url":"https://api.github.com/users/rnagappan/repos","events_url":"https://api.github.com/users/rnagappan/events{/privacy}","received_events_url":"https://api.github.com/users/rnagappan/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T05:53:04Z","updated_at":"2016-02-04T05:53:04Z","author_association":"NONE","body":"Thanks, I am familiar with that page. I guess what I'm saying is that insert/create is safe for concurrent usage, and update is also safe for concurrent usage. But upsert is not always safe for concurrent usage because the \"update\" and \"insert\" parts of it can conflict with each other. I was hoping to raise this as a bug so that two clients could safely upsert at the same time, but you seem to saying that they can't - that they can only safely use the update part of the upsert at the same time. Maybe I am missing something here. Anyway, no matter, thanks for your help.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/179666272","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-179666272","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":179666272,"node_id":"MDEyOklzc3VlQ29tbWVudDE3OTY2NjI3Mg==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T06:18:30Z","updated_at":"2016-02-04T06:18:54Z","author_association":"MEMBER","body":"> But upsert is not always safe for concurrent usage because the \"update\" and \"insert\" parts of it can conflict with each other.\n\nCan you you provide a minimal reproduction exhibiting what you think is a bug with a complete explanation of what you observe happening and what you think should be happening? What I _think_ you're saying should not be possible because of an internal versioning mechanism that's in place; a reproduction should help disambiguate the discussion. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/180062098","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-180062098","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":180062098,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MDA2MjA5OA==","user":{"login":"rnagappan","id":8610755,"node_id":"MDQ6VXNlcjg2MTA3NTU=","avatar_url":"https://avatars3.githubusercontent.com/u/8610755?v=4","gravatar_id":"","url":"https://api.github.com/users/rnagappan","html_url":"https://github.com/rnagappan","followers_url":"https://api.github.com/users/rnagappan/followers","following_url":"https://api.github.com/users/rnagappan/following{/other_user}","gists_url":"https://api.github.com/users/rnagappan/gists{/gist_id}","starred_url":"https://api.github.com/users/rnagappan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rnagappan/subscriptions","organizations_url":"https://api.github.com/users/rnagappan/orgs","repos_url":"https://api.github.com/users/rnagappan/repos","events_url":"https://api.github.com/users/rnagappan/events{/privacy}","received_events_url":"https://api.github.com/users/rnagappan/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T21:35:13Z","updated_at":"2016-02-04T21:35:13Z","author_association":"NONE","body":"If two users on two different clients both try to create a new doc with the same ID and version 1, one will fail, this is expected. If two users on two different clients both try to update an existing doc with the same ID and version 1, one will fail, this is expected. \n\nBut if two users on two different clients both try to upsert a _new_ doc with the same ID and version 1, _both_ will succeed, but the second user's upsert will just overwrite the first user's upsert. Compared to the fail fast concurrency semantics of create and update above, this behaviour seems wrong to me. \n\nThe problem is that version 1 is doing double duty as both the initial insert version and the first update version. In my opinion if you are going to offer a combined insert/update operation then version 1 should not have this dual conflicting duty.\n\nI can get around this in my client code by writing \"if new doc then call create API else call update API\" but I thought that is what the upsert API is supposed to be!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/180069204","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-180069204","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":180069204,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MDA2OTIwNA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-02-04T21:57:02Z","updated_at":"2016-02-04T21:57:02Z","author_association":"MEMBER","body":"But can you provide a minimal reproduction exhibiting what you think is a bug? It will really help disambiguate this discussion. I _think_ that in master (after #13955), the situation that you're describing will produce a `VersionConflictException` but code will help clarify the discussion.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/183775129","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-183775129","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":183775129,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Mzc3NTEyOQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-02-14T00:02:06Z","updated_at":"2016-02-14T00:02:06Z","author_association":"CONTRIBUTOR","body":"@rnagappan Have you actually tried this?\n\nIf I set `?version=1` for a non-existent doc, I get a conflict failure:\n\n```\nPOST t/t/1/_update?version=1\n{\n  \"doc\": {\n    \"foo\": 2\n  },\n  \"upsert\": {\n    \"foo\": 1\n  }\n}\n```\n\nReturns:\n\n```\n{\n  \"error\": {\n    \"root_cause\": [\n      {\n        \"type\": \"version_conflict_engine_exception\",\n        \"reason\": \"[t][1]: version conflict, current [-1], provided [1]\",\n        \"shard\": \"3\",\n        \"index\": \"t\"\n      }\n    ],\n    \"type\": \"version_conflict_engine_exception\",\n    \"reason\": \"[t][1]: version conflict, current [-1], provided [1]\",\n    \"shard\": \"3\",\n    \"index\": \"t\"\n  },\n  \"status\": 409\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/183813990","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-183813990","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":183813990,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MzgxMzk5MA==","user":{"login":"rnagappan","id":8610755,"node_id":"MDQ6VXNlcjg2MTA3NTU=","avatar_url":"https://avatars3.githubusercontent.com/u/8610755?v=4","gravatar_id":"","url":"https://api.github.com/users/rnagappan","html_url":"https://github.com/rnagappan","followers_url":"https://api.github.com/users/rnagappan/followers","following_url":"https://api.github.com/users/rnagappan/following{/other_user}","gists_url":"https://api.github.com/users/rnagappan/gists{/gist_id}","starred_url":"https://api.github.com/users/rnagappan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rnagappan/subscriptions","organizations_url":"https://api.github.com/users/rnagappan/orgs","repos_url":"https://api.github.com/users/rnagappan/repos","events_url":"https://api.github.com/users/rnagappan/events{/privacy}","received_events_url":"https://api.github.com/users/rnagappan/received_events","type":"User","site_admin":false},"created_at":"2016-02-14T03:29:09Z","updated_at":"2016-02-14T03:32:09Z","author_association":"NONE","body":"Apologies for my absence, I was snowed under with other work.\n\nYes, if I set version 1 for the insert part of an upsert query then I get a version conflict error.\n\nHere is a test that I just wrote to illustrate the problem:\n\n```\n@org.junit.Test\npublic void testSomething() throws Exception\n{\n    Settings settings = Settings.builder().put(\"cluster.name\", \"minions\").build();\n    TransportClient client = TransportClient.builder()\n                                            .settings(settings)\n                                            .build()\n                                            .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\"localhost\"), 9300));\n    try\n    {\n        // Part 1: the first client thinks they have a new document and they try to upsert it\n        XContentBuilder source1 = XContentFactory.jsonBuilder()\n                                                 .startObject()\n                                                 .field(\"minionese\", \"banana!\")\n                                                 .endObject();\n        IndexRequest indexRequest1 = new IndexRequest(\"minion-language\", \"sayings\", \"10\")\n            .version(-3)\n            .source(source1);\n        UpdateRequest updateRequest1 = new UpdateRequest(\"minion-language\", \"sayings\", \"10\")\n            .version(1)\n            .doc(source1)\n            .upsert(indexRequest1);\n        client.update(updateRequest1).get();\n\n        // Part 2: meanwhile, the second client also thinks they have a new document and they try to upsert it too\n        XContentBuilder source2 = XContentFactory.jsonBuilder()\n                                                 .startObject()\n                                                 .field(\"minionese\", \"bee do bee do\")\n                                                 .endObject();\n        IndexRequest indexRequest2 = new IndexRequest(\"minion-language\", \"sayings\", \"10\")\n            .version(-3)\n            .source(source2);\n        UpdateRequest updateRequest2 = new UpdateRequest(\"minion-language\", \"sayings\", \"10\")\n            .version(1)\n            .doc(source2)\n            .upsert(indexRequest2);\n        client.update(updateRequest2).get();\n\n        client.admin().indices().prepareRefresh(\"minion-language\").get();\n    }\n    finally\n    {\n        client.close();\n    }\n}\n```\n\nWhen I run this test as-is both parts 1 and 2 succeed. So the resulting data in ES is:\n\n```\n{\n  \"took\": 2,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 5,\n    \"successful\": 5,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": 1,\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"minion-language\",\n        \"_type\": \"sayings\",\n        \"_id\": \"10\",\n        \"_version\": 2,\n        \"_score\": 1,\n        \"_source\": {\n          \"minionese\": \"bee do bee do\"\n        }\n      }\n    ]\n  }\n}\n```\n\nWhat I want is a pattern where part 1 succeeds but part 2 fails - because both clients think they are upserting a totally new document. But I want to be able to do this using the upsert API rather than have to switch between create and update manually. As it currently stands, when client 2 calls upsert on their data they are unwittingly overwriting client 1's data. This seems potentially dangerous to me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/183880963","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-183880963","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":183880963,"node_id":"MDEyOklzc3VlQ29tbWVudDE4Mzg4MDk2Mw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-02-14T12:19:37Z","updated_at":"2016-02-14T12:19:37Z","author_association":"CONTRIBUTOR","body":"> But if two users on two different clients both try to upsert a new doc with the same ID and version 1, both will succeed, but the second user's upsert will just overwrite the first user's upsert. Compared to the fail fast concurrency semantics of create and update above, this behaviour seems wrong to me.\n\nI don't think this is what is happening at all.  The first request's upsert succeeds, then the second request's partial doc update succeeds, resulting in version 2 of the document.  \n\nNote: setting the version on the `upsert` portion of the request is not possible via the REST api, so the `version` of the update request (ie `1`) is applied instead, which means that an upsert cannot be combined with a specified version.\n\nUsing versions for concurrency control only makes sense if you first GET the current document, then update it passing in the same version as was retrieved.  What you are doing is not the same.  As @jasontedor said you are looking for create semantics instead.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/184018665","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-184018665","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":184018665,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NDAxODY2NQ==","user":{"login":"rnagappan","id":8610755,"node_id":"MDQ6VXNlcjg2MTA3NTU=","avatar_url":"https://avatars3.githubusercontent.com/u/8610755?v=4","gravatar_id":"","url":"https://api.github.com/users/rnagappan","html_url":"https://github.com/rnagappan","followers_url":"https://api.github.com/users/rnagappan/followers","following_url":"https://api.github.com/users/rnagappan/following{/other_user}","gists_url":"https://api.github.com/users/rnagappan/gists{/gist_id}","starred_url":"https://api.github.com/users/rnagappan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rnagappan/subscriptions","organizations_url":"https://api.github.com/users/rnagappan/orgs","repos_url":"https://api.github.com/users/rnagappan/repos","events_url":"https://api.github.com/users/rnagappan/events{/privacy}","received_events_url":"https://api.github.com/users/rnagappan/received_events","type":"User","site_admin":false},"created_at":"2016-02-15T01:19:41Z","updated_at":"2016-02-15T01:19:41Z","author_association":"NONE","body":"> Using versions for concurrency control only makes sense if you first GET the current document, then update it passing in the same version as was retrieved. What you are doing is not the same.\n\nI can sort of see what you are saying, but if I were to depend on calling Get first, that makes it an update operation, not an upsert.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/184141018","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-184141018","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":184141018,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NDE0MTAxOA==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2016-02-15T10:03:01Z","updated_at":"2016-02-15T10:03:01Z","author_association":"MEMBER","body":"I think we can improve things here by making request validation stricter. IMO the following do not make sense and should be rejected:\n- The version on an update request is a syntactic sugar for get of a specific version, doc merge and a version index. We should reject requests with both upsert and a version.\n- If the upsert index request is versioned, we should reject the op. As Clint said, it's not possible through the rest layer, but Java clients can do so.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/184203088","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-184203088","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":184203088,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NDIwMzA4OA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-02-15T13:19:19Z","updated_at":"2016-02-15T13:19:19Z","author_association":"CONTRIBUTOR","body":"I've opened https://github.com/elastic/elasticsearch/issues/16671 to get the above changed\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/184413744","html_url":"https://github.com/elastic/elasticsearch/issues/16438#issuecomment-184413744","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16438","id":184413744,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NDQxMzc0NA==","user":{"login":"rnagappan","id":8610755,"node_id":"MDQ6VXNlcjg2MTA3NTU=","avatar_url":"https://avatars3.githubusercontent.com/u/8610755?v=4","gravatar_id":"","url":"https://api.github.com/users/rnagappan","html_url":"https://github.com/rnagappan","followers_url":"https://api.github.com/users/rnagappan/followers","following_url":"https://api.github.com/users/rnagappan/following{/other_user}","gists_url":"https://api.github.com/users/rnagappan/gists{/gist_id}","starred_url":"https://api.github.com/users/rnagappan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rnagappan/subscriptions","organizations_url":"https://api.github.com/users/rnagappan/orgs","repos_url":"https://api.github.com/users/rnagappan/repos","events_url":"https://api.github.com/users/rnagappan/events{/privacy}","received_events_url":"https://api.github.com/users/rnagappan/received_events","type":"User","site_admin":false},"created_at":"2016-02-15T22:03:06Z","updated_at":"2016-02-15T22:03:06Z","author_association":"NONE","body":"Excellent. More clarity is always better :)\n","performed_via_github_app":null}]