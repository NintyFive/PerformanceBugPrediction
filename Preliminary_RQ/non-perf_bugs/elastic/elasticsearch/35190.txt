{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/35190","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35190/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35190/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35190/events","html_url":"https://github.com/elastic/elasticsearch/issues/35190","id":376630695,"node_id":"MDU6SXNzdWUzNzY2MzA2OTU=","number":35190,"title":"Implementation tracking for 7.0 types deprecation.","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":189346177,"node_id":"MDU6TGFiZWwxODkzNDYxNzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Edeprecation","name":">deprecation","color":"ce18a7","default":false,"description":null},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"assignees":[{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false}],"milestone":null,"comments":12,"created_at":"2018-11-02T01:13:39Z","updated_at":"2019-04-02T09:27:46Z","closed_at":"2019-04-02T09:27:45Z","author_association":"MEMBER","active_lock_reason":null,"body":"Tracks the details of the 'In 7.0' part of this comment: https://github.com/elastic/elasticsearch/issues/15613#issuecomment-239435920\r\n\r\n### Plan for 7.0\r\n- For requests with a type in the URL or as a leaf field, we will accept both typed + typeless versions of the API. We’ll emit a deprecation warning to tell users they need to move to the typeless endpoints before 8.0. Responses will still contain a `_type` field, but we will return the dummy name `_doc` regardless of the underlying type name.\r\n- For APIs whose request/ response structure changes with the deprecation (create index, get mapping, etc.), we’ll have a request parameter `include_type_name` that should be set to `false` to omit types in requests + responses. It will default to `true` in 6.7 with a warning that it needs to be explicitly specified (to either `true` or `false`), default to `false` in 7.0 with a warning to stop specifying it, and finally be removed in 8.0.\r\n\r\nMore information can be found here: https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html\r\n\r\n### To-do List\r\n\r\n**Phase One: Add Typeless APIs.** These items are critical for 6.7/ 7.0, and should be in before feature freeze.\r\n- [x] Remove the `include_type_name` parameter from the bulk, delete, get, index, update, and search APIs. @jtibshirani #35192 \r\n- [x] Make sure `include_type_name` is added to APIs that we missed, and has the right default values on both 6.7 and 7.0. @jtibshirani #37210 #37285\r\n- [x] Add the ability to ignore type-related warnings in REST tests. @jtibshirani #35395\r\n- [x] Emit deprecation warnings when typed APIs are used. As part of this work, we should deprecate the appropriate methods in the Java HLRC. For some APIs, we may also need to create a duplicate REST test without types. The following APIs should be updated:  \r\n  - [x] search @jpountz #29468 \r\n  - [x] count, msearch @jtibshirani #35421\r\n  - [x] explain @jtibshirani #35611\r\n  - [x] search_template, msearch_template @jtibshirani #35669\r\n  - [x] termvectors, mtermvectors @jtibshirani #36182\r\n  - [x] get, exists, mget @jtibshirani #35930\r\n  - [x] delete @jtibshirani #36087\r\n  - [x] bulk @markharwood #36549\r\n  - [x] index (note that the Java HLRC deprecations may be tricky)  @mayya-sharipova #36575 \r\n  - [x] update @jtibshirani #36181\r\n  - [x] get_source, exists_source @cbuescher #36426\r\n  - [x] document _create @jtibshirani #36863\r\n  - [x] reindex @cbuescher #36823\r\n  - [x] delete_by_query, update_by_query @mayya-sharipova #36365\r\n  - [x] indices.validate_query @jtibshirani #35575\r\n  - [x] indices.create @jtibshirani #37134\r\n  - [x] indices.put_mapping @jtibshirani #37280 \r\n  - [x] indices.get @cbuescher #37149\r\n  - [x] indices.get_mapping @jtibshirani #37796\r\n  - [x] indices.get_field_mapping @mayya-sharipova #37667\r\n  - [x] indices.get_template, indices.put_template @markharwood #37484\r\n  - [x] indices.rollover @mayya-sharipova #38039\r\n- [x] Ensure that if an index’s type is named something other than `_doc`, then typeless API calls still work. Currently in this situation, using certain typeless APIs will produce an error due to a mismatched type name. @jpountz #35790\r\n- [x] Allow for typeless 'lookup' queries (MoreLikeThis, ids query, terms query, GeoShapeQuery) @mayya-sharipova @jtibshirani #37016\r\n- [x] Follow-up fixes from the above work.\r\n  - [x] Backport the relevant parts of #35790 (allow typeless APIs when an index has a custom type) to 6.7. @jpountz #37147\r\n  - [x] Typeless index call can fail against an index with a custom type (#36811). @jtibshirani #37451\r\n- [x] Deprecate types in watches (search templates and index actions). @jakelandis #37594\r\n\r\n**Phase Two: Important Clean-up.** These tasks should be in by 6.7/ 7.0, but can go in after feature freeze.\r\n- [x] Update `removal_of_types.asciidoc` to reflect the new plan. @jtibshirani #38003\r\n- [x] Switch to typeless index creation in REST tests. @colings86 #37611 #38058\r\n- [x] Switch to typeless index creation (remove `include_type_name=true`) in documentation. @cbuescher #37568 #37601 #37646\r\n- [x] Solidify the approach to allowing typeless requests on an index with a custom type (#37450).\r\n\r\n**Phase Three: Additional Deprecations.** These are good to have by 6.7/ 7.0, but could be pushed into 7.1 if strictly necessary.\r\n- [x] Deprecate references to `_type` in the search request body. \r\n  - [x] uses of `_type` as a field name (in `match` queries, etc.) @mayya-sharipova #36503 #36802\r\n  - [x] aggregations @jtibshirani #37131\r\n  - [x] ~~retrieving fields~~ Loading `_type` as a field doesn't actually work, and doesn't make much sense because each search hit already contains a `_type` component.\r\n- [x] ~~Emit a deprecation warning when a search template containing a type is triggered. Note this is different from emitting a warning when a typed template is originally added.~~ Already covered by other search-related PRs.\r\n- [x] ~~Emit a deprecation warning when an index template containing a type is triggered. Note this is different from emitting a warning when a typed template is originally added.~~ We support making typeless calls against an index with a custom type, so it is not really harmful to have a template with a custom type (and in fact several internal templates around monitoring use typed templates).\r\n- [x] Deprecate references to `_type` in scripts. @jdconrad #37491 #37554 \r\n- [x] Deprecate types in simulate pipeline requests (#37731). @gwbrown #37949\r\n- [x] Deprecate types in graph explore requests. (#40466)\r\n\r\n### Items we’re still following-up on\r\n- [x] For responses that contain the type as a leaf field, should we always return `_doc` regardless of the underlying type *even when the old typed APIs are used*?\r\n- [x] Types may be present in saved search requests, including search templates and watches. We should think through the upgrade plan here. https://github.com/elastic/elasticsearch/issues/35190#issuecomment-439121696\r\n- [x] When an index template is stored, the mappings are nested under the type name. We also need to consider how these will be accessed and upgraded.\r\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}