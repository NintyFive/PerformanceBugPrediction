{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/139","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/139/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/139/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/139/events","html_url":"https://github.com/elastic/elasticsearch/issues/139","id":173396,"node_id":"MDU6SXNzdWUxNzMzOTY=","number":139,"title":"Groovy Client","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":29489,"node_id":"MDU6TGFiZWwyOTQ4OQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.07.0","name":"v0.07.0","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2010-04-16T19:17:15Z","updated_at":"2010-04-16T19:17:52Z","closed_at":"2010-04-16T19:17:52Z","author_association":"MEMBER","active_lock_reason":null,"body":"Implemented a built in groovy client. Its implemented as a plugin, though not really loaded when elasticsearch is started. Within the zip file, the actual client jar file exists. It is also available under maven repo.\n\nThe code looks as follows:\n\n```\nimport org.elasticsearch.groovy.node.GNode\nimport org.elasticsearch.groovy.node.GNodeBuilder\n\nGNodeBuilder nodeBuilder = new GNodeBuilder()\nnodeBuilder.settings {\n    node {\n        local = true\n    }\n}\n\ndef node = nodeBuilder.node()\n\ndef indexR = node.client.index {\n    index \"test\"\n    type \"type1\"\n    id \"1\"\n    source {\n        test = \"value\"\n        complex {\n            value1 = \"value1\"\n            value2 = \"value2\"\n        }\n    }\n}\nassertThat indexR.response.index, equalTo(\"test\")\nassertThat indexR.response.type, equalTo(\"type1\")\nassertThat indexR.response.id, equalTo(\"1\")\n\ndef delete = node.client.delete {\n    index \"test\"\n    type \"type1\"\n    id \"1\"\n}\nassertThat delete.response.index, equalTo(\"test\")\nassertThat delete.response.type, equalTo(\"type1\")\nassertThat delete.response.id, equalTo(\"1\")\n\ndef refresh = node.client.admin.indices.refresh {}\nassertThat refresh.response.failedShards, equalTo(0)\n\ndef get = node.client.get {\n    index \"test\"\n    type \"type1\"\n    id \"1\"\n}\nassertThat get.response.exists, equalTo(false)\n\nindexR = node.client.index {\n    index \"test\"\n    type \"type1\"\n    id \"1\"\n    source {\n        test = \"value\"\n        complex {\n            value1 = \"value1\"\n            value2 = \"value2\"\n        }\n    }\n}\nassertThat indexR.response.index, equalTo(\"test\")\nassertThat indexR.response.type, equalTo(\"type1\")\nassertThat indexR.response.id, equalTo(\"1\")\n\nrefresh = node.client.admin.indices.refresh {}\nassertThat refresh.response.failedShards, equalTo(0)\n\ndef count = node.client.count {\n    indices \"test\"\n    types \"type1\"\n    query {\n        term {\n            test = \"value\"\n        }\n    }\n}\nassertThat count.response.failedShards, equalTo(0)\nassertThat count.response.count, equalTo(1l)\n\ndef search = node.client.search {\n    indices \"test\"\n    types \"type1\"\n    source {\n        query {\n            term(test: \"value\")\n        }\n    }\n}\nassertThat search.response.failedShards, equalTo(0)\nassertThat search.response.hits.totalHits, equalTo(1l)\nassertThat search.response.hits[0].source.test, equalTo(\"value\")\n\ndef deleteByQuery = node.client.deleteByQuery {\n    indices \"test\"\n    query {\n        term(\"test\": \"value\")\n    }\n}\nassertThat deleteByQuery.response.indices.test.failedShards, equalTo(0)\n\nrefresh = node.client.admin.indices.refresh {}\nassertThat refresh.response.failedShards, equalTo(0)\n\nget = node.client.get {\n    index \"test\"\n    type \"type1\"\n    id \"1\"\n}\nassertThat get.response.exists, equalTo(false)\n```\n","closed_by":null,"performed_via_github_app":null}