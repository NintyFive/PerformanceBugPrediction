[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372950810","html_url":"https://github.com/elastic/elasticsearch/issues/29033#issuecomment-372950810","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29033","id":372950810,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Mjk1MDgxMA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-14T09:06:46Z","updated_at":"2018-03-14T09:06:46Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/379912698","html_url":"https://github.com/elastic/elasticsearch/issues/29033#issuecomment-379912698","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29033","id":379912698,"node_id":"MDEyOklzc3VlQ29tbWVudDM3OTkxMjY5OA==","user":{"login":"pcsanwald","id":163306,"node_id":"MDQ6VXNlcjE2MzMwNg==","avatar_url":"https://avatars1.githubusercontent.com/u/163306?v=4","gravatar_id":"","url":"https://api.github.com/users/pcsanwald","html_url":"https://github.com/pcsanwald","followers_url":"https://api.github.com/users/pcsanwald/followers","following_url":"https://api.github.com/users/pcsanwald/following{/other_user}","gists_url":"https://api.github.com/users/pcsanwald/gists{/gist_id}","starred_url":"https://api.github.com/users/pcsanwald/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pcsanwald/subscriptions","organizations_url":"https://api.github.com/users/pcsanwald/orgs","repos_url":"https://api.github.com/users/pcsanwald/repos","events_url":"https://api.github.com/users/pcsanwald/events{/privacy}","received_events_url":"https://api.github.com/users/pcsanwald/received_events","type":"User","site_admin":false},"created_at":"2018-04-09T22:24:56Z","updated_at":"2018-04-09T22:34:49Z","author_association":"CONTRIBUTOR","body":"Some notes: I reproduced this issue on `master`, just to confirm it's still an issue in 7.x. The message in the Exception is thrown in only one place in the codebase, `Rewritable.java`, reproducing the query and inspecting with a debugger, the error appears to be stemming from (at debug time) 4 async tasks that are still on the context (`QueryRewriteContext`) while `Rewritable.rewrite` is being called.\r\n\r\nLooking at the TermsQueryBuilder class itself, the `doRewrite` method does appear to register async actions via `queryRewriteContext.registerAsyncAction`. So it seems like `Rewritable.rewrite` is expecting a context that doesn't have any outstanding async actions, yet the `TermsQueryBuilder.doRewrite` method is returning a context that will most likely have outstanding async actions. Aforementioned async actions look like this:\r\n\r\n<img width=\"1009\" alt=\"screen shot 2018-04-09 at 3 26 47 pm\" src=\"https://user-images.githubusercontent.com/163306/38526347-cb8bba90-3c0a-11e8-9be9-bbb665770e30.png\">\r\n\r\nIt seems like these async actions would get executed via `QueryRewriteContext.executeAsyncActions`, but I'm pretty sure that code path isn't getting called for this case (I was unable to catch a breakpoint in this method in a debugger).\r\n\r\nInterested if anyone from search-aggs has any idea, based on the above, what the problem might be rooted from? I'm not sure if `TermsQueryBuilder.doRewrite` is doing the wrong thing here, if the assertion about async items is incorrect in `Rewritable`, or, if all this is just a red herring and the problem lies elsewhere?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/380004918","html_url":"https://github.com/elastic/elasticsearch/issues/29033#issuecomment-380004918","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29033","id":380004918,"node_id":"MDEyOklzc3VlQ29tbWVudDM4MDAwNDkxOA==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-04-10T07:39:24Z","updated_at":"2018-04-10T07:39:24Z","author_association":"MEMBER","body":"I think the problem here is down to us only calling one of the two rewrite phases for the QueryBuilder in the Validate Query API. There are two rewrites phases that happen on the search API: \r\n1. The first happens on the coordinating node, this is where we can do things like fetches so we ensure that all the requests going to the shards have the same query (they are not affected by different shards getting different versions of the lookup for example). This is the rewrite phase I think we are missing in the validate query api. \r\n2. The second rewrite happens on the shard and rewrites the query to a a more efficient form if it can. An example of this is rewriting a part of the query that contains a date range to an exists query if the range of dates in the shard is completely within the range in the query. This is the rewrite phase that I think is throwing the exception.\r\n\r\nThe first rewrite phase is called when we execute a search request in [`TransportSearchAction`](https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java#L215-L216). I think we might need to add similar logic to [`TransportValidateQueryAction#doExecute()`](https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/action/admin/indices/validate/query/TransportValidateQueryAction.java#L74) so the request is rewritten on the coordinating node before we send it to the shard.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/380264504","html_url":"https://github.com/elastic/elasticsearch/issues/29033#issuecomment-380264504","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29033","id":380264504,"node_id":"MDEyOklzc3VlQ29tbWVudDM4MDI2NDUwNA==","user":{"login":"pcsanwald","id":163306,"node_id":"MDQ6VXNlcjE2MzMwNg==","avatar_url":"https://avatars1.githubusercontent.com/u/163306?v=4","gravatar_id":"","url":"https://api.github.com/users/pcsanwald","html_url":"https://github.com/pcsanwald","followers_url":"https://api.github.com/users/pcsanwald/followers","following_url":"https://api.github.com/users/pcsanwald/following{/other_user}","gists_url":"https://api.github.com/users/pcsanwald/gists{/gist_id}","starred_url":"https://api.github.com/users/pcsanwald/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pcsanwald/subscriptions","organizations_url":"https://api.github.com/users/pcsanwald/orgs","repos_url":"https://api.github.com/users/pcsanwald/repos","events_url":"https://api.github.com/users/pcsanwald/events{/privacy}","received_events_url":"https://api.github.com/users/pcsanwald/received_events","type":"User","site_admin":false},"created_at":"2018-04-10T22:13:36Z","updated_at":"2018-04-10T22:19:46Z","author_association":"CONTRIBUTOR","body":"So it's seeming like `TransportSearchAction` is only part of the problem (or, isn't the problem). I've added a [commit here](https://github.com/elastic/elasticsearch/compare/master...pcsanwald:terms-query-validate-bug) that shows what I tried, but, this doesn't fix the issue in that there are still asyncTasks on the context. In tracking this down, I think the problem is actually in `TermsQueryBuilder.doRewrite`: That method is called by `Rewritable` in this line: `rewrittenBuilder = builder.rewrite(context)`, and so the context goes from having 0 async tasks to having several inside the execution of `Rewritable.rewrite`.\r\n\r\nSo, I think the code that's causing the issue here is `TermsQueryBuilder.doRewrite`:\r\n\r\n```\r\nqueryRewriteContext.registerAsyncAction((client, listener) -> {\r\n                fetch(termsLookup, client, ActionListener.wrap(list -> {\r\n                    supplier.set(list);\r\n                    listener.onResponse(null);\r\n                }, listener::onFailure));\r\n            });\r\n```\r\n\r\nSo it seems like what's happening is:\r\n\r\n1. `Rewritable.rewrite` invokes `TermsQueryBuilder.doRewrite`\r\n2. `TermsQueryBuilder.doRewrite` adds some async items to the context\r\n3. `Rewritable.rewrite`, then checks the context for outstanding async tasks, throws an error if they exist.\r\n\r\nIf the above is accurate, what's the best strategy to fix this?\r\n\r\nSeems like we could either Update Rewritable to block on async tasks, update TermsQueryBuilder.doRewrite not to use async tasks, or something similar?\r\n\r\nOnly a couple of the QueryBuilders add async actions to the context, GeoShape query and Percolate query builders. Interestingly, `PercolateQueryBuilder.doRewrite` never gets called when I do an explain on a percolate query.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/380379784","html_url":"https://github.com/elastic/elasticsearch/issues/29033#issuecomment-380379784","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/29033","id":380379784,"node_id":"MDEyOklzc3VlQ29tbWVudDM4MDM3OTc4NA==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-04-11T08:58:56Z","updated_at":"2018-04-11T08:59:16Z","author_association":"MEMBER","body":"@pcsanwald I took a look at this and applied your changes locally. The code is actually doing almost everything right in that its correctly registering the async action and then executing it when it runs `Rewriteable.rewriteAndFetch()` and the resulting query is correct, has the resolved list of terms and no more async actions. The problem is that we are not using the rewritten query after we have done the rewrite and fetch and are just propagating the original query. The reason for this is [this line of code](https://github.com/elastic/elasticsearch/compare/master...pcsanwald:terms-query-validate-bug#diff-11ec1befaf3f7a8d4cae74cace698d45R85). Here we are being passed the newly rewritten query in the lambda (the variable is called source but it is the rewritten query, we should probably rename this variable to `rewrittenQuery`) but we are calling `super.doExecute(task, request, listener)` without modifying the request to contain the rewritten query. I think adding `request.query(source);` above the call to `super.doExecute()` will solve this problem and the request return the expected response without error.","performed_via_github_app":null}]