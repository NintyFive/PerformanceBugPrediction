[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/31770985","html_url":"https://github.com/elastic/elasticsearch/issues/4647#issuecomment-31770985","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4647","id":31770985,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNzcwOTg1","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2014-01-07T19:35:57Z","updated_at":"2014-01-07T19:35:57Z","author_association":"MEMBER","body":"The queue recycler has proven to be quite expensive when it comes to CPU usage (non blocking, but that spinning is expensive)... . I think that the thread base one is the best since most times number of cores correlates to the amount of memory a machine has.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/31817454","html_url":"https://github.com/elastic/elasticsearch/issues/4647#issuecomment-31817454","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4647","id":31817454,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODE3NDU0","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2014-01-08T09:47:25Z","updated_at":"2014-01-08T09:47:25Z","author_association":"CONTRIBUTOR","body":"I wrote a benchmark (see PR) to try to better understand the overhead of the different recyclers we have. The y axis is the time to recycle 5000000 objects and the x-axis is the number of threads (the machine on which this benchmark has been run has 8 processors).\n\nThere are 3 recyclers in this benchmark which are not in master right now:\n- `Locked` which protects calls to obtain and release with a lock (so the recycler may be accessed by a single thread at once)\n- `Concurrent` which creates one locked recycler per processor and affects threads to them based on their hashCode,\n- `SoftConcurrent` which is to `Concurrent` what `SoftThreadLocal` is to `ThreadLocal`\n\n![pouet](https://f.cloud.github.com/assets/299848/1867179/757fabd6-7849-11e3-8c5c-02e3dfbb8c39.png)\n\nThis confirms what you said about the queue recycler, which seems to have more overhead than other recyclers. However, I tend to like the lines for the `Concurrent` and `SoftConcurrent` ones, especially given that they would give each pool more memory, give the ability to the warmer thread pool to recycle data of the search thread pool and play more nicely with cached thread pools?\n","performed_via_github_app":null}]