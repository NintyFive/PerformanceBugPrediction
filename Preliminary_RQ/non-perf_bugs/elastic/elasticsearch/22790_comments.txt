[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275163767","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275163767","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275163767,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTE2Mzc2Nw==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-01-25T16:52:55Z","updated_at":"2017-01-25T16:52:55Z","author_association":"CONTRIBUTOR","body":"I will take a look into this.  At the very least I would assume that the behavior for x += y should result in the same answer as x = x + y.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275176195","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275176195","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275176195,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTE3NjE5NQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-01-25T17:34:54Z","updated_at":"2017-01-25T17:35:11Z","author_association":"CONTRIBUTOR","body":"So my previous assumption was actually incorrect and what is happening is indeed the expected behavior in Painless.\r\n\r\nTake the case where you have the following:\r\n\r\n``` int x = 5; x += 5.0; ```\r\n\r\nThis results in an int value of 10.  We decided to make the behavior of the def type be consistent with the behavior of the other compound assignment types meaning that for numeric values, the result will be cast to the original numeric type.  However, given the original type is actually def it's possible the expected behavior should be as described in the original comment.  I'll need to give this some more thought.\r\n\r\nIn the meantime, this definitely needs to be better documented and that's something we're currently working on right now.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275189348","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275189348","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275189348,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTE4OTM0OA==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-01-25T18:21:34Z","updated_at":"2017-01-25T18:21:34Z","author_association":"CONTRIBUTOR","body":"I'm strongly leaning towards leaving the existing behavior.  Take a look at the following examples:\r\n\r\n``` short x = 1; x = (short)(x + 1); ```\r\nversus\r\n``` short x = 1; x += 1; ```\r\n\r\nWith compound assignment the user has no ability to create a cast that would make that second statement valid without the cast being implicit.  This same logic applies to def.  The user would have no ability to cast to the type he/she wants the def type to end up as during a compound assignment so it's logical to not change the type implicitly on the fly with upcasting.\r\n\r\n@nik9000 Any thoughts on this?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275346824","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275346824","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275346824,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTM0NjgyNA==","user":{"login":"munkrig","id":12298733,"node_id":"MDQ6VXNlcjEyMjk4NzMz","avatar_url":"https://avatars1.githubusercontent.com/u/12298733?v=4","gravatar_id":"","url":"https://api.github.com/users/munkrig","html_url":"https://github.com/munkrig","followers_url":"https://api.github.com/users/munkrig/followers","following_url":"https://api.github.com/users/munkrig/following{/other_user}","gists_url":"https://api.github.com/users/munkrig/gists{/gist_id}","starred_url":"https://api.github.com/users/munkrig/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/munkrig/subscriptions","organizations_url":"https://api.github.com/users/munkrig/orgs","repos_url":"https://api.github.com/users/munkrig/repos","events_url":"https://api.github.com/users/munkrig/events{/privacy}","received_events_url":"https://api.github.com/users/munkrig/received_events","type":"User","site_admin":false},"created_at":"2017-01-26T09:45:08Z","updated_at":"2017-01-26T09:45:08Z","author_association":"NONE","body":"After considering your argument and checking how Java handles these cases, I tend to agree with you. Retaining the current behavior might indeed be the better alternative.\r\n\r\nThe only thing I would like to add is that I had explicitly declared my variable as a double in the type mapping. It seems that painless does not take the mapping into account during type inference. Instead it sees the initial value of `0` and deduces that the variable must be an integer. As an end user that seems a little strange to me. \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275401606","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275401606","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275401606,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTQwMTYwNg==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2017-01-26T14:30:45Z","updated_at":"2017-01-26T14:30:45Z","author_association":"CONTRIBUTOR","body":"> It seems that painless does not take the mapping into account during type inference. Instead it sees the initial value of 0 and deduces that the variable must be an integer. As an end user that seems a little strange to me.\r\n\r\nYeah! We've talked about a few times. The reason it works the way it does is that Elasticsearch's scripting APIs were designed around MVEL and Groovy, neither of which could do anything with the type information. We're (slowly, carefully) in the process of reworking the scripting APIs so we can send more interesting information to Painless.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275448135","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275448135","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275448135,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTQ0ODEzNQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-01-26T17:12:28Z","updated_at":"2017-01-26T17:12:28Z","author_association":"CONTRIBUTOR","body":"I definitely understand the frustration around not being able to take into account mappings.  To add a bit more explanation to what Nik has already said -- we compile scripts in a way that allow them to run across all indexes, unfortunately this means we can't assume a mapping for a specific index at compile time since fields with the same name could actually be different types in different indexes, so we do the best we can with the information we do have, in this case 0 for int.  As Nik mentioned, this is something we are working on longer term to hopefully make things a bit more user friendly.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275461475","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275461475","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275461475,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTQ2MTQ3NQ==","user":{"login":"munkrig","id":12298733,"node_id":"MDQ6VXNlcjEyMjk4NzMz","avatar_url":"https://avatars1.githubusercontent.com/u/12298733?v=4","gravatar_id":"","url":"https://api.github.com/users/munkrig","html_url":"https://github.com/munkrig","followers_url":"https://api.github.com/users/munkrig/followers","following_url":"https://api.github.com/users/munkrig/following{/other_user}","gists_url":"https://api.github.com/users/munkrig/gists{/gist_id}","starred_url":"https://api.github.com/users/munkrig/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/munkrig/subscriptions","organizations_url":"https://api.github.com/users/munkrig/orgs","repos_url":"https://api.github.com/users/munkrig/repos","events_url":"https://api.github.com/users/munkrig/events{/privacy}","received_events_url":"https://api.github.com/users/munkrig/received_events","type":"User","site_admin":false},"created_at":"2017-01-26T17:58:45Z","updated_at":"2017-01-26T17:58:45Z","author_association":"NONE","body":"Thanks for the explanation!\r\n\r\nAs far as I’m concerned, the issue can be closed then. Assignments of the kind `x = x + 1.5` work even if the initial value was an integer and can easily be used in place of `x += 1.5`.\r\n\r\nIt might make sense to document the behavior though, as it may save other developers some head-scratching.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275461961","html_url":"https://github.com/elastic/elasticsearch/issues/22790#issuecomment-275461961","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22790","id":275461961,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTQ2MTk2MQ==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2017-01-26T18:00:34Z","updated_at":"2017-01-26T18:00:34Z","author_association":"CONTRIBUTOR","body":"@munkrig You're very welcome for the explanation, and I agree 100% with this needing to be documented.  Documentation is something we're in process of making large improvements too.\r\nClosing now.","performed_via_github_app":null}]