[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/56165663","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-56165663","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":56165663,"node_id":"MDEyOklzc3VlQ29tbWVudDU2MTY1NjYz","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-09-19T11:28:50Z","updated_at":"2014-09-19T11:28:50Z","author_association":"CONTRIBUTOR","body":"You could use two nested function_score queries, one with a random and one with a script:\n\n```\nPOST testidx/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"function_score\": {\n          \"functions\": [\n            {\n              \"random_score\": {\n                \"seed\": 1\n              }\n            }\n          ]\n        }\n      },\n      \"functions\": [\n        {\n          \"script_score\": {\n            \"script\": \"if (_score.doubleValue() > 0.5) {return 1;} else {return 0;}\"\n          }\n        }\n      ],\n      \"boost_mode\": \"replace\"\n    }\n  }\n}\n```\n\nThe first would give you a reproducible random and the script could then be used to determine if the document should be in the sample or not (replace 0.5 with `1/num documents` or `doc[field].value/sum values`). \nHowever, there is currently no way to actually exclude documents with a particular score from the result set, see https://github.com/elasticsearch/elasticsearch/issues/6952 . You would have to check in the returned documents if they have a score 1 or 0 in the above example.\nThere is no way to figure out the sum of values for documents on the fly, you would need to execute an aggregation before that. Likewise in the script you cannot get the number of indexed docs (`_index.numDocs()` only returns number of docs in shard) so you would have to figure that out in advance and pass as parameter to the script.\n\nWould that help you?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/56190112","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-56190112","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":56190112,"node_id":"MDEyOklzc3VlQ29tbWVudDU2MTkwMTEy","user":{"login":"k0ala","id":1598473,"node_id":"MDQ6VXNlcjE1OTg0NzM=","avatar_url":"https://avatars2.githubusercontent.com/u/1598473?v=4","gravatar_id":"","url":"https://api.github.com/users/k0ala","html_url":"https://github.com/k0ala","followers_url":"https://api.github.com/users/k0ala/followers","following_url":"https://api.github.com/users/k0ala/following{/other_user}","gists_url":"https://api.github.com/users/k0ala/gists{/gist_id}","starred_url":"https://api.github.com/users/k0ala/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k0ala/subscriptions","organizations_url":"https://api.github.com/users/k0ala/orgs","repos_url":"https://api.github.com/users/k0ala/repos","events_url":"https://api.github.com/users/k0ala/events{/privacy}","received_events_url":"https://api.github.com/users/k0ala/received_events","type":"User","site_admin":false},"created_at":"2014-09-19T15:10:06Z","updated_at":"2014-09-19T15:10:06Z","author_association":"NONE","body":"Hi brwe, thanks for your comment!\n\nWhat you suggest is useful, although it doesn't quite achieve what I am after. If I use your approach with `1/N`, then I will sometimes get 0 documents, or sometimes several documents (if I understood correctly). What I am after is a method that will get me exactly 1 document each time.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/56335522","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-56335522","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":56335522,"node_id":"MDEyOklzc3VlQ29tbWVudDU2MzM1NTIy","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-09-22T07:02:25Z","updated_at":"2014-09-22T07:02:25Z","author_association":"CONTRIBUTOR","body":"Thanks for the explanation. I think now I understand better and what I wrote does not make a lot of sense on second thought...\n\nFor samples of fixed size I still think you can just use plain `random_score`. `random_score` assigns random numbers that should be uniformly distributed between 0 and 1 so if you want to draw a sample of fixed size (potentially 1) from documents and assume they are all equally likely then I think you can just use `random_score` and get the top n documents which would then be your sample. Does that make sense?\n\nThis might indeed be useful to have for non uniform distributions as well.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/59375579","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-59375579","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":59375579,"node_id":"MDEyOklzc3VlQ29tbWVudDU5Mzc1NTc5","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-10-16T15:02:21Z","updated_at":"2014-10-16T15:02:21Z","author_association":"CONTRIBUTOR","body":"@ibaiul your last comment seems to have gotten lost. can you add it again?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/64880008","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-64880008","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":64880008,"node_id":"MDEyOklzc3VlQ29tbWVudDY0ODgwMDA4","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-11-28T10:39:21Z","updated_at":"2014-11-28T10:39:21Z","author_association":"CONTRIBUTOR","body":"No more feedback.  This seems quite easily doable by:\n- generating a random score for each document\n- multiplying that score by the value of a numeric field in each document\n- limiting the size to 1\n\nClosing\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/162481971","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-162481971","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":162481971,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MjQ4MTk3MQ==","user":{"login":"dpaluy","id":92692,"node_id":"MDQ6VXNlcjkyNjky","avatar_url":"https://avatars2.githubusercontent.com/u/92692?v=4","gravatar_id":"","url":"https://api.github.com/users/dpaluy","html_url":"https://github.com/dpaluy","followers_url":"https://api.github.com/users/dpaluy/followers","following_url":"https://api.github.com/users/dpaluy/following{/other_user}","gists_url":"https://api.github.com/users/dpaluy/gists{/gist_id}","starred_url":"https://api.github.com/users/dpaluy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dpaluy/subscriptions","organizations_url":"https://api.github.com/users/dpaluy/orgs","repos_url":"https://api.github.com/users/dpaluy/repos","events_url":"https://api.github.com/users/dpaluy/events{/privacy}","received_events_url":"https://api.github.com/users/dpaluy/received_events","type":"User","site_admin":false},"created_at":"2015-12-07T10:54:46Z","updated_at":"2015-12-07T10:56:42Z","author_association":"NONE","body":"I need to get some documents from a given index with weighted probability `Wj/ΣWi` (where `Wj` is a weight of item `j` and `Wj/ΣWi` is a sum of weights of all documents in this query).\n\nEach item stored in ES, has `id`, `category_id` and `weight`.\n\nI guess that my function should be like:\n\n```\n\"script_score\": {\n  \"script\": \"weight = data['weight'].value / SUM; if (_score.doubleValue() > weight) {return 1;} else {return 0;}\"\n}\n```\n\nHow to calculate the total sum of the query results?\n\nMy current query (w/o weighted probability) is:\n\n```\nGET products/_search?pretty=true\n{\"size\":5,\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"bool\":{\n          \"must\": {\n            \"term\":\n              {\"category_id\": \"5df3ab90-6e93-0133-7197-04383561729e\"}\n          }\n        }\n      },\n      \"functions\":\n        [{\"random_score\":{}}]\n    }\n  },\n  \"sort\": [{\"_score\":{\"order\":\"desc\"}}]\n}\n```\n\nThanks a lot for help!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/358926303","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-358926303","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":358926303,"node_id":"MDEyOklzc3VlQ29tbWVudDM1ODkyNjMwMw==","user":{"login":"vgrange","id":10533583,"node_id":"MDQ6VXNlcjEwNTMzNTgz","avatar_url":"https://avatars3.githubusercontent.com/u/10533583?v=4","gravatar_id":"","url":"https://api.github.com/users/vgrange","html_url":"https://github.com/vgrange","followers_url":"https://api.github.com/users/vgrange/followers","following_url":"https://api.github.com/users/vgrange/following{/other_user}","gists_url":"https://api.github.com/users/vgrange/gists{/gist_id}","starred_url":"https://api.github.com/users/vgrange/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vgrange/subscriptions","organizations_url":"https://api.github.com/users/vgrange/orgs","repos_url":"https://api.github.com/users/vgrange/repos","events_url":"https://api.github.com/users/vgrange/events{/privacy}","received_events_url":"https://api.github.com/users/vgrange/received_events","type":"User","site_admin":false},"created_at":"2018-01-19T10:25:50Z","updated_at":"2018-01-19T10:26:42Z","author_association":"NONE","body":"In case it helps anyone, here is how I recently implemented a weighted shuffling.\r\n\r\nOn this example, we shuffle companies. Each company has a \"company_score\" between 0 and 100. With this simple weighted shuffling, a company with score 100 is 5 times more likely to appear in first page than a company with score 20.\r\n\r\n    json_body = {\r\n        \"sort\": [\"_score\"],\r\n        \"query\": {\r\n            \"function_score\": {\r\n                \"query\": main_query,  # put your main query here\r\n                \"functions\": [\r\n                    {\r\n                        \"random_score\": {},\r\n                    },\r\n                    {\r\n                        \"field_value_factor\": {\r\n                            \"field\": \"company_score\",\r\n                            \"modifier\": \"none\",\r\n                            \"missing\": 0,\r\n                        }\r\n                    }\r\n                ],\r\n                # How to combine the result of the two functions 'random_score' and 'field_value_factor'.\r\n                # This way, on average the combined _score of a company having score 100 will be 5 times as much\r\n                # as the combined _score of a company having score 20, and thus will be 5 times more likely\r\n                # to appear on first page.\r\n                \"score_mode\": \"multiply\",\r\n                # How to combine the result of function_score with the original _score from the query.\r\n                # We overwrite it as our combined _score (random x company_score) is all we need.\r\n                \"boost_mode\": \"replace\",\r\n            }\r\n        }\r\n    }","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/710715417","html_url":"https://github.com/elastic/elasticsearch/issues/7783#issuecomment-710715417","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7783","id":710715417,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMDcxNTQxNw==","user":{"login":"stephane-2","id":73005429,"node_id":"MDQ6VXNlcjczMDA1NDI5","avatar_url":"https://avatars3.githubusercontent.com/u/73005429?v=4","gravatar_id":"","url":"https://api.github.com/users/stephane-2","html_url":"https://github.com/stephane-2","followers_url":"https://api.github.com/users/stephane-2/followers","following_url":"https://api.github.com/users/stephane-2/following{/other_user}","gists_url":"https://api.github.com/users/stephane-2/gists{/gist_id}","starred_url":"https://api.github.com/users/stephane-2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stephane-2/subscriptions","organizations_url":"https://api.github.com/users/stephane-2/orgs","repos_url":"https://api.github.com/users/stephane-2/repos","events_url":"https://api.github.com/users/stephane-2/events{/privacy}","received_events_url":"https://api.github.com/users/stephane-2/received_events","type":"User","site_admin":false},"created_at":"2020-10-17T01:01:31Z","updated_at":"2020-10-17T01:01:31Z","author_association":"NONE","body":"The solutions presented above that multiply a random score by a weight don't seem correct (if they are, someone please provide a justification that they indeed yield the desired distribution).\r\n\r\nI think this is a good reason for Elasticsearch to provide a simple way to do this, as otherwise people end up with buggy implementations.","performed_via_github_app":null}]