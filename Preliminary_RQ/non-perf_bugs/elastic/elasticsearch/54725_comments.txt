[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/608506789","html_url":"https://github.com/elastic/elasticsearch/issues/54725#issuecomment-608506789","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54725","id":608506789,"node_id":"MDEyOklzc3VlQ29tbWVudDYwODUwNjc4OQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-04-03T15:29:27Z","updated_at":"2020-04-03T15:29:27Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/Search)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/608575050","html_url":"https://github.com/elastic/elasticsearch/issues/54725#issuecomment-608575050","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54725","id":608575050,"node_id":"MDEyOklzc3VlQ29tbWVudDYwODU3NTA1MA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-04-03T17:47:52Z","updated_at":"2020-04-03T17:48:29Z","author_association":"CONTRIBUTOR","body":"Hmm I had something working in eclipse but the build process packages jars in a way that means I don't have the privileged access to Regexp internals :( \r\nWill need to take another look next week.\r\n\r\n    failed to access class org.apache.lucene.util.automaton.RegExp$Kind from class org.apache.lucene.util.automaton.RegexDecoder$1 (org.apache.lucene.util.automaton.RegExp$Kind is in unnamed module of loader 'app'; org.apache.lucene.util.automaton.RegexDecoder$1 is in unnamed module of loader java.net.FactoryURLClassLoader @6fe04f2a)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/609672312","html_url":"https://github.com/elastic/elasticsearch/issues/54725#issuecomment-609672312","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54725","id":609672312,"node_id":"MDEyOklzc3VlQ29tbWVudDYwOTY3MjMxMg==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-04-06T09:10:57Z","updated_at":"2020-04-06T09:10:57Z","author_association":"CONTRIBUTOR","body":"One workaround is to change Lucene's Regexp class. It already has a \"toStringTree\" method but I propose adding another similar method but which creates a BooleanQuery rather than a string representation. This query can be used as an approximation to limit the set of documents visited with an automaton - something like this:\r\n\r\n\r\n\tpublic Query toApproximation(ExpressionMatcher matcher) {\r\n\t   ... // walks tree of expressions calling matcher.createQuery() for char sequences\r\n\t}\r\n\r\n\t/**\r\n\t* Provides Query objects to accelerate regex matching by looking for sequences \r\n    * using an index (typically ngram-based).\r\n\t*/\r\n\tpublic interface ExpressionMatcher {\r\n\t  /**\r\n\t   * returns a Query object that is guaranteed to find all instances of documents containing the provided character sequence\r\n\t   * or null if this guarantee cannot be met. Over-matching (false positives) is possible but false negatives must be avoided\r\n\t   * @param value A character sequence which is part of the regexp\r\n\t   * @return a query object or null.\r\n\t   */\r\n\t  public Query createQuery(String value);\r\n\t}\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/610896439","html_url":"https://github.com/elastic/elasticsearch/issues/54725#issuecomment-610896439","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/54725","id":610896439,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDg5NjQzOQ==","user":{"login":"romseygeek","id":1347065,"node_id":"MDQ6VXNlcjEzNDcwNjU=","avatar_url":"https://avatars0.githubusercontent.com/u/1347065?v=4","gravatar_id":"","url":"https://api.github.com/users/romseygeek","html_url":"https://github.com/romseygeek","followers_url":"https://api.github.com/users/romseygeek/followers","following_url":"https://api.github.com/users/romseygeek/following{/other_user}","gists_url":"https://api.github.com/users/romseygeek/gists{/gist_id}","starred_url":"https://api.github.com/users/romseygeek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/romseygeek/subscriptions","organizations_url":"https://api.github.com/users/romseygeek/orgs","repos_url":"https://api.github.com/users/romseygeek/repos","events_url":"https://api.github.com/users/romseygeek/events{/privacy}","received_events_url":"https://api.github.com/users/romseygeek/received_events","type":"User","site_admin":false},"created_at":"2020-04-08T11:09:31Z","updated_at":"2020-04-08T11:09:31Z","author_association":"CONTRIBUTOR","body":"Another option would be to add a more generic Regexp walker method, and refactor both the toStringTree() and toAutomaton() methods to use it.  Something like:\r\n```\r\npublic T walkTree(Function<RegExp, T> handleRegexp);\r\n```","performed_via_github_app":null}]