{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/36195","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36195/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36195/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36195/events","html_url":"https://github.com/elastic/elasticsearch/issues/36195","id":387113344,"node_id":"MDU6SXNzdWUzODcxMTMzNDQ=","number":36195,"title":"Cluster gets hanged after setting \"cluster.routing.allocation.node_concurrent_recoveries\" up to 100.","user":{"login":"howardhuanghua","id":15325213,"node_id":"MDQ6VXNlcjE1MzI1MjEz","avatar_url":"https://avatars0.githubusercontent.com/u/15325213?v=4","gravatar_id":"","url":"https://api.github.com/users/howardhuanghua","html_url":"https://github.com/howardhuanghua","followers_url":"https://api.github.com/users/howardhuanghua/followers","following_url":"https://api.github.com/users/howardhuanghua/following{/other_user}","gists_url":"https://api.github.com/users/howardhuanghua/gists{/gist_id}","starred_url":"https://api.github.com/users/howardhuanghua/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/howardhuanghua/subscriptions","organizations_url":"https://api.github.com/users/howardhuanghua/orgs","repos_url":"https://api.github.com/users/howardhuanghua/repos","events_url":"https://api.github.com/users/howardhuanghua/events{/privacy}","received_events_url":"https://api.github.com/users/howardhuanghua/received_events","type":"User","site_admin":false},"labels":[{"id":152510590,"node_id":"MDU6TGFiZWwxNTI1MTA1OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/Recovery","name":":Distributed/Recovery","color":"0e8a16","default":false,"description":"Anything around constructing a new shard, either from a local or a remote source."},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"dnhatn","id":13474362,"node_id":"MDQ6VXNlcjEzNDc0MzYy","avatar_url":"https://avatars3.githubusercontent.com/u/13474362?v=4","gravatar_id":"","url":"https://api.github.com/users/dnhatn","html_url":"https://github.com/dnhatn","followers_url":"https://api.github.com/users/dnhatn/followers","following_url":"https://api.github.com/users/dnhatn/following{/other_user}","gists_url":"https://api.github.com/users/dnhatn/gists{/gist_id}","starred_url":"https://api.github.com/users/dnhatn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnhatn/subscriptions","organizations_url":"https://api.github.com/users/dnhatn/orgs","repos_url":"https://api.github.com/users/dnhatn/repos","events_url":"https://api.github.com/users/dnhatn/events{/privacy}","received_events_url":"https://api.github.com/users/dnhatn/received_events","type":"User","site_admin":false},"assignees":[{"login":"dnhatn","id":13474362,"node_id":"MDQ6VXNlcjEzNDc0MzYy","avatar_url":"https://avatars3.githubusercontent.com/u/13474362?v=4","gravatar_id":"","url":"https://api.github.com/users/dnhatn","html_url":"https://github.com/dnhatn","followers_url":"https://api.github.com/users/dnhatn/followers","following_url":"https://api.github.com/users/dnhatn/following{/other_user}","gists_url":"https://api.github.com/users/dnhatn/gists{/gist_id}","starred_url":"https://api.github.com/users/dnhatn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnhatn/subscriptions","organizations_url":"https://api.github.com/users/dnhatn/orgs","repos_url":"https://api.github.com/users/dnhatn/repos","events_url":"https://api.github.com/users/dnhatn/events{/privacy}","received_events_url":"https://api.github.com/users/dnhatn/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2018-12-04T04:20:07Z","updated_at":"2019-07-18T02:30:35Z","closed_at":"2019-07-18T02:30:35Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"<!-- Bug report -->\r\n\r\n**Elasticsearch version**: 6.4.3/6.5.1\r\n\r\n**JVM version**: 1.8.0.181\r\n\r\n**OS version**: CentOS 7.4\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\nProduct environment: 15 nodes, 2700+ indices, 15000+ shards.\r\nCluster gets hanged after setting \"cluster.routing.allocation.node_concurrent_recoveries\" up to 100.\r\n\r\n**Steps to reproduce**:\r\n 1. Setup a three nodes cluster. 1 core, 2GB per node.\r\n 2. Create 300 indices, 3000 shards. Each index with 100 documents.\r\n 3. Set these parameters for cluster dynamically:\r\ncurl -X PUT \"localhost:9200/_cluster/settings\" -H 'Content-Type: application/json' -d'\r\n{\r\n    \"persistent\": {\r\n        \"cluster.routing.allocation.node_concurrent_recoveries\": 100,\r\n        \"indices.recovery.max_bytes_per_sec\": \"400mb\"\r\n    }\r\n}'\r\n 4. Stop one of the nodes and remove data from data path.\r\n 5. Startup the stopped node. \r\n 6. After a while, cluster got hanged.\r\n\r\nWe could see each node's generic thread pool used up to 128 which is full.\r\n[c_log@VM_128_27_centos ~/elasticsearch-6.4.3/bin]$ curl localhost:9200/_cat/thread_pool/generic?v\r\nnode_name name    active queue rejected\r\nnode-3    generic    128  949         0\r\nnode-2    generic    128  1093        0\r\nnode-1    generic    128  1076        0\r\n\r\nLot's of peer recoveries are waiting:\r\n![image](https://user-images.githubusercontent.com/15325213/49418468-3c754c80-f7bd-11e8-9eeb-f998dae2fd58.png)\r\n\r\nJstack output for hanged node, all generic threads are waiting on txGet:\r\n`\r\n\"elasticsearch[node-3][generic][T#128]\" #179 daemon prio=5 os_prio=0 tid=0x00007fa8980c8800 nid=0x3cb9 waiting on condition [0x00007fa86ca0a000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n        at sun.misc.Unsafe.park(Native Method)\r\n        - parking to wait for  <0x00000000fbef56f0> (a org.elasticsearch.common.util.concurrent.BaseFuture$Sync)\r\n        at java.util.concurrent.locks.LockSupport.park(Unknown Source)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(Unknown Source)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(Unknown Source)\r\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(Unknown Source)\r\n        at org.elasticsearch.common.util.concurrent.BaseFuture$Sync.get(BaseFuture.java:251)\r\n        at org.elasticsearch.common.util.concurrent.BaseFuture.get(BaseFuture.java:94)\r\n        at org.elasticsearch.transport.PlainTransportFuture.txGet(PlainTransportFuture.java:44)\r\n        at org.elasticsearch.transport.PlainTransportFuture.txGet(PlainTransportFuture.java:32)\r\n        at org.elasticsearch.indices.recovery.RemoteRecoveryTargetHandler.receiveFileInfo(RemoteRecoveryTargetHandler.java:133)\r\n        at org.elasticsearch.indices.recovery.RecoverySourceHandler.lambda$phase1$6(RecoverySourceHandler.java:387)\r\n        at org.elasticsearch.indices.recovery.RecoverySourceHandler$$Lambda$3071/1370938617.run(Unknown Source)\r\n        at org.elasticsearch.common.util.CancellableThreads.executeIO(CancellableThreads.java:105)\r\n        at org.elasticsearch.common.util.CancellableThreads.execute(CancellableThreads.java:86)\r\n        at org.elasticsearch.indices.recovery.RecoverySourceHandler.phase1(RecoverySourceHandler.java:386)\r\n        at org.elasticsearch.indices.recovery.RecoverySourceHandler.recoverToTarget(RecoverySourceHandler.java:172)\r\n        at org.elasticsearch.indices.recovery.PeerRecoverySourceService.recover(PeerRecoverySourceService.java:98)\r\n        at org.elasticsearch.indices.recovery.PeerRecoverySourceService.access$000(PeerRecoverySourceService.java:50)\r\n        at org.elasticsearch.indices.recovery.PeerRecoverySourceService$StartRecoveryTransportRequestHandler.messageReceived(PeerRecoverySourceService.java:107)\r\n        at org.elasticsearch.indices.recovery.PeerRecoverySourceService$StartRecoveryTransportRequestHandler.messageReceived(PeerRecoverySourceService.java:104)\r\n        at org.elasticsearch.transport.TransportRequestHandler.messageReceived(TransportRequestHandler.java:30)\r\n        at org.elasticsearch.xpack.security.transport.SecurityServerTransportInterceptor$ProfileSecuredRequestHandler$1.doRun(SecurityServerTransportInterceptor.java:251)\r\n        at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n        at org.elasticsearch.xpack.security.transport.SecurityServerTransportInterceptor$ProfileSecuredRequestHandler.messageReceived(SecurityServerTransportInterceptor.java:309)\r\n        at org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:66)\r\n        at org.elasticsearch.transport.TcpTransport$RequestHandler.doRun(TcpTransport.java:1605)\r\n        at org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:723)\r\n        at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\r\n        at java.lang.Thread.run(Unknown Source)\r\n`\r\n\r\nSo, cluster should get hanged in distributed deadlocks.\r\n\r\nThanks,\r\nHoward\r\n","closed_by":{"login":"dnhatn","id":13474362,"node_id":"MDQ6VXNlcjEzNDc0MzYy","avatar_url":"https://avatars3.githubusercontent.com/u/13474362?v=4","gravatar_id":"","url":"https://api.github.com/users/dnhatn","html_url":"https://github.com/dnhatn","followers_url":"https://api.github.com/users/dnhatn/followers","following_url":"https://api.github.com/users/dnhatn/following{/other_user}","gists_url":"https://api.github.com/users/dnhatn/gists{/gist_id}","starred_url":"https://api.github.com/users/dnhatn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnhatn/subscriptions","organizations_url":"https://api.github.com/users/dnhatn/orgs","repos_url":"https://api.github.com/users/dnhatn/repos","events_url":"https://api.github.com/users/dnhatn/events{/privacy}","received_events_url":"https://api.github.com/users/dnhatn/received_events","type":"User","site_admin":false},"performed_via_github_app":null}