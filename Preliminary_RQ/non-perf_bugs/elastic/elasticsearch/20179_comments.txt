[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/242784189","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-242784189","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":242784189,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Mjc4NDE4OQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-08-26T16:31:12Z","updated_at":"2016-08-26T16:31:12Z","author_association":"MEMBER","body":"> Moreover, this doesn't play well if there are other supervisors in the environment, which may block dangerous/unknown syscalls.\n\nDo you have specific problem in mind that can you can elaborate on?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/242789856","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-242789856","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":242789856,"node_id":"MDEyOklzc3VlQ29tbWVudDI0Mjc4OTg1Ng==","user":{"login":"lucab","id":98086,"node_id":"MDQ6VXNlcjk4MDg2","avatar_url":"https://avatars1.githubusercontent.com/u/98086?v=4","gravatar_id":"","url":"https://api.github.com/users/lucab","html_url":"https://github.com/lucab","followers_url":"https://api.github.com/users/lucab/followers","following_url":"https://api.github.com/users/lucab/following{/other_user}","gists_url":"https://api.github.com/users/lucab/gists{/gist_id}","starred_url":"https://api.github.com/users/lucab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucab/subscriptions","organizations_url":"https://api.github.com/users/lucab/orgs","repos_url":"https://api.github.com/users/lucab/repos","events_url":"https://api.github.com/users/lucab/events{/privacy}","received_events_url":"https://api.github.com/users/lucab/received_events","type":"User","site_admin":false},"created_at":"2016-08-26T16:54:19Z","updated_at":"2016-08-26T16:54:19Z","author_association":"NONE","body":"> Do you have specific problem in mind that can you can elaborate on?\n- This falls outside of Docker default seccomp filter and causes troubles: https://github.com/docker-library/elasticsearch/issues/98\n- there is no way for systemd [SystemCallFlter](https://www.freedesktop.org/software/systemd/man/systemd.exec.html#SystemCallFilter=) to build a sane filter for this\n- syscall numbers are not portable across architectures, and to build a filter for this you need to hardcode the syscall number, which goes against libseccomp recommendations\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/242804182","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-242804182","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":242804182,"node_id":"MDEyOklzc3VlQ29tbWVudDI0MjgwNDE4Mg==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-08-26T17:50:27Z","updated_at":"2016-08-26T17:50:27Z","author_association":"MEMBER","body":"> This falls outside of Docker default seccomp filter and causes troubles: https://github.com/docker-library/elasticsearch/issues/98\n\nThis has been addressed: #19754\n\n> there is no way for systemd [SystemCallFlter](https://www.freedesktop.org/software/systemd/man/systemd.exec.html#SystemCallFilter=) to build a sane filter for this\n\nWhat filters are you trying to apply?\n\n> syscall numbers are not portable across architectures, and to build a filter for this you need to hardcode the syscall number, which goes against libseccomp recommendations\n\nWe only support seccomp on i386 and amd64, we do not attempt to install seccomp off these two architectures.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246113809","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-246113809","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":246113809,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjExMzgwOQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-09-10T14:11:10Z","updated_at":"2016-09-10T14:11:10Z","author_association":"MEMBER","body":"No feedback, closing. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246118850","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-246118850","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":246118850,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjExODg1MA==","user":{"login":"lucab","id":98086,"node_id":"MDQ6VXNlcjk4MDg2","avatar_url":"https://avatars1.githubusercontent.com/u/98086?v=4","gravatar_id":"","url":"https://api.github.com/users/lucab","html_url":"https://github.com/lucab","followers_url":"https://api.github.com/users/lucab/followers","following_url":"https://api.github.com/users/lucab/following{/other_user}","gists_url":"https://api.github.com/users/lucab/gists{/gist_id}","starred_url":"https://api.github.com/users/lucab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucab/subscriptions","organizations_url":"https://api.github.com/users/lucab/orgs","repos_url":"https://api.github.com/users/lucab/repos","events_url":"https://api.github.com/users/lucab/events{/privacy}","received_events_url":"https://api.github.com/users/lucab/received_events","type":"User","site_admin":false},"created_at":"2016-09-10T15:44:59Z","updated_at":"2016-09-10T15:46:02Z","author_association":"NONE","body":"I was hoping that `please do not invoke random/unimplemented syscalls` didn't need any further feedback and explanations, but it looks like I was wrong.\n\nAlso, I'm not too happy that you started dragging this further down to \"please bring more cases and feedback\", given the multiple rationales I provided beforehand.\n\nAnyway, as it looks like you explicitly require more details as to why this ES behavior is a bad idea, here I'm providing more.\n\n> This has been addressed: #19754\n\nThis is merely a workaround for a very specific case (which is why I didn't want to discuss overly specific cases, because we can keep piling up workarounds forever). Docker seccomp profiles (and any other seccomp-enabled supervisor, actually) can return whatever `errno` they want for blocked syscalls. By default invoking a blocked syscalls will trigger a `SIGSYS` signal, but that's just _one of the possible behaviors_ (so please no, don't workaround this cornercase too). If you need another usecase, see https://github.com/coreos/rkt/issues/3121 (but again, I didn't bring this in exactly to avoid biased workarounds).\n\n> What filters are you trying to apply?\n\nAny whitelisting filter. Given that ES is invoking a syscall that is not part of the kernel ABI contract, there is no portable label to identify and whitelist it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246126896","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-246126896","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":246126896,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjEyNjg5Ng==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-09-10T18:15:13Z","updated_at":"2016-09-10T20:12:48Z","author_association":"MEMBER","body":"> I was hoping that `please do not invoke random/unimplemented syscalls` didn't need any further feedback and explanations, but it looks like I was wrong.\n\nOf course it requires explanation, and incredulity is not warranted here. We have valid reasons for doing what we do, you have valid reasons for suggesting that we think about it differently, and the only way to find common ground is to have a dialog.\n\n> Also, I'm not too happy that you started dragging this further down to \"please bring more cases and feedback\", given the multiple rationales I provided beforehand.\n\nWe are not going to get far at all if you can't see my questions as seeking to further understand what you're doing and thinking so we can reconsider what we do. The pejoratives are misguided.\n\nFor the record, since you opened this issue I've been leaning very heavily towards _completely_ removing this paranoid check, but I prefer to proceed carefully, hence the questions.\n\nThank you for coming back and addressing my questions, I'll reopen this issue and you can expect movement on it soon.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/315128954","html_url":"https://github.com/elastic/elasticsearch/issues/20179#issuecomment-315128954","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20179","id":315128954,"node_id":"MDEyOklzc3VlQ29tbWVudDMxNTEyODk1NA==","user":{"login":"stub42","id":2928805,"node_id":"MDQ6VXNlcjI5Mjg4MDU=","avatar_url":"https://avatars0.githubusercontent.com/u/2928805?v=4","gravatar_id":"","url":"https://api.github.com/users/stub42","html_url":"https://github.com/stub42","followers_url":"https://api.github.com/users/stub42/followers","following_url":"https://api.github.com/users/stub42/following{/other_user}","gists_url":"https://api.github.com/users/stub42/gists{/gist_id}","starred_url":"https://api.github.com/users/stub42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stub42/subscriptions","organizations_url":"https://api.github.com/users/stub42/orgs","repos_url":"https://api.github.com/users/stub42/repos","events_url":"https://api.github.com/users/stub42/events{/privacy}","received_events_url":"https://api.github.com/users/stub42/received_events","type":"User","site_admin":false},"created_at":"2017-07-13T16:21:39Z","updated_at":"2017-07-13T16:21:39Z","author_association":"NONE","body":"This issue stops elasticsearch from being packaged as a confined snap (snapcraft.io) for similar reasons to docker. The confinement policy causes the call to fail with permission errors. I imagine this is correct, as this sort of probing is the sort of thing confinement should be blocking, rather than leaking details about the kernel that are supposed to be walled off.","performed_via_github_app":null}]