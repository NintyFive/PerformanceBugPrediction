{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/32789","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32789/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32789/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32789/events","html_url":"https://github.com/elastic/elasticsearch/issues/32789","id":349577653,"node_id":"MDU6SXNzdWUzNDk1Nzc2NTM=","number":32789,"title":"[ingest] Enrich documents prior to indexing ","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"labels":[{"id":268963484,"node_id":"MDU6TGFiZWwyNjg5NjM0ODQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Ingest","name":":Core/Features/Ingest","color":"0e8a16","default":false,"description":"Execution or management of Ingest Pipelines"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"assignees":[{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},{"login":"hub-cap","id":613352,"node_id":"MDQ6VXNlcjYxMzM1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/613352?v=4","gravatar_id":"","url":"https://api.github.com/users/hub-cap","html_url":"https://github.com/hub-cap","followers_url":"https://api.github.com/users/hub-cap/followers","following_url":"https://api.github.com/users/hub-cap/following{/other_user}","gists_url":"https://api.github.com/users/hub-cap/gists{/gist_id}","starred_url":"https://api.github.com/users/hub-cap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hub-cap/subscriptions","organizations_url":"https://api.github.com/users/hub-cap/orgs","repos_url":"https://api.github.com/users/hub-cap/repos","events_url":"https://api.github.com/users/hub-cap/events{/privacy}","received_events_url":"https://api.github.com/users/hub-cap/received_events","type":"User","site_admin":false},{"login":"jbaiera","id":875779,"node_id":"MDQ6VXNlcjg3NTc3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/875779?v=4","gravatar_id":"","url":"https://api.github.com/users/jbaiera","html_url":"https://github.com/jbaiera","followers_url":"https://api.github.com/users/jbaiera/followers","following_url":"https://api.github.com/users/jbaiera/following{/other_user}","gists_url":"https://api.github.com/users/jbaiera/gists{/gist_id}","starred_url":"https://api.github.com/users/jbaiera/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jbaiera/subscriptions","organizations_url":"https://api.github.com/users/jbaiera/orgs","repos_url":"https://api.github.com/users/jbaiera/repos","events_url":"https://api.github.com/users/jbaiera/events{/privacy}","received_events_url":"https://api.github.com/users/jbaiera/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2018-08-10T16:20:48Z","updated_at":"2019-10-15T16:31:03Z","closed_at":"2019-10-15T14:31:04Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# Enrichment at ingest \r\n\r\nThis issue describes a project that will leverage the ingest node to allow for enrichment of documents before they are indexed. \r\n\r\nBelow is a diagram that highlights the workflow. The red parts are new components. \r\n\r\n<img width=\"622\" alt=\"image\" src=\"https://user-images.githubusercontent.com/976291/55753443-f6045880-5a0f-11e9-84d1-57bff7db5fd4.png\">\r\n\r\n* `.enrich-*` - index(es) managed managed by Elasticsearch that contains a highly optimized subset of the source data used for enrichment. \r\n*  source index - a normal index managed externally (e.g. not by Elasticsearch) that contains the data used for enrichment\r\n* `enrich policy` - a policy that describes how to synchronize the source index with the `.enrich-*` index. The policy will describe which fields to copy and how often to copy the fields. \r\n* `decorate processor` - an ingest node processor that reads from a `.enrich-*` index to mutate the raw data before it is indexed. The `.enrich-*` will be data local to the `decorate processor`.   \r\n\r\n----------\r\nThere are many moving parts so this issue will serve as a central place to track them.\r\n\r\n# Tasks\r\n\r\n# Enrich policy definition\r\n- [x] Define the `enrich policy` (@martijnvg) https://github.com/elastic/elasticsearch/pull/41003\r\n- [x] Rename `enrich_key` to `match_field` and `enrich_values` to `enrich_fields`.\r\n- [x] Remove `type` field and make the type a top level json object that contains all the configuration of an enrich policy. #45789\r\n\r\n```\r\n{\r\n  \"exact_match\": {\r\n\t\"match_field\": \"prsnl.id\",\r\n\t\"enrich_fields\": [\r\n  \t  \"prsnl.name.first\",\r\n  \t  \"prsnl.name.last\"\r\n\t],\r\n\t\"indices\": [\r\n  \t  \"bar*\",\r\n  \t  \"foo\"\r\n\t],\r\n\t\"query\": {}\r\n  }\r\n}\r\n```\r\n\r\ninstead of:\r\n\r\n```\r\n{\r\n    \"type\": \"exact_match\",\r\n    \"indices\": [\r\n   \t \"bar*\",\r\n   \t \"foo\"\r\n    ],\r\n    \"match_field\": \"prsnl.id\",\r\n    \"enrich_fields\": [\r\n   \t \"prsnl.name.first\",\r\n   \t \"prsnl.name.last\"\r\n    ],\r\n    \"query\": {\r\n    }\r\n}\r\n\r\n```\r\n\r\n## Enrich processor\r\n- [x] Write rally track for exact match processor.\r\n- [x] Add an enrich processor that uses the search api via node client in order to do the enrichment.\r\n- [x]  Optimize they way msearch is executed for enrich processor lookups. Enrich indices always have a single shard, which allows us the easily optimize the execution of multiple search requests bundled together in a bulk. #43965 \r\n- [x] Ensure that EnrichProcessorFactory always has access to the latest enrich policies.\r\n  (Currently if multiple CS updates are combined then enrich policy changes may not be visible)\r\n- [x] Allows `IngestService` to register components that are updated before the processor factories.\r\n- [x] Register `EnrichProcessorFactory` as component that keeps track of the policies. \r\n- [x] Rename the `enrich_key` option to `field` in enrich processor configuration. #45466\r\n- [x] Remove `set_from` and `targets` options and introduce `target_field` option that is inline with what `geoip` processor is doing. The entire looked up document is placed as json object under the `target_field`. #45466\r\n- [x] Change the enrich processor to not depend on the actual `EnrichPolicy` instance. Just on the policy name. From the policy name, the enrich index alias can be resolved and from the the currently active enrich index. The enrich index should have the `match_field` of policy in the meta mapping stored, this is the only piece of information required to do the enrichment at ingest time. #45826 \r\n- [x] Add overwrite parameter to enrich processor. #45029\r\n- [ ] Add template support to field and target_field parameters.\r\n- [ ] Include match count into document being enriched to see whether there were no matches or multiple matches.\r\n- [ ] Add a LRU cache that is only used when enrich processor needs to make a remote call to do the lookup.\r\n- [x] Add support for match policy type.\r\n- [x] Add support for geo_share_match_policy type. #42639\r\n- [ ] Add support for ip_range_match policy type.\r\n- [ ] Explore warming the LRU cache based on entries from the previous enrich index.\r\n\r\n## Policy management\r\n- [x] Think about bwc around enrich policy types.\r\n  (add created version to EnrichPolicy?) (@jbaiera) #45021\r\n- [x] Execute force merge when running policy. (@jbaiera) #41969 \r\n- [x] Introduce background process that removes enrich indices that are not referenced by an alias or no policy exists for an enrich index. ~The background process should mark indices for deletion first, and remove them in the next execution (To avoid deleting indices that have been freshly retired from the enrich alias and still potentially in use)~. Also the background process should not delete any indices that are tied to policies currently being executed - We don't want to throw out new indices that are currently being populated by a policy execution. (@jbaiera) #43746 \r\n- [x] Add validation that enrich key fields / enrich values\r\n  field are not inside an array of objects (nested). (@jbaiera) #42452\r\n- [x] De-normalize nested data inside source index when executing policy.\r\n- [x] Stats (in memory)\r\n- [x] Error Handling\r\n- [x] Add description to .enrich index as _meta mapping to indicate that this index is managed by ES and shouldn't be modified in any way. (@jbaiera)\r\n- [x] Always drop the _id and _routing field from documents originating from source indices. This to ensure the uniqueness of documents. (@jbaiera)\r\n- [x] Overwrite specific index settings on enrich index: disable field data, global ordinals loading, shard allocation filtering, automatic refresh.\r\n- [x] Should force merge as part of policy execution results in more than one segment retry the force merge or fail the execute policy request?\r\n\r\n## APIs\r\n- [x] Get policy API\r\n- [x] Execute policy API.\r\n- [x] Add manage_enrich privilege.\r\n- [x] Make policies immutable. The PUT policy api should fail when a policy already exists, so effectively this api can only return a 200 response code. If a policy needs to be changed then it first needs to be removed, or alternatively, a new policy under a different name should be added. (@hub-cap) #43604\r\n- [x] A policy should not be removed if a pipeline is still referencing it. (@hub-cap) #44438\r\n- [x] The delete policy api should first remove all enrich indices of a policy, before removing the policy from the cluster state. (@hub-cap) #45870\r\n- [x] Use has_privilege api as part of put policy api to check whether the user has sufficient privileges in source index. (@hub-cap) #43595\r\n- [x] Policy name validation. The validation should be similar to index name validation, because the policy name is used to created an index. (same validation as in `MetaDataCreateIndexService#validateIndexOrAliasName`) (@martijnvg)\r\n- [x] Replace current get and list APIs with another API that returns both a single policy and all policies. In both cases a list should be returned. For example \r\n`GET  _enrich/policy/users-policy` (specific policy) and `GET  _enrich/policy` (all policies). Both variants should always return a list of objects. And later also support:\r\n`GET  _enrich/policy/users-*` and `GET  _enrich/policy/users-policy,users2-policy`. (@hub-cap) #45705 \r\n- [x] CRUD for `enrich policy` (@hub-cap) _enrich/policy/name\r\n- [x] Store enrich policy in an index (`.enrich-policies` ?) instead of in the cluster state. (@hub-cap) #47475\r\n- [x] Stats API\r\n- [ ] Integrate stats api with monitoring\r\n- [ ] Telemetry support\r\n- [ ] task api for execute ?wait_for_completion=false (@hub-cap)\r\n- [x] GET wildcard and comma separated policy names (@hub-cap)\r\n\r\n## Misc\r\n- [x] Restart qa test\r\n- [x] Documentation\r\n- [x] Enable / Disable settings\r\n- [x] HLRC\r\n- [x] ~~update Kibana roles for new role, to be done after the feature branch is merged to master~~ obsoleted by https://github.com/elastic/kibana/pull/40270\r\n- [ ] update stack docs for the new role, to be done after the feature branch is merged to master\r\n- [x] Transport client support. (@hub-cap) #46002\r\n- [ ] Integration with xpack usage api.\r\n\r\n---------\r\nEDITS:\r\n* 2019-4-8: Changed the original description of this issue to reflect the current direction*\r\n* 20190507: Updated after planning meeting.","closed_by":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"performed_via_github_app":null}