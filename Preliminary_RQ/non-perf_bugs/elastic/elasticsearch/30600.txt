{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30600","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30600/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30600/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30600/events","html_url":"https://github.com/elastic/elasticsearch/issues/30600","id":323059045,"node_id":"MDU6SXNzdWUzMjMwNTkwNDU=","number":30600,"title":"Composite Aggregation and Sorting with a non source","user":{"login":"willchu","id":182378,"node_id":"MDQ6VXNlcjE4MjM3OA==","avatar_url":"https://avatars0.githubusercontent.com/u/182378?v=4","gravatar_id":"","url":"https://api.github.com/users/willchu","html_url":"https://github.com/willchu","followers_url":"https://api.github.com/users/willchu/followers","following_url":"https://api.github.com/users/willchu/following{/other_user}","gists_url":"https://api.github.com/users/willchu/gists{/gist_id}","starred_url":"https://api.github.com/users/willchu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willchu/subscriptions","organizations_url":"https://api.github.com/users/willchu/orgs","repos_url":"https://api.github.com/users/willchu/repos","events_url":"https://api.github.com/users/willchu/events{/privacy}","received_events_url":"https://api.github.com/users/willchu/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-05-15T04:02:51Z","updated_at":"2018-05-15T04:35:39Z","closed_at":"2018-05-15T04:35:38Z","author_association":"NONE","active_lock_reason":null,"body":"Hello, \r\n\r\nUsing Elasticsearch, I would like to construct a query that buckets my results but also allows for pagination. Based on this requirement, it seems that I need to use a composite aggregation. \r\n\r\nHowever, I also would like to sort the results based on a field that is not one of the sources. It doesn’t seem like composite aggregation currently supports this. Is this correct? If you want to sort by a field, it has to be one of the “sources” in the elasticsearch query\r\n\r\nHere’s an example of what I’m trying to do: \r\n\r\nI have a giant list of messages from different people that are timestamped of when the message was sent. I would like to bucket the messages by person and have the list of people sorted by the time of the last message sent. If John Smith was the person to send me the most recent message, then his name bucket would appear at the top of the list. The next person in the list would be the person who sent the most recent message after John Smith. \r\n\r\nIn this example, the composite aggregation source would be the name of the person. \r\n\r\nI believe that can’t use terms aggregation because it doesn’t support pagination. Is there a way to make this work with composite aggregation? \r\n\r\n","closed_by":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"performed_via_github_app":null}