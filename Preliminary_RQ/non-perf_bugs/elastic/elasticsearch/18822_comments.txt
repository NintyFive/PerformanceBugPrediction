[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225302684","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225302684","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225302684,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTMwMjY4NA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-06-10T21:40:06Z","updated_at":"2016-06-10T21:40:06Z","author_association":"MEMBER","body":"> Currently we can only prefer a single node and that single node must be the node's id. The node id is dynamically generated which does not allow this feature to be used with out much effort to maintain it.\n\nNodes will be getting a persistent node IDs in Elasticsearch 5.0.0 (it will be generated the first time a node starts up, persisted to disk, and used forever after that). I don't think that this is the solution to your problem, see below.\n\n> I have a single cluster across multiple data centers\n\nWe generally recommend against this.\n\n> force client nodes in data center A to only send search queries to data nodes in data center A\n\nUse the `_only_nodes` preference? You can specify a common attribute on the nodes and use that attribute for the client? This seems to me to be the best option?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225306649","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225306649","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225306649,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTMwNjY0OQ==","user":{"login":"dev-head","id":1741038,"node_id":"MDQ6VXNlcjE3NDEwMzg=","avatar_url":"https://avatars3.githubusercontent.com/u/1741038?v=4","gravatar_id":"","url":"https://api.github.com/users/dev-head","html_url":"https://github.com/dev-head","followers_url":"https://api.github.com/users/dev-head/followers","following_url":"https://api.github.com/users/dev-head/following{/other_user}","gists_url":"https://api.github.com/users/dev-head/gists{/gist_id}","starred_url":"https://api.github.com/users/dev-head/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dev-head/subscriptions","organizations_url":"https://api.github.com/users/dev-head/orgs","repos_url":"https://api.github.com/users/dev-head/repos","events_url":"https://api.github.com/users/dev-head/events{/privacy}","received_events_url":"https://api.github.com/users/dev-head/received_events","type":"User","site_admin":false},"created_at":"2016-06-10T22:01:13Z","updated_at":"2016-06-10T22:03:19Z","author_association":"NONE","body":"`_only_nodes` would cause an error if the nodes are offline for any reason, i do want it to be able to fall back, which is why `_prefer_node` is more helpful in our case. We need to have 99.9999% up time and sub second global latency all while handling an ever growing data set and user base. \n\nA persistent node id would make life easier but it still means ES is in charge where I want to be in charge of it, mainly for automation needs. \n\nMy use case may not be the normal one, but it does seem to be pretty commonly run into by the community. I need to provide the same data across the globe and ES can do that, right now there just isn't much to support this type of use case for one reason or another. \n\nWe could have multiple clusters running, but it is a bit over kill to have to mange feeding the same data into each cluster and then manage all the collisions it can cause because each cluster has it's own view of the data. \n\nedit: for clarity\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225308205","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225308205","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225308205,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTMwODIwNQ==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-06-10T22:09:53Z","updated_at":"2016-06-10T22:09:53Z","author_association":"CONTRIBUTOR","body":"> We need to have 99.9999% up time\n> \n> I have a single cluster across multiple data centers\n\nI don't think these statement work well together.\n\nIf you need sub-second global latency you'll need a couple of distinct clusters and a system that forks writes to all of them. This is far superior to a single cluster because you can shoot one of the clusters and have your application fail over to the other DC temporarily. Fully separate clusters are what a truly paranoid administrator should want. And you can't have that kind of uptime without massive paranoia. I'm [told](http://uptime.is/99.9999) six nines is 31.6 seconds of downtime a year. So you'll need stuff like automatic failover across DCs too.\n\nI haven't formed an opinion on `_prefer_node`, though.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225310101","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225310101","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225310101,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTMxMDEwMQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-06-10T22:21:22Z","updated_at":"2016-06-10T22:21:22Z","author_association":"MEMBER","body":"> `_only_nodes` would cause an error if the nodes are offline for any reason, i do want it to be able to fall back, which is why `_prefer_node` is more helpful in our case.\n\nNote that you did say\n\n> force client nodes in data center A to _only_ send search queries to data nodes in data center A\n\nbut I appreciate the clarification (emphasis added).\n\n> We need to have 99.9999% up time and sub second global latency all while handling an ever growing data set and user base.\n\nThis is not going to happen with a single _cluster_, sorry.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225317481","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225317481","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225317481,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTMxNzQ4MQ==","user":{"login":"dev-head","id":1741038,"node_id":"MDQ6VXNlcjE3NDEwMzg=","avatar_url":"https://avatars3.githubusercontent.com/u/1741038?v=4","gravatar_id":"","url":"https://api.github.com/users/dev-head","html_url":"https://github.com/dev-head","followers_url":"https://api.github.com/users/dev-head/followers","following_url":"https://api.github.com/users/dev-head/following{/other_user}","gists_url":"https://api.github.com/users/dev-head/gists{/gist_id}","starred_url":"https://api.github.com/users/dev-head/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dev-head/subscriptions","organizations_url":"https://api.github.com/users/dev-head/orgs","repos_url":"https://api.github.com/users/dev-head/repos","events_url":"https://api.github.com/users/dev-head/events{/privacy}","received_events_url":"https://api.github.com/users/dev-head/received_events","type":"User","site_admin":false},"created_at":"2016-06-10T23:14:53Z","updated_at":"2016-06-10T23:14:53Z","author_association":"NONE","body":"There is a need to be able to use that preference to give routing control to the search queries. This is the reason that the preference exists today. Is this feature enhancement, to prefer more than one node and to identify that preference by a node name, a reasonable request, on it's own outside of my use case?\n\n---\n\n> This is not going to happen with a single cluster, sorry.\n> I don't think these statement work well together.\n\nchallenge accepted. 👍 \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225598110","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225598110","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225598110,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTU5ODExMA==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2016-06-13T14:30:07Z","updated_at":"2016-06-13T14:30:07Z","author_association":"MEMBER","body":"> I have a single cluster across multiple data centers and need to force client nodes in data center A to only send search queries to data nodes in data center A.\n\nA short note that if you take away the need to \"force\" and make it \"prefer\", you get it all out of the [allocation awareness feature](https://www.elastic.co/guide/en/elasticsearch/reference/2.3/allocation-awareness.html) by default:\n\n> When executing search or GET requests, with shard awareness enabled, Elasticsearch will prefer using local shards — shards in the same awareness group — to execute the request. This is usually faster than crossing racks or awareness zones.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/225819870","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-225819870","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":225819870,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNTgxOTg3MA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-06-14T08:55:07Z","updated_at":"2016-06-14T08:55:07Z","author_association":"CONTRIBUTOR","body":"I agree that running a cluster across two data centres (not availability zones) it very likely to end in tears.  Also, that using allocation awareness provides what @dev-head is after.\n\nThat said, I think adding `_prefer_nodes` as an adjunct  to `_only_nodes` makes sense.  I'd even consider removing `_only_node` and `_prefer_node`.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/226037278","html_url":"https://github.com/elastic/elasticsearch/issues/18822#issuecomment-226037278","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18822","id":226037278,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNjAzNzI3OA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-06-14T22:37:49Z","updated_at":"2016-06-14T22:37:49Z","author_association":"MEMBER","body":"> That said, I think adding `_prefer_nodes` as an adjunct  to `_only_nodes` makes sense.  I'd even consider removing `_only_node` and `_prefer_node`.\n\nI agree, and opened two little pieces: #18872 and #18875.\n","performed_via_github_app":null}]