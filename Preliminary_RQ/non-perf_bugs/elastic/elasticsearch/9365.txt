{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/9365","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9365/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9365/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9365/events","html_url":"https://github.com/elastic/elasticsearch/issues/9365","id":54884884,"node_id":"MDU6SXNzdWU1NDg4NDg4NA==","number":9365,"title":"Mappings: make mappings immutable","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":110815527,"node_id":"MDU6TGFiZWwxMTA4MTU1Mjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/help%20wanted","name":"help wanted","color":"207de5","default":true,"description":"adoptme"},{"id":266898191,"node_id":"MDU6TGFiZWwyNjY4OTgxOTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v2.2.0","name":"v2.2.0","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"assignees":[{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2015-01-20T13:50:15Z","updated_at":"2015-12-15T09:23:34Z","closed_at":"2015-12-15T09:23:34Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Today, mappings updates are performed in-place. This adds complexity for several reasons:\n### Synchronization\n\nWe have two places which are allowed to write to mappings:\n- dynamic mapping updates,\n- mapping updates coming from the API.\n\nAnd basically every search request needs to read them in order to figure out things like the search analyzer to use and volatiles are used to make sure that reads do not block.\n\nThe fact that writes can come from two different places makes synchronization subtle. We need to make sure to use the same locks (for correctness) and in the same order (to avoid deadlocks).\n### No atomicity\n\nLet's say that you perform a mapping update that modifies the mapping of two fields A and B. It's possible that a search request on these two fields will see the old mapping of field A and the new mapping of field B.\n\nWe also have a hack in order to prevent conflicting mappings to be half applied. Imagine that you want to change A and B, yet B would introduce a conflict (for instance by changing the index-time analyzer). In order to not apply the mapping update to A, we run the mapping update twice, first with a `simulate` flag set in order to not apply the mappings but only detect inconsistencies and then if the first run succeeded, we apply the mapping update. But this is quite fragile as you need to make sure that all field mappers are implemented correctly and:\n- do NOT modify anything if `simulate` is `true`\n- detect ALL inconsistencies if `simulate` is `true` (otherwise we are going to have a half-applied mapping)\n### Proposal\n\nI think the following design would be more resilient:\n- make mappings immutable\n- document parsing generates mapping updates (se #9364)\n- mapping updates create a new copy of the mapping (copy-on-write), which is atomatically swapped with the current mapping if the update succeeded and the resulting mapping is consistent\n- at the beginning of search requests, we take a snapshot of the mappings and make sure to use it for the whole execution of the search request (to make sure everything inside this search request sees the same mappings)\n\nNOTE: the fact that we copy on write does not mean that mapping updates would be costly, we just need to use appropriate data-structures like http://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/common/collect/CopyOnWriteHashMap.java\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}