[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244024191","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-244024191","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":244024191,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDAyNDE5MQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T09:21:35Z","updated_at":"2016-09-01T09:21:35Z","author_association":"CONTRIBUTOR","body":"I'm not sure we need to retain the notion of types, maybe we could go with something like below? You say that `parent_type` is used for the name of the internal join field, bu we could directly use the name of the join field directly for that? (in that case `question-to-answers`)\n\n```\nPUT /stackoverflow\n{\n  \"mappings\": {\n    \"properties\": {\n      \"question-to-answers\": {\n        \"type\": \"join\"\n      }\n    }\n  }\n}\n\nPUT stackoverflow/1\n{\n  \"question\" : \"...\",\n  \"question-to-answers\" : null # no parent id, so this doc is a parent\n}\n\nPUT stackoverflow/2?routing=1\n{\n  \"answer\" : \"...\",\n  \"question-to-answers\" : \"1\" # id of the parent\n}\n```\n\nSomething else that made me wonder when reading your proposal is that users generally do not like modifying the structure of their documents for specifying metadata (about the join in that case), so maybe it should remain a meta field, something like below?\n\n```\nPUT /stackoverflow\n{\n  \"mappings\": {\n    \"_join\": [\n      \"question-to-answers\"\n    ]\n  }\n}\n\nPUT stackoverflow/1?join=question-to-answers\n{\n  \"question\" : \"...\"\n}\n\nPUT stackoverflow/2?join=question-to-answers&parent=1\n{\n  \"answer\" : \"...\"\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244035401","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-244035401","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":244035401,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDAzNTQwMQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T10:09:04Z","updated_at":"2016-09-01T11:47:21Z","author_association":"MEMBER","body":"> I'm not sure we need to retain the notion of types, maybe we could go with something like below? \n\nWhen thinking about this refactoring I thought we needed to distinguish between the different documents (in case of multiple join fields), but when answering this question I realize we don't :) ,\nbecause all documents in the same index will have different ids. (currently that is not the case as ids are only unique within a single type)\n\n> Something else that made me wonder when reading your proposal is that users generally do not like modifying the structure of their documents for specifying metadata (about the join in that case)\n\nThe other reason I moved away from metadata is that besides the `parent` there is a need of an additional meta field. I didn't want to add more options to IndexRequest and other classes for a feature that isn't used as much as our core features. This gives us cleaner code (p/c's code being encapsulated in only a FieldMapper impl and QueryBuilder impls) and does give the opportunity to eventually isolate parent/child into a module. The price of this is that the relationship needs to be specified in the source of the document.\n\nIf we can make metadata completely pluggable (from rest layer to field mapper layer) then we specify the required parameter in the url and having the ability to isolate the p/c code. But I don't feel that this should be a requirement for this refactoring. Although if we really want this we do have the time to develop this.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244054543","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-244054543","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":244054543,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDA1NDU0Mw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T11:44:56Z","updated_at":"2016-09-01T11:44:56Z","author_association":"CONTRIBUTOR","body":"> I didn't want to add more options to IndexRequest and other classes for a feature that isn't used as much as our core features.\n\nThis is a very good point.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244069586","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-244069586","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":244069586,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDA2OTU4Ng==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T12:54:45Z","updated_at":"2016-09-01T12:54:45Z","author_association":"MEMBER","body":"> If we can make metadata completely pluggable (from rest layer to field mapper layer) then we specify the required parameter in the url \n\nI think we should do this. It is already a deficiency in the pluggability of Metadata fields. And I like @jpountz suggested api. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/244498961","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-244498961","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":244498961,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NDQ5ODk2MQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2016-09-02T22:10:03Z","updated_at":"2016-09-02T22:10:03Z","author_association":"MEMBER","body":"@rjernst @jpountz I've updated the description of the issue to match with Adrien's proposal.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286819080","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-286819080","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":286819080,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjgxOTA4MA==","user":{"login":"stephanebastian","id":873039,"node_id":"MDQ6VXNlcjg3MzAzOQ==","avatar_url":"https://avatars2.githubusercontent.com/u/873039?v=4","gravatar_id":"","url":"https://api.github.com/users/stephanebastian","html_url":"https://github.com/stephanebastian","followers_url":"https://api.github.com/users/stephanebastian/followers","following_url":"https://api.github.com/users/stephanebastian/following{/other_user}","gists_url":"https://api.github.com/users/stephanebastian/gists{/gist_id}","starred_url":"https://api.github.com/users/stephanebastian/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stephanebastian/subscriptions","organizations_url":"https://api.github.com/users/stephanebastian/orgs","repos_url":"https://api.github.com/users/stephanebastian/repos","events_url":"https://api.github.com/users/stephanebastian/events{/privacy}","received_events_url":"https://api.github.com/users/stephanebastian/received_events","type":"User","site_admin":false},"created_at":"2017-03-15T17:31:13Z","updated_at":"2017-03-15T17:31:13Z","author_association":"NONE","body":"Hi All,\r\n\r\nInteresting discussion, I'm jumping-in with a couple of questions/comments.\r\n\r\nRight now, as a user I can independently define the properties of my parent and child documents.\r\nIf I understand correctly, one consequence of removing types, is that I would define ONE mapping defining all properties of both my parent and child document (basically a merge of my current child and parent mapping files). Is that right?\r\n\r\nThen, when inserting a document, I would either set properties allowed by the parent OR properties allowed by the child. ES won't have any way to tell if the properties are 'parent properties' or 'child properties'.  Am I correct ? \r\nIf that's right, it seems like a major step backward in terms of functionality. What do you guys think?\r\n\r\nAnother question: Would it be possible to support cross index parent-child relationships?\r\n\r\nAll the best","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286870651","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-286870651","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":286870651,"node_id":"MDEyOklzc3VlQ29tbWVudDI4Njg3MDY1MQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-03-15T20:35:56Z","updated_at":"2017-03-15T20:35:56Z","author_association":"CONTRIBUTOR","body":"Your assumptions are correct. It is indeed hard to keep feature parity when moving forward, however we think that removing types remains a good trade-off by making Elasticsearch easier to use, easier to understand and possibly faster.\r\n\r\nCross index parent-child relationships would not be possible as-is since Elasticsearch relies on the fact that a parent and all its children are on the same shard.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286987298","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-286987298","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":286987298,"node_id":"MDEyOklzc3VlQ29tbWVudDI4Njk4NzI5OA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2017-03-16T08:19:53Z","updated_at":"2017-03-16T08:19:53Z","author_association":"MEMBER","body":"> Then, when inserting a document, I would either set properties allowed by the parent OR properties allowed by the child. ES won't have any way to tell if the properties are 'parent properties' or 'child properties'.\r\n\r\nI would like to add to this that today we use the type as marker of what is a child and what is a parent. Today you could use the same field in both parent and child, so properties alone isn't enough to identify what is what. In this case both types would have the same field defined in their mappings.\r\n\r\nWith the proposed change, the `join` parameter would indicate what is the parent and what is the child document. If both parent and child documents use the same field they will use the same field mapping instead of two field mappings in the two type mappings.\r\n\r\nSo I think there is no step backwards in terms of functionality, but the way how parent child relationships are defined is just different with types no longer being there.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/289904823","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-289904823","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":289904823,"node_id":"MDEyOklzc3VlQ29tbWVudDI4OTkwNDgyMw==","user":{"login":"cmorss","id":6409,"node_id":"MDQ6VXNlcjY0MDk=","avatar_url":"https://avatars0.githubusercontent.com/u/6409?v=4","gravatar_id":"","url":"https://api.github.com/users/cmorss","html_url":"https://github.com/cmorss","followers_url":"https://api.github.com/users/cmorss/followers","following_url":"https://api.github.com/users/cmorss/following{/other_user}","gists_url":"https://api.github.com/users/cmorss/gists{/gist_id}","starred_url":"https://api.github.com/users/cmorss/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cmorss/subscriptions","organizations_url":"https://api.github.com/users/cmorss/orgs","repos_url":"https://api.github.com/users/cmorss/repos","events_url":"https://api.github.com/users/cmorss/events{/privacy}","received_events_url":"https://api.github.com/users/cmorss/received_events","type":"User","site_admin":false},"created_at":"2017-03-28T21:06:00Z","updated_at":"2017-03-28T21:06:00Z","author_association":"NONE","body":"I totally understand moving mappings up to the index level (basically removal of types), however we use strict mapping and there will be no way with this proposal that we'll be able to enforce which fields are allowed in a child vs a parent. If my understanding is correct, I'll be able to enforce mapping on the union of my logical children fields with logical parent fields, but if a field is logically \"allowed\" in a child there is nothing preventing it from also being in a parent document.\r\n\r\nI can certainly live with these constraints, I just want to be sure I understand and plan for the future.\r\n\r\nThanks - C","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/297446091","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-297446091","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":297446091,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzQ0NjA5MQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-04-26T15:24:25Z","updated_at":"2017-04-26T15:25:04Z","author_association":"MEMBER","body":"After some internal discussions with @jpountz and @martijnvg I'd like to update this issue with the latest status.\r\nFirstly naming, instead of `join` I'd like to call it by `parent join` I think it is important since it would indicate what kind of join we're supporting. \r\nSecondly and since this feature is targeted to 5.5 I think we should add it as a module with the following restrictions:\r\n* the value of the join (name + parent) must be encoded in the source\r\n* the routing for any document (parent, child or grand-child) is checked but not automatically added. This means that user should add the `routing` manually for each document. If the document is only a child we can ensure that routing == parent but if it's also a grand-children we can just ensure that `routing` was set with some values.\r\nThis restrictions are useful to simplify the integration of this feature as a module without being intrusive in all indexation layers (rest and mappings).\r\nWe can later work on:\r\n> If we can make metadata completely pluggable (from rest layer to field mapper layer) then we specify the required parameter in the url\r\nbut I don't think we can achieve this for 5.5. This is not ideal to require the join metadata to be inside the source but adding more metadata handling to all required layers would be worst I think. \r\n\r\nSo the proposal is as follow:\r\n\r\nDefining a single parent-child relation:\r\n\r\n`````\r\n\"join\": {\r\n  \"questions\": \"answers\"\r\n}\r\n`````\r\n\r\nDefining a parent-child-grand-child relation:\r\n\r\n`````\r\n\"join\": {\r\n  \"questions\": {\r\n     \"answers\": \"comments\"\r\n   }\r\n}\r\n`````\r\n\r\nDefining multiple parent-child relation:\r\n\r\n`````\r\n\"join\": {\r\n  \"questions\": {\r\n     \"answers\": \"comments\"\r\n   },\r\n   \"products\": \"items\"\r\n}\r\n`````\r\nWith this format the relation between each entity is explicit and we can use the hierarchy to validate join values inside documents.\r\nAlso it is possible to update a mapping to add a child to an existing parent:\r\n\r\nAdding a child to an existing parent:\r\n`````\r\n\"join\": {\r\n  \"parent\": \"child1\"\r\n}\r\n\r\n\"join\": {\r\n  \"parent\": {\r\n     \"child1\": {},\r\n     \"child2\": {}\r\n}\r\n\r\n\"join\": {\r\n  \"parent\": {\r\n     \"child1\":  \"grand_child\",\r\n     \"child2\": {}\r\n}\r\n`````\r\n\r\nIndexing a parent question:\r\n````\r\nPUT stackoverflow/1\r\n{\r\n  \"join\" : {\r\n     \"name\": \"questions\"\r\n  },\r\n  \"question\": \"...\"\r\n}\r\n````\r\n\r\nIndexing a child answer:\r\n\r\n````\r\nPUT stackoverflow/2?routing=1\r\n{\r\n  \"join\" : {\r\n     \"name\": \"answers\",\r\n    \"parent\": \"1\"\r\n  },\r\n  \"answer\": \"...\"\r\n}\r\n````\r\n\r\nIndexing a grandchild comment:\r\n\r\n````\r\nPUT stackoverflow/3?routing=1\r\n{\r\n  \"join\" : {\r\n     \"name\": \"comments\",\r\n     \"parent\": \"2\"\r\n  },\r\n  \"comment\": \"...\"\r\n}\r\n````\r\n\r\nSo the plan here is to have a metadata ParentJoinFieldMapper separated in a module. Then we would migrate `has_parent`, `has_child` queries and the `children` aggregation to it. These queries and aggs would still be compatible with the legacy parent_child but only for 5.x and 6.x. Lastly we must find a way to also migrate `inner_hits` in order to be able to completely replace the functionality of the current `parent_child`.\r\n\r\n@clintongormley WDYT ?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/297458907","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-297458907","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":297458907,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzQ1ODkwNw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-04-26T16:01:39Z","updated_at":"2017-04-26T16:01:39Z","author_association":"CONTRIBUTOR","body":"How about replacing\r\n\r\n```\r\n\"join\": {\r\n  \"questions\": {\r\n     \"answers\": \"comments\"\r\n   }\r\n}\r\n```\r\n\r\nwith\r\n\r\n```\r\n\"join\": {\r\n  \"questions\": \"answers\",\r\n  \"answers\": \"comments\"\r\n}\r\n```\r\n\r\nIt feels more natural to me, but maybe I'm missing something.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/297460437","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-297460437","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":297460437,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzQ2MDQzNw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-04-26T16:06:39Z","updated_at":"2017-04-26T16:06:39Z","author_association":"MEMBER","body":"IMO the first option is more visual, you see more clearly the relation tree and you don't have to repeat the join name but I am fine either way. \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/297493014","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-297493014","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":297493014,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzQ5MzAxNA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-04-26T18:01:36Z","updated_at":"2017-04-26T18:01:36Z","author_association":"CONTRIBUTOR","body":"The first option is more visual but is somewhat confusing, eg why does `questions` take a map, but `answers` just takes `comments`?  A stricter syntax would be:\r\n\r\n```\r\n\"join\": {\r\n  \"questions\": {\r\n     \"answers\": {\r\n        \"comments\": {}\r\n     }\r\n   }\r\n}\r\n```\r\n\r\nbut that encourages users to use several layers of inheritance, which is unwise.  \r\n\r\nI think I prefer the simple version that @jpountz suggested.  In the case that a parent has multiple child types, it could be:  \r\n\r\n```\r\n\"join\": {\r\n  \"questions\": [\"answers\",\"comments\"]\r\n}\r\n```\r\n\r\n**Question**: Does the parent document need to know about which join field to use?  If a document is neither a parent nor a child, does the join field still contain a value, or is it null? \r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/297495434","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-297495434","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":297495434,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NzQ5NTQzNA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-04-26T18:10:45Z","updated_at":"2017-04-26T18:10:45Z","author_association":"MEMBER","body":"> but that encourages users to use several layers of inheritance, which is unwise.\r\n\r\nRight and since most of the use cases are for a single parent-child relation the syntax would be the same anyway: `\"questions\": \"answers\"`.\r\nI'll start with the simple version that @jpountz suggested.\r\n\r\n> Does the parent document need to know about which join field to use\r\n\r\nYes because we use a different docvalue field for each \"parent=>child\" relation.\r\n\r\n>  If a document is neither a parent nor a child, does the join field still contain a value, or is it null?\r\n\r\nIt is not required to add a join field in this case so the field can be missing in the document.\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303399205","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303399205","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303399205,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzM5OTIwNQ==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-05-23T13:34:05Z","updated_at":"2017-05-23T13:34:05Z","author_association":"NONE","body":"This is an interesting change.  I've used parent-child documents a bit and there are a few things I don't understand. Perhaps someone could help..\r\n\r\nIn the current ES design there would be an index with two types - eg `stackoverflow/questions` and `stackoverflow/answers` and the mapping of the answers specifies that the parent document is a question.  When indexing the children you need to specify the routing param to know what the parent is (and which shard to put it.)\r\n\r\nIn all the examples given here, it seems as if there is one index `stackoverflow` and somehow you're specifying the its a parent or child with query-string options.  I don't understand this - shouldn't there be two indices `so_questions` and `so_answers`?  \r\n\r\nAlso - there seems to be references to this relationship in the indexing of the parent - but I'm not sure I understand why that is.  Currently, you need to specify the parent when indexing the child but you don't have to let the parent know anything about even a possible relationship with children.  The current approach makes more sense to me since the parent doesn't need to have children and is not dependent on them.  If there is something needed under the hood to handle it differently than it works now, I would think it should be transparent to the user so it will work similarly to how it does now.  \r\n\r\nBasically, as a user of parent-child, it's not clear why it has to work so differently at the API level than how it does now (even if you want to use different terms like join vs parent to distinguish.)\r\n\r\nI'm curious if there any POC of this approach, regardless of the API syntax.  If the data is not in the same shard, then I would be concerned the performance would be significantly worse (unless you guarantee the shard are on the same node, which seems like a nightmare.)  But it's very possible I don't understand how it will work.\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303404607","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303404607","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303404607,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzQwNDYwNw==","user":{"login":"neuroticnetworks","id":3965137,"node_id":"MDQ6VXNlcjM5NjUxMzc=","avatar_url":"https://avatars0.githubusercontent.com/u/3965137?v=4","gravatar_id":"","url":"https://api.github.com/users/neuroticnetworks","html_url":"https://github.com/neuroticnetworks","followers_url":"https://api.github.com/users/neuroticnetworks/followers","following_url":"https://api.github.com/users/neuroticnetworks/following{/other_user}","gists_url":"https://api.github.com/users/neuroticnetworks/gists{/gist_id}","starred_url":"https://api.github.com/users/neuroticnetworks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neuroticnetworks/subscriptions","organizations_url":"https://api.github.com/users/neuroticnetworks/orgs","repos_url":"https://api.github.com/users/neuroticnetworks/repos","events_url":"https://api.github.com/users/neuroticnetworks/events{/privacy}","received_events_url":"https://api.github.com/users/neuroticnetworks/received_events","type":"User","site_admin":false},"created_at":"2017-05-23T13:52:13Z","updated_at":"2017-05-23T13:52:13Z","author_association":"NONE","body":"What you are proposing makes a lot of sense but I did want to throw out what is probably a crazy idea and just see if it makes sense. I'm not sure that it does.\r\n\r\nWould it make any sense to wrap parent joins inside the ingest API and require that the parent dataset (a) live in a different index and (b) fit entirely within memory on an ingest node? In my head this would be similar to a broadcast (aka map side) join in Hive/Spark/etc. It may not be necessary to wrap it in the ingest API. Another option might be to provide a _broadcast endpoint on an index that caches the results of a query against an index in memory for the sake of performing joins. \r\n\r\nPotential benefits from doing this might be (A) the ability to support joins beyond parent joins (B) the ability to perform lookups (for example, geoip analysis) while indexing data and (C) the limitations of the parent dataset would be explicit -- the results of `curl foo/_broadcast/ -d '{ mah awesome query }'` have to fit in memory.\r\n\r\nPotential downsides that come to mind immediately are it would probably be terrible when there are a lot of inserts on the parent side. It's also pretty far removed from the current model of parent child.\r\n\r\nThis could be totally bonkers. I'm honestly not sure.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303407089","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303407089","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303407089,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzQwNzA4OQ==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-05-23T13:59:50Z","updated_at":"2017-05-23T13:59:50Z","author_association":"NONE","body":"@evanv \r\nI'm not sure about the ingest API - but it sounds like what you're suggesting might be similar to what I suggest here  https://github.com/elastic/elasticsearch/pull/3278#issuecomment-290063164.  It's different, but I think after the same goal, doing arbitrary joins.\r\n\r\nBut solving in a direction like this would be much slower than the current parent/child approach, I would think.  Because the parent and children are on the same shard, you don't have to pass a lot of data around (inside a node or even worse across the network) and the \"joining\" is happening locally because when you indexed it you have to ensure the parent-child are together with the routing param.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303408948","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303408948","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303408948,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzQwODk0OA==","user":{"login":"neuroticnetworks","id":3965137,"node_id":"MDQ6VXNlcjM5NjUxMzc=","avatar_url":"https://avatars0.githubusercontent.com/u/3965137?v=4","gravatar_id":"","url":"https://api.github.com/users/neuroticnetworks","html_url":"https://github.com/neuroticnetworks","followers_url":"https://api.github.com/users/neuroticnetworks/followers","following_url":"https://api.github.com/users/neuroticnetworks/following{/other_user}","gists_url":"https://api.github.com/users/neuroticnetworks/gists{/gist_id}","starred_url":"https://api.github.com/users/neuroticnetworks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neuroticnetworks/subscriptions","organizations_url":"https://api.github.com/users/neuroticnetworks/orgs","repos_url":"https://api.github.com/users/neuroticnetworks/repos","events_url":"https://api.github.com/users/neuroticnetworks/events{/privacy}","received_events_url":"https://api.github.com/users/neuroticnetworks/received_events","type":"User","site_admin":false},"created_at":"2017-05-23T14:05:43Z","updated_at":"2017-05-23T14:05:43Z","author_association":"NONE","body":"@yehosef I'll take a look at 3278. With respect to speed, I'm not sure I follow. What I mean by broadcast join is in fact \"broadcast this entire result set to all of the nodes that would be performing the joins\"  Ingest API definitely wouldn't be necessary... but it would be one place to potentially limit memory usage (eg cache the data on the ingest nodes and stream results over them). ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303715022","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303715022","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303715022,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzcxNTAyMg==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-05-24T12:55:21Z","updated_at":"2017-05-24T12:55:21Z","author_association":"NONE","body":"I just read through the blog post more and discussed this a little with warkolm at https://discuss.elastic.co/t/parent-child-and-elastic-6/85722/5 and I think I'm starting to understand better how it's planned to work.\r\n\r\nBased on the discussion there, I summarize the problems with types from the blog post:\r\n\r\n1. misconceptions, miseducation and bad practices when people think of types like tables\r\n2. sparsity - which will be less of an issue for Lucene 7, by the time this is required\r\n3. doc scoring - I'm curious to the extent that this causes real problems and if the switch to BM25 changes it at all. If you have any articles/bugs, etc talking about this problem, I'd be interested to hear.\r\n\r\nAnd it seems the biggest problem is the first - I understand that when you have an \"feature\" that most people don't get, don't really need, and causes problems, there is a natural inclination to drop it.  But I'm not sure if the new solution is much better (but I may just not understand it fully).\r\n\r\nHere's an alternative suggestion.  Internally, keep the concept of types and most of the internal plumbing for how they work, how queries work ,etc.  But change the documentation and API to make the current concept of type go away.  The reinforce this, you could remove the \"_type\" field and use instead a \"_join_type\" field.\r\n\r\nHere are some examples:\r\nThe mapping might be like\r\n```\r\n\"join\": {\r\n  \"questions\": [\"answers\"],\r\n  \"answers\":[\"comments\"]\r\n}\r\n```\r\nAs an example - I'm not sure if the a parent doc needs to know about the grandchildren.\r\n\r\n\r\nThe normal/default indexing would look like:\r\n\r\n``` \r\nPOST so_question/1 \r\n{\r\n   \"title\": \"how will types work\"\r\n}\r\n```\r\nThis would create a doc\r\n```json\r\n {\r\n    \"_index\": \"so_question\",\r\n    \"_id\": \"1\",       \r\n    \"_source\": {\r\n        \"title\": \"how will types work\"\r\n     }\r\n}\r\n```\r\nThis is the default use case everywhere you don't need joins..  You could include a _join_type of `NULL` or `default` if it makes things easier.  \r\n\r\nbut \r\n```\r\nPOST stackoverflow/1?join_type=question\r\n{\r\n   \"title\": \"how will types work\"\r\n}\r\n```\r\nwould create a doc\r\n```json\r\n {\r\n    \"_index\": \"stackoverflow\",\r\n    \"_join_type\": \"question\",\r\n    \"_id\": \"question-1\",       \r\n    \"_source\": {\r\n        \"title\": \"how will types work\"\r\n     }\r\n}\r\n```\r\nNote - it doesn't need to know that it has children at index time.  The _id is a place for discussion - it could be that if you want to specify id, it has to be unique across types, etc. \r\n\r\n```\r\nPOST stackoverflow/2?join_type=answer&parent=1\r\n{\r\n   \"text\": \"It's full of stars!\"\r\n}\r\n```\r\nwould create a doc\r\n```json\r\n {\r\n    \"_index\": \"stackoverflow\",\r\n    \"_join_type\": \"answer\",\r\n    \"_parent\": 1,\r\n    \"_id\": \"answer-2\",       \r\n    \"_source\": {\r\n        \"text\": \"It's full of stars!\"\r\n     }\r\n}\r\n```\r\n\r\nAnd then regular queries and parent-child queries would work more or less as they do now.  Just instead of specifying the join type as part of the rest endpoint, it would be part of the query (or could be a special query string, but I don't think it's needed.)\r\n\r\nSo basically the suggest is to keep types in a form very similar to it's current implementation.  This will avoid having to make big internal changes (I think), allow parent-child to work in a similar way to how they work now, and accomplish the goal of weaning users off types for the normal use case.\r\n\r\nI'm interested to hear what people think about this approach.  If there are some things I misunderstood, I would very much like to understand it better.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303760027","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303760027","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303760027,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzc2MDAyNw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-05-24T15:28:14Z","updated_at":"2017-05-24T15:28:14Z","author_association":"MEMBER","body":"> Here's an alternative suggestion. Internally, keep the concept of types and most of the internal plumbing for how they work, how queries work ,etc. But change the documentation and API to make the current concept of type go away. The reinforce this, you could remove the \"_type\" field and use instead a \"_join_type\" field.\r\n\r\n@yehosef  that's more or less the plan. Internally the feature will work exactly the same as before except that it will use a `join_name`  instead of a `type`. \r\nSee my comment here:\r\nhttps://github.com/elastic/elasticsearch/issues/20257#issuecomment-297446091","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/303767036","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-303767036","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":303767036,"node_id":"MDEyOklzc3VlQ29tbWVudDMwMzc2NzAzNg==","user":{"login":"ei-grad","id":78607,"node_id":"MDQ6VXNlcjc4NjA3","avatar_url":"https://avatars0.githubusercontent.com/u/78607?v=4","gravatar_id":"","url":"https://api.github.com/users/ei-grad","html_url":"https://github.com/ei-grad","followers_url":"https://api.github.com/users/ei-grad/followers","following_url":"https://api.github.com/users/ei-grad/following{/other_user}","gists_url":"https://api.github.com/users/ei-grad/gists{/gist_id}","starred_url":"https://api.github.com/users/ei-grad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ei-grad/subscriptions","organizations_url":"https://api.github.com/users/ei-grad/orgs","repos_url":"https://api.github.com/users/ei-grad/repos","events_url":"https://api.github.com/users/ei-grad/events{/privacy}","received_events_url":"https://api.github.com/users/ei-grad/received_events","type":"User","site_admin":false},"created_at":"2017-05-24T15:50:50Z","updated_at":"2017-05-24T15:50:50Z","author_association":"NONE","body":"I'm sorry to be a bit late with this question, but why not to remove all this types hustle completely and just make a single parent-child relationship per index?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304023851","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-304023851","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":304023851,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDAyMzg1MQ==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-05-25T14:27:49Z","updated_at":"2017-05-25T14:30:20Z","author_association":"NONE","body":"@jimczi - thanks for the clarification.  I think I understand a little better - but still not sure I'm at 100%.  I'll explain where my confusion is coming from.  \r\n\r\nThe usual way to post data is like the first example at https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html\r\n\r\n```\r\nPUT twitter/tweet/1\r\n{\r\n    \"user\" : \"kimchy\",\r\n    \"post_date\" : \"2009-11-15T14:12:12\",\r\n    \"message\" : \"trying out Elasticsearch\"\r\n}\r\n```\r\nwhere the url describe the document including the type and the id and the json message is the document.  \r\n\r\nin the example you gave\r\n```\r\nPUT stackoverflow/1\r\n{\r\n  \"join\" : {\r\n     \"name\": \"questions\"\r\n  },\r\n  \"question\": \"...\"\r\n}\r\n```\r\nIt wasn't clear to me because the \"join\" information is inside the document payload.  But I assume that's not part of the document.  What if in my document schema I have a field called \"join\"?  That's why I was thinking it should still be in the url (though perhaps now as a query_string).  While you could give it an underscore, it still doesn't feel right to include meta data at the same level as the fields.  If you really don't want it in the url, you could maybe allow a separate field for the \"_source\" or doc - but then you have special rules for parsing for parent/child vs not - which really seems wrong.\r\n\r\nAlso - it seems that you you're making \"join\" be an object instead of a simple key because you want to make room for the \"parent\" field - but why not put it into the query string as it is now?  You could just call it `\"join_name\":\"question\"`.  \r\n\r\nAlso the term \"join_name\" is, to me, less clear.  We are dealing with different \"types\" of data - questions and answers, posts and comments, etc.  They are not the same thing.   If you ask me, I would think saying \"this document has a name of 'question'\" is less clear than \"this document has a type of 'question'\".  \"Name\" implies a high degree of specificity whereas \"type\" inherently does not. \r\n\r\nI also think it make make things simpler if you allow an index to have an optional default \"_join_type\" (whatever it will be called now).  That will probably make the internal transition simpler (you can make the default something like \"doc\").  If I'm using parent-child, I could make the default be the parent and only specify the child, or the opposite.. not sure.  \r\n\r\n**NOTE**\r\nI was just working on something that has different \"types\" and I would have usually put in the same index (not parent-child).  And I tried pretending I don't have types and put then into different indices.  While I really understand the problems you're trying to solve, it doesn't really help me.\r\n\r\nI don't have any of the problems you're having\r\n* I am fine with the same fields being the same - that's the default now - it's fine.\r\n* I don't care about sparsity - so it'll take some more space.. and it's going to get better with lucene 7 when this is required. And different docs even of the same type sometimes have different fields anyway..\r\n* I don't care about score differences (I haven't seen examples where it causes real differences.. but I think usually it's not really so different for many/most use cases - would love to hear otherwise)  Everything within that type should be skewed accordingly.\r\n\r\nAnd just makes things more complicated (though not too much so).  I have to deal with more indices, have more rules for backups/restores (eg, I want posts-2017-05 and comments-2017-05), I want to look through both things - \"find where someone mentioned 'elasticsearch'\" - I need to specify both indices (I know I can use both or a wildcard.)  It's just more for me to manage.  If I really care about the problems you identified, I can already solve those problems now using different indices.  The change will just force me to follow your best-practices.\r\n\r\nThese are not a deal-breakers - I'm not going to drop elasticsearch.  But it's not a feature I'm excited to upgrade to.  \r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304230361","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-304230361","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":304230361,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDIzMDM2MQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2017-05-26T09:00:25Z","updated_at":"2017-05-26T09:00:25Z","author_association":"MEMBER","body":"> I'm sorry to be a bit late with this question, but why not to remove all this types hustle completely and just make a single parent-child relationship per index?\r\n\r\n@ei-grad Ideally an index should have a single parent/child relation. But in cases where there is parent-child-grandchild relation or parent-child1 and parent-child2 relations (reuse of the same parent for different types of children), then multiple join fields need to be configured.\r\n\r\n> It wasn't clear to me because the \"join\" information is inside the document payload. But I assume that's not part of the document. \r\n\r\n@yehosef Yes, it is part of the json document.\r\n\r\n> What if in my document schema I have a field called \"join\"?\r\n\r\nIn the mapping you could configure a different field to be of type join, so there is no clash with your own fields.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304358802","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-304358802","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":304358802,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDM1ODgwMg==","user":{"login":"kutchar","id":905435,"node_id":"MDQ6VXNlcjkwNTQzNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/905435?v=4","gravatar_id":"","url":"https://api.github.com/users/kutchar","html_url":"https://github.com/kutchar","followers_url":"https://api.github.com/users/kutchar/followers","following_url":"https://api.github.com/users/kutchar/following{/other_user}","gists_url":"https://api.github.com/users/kutchar/gists{/gist_id}","starred_url":"https://api.github.com/users/kutchar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kutchar/subscriptions","organizations_url":"https://api.github.com/users/kutchar/orgs","repos_url":"https://api.github.com/users/kutchar/repos","events_url":"https://api.github.com/users/kutchar/events{/privacy}","received_events_url":"https://api.github.com/users/kutchar/received_events","type":"User","site_admin":false},"created_at":"2017-05-26T18:40:31Z","updated_at":"2017-05-29T04:49:26Z","author_association":"NONE","body":"@martijnvg So, for a greenfield project that needs to use parent/child today, what would be the recommended approach to lessen the future pain?\r\n\r\nA bit context, Elasticsearch parent/child feature is great for entity/event relationship, i.e. you have a number of entities and a much larger number of events for those entities. ES makes it super fast to filter and get the events of entities that match a certain query (filter parents and children at the same time and get the children or parents). I hope the long-term goal is not to remove parent/child feature.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304507250","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-304507250","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":304507250,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDUwNzI1MA==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-05-28T11:10:03Z","updated_at":"2017-05-28T11:10:03Z","author_association":"NONE","body":"> @yehosef Yes, it is part of the json document.\r\n\r\nI hope that is reconsidered.  It's not that it's a common problem and not something that can be worked around, it just doesn't feel like an elegant solution.  Is it really a regular document field, or you just access through the document but it's really stored as metadata?  If it's really a document field, is it possible for some to add multiple values like you can in other fields? If so, what does that  do?  If not, will you have to write special code to enforce that rule?  \r\n\r\nMaybe if the join fields could be set to specific field names, it might be better.  Eg, I might have a real field in by document called \"type\" or \"class\" - that could be used as the join type also. You could also do the same with the parent id - it's common that that exists as a real field in the data, so if you could define it to be \"parent_id\" and you could just use that field for the mapping also. (This doesn't address multiple values.. )  \r\n\r\nWhile I'm still not excited about removing types and I think it could/should be been handled differently, I see that there has been a lot of work on this for some time and it doesn't look like the type extermination squad is going to give up easily.  So I am preparing to resign myself to this direction.  I just want to give one last cry from a elasticsearch advocate..\r\n\r\nWhat I'll do in the future if I would want to use types (for the reasons I mentioned) is to just create a \"type\" field in the document and filter based on that where needed.  I'll have sparsity issues, and I may have scoring issues, but I'll deal.  \r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304592939","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-304592939","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":304592939,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDU5MjkzOQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2017-05-29T07:32:04Z","updated_at":"2017-05-29T07:32:04Z","author_association":"MEMBER","body":"> I hope the long-term goal is not to remove parent/child feature.\r\n\r\n@kutchar The feature will **not** be removed, but we will changing the way it is exposed and how it can be used in ES. The `_parent` meta field type will be replaced by a `join` field type, but the `has_child` query, `has_parent` query and `children` aggregation remain untouched, so there is no loss in functionality.\r\n\r\n> Is it really a regular document field ... If it's really a document field, is it possible for some to add multiple values like you can in other fields? If so, what does that do\r\n\r\n@yehosef Yes and if someone tries to add multiple values by specifying an array then the validation in the new join field will fail. In fact the join field type would only accept a json string.\r\n\r\n> Maybe if the join fields could be set to specific field names, it might be better. Eg, I might have a real field in by document called \"type\" or \"class\" - that could be used as the join type also. You could also do the same with the parent id - it's common that that exists as a real field in the data, so if you could define it to be \"parent_id\" and you could just use that field for the mapping also.\r\n\r\nYes, you will be able to control what your join field is in the mapping.\r\n\r\n> What I'll do in the future if I would want to use types (for the reasons I mentioned) is to just create a \"type\" field in the document and filter based on that where needed. I'll have sparsity issues, and I may have scoring issues, but I'll deal.\r\n\r\nIf the different types of documents use their own fields (the fields you use for free text search) then you don't have scoring issues, so you can still put these different types of documents into the same index (and if you like you can add a type field, but that isn't required). However if these different types have a substantial number of document then I would recommend to store each type of documents in a different index.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305486182","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-305486182","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":305486182,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTQ4NjE4Mg==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-06-01T13:01:44Z","updated_at":"2017-06-01T13:01:44Z","author_association":"NONE","body":">@yehosef Yes and if someone tries to add multiple values by specifying an array then the validation in the new join field will fail. In fact the join field type would only accept a json string.\r\n\r\nI assume it also has to be protected for scripted updates.  \r\n\r\n>Yes, you will be able to control what your join field is in the mapping.\r\n\r\nJust to confirm, I'll be able to use fields in the root of the document payload or fields such as \"type\" or \"parent_id\" and I won't have to use a nested object like \"join.type\" and \"join.parent_id\".  Is that correct?\r\n\r\nWould this change allow documents to have multiple parents?  \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305490188","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-305490188","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":305490188,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTQ5MDE4OA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-06-01T13:17:43Z","updated_at":"2017-06-01T13:17:43Z","author_association":"MEMBER","body":"> Just to confirm, I'll be able to use fields in the root of the document payload or fields such as \"type\" or \"parent_id\" and I won't have to use a nested object like \"join.type\" and \"join.parent_id\". Is that correct?\r\n\r\nYou'll have to use an object field defining the name of the join and an optional parent.\r\nThe parent-join is just an object field that needs to be defined at the root level, we don't want to hack the document updates to magically handle this feature. I understand that changing the logic of a feature that exists for years is not ideal but the benefit of the rewriting is that it is now isolated in a module and that it can works without `_type`. As said earlier, only the mapping and the document handling change. The query and agg side will remain identical.\r\n\r\n> Would this change allow documents to have multiple parents?\r\n\r\nNope, that's a different issue and there is no plan to add it in the future.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305492306","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-305492306","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":305492306,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTQ5MjMwNg==","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"created_at":"2017-06-01T13:26:00Z","updated_at":"2017-06-01T13:30:39Z","author_association":"NONE","body":"@jimczi - thanks for the clarification.  So the \"join\" field is an object and will be \"special\".  If I have a field named \"join\" in my document, I'll be able to change the mapping to something like \"parent-join\"  and that will be where the join data lives?  Eg. parent-join.name, parent-join.parent ?\r\n\r\nBut don't you still have to hack those fields to disallow arrays or scripted doc updates?  Once this \"metadata\" lives in the document, you have to do checks to avoid invalid data, no?\r\n\r\nIs the field \"join\" automatically special in all indices and I have to override it, or does it only become special if I define in the mapping that there is a parent-child relationship?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305494705","html_url":"https://github.com/elastic/elasticsearch/issues/20257#issuecomment-305494705","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20257","id":305494705,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTQ5NDcwNQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-06-01T13:34:54Z","updated_at":"2017-06-01T13:34:54Z","author_association":"MEMBER","body":"@yehosef we'll write a complete documentation of this feature when it's ready (which should happen soon). In the mean time you can follow the iteration we're doing to make this feature alive.\r\nFor instance the new field mapper has been added here:\r\nhttps://github.com/elastic/elasticsearch/commit/b5d62ae74766ff11a739d867192d93dc674cd191\r\n\r\nI'll update this issue when we have something that people can start to test and then we'll still have some time to discuss the pros/cons of the adopted solution which will remain experimental in 5.x","performed_via_github_app":null}]