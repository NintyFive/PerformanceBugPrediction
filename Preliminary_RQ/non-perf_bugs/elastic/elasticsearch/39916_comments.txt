[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/471636904","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-471636904","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":471636904,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTYzNjkwNA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-03-11T17:20:39Z","updated_at":"2019-03-11T17:20:39Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-analytics-geo","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/471767161","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-471767161","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":471767161,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MTc2NzE2MQ==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2019-03-11T22:35:39Z","updated_at":"2019-03-11T22:35:39Z","author_association":"MEMBER","body":"This appears to be a general problem with multiple formats, likely introduced/broken in https://github.com/elastic/elasticsearch/pull/37222\r\n\r\nWe're using [`appendOptional()`](https://github.com/elastic/elasticsearch/blob/master/server/src/main/java/org/elasticsearch/common/time/JavaDateFormatter.java#L89) to append multiple patterns, but I don't think that's the correct method.  My understanding is that `appendOptional` is for truly optional components in the chain.  E.g. `2016-06-06` is mandatory, but `12:01:02.123` could be optional.  Not for entirely different patterns.\r\n\r\nI traced through the code and this does indeed appear to be the case.  When `DateTimeFormatterBuilder#parse()` starts matching the input text, it matches the first pattern (`yyyy-MM-dd'T'HH:mm:ss`) up to position 19, which is the milliseconds portion.  Then it tries the next pattern (`date_optional_time`) starting at position 19, which does not match so it aborts with \"unfinished\" characters that were not parsed.\r\n\r\n@pgomulka @rjernst any ideas?  This is hitting the edge of my java-time knowledge.  I skimmed the API and I'm thinking we may need to drop back to an array of parsers, and check them individually with `parseUnresolved()` similar to this: https://stackoverflow.com/a/44625276?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/473043736","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-473043736","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":473043736,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MzA0MzczNg==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2019-03-14T20:17:34Z","updated_at":"2019-03-14T20:38:41Z","author_association":"MEMBER","body":"It seems this affects anything using multiple patterns, most notably it breaks indexing:\r\n\r\n```\r\nPUT test\r\n{\r\n  \"mappings\": {\r\n    \"properties\": {\r\n      \"date\": {\r\n        \"type\":   \"date\",\r\n        \"format\": \"yyyy-MM-dd'T'HH:mm:ss||date_optional_time\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPOST /test/_doc/\r\n{\r\n  \"date\": \"2014-06-06T12:01:02.123\"\r\n}\r\n```\r\n```\r\n{\r\n  \"error\": {\r\n    \"root_cause\": [\r\n      {\r\n        \"type\": \"mapper_parsing_exception\",\r\n        \"reason\": \"failed to parse field [date] of type [date] in document with id 'wcHYfWkBi3kUMDzPydwQ'\"\r\n      }\r\n    ],\r\n    \"type\": \"mapper_parsing_exception\",\r\n    \"reason\": \"failed to parse field [date] of type [date] in document with id 'wcHYfWkBi3kUMDzPydwQ'\",\r\n    \"caused_by\": {\r\n      \"type\": \"illegal_argument_exception\",\r\n      \"reason\": \"failed to parse date field [2014-06-06T12:01:02.123] with format [yyyy-MM-dd'T'HH:mm:ss||date_optional_time]\",\r\n      \"caused_by\": {\r\n        \"type\": \"date_time_parse_exception\",\r\n        \"reason\": \"Text '2014-06-06T12:01:02.123' could not be parsed, unparsed text found at index 19\"\r\n      }\r\n    }\r\n  },\r\n  \"status\": 400\r\n}\r\n```\r\n\r\n(`\"2014-06-06T12:01:02.123\"` indexes correctly if just `date_optional_time` is specified)\r\n\r\nEDIT:\r\n\r\nDoesn't appear as bad as I thought. `yyyy-MM-dd'T'HH:mm:ss||epoch_millis` and similar patterns seem to work fine.  But `yyyy-MM-dd'T'HH:mm:ss||yyyy-MM-dd'T'HH:mm:ss.SSS` for example fails, so there's something there about partially-matched patterns messing up the next pattern.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/473295287","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-473295287","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":473295287,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MzI5NTI4Nw==","user":{"login":"pgomulka","id":11137008,"node_id":"MDQ6VXNlcjExMTM3MDA4","avatar_url":"https://avatars0.githubusercontent.com/u/11137008?v=4","gravatar_id":"","url":"https://api.github.com/users/pgomulka","html_url":"https://github.com/pgomulka","followers_url":"https://api.github.com/users/pgomulka/followers","following_url":"https://api.github.com/users/pgomulka/following{/other_user}","gists_url":"https://api.github.com/users/pgomulka/gists{/gist_id}","starred_url":"https://api.github.com/users/pgomulka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pgomulka/subscriptions","organizations_url":"https://api.github.com/users/pgomulka/orgs","repos_url":"https://api.github.com/users/pgomulka/repos","events_url":"https://api.github.com/users/pgomulka/events{/privacy}","received_events_url":"https://api.github.com/users/pgomulka/received_events","type":"User","site_admin":false},"created_at":"2019-03-15T13:56:17Z","updated_at":"2019-03-15T13:57:18Z","author_association":"CONTRIBUTOR","body":"I think @polyfractal suggestion would work best.\r\nI noticed that these would work (use it in `JavaJodaTimeDuellingTests`)\r\n```\r\nassertSameDate(\"2014-06-06T12:01:02.123\", \"strictDateTimeNoMillis||yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n assertSameDate(\"2014-06-06T12:01:02.123\", \"yyyy-MM-dd'T'HH:mm:ss||yyyy-MM-dd'T'HH:mm:ss.SSS\");\r\n```\r\n\r\nCouldn't find this in javadocs, but looks like DateTimeFormatter's patterns with optional depend on ordering. Someone raised a JDK bug, but it was closed as a non issue with comment:\r\n```\r\nThe optional formats should be supplied longest to shortest, especially if the shorter format would match a prefix of the longer format. \r\n```\r\nhttps://bugs.openjdk.java.net/browse/JDK-8188771\r\n\r\nI don't think this is ideal, but we can workaround this with an approach from stackoverflow comment linked by @polyfractal \r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/473317535","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-473317535","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":473317535,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MzMxNzUzNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-03-15T14:54:46Z","updated_at":"2019-03-15T14:54:46Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/473870520","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-473870520","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":473870520,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3Mzg3MDUyMA==","user":{"login":"pgomulka","id":11137008,"node_id":"MDQ6VXNlcjExMTM3MDA4","avatar_url":"https://avatars0.githubusercontent.com/u/11137008?v=4","gravatar_id":"","url":"https://api.github.com/users/pgomulka","html_url":"https://github.com/pgomulka","followers_url":"https://api.github.com/users/pgomulka/followers","following_url":"https://api.github.com/users/pgomulka/following{/other_user}","gists_url":"https://api.github.com/users/pgomulka/gists{/gist_id}","starred_url":"https://api.github.com/users/pgomulka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pgomulka/subscriptions","organizations_url":"https://api.github.com/users/pgomulka/orgs","repos_url":"https://api.github.com/users/pgomulka/repos","events_url":"https://api.github.com/users/pgomulka/events{/privacy}","received_events_url":"https://api.github.com/users/pgomulka/received_events","type":"User","site_admin":false},"created_at":"2019-03-18T11:20:51Z","updated_at":"2019-03-18T11:20:51Z","author_association":"CONTRIBUTOR","body":"the alternative to the PR above is just to state in a documentation that patterns have to be in order (longest to shortest / most strict/least strict)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/473986292","html_url":"https://github.com/elastic/elasticsearch/issues/39916#issuecomment-473986292","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/39916","id":473986292,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3Mzk4NjI5Mg==","user":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"created_at":"2019-03-18T16:19:32Z","updated_at":"2019-03-18T16:19:32Z","author_association":"MEMBER","body":"> the alternative to the PR above is just to state in a documentation that patterns have to be in order (longest to shortest / most strict/least strict)\r\n\r\nYou're right but I think that's too trappy.","performed_via_github_app":null}]