{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/18537","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18537/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18537/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18537/events","html_url":"https://github.com/elastic/elasticsearch/issues/18537","id":156409663,"node_id":"MDU6SXNzdWUxNTY0MDk2NjM=","number":18537,"title":"Function score query functions needs offset param","user":{"login":"JnBrymn-EB","id":11304245,"node_id":"MDQ6VXNlcjExMzA0MjQ1","avatar_url":"https://avatars1.githubusercontent.com/u/11304245?v=4","gravatar_id":"","url":"https://api.github.com/users/JnBrymn-EB","html_url":"https://github.com/JnBrymn-EB","followers_url":"https://api.github.com/users/JnBrymn-EB/followers","following_url":"https://api.github.com/users/JnBrymn-EB/following{/other_user}","gists_url":"https://api.github.com/users/JnBrymn-EB/gists{/gist_id}","starred_url":"https://api.github.com/users/JnBrymn-EB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JnBrymn-EB/subscriptions","organizations_url":"https://api.github.com/users/JnBrymn-EB/orgs","repos_url":"https://api.github.com/users/JnBrymn-EB/repos","events_url":"https://api.github.com/users/JnBrymn-EB/events{/privacy}","received_events_url":"https://api.github.com/users/JnBrymn-EB/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2016-05-24T02:55:28Z","updated_at":"2018-02-14T13:33:04Z","closed_at":"2016-05-25T14:27:35Z","author_association":"NONE","active_lock_reason":null,"body":"The current implementation of [function_value_factor](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor) accepts `factor` and `modifier` to shape and scale the resulting function, but missing from this is the ability to offset the value of the function.\n\nConsider the following scenario: Documents represent events that one might attend. For a given query the total document score should be a function of the base query score, the distance, and the popularity. The query score is based solely upon the text match; distance uses a geo-based decay function; and popularity is based upon a function_value_factor function with `modifier: \"sqrt\"`. The function score query allows us to create a boost by either adding or multiplying the distance and popularity values. For our purposes it doesn't make sense to sum popularity and distance values -- you can have a distant event that no one can attend, but that will nonetheless rank highly based solely upon its high popularity. So instead we will multiply the popularity and distance boosts.\n\nBut there's a problem - popularity is based upon number of tickets already sold and if 0 tickets are sold, then the popularity will be 0. Since we are multiplying the boosts together and since the query score is multiplied by the boosts, this means that the total score for those events will also be 0. Thus new events with no tickets sold are all but eliminated from the search results.\n\nWe are prepared to resolve this issue with a script_score function, but this is not ideal. I propose introducing an `offset` parameter to be included in the function_value_factor so that the value of the function would be `factor*modifier(field) + offset`. This would ensure that popularity could never be zero.\n\nThe problem here also exists with decay functions. When using functions multiplicatively there are time when it would be beneficial to have a non-zero minimum value.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}