{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/2169","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2169/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2169/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2169/events","html_url":"https://github.com/elastic/elasticsearch/issues/2169","id":6208276,"node_id":"MDU6SXNzdWU2MjA4Mjc2","number":2169,"title":"Support GeoShape searching and indexing","user":{"login":"chrismale","id":1080664,"node_id":"MDQ6VXNlcjEwODA2NjQ=","avatar_url":"https://avatars0.githubusercontent.com/u/1080664?v=4","gravatar_id":"","url":"https://api.github.com/users/chrismale","html_url":"https://github.com/chrismale","followers_url":"https://api.github.com/users/chrismale/followers","following_url":"https://api.github.com/users/chrismale/following{/other_user}","gists_url":"https://api.github.com/users/chrismale/gists{/gist_id}","starred_url":"https://api.github.com/users/chrismale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chrismale/subscriptions","organizations_url":"https://api.github.com/users/chrismale/orgs","repos_url":"https://api.github.com/users/chrismale/repos","events_url":"https://api.github.com/users/chrismale/events{/privacy}","received_events_url":"https://api.github.com/users/chrismale/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":232920,"node_id":"MDU6TGFiZWwyMzI5MjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.20.0.RC1","name":"v0.20.0.RC1","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2012-08-14T04:40:13Z","updated_at":"2014-06-25T18:19:00Z","closed_at":"2012-08-16T13:56:20Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"A new spatial module was added to Lucene 4 this year which added support for searching not just for points, but for general shapes including rectangles and polygons.  Some of this code can be ported to ES and improved further, so that users can index and search for shapes.\n### Shape representation\n\nTo efficiently represent shapes in the index, Shapes are converted into a series of hashes representing grid squares using implementations of a PrefixTree.  The tree aspect comes from the fact that the PrefixTree represents the planet with multiple grid layers each representing a different level of precision.  For example, the PrefixTree implemenetation QuadPrefixTree represents the Earth with four grid squares, labelled A, B, C and D, at its first level of precision.  Move one level of precision further and there is now 16 grid squares, AA, AB, AC, AD, BA... and so on.  By having this multiple layers of precision, we can create the most efficient representation of a shape which balances number of terms vs. precision\n\nAs mentioned, there are multiple PrefixTree implemenetations.  Two are provided:\n- GeohashPrefixTree - As its name suggests, uses geohashes which have more grid squares per layer\n- QuadPrefixTree - As mentioned, represents the Earth as a quadtree and uses A, B, C and D for hashes.\n### Search Logic\n\nPut simply, searches for shapes are implemented by converting the query shape into grid hashes as well, and then querying for those documents which have one or many (or none) of the query shape hashes.  This allows us to efficiently find those shapes which intersect or are disjoint of.  Other relationships between Shapes such as contains, as discussed below, also build upon this logic.\n### GeoShapeFieldMapper\n\nIndexing Shapes is handled through the GeoShapeFieldMapper (known as `geo_shape`).  The Mapper can be configured with the following options:\n- `tree` - Name of the PrefixTree implementation to be used.  Currently `geohash` and `quadtree` are supported.  Defaults to `geohash`.\n- `tree_levels` - Maximum number of levels to be used in the PrefixTree.  This can be used to control how precise the representation of Shapes should be.  Defaults to the default value of the chosen PrefixTree implementation.\n- `distance_error_pct` - Used as a guide to the PrefixTree for how precise its representation should be.  Defaults to 0.025 (2.5%) however 0 is also supported.\n\nShapes are defined in index requests using the GeoJSON format as follows:\n\n```\n{\n    \"location\" : {\n        \"type\" : \"point\",\n        \"coordinates\" : [45.0, -45.0]\n    }\n}\n```\n\nCurrently the GeoJSON shape types `MultiPolygon`, `MultiLineString` and `GeometryCollection` are unsupported.  The additional shape type `envelope` has been added which accepts two coordinates representing the upper left and bottom right of the shape respectively.  Support for `MultiPolygon` will be added in the future.\n\nAlso note that currently Polygons cannot cross the dateline.  This is in the process of being fixed.\n\nDue to the complexity of the shape representation, the shape for a document can only be retrieved through the document's `source`.\n### GeoShapeFilterParser & GeoShapeQueryParser\n\nFiltering and querying Shapes is supported through the GeoShapeFilterParser and GeoShapeQueryParser, both denoted `geo_shape`.  Both accept, in addition to the usual caching parameters for filtering and boost for querying:\n- `shape` - The GeoJSON representation of the query shape, following the same syntax as used in the Mapper\n- `relation` - The kind of filter / query to be executed, as represented by a relationship between the query and indexed shapes.  Currently supported values are `intersects`, `disjoint` and `contains`.  See more information below.\n\nThe following is an example of this syntax:\n\n```\n{\n    \"location\" : {\n        \"shape\" : {\n            \"type\" : \"envelope\",\n            \"coordinates\" : [ \n                [-45.0, 45.0], [45.0, -45.0] \n             ]\n        },\n        \"relation\" : \"contains\"\n    }\n}\n```\n#### Shape Relations\n\nCurrently three shape relationships are supported:\n- `intersects` - Finds those indexed shapes which intersect with the query shape.  Intersection occurs when the two shapes have at least one shared grid hash.  Because of current limitations of the algorithm, very large indexed shapes are not deemed to intersect with very small query shapes.  However, smaller indexed shapes will intersect with larger query shapes\n- `disjoint` - Finds those indexed shapes which are disjoint to the query shape.  This means the the indexed shapes and query shape must have no shared grid hashes.\n- `contains` - Finds those indexed shapes which are fully contained within the query shape.  Unlike `intersects`, this means that all of the indexed shape must be present in the query shape.  Any shapes which have additional area outside of the query shape are excluded.  This relationship is still experimental and due to its use of polygons, the query shape cannot be within 0.5 of the dateline.\n### Future improvements\n\nFuture improvements for this feature are:\n- Currently queries created by the GeoShapeQueryParser are wrapped in a ConstantScoreQuery.  With integration into ES's in memory caching, it would be possible to cache the Shapes and calculate more useful scores based on distance or overlap percetange.\n- Multipolygon support\n- Handling of polygons which cross the dateline\n- Support for adding and using named shapes.  This would mean that users wouldn't have to define the coordinates for their shapes everytime, they would only need to configure a shape once with a name and would then be able to reference it.\n","closed_by":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}