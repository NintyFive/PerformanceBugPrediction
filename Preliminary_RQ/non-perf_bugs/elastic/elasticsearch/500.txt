{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/500","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/500/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/500/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/500/events","html_url":"https://github.com/elastic/elasticsearch/issues/500","id":408938,"node_id":"MDU6SXNzdWU0MDg5Mzg=","number":500,"title":"Add a variety constraint to querying and hit collection","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2010-11-09T15:34:19Z","updated_at":"2014-05-23T14:23:30Z","closed_at":"2014-05-23T14:23:30Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Ok, this is a new one as not sure I've seen it in another product but it is a good alternative to just pure scoring and pushing docs to the top.\n\nWhen searching, I should be able to ask that I get back a \"variety\" of results by type, or a field value and a min/max count of each.  So for example, I get the best ranked results but I want 5 books, 5 pictures, 5 songs, and 5 movies total rather than 15 books, 5 songs eating up my first page.  NOTE:  I am not asking that they be grouped together, but that there is a limit to how many of each can make that response to avoiding flooding out the other docs of various types (this is a perfect job for a VarietyConstrainedHitCollector which I'm sure doesn't exist).\n\nBasically a variety constraint on what is returned.  \n\nYou can implement this client-side but it would be more efficient down in the server.  And doing multiple queries by types is wasteful as well and doesn't allow them to be scored together by relevancy.\n\nI'm not sure yet what to do about paging or scrolling or even if those would be supported.  This is more of a first-page type of feature, but if you CAN solve paging and scrolling it would be interesting.  I'm thinking on those more now but recording this before I forget.\n\nIt's also similar to some searches we built in the past that show a summary page of the first 10 and last 10 of the sort order (show me the least and most expensive of matching items) which is a similar variety constraint and more efficiently done in the engine while it has things in memory; rather than doing follow-on queries.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}