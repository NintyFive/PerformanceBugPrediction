{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/49926","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/49926/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/49926/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/49926/events","html_url":"https://github.com/elastic/elasticsearch/issues/49926","id":534135030,"node_id":"MDU6SXNzdWU1MzQxMzUwMzA=","number":49926,"title":"Make Docker images suitable for ESS/ECE","user":{"login":"pugnascotia","id":8696382,"node_id":"MDQ6VXNlcjg2OTYzODI=","avatar_url":"https://avatars1.githubusercontent.com/u/8696382?v=4","gravatar_id":"","url":"https://api.github.com/users/pugnascotia","html_url":"https://github.com/pugnascotia","followers_url":"https://api.github.com/users/pugnascotia/followers","following_url":"https://api.github.com/users/pugnascotia/following{/other_user}","gists_url":"https://api.github.com/users/pugnascotia/gists{/gist_id}","starred_url":"https://api.github.com/users/pugnascotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pugnascotia/subscriptions","organizations_url":"https://api.github.com/users/pugnascotia/orgs","repos_url":"https://api.github.com/users/pugnascotia/repos","events_url":"https://api.github.com/users/pugnascotia/events{/privacy}","received_events_url":"https://api.github.com/users/pugnascotia/received_events","type":"User","site_admin":false},"labels":[{"id":144797810,"node_id":"MDU6TGFiZWwxNDQ3OTc4MTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Core","name":":Core/Infra/Core","color":"0e8a16","default":false,"description":"Core issues without another label"},{"id":1194435738,"node_id":"MDU6TGFiZWwxMTk0NDM1NzM4","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v8.0.0","name":"v8.0.0","color":"dddddd","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"pugnascotia","id":8696382,"node_id":"MDQ6VXNlcjg2OTYzODI=","avatar_url":"https://avatars1.githubusercontent.com/u/8696382?v=4","gravatar_id":"","url":"https://api.github.com/users/pugnascotia","html_url":"https://github.com/pugnascotia","followers_url":"https://api.github.com/users/pugnascotia/followers","following_url":"https://api.github.com/users/pugnascotia/following{/other_user}","gists_url":"https://api.github.com/users/pugnascotia/gists{/gist_id}","starred_url":"https://api.github.com/users/pugnascotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pugnascotia/subscriptions","organizations_url":"https://api.github.com/users/pugnascotia/orgs","repos_url":"https://api.github.com/users/pugnascotia/repos","events_url":"https://api.github.com/users/pugnascotia/events{/privacy}","received_events_url":"https://api.github.com/users/pugnascotia/received_events","type":"User","site_admin":false},"assignees":[{"login":"pugnascotia","id":8696382,"node_id":"MDQ6VXNlcjg2OTYzODI=","avatar_url":"https://avatars1.githubusercontent.com/u/8696382?v=4","gravatar_id":"","url":"https://api.github.com/users/pugnascotia","html_url":"https://github.com/pugnascotia","followers_url":"https://api.github.com/users/pugnascotia/followers","following_url":"https://api.github.com/users/pugnascotia/following{/other_user}","gists_url":"https://api.github.com/users/pugnascotia/gists{/gist_id}","starred_url":"https://api.github.com/users/pugnascotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pugnascotia/subscriptions","organizations_url":"https://api.github.com/users/pugnascotia/orgs","repos_url":"https://api.github.com/users/pugnascotia/repos","events_url":"https://api.github.com/users/pugnascotia/events{/privacy}","received_events_url":"https://api.github.com/users/pugnascotia/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2019-12-06T16:47:06Z","updated_at":"2020-01-23T10:58:41Z","closed_at":"2020-01-23T10:58:41Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Cloud currently builds and runs a fully custom Elasticsearch image. The Stack image should provide an image suitable for direct use instead.\r\n\r\n### User / Group IDs\r\n\r\nCloud currently expects to be able to set the user and group IDs via environment variables. The entry point script changes the `founduser` user's UID and GID to those provided in the env vars, and performs a recursive `chown` on some directories in the container.\r\n\r\nThe Stack image takes a different approach, in that it follows the [OKD image guidelines](https://docs.okd.io/latest/creating_images/guidelines.html#use-uid) and uses GID 0 for all files.\r\n\r\nThe different in approaches may well be due to Cloud's multi-tenancy. I don't know how OKD handles this.\r\n\r\n(There is a related open issue, \"Pin USER in Dockerfile complying with Docker best practices\" (#46166).)\r\n\r\n### setuid flags\r\n\r\nCloud ensures that there are no files with setuid, in order to mitigate \"stackclash\" attacks. Basically, they do this:\r\n\r\n    RUN find / -xdev -perm -4000 -exec chmod u-s {} +\r\n\r\nThis could be done in the Stack image.\r\n\r\n### Init process\r\n\r\nCloud runs Elasticsearch via a mini-`init` process in order to avoid zombie processes. There should be no harm in adopting this in the Stack image.\r\n\r\n### JVM options\r\n\r\nCloud comments out the heap settings and disables the `HeapDumpOnOutOfMemoryError` flag in `jvm.options`. Cloud is also passing the relevant heap options on the command line so it's not necessary to comment out the heap settings (this has been the case since 5.0). It does has the advantage that the resulting Elasticsearch command line flags is tidier. I don't know if that's important to Cloud.\r\n\r\n### Quota-aware filesystem\r\n\r\nCloud changes the default filesystem provider to an implementation that is aware of user quotas. This is achieved by providing a file to the container that contains the quota settings, which the provider then takes into account then answering capacity questions. The file has a default location, which can be changed via a system property. The filesystem provider is changed via a JVM option, set via `ES_JAVA_OPTS`.\r\n\r\nCloud has suggested that the Stack provide \"a native and equivalent way to deal with this\". There is a [Stack Overflow question](https://stackoverflow.com/questions/56359060/linux-user-disk-quota-check-in-java) that suggests that Java lacks support for this at present. It ought to be possible to perform native calls on Linux (and possibly other operating systems) that return quota information, but it's unclear how feasible / time consuming that will be. Cloud can continue using their current solution without modifying the base image.\r\n\r\n### Plugins\r\n\r\nThe Cloud Docker build process downloads and adds plugins to the image, in a \"plugin-archive\" directory. Then, when an allocator run an Elasticsearch image, it runs the `elasticsearch-plugin` tool to install the active plugins from the archive directory. User-provided plugins are downloaded and installed dynamically.\r\n\r\nThere's nothing obvious that the Stack image needs to do here.","closed_by":{"login":"pugnascotia","id":8696382,"node_id":"MDQ6VXNlcjg2OTYzODI=","avatar_url":"https://avatars1.githubusercontent.com/u/8696382?v=4","gravatar_id":"","url":"https://api.github.com/users/pugnascotia","html_url":"https://github.com/pugnascotia","followers_url":"https://api.github.com/users/pugnascotia/followers","following_url":"https://api.github.com/users/pugnascotia/following{/other_user}","gists_url":"https://api.github.com/users/pugnascotia/gists{/gist_id}","starred_url":"https://api.github.com/users/pugnascotia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pugnascotia/subscriptions","organizations_url":"https://api.github.com/users/pugnascotia/orgs","repos_url":"https://api.github.com/users/pugnascotia/repos","events_url":"https://api.github.com/users/pugnascotia/events{/privacy}","received_events_url":"https://api.github.com/users/pugnascotia/received_events","type":"User","site_admin":false},"performed_via_github_app":null}