[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/431415147","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-431415147","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":431415147,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMTQxNTE0Nw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-10-19T16:08:30Z","updated_at":"2018-10-19T16:08:30Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/431663324","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-431663324","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":431663324,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMTY2MzMyNA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-10-21T12:04:18Z","updated_at":"2018-10-21T12:04:18Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/436294284","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-436294284","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":436294284,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNjI5NDI4NA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-11-06T15:31:27Z","updated_at":"2018-11-06T15:31:50Z","author_association":"MEMBER","body":"@gwbrown and I started to think about a high level plan for how to make ILM work with CCR. It is quite abstract since it is unknown yet how certain primitives will be implemented in CCR.\r\n\r\nThe high level plan is built on the assumption that ILM is currently targeted at time-series use cases, \r\nin which there is a period where documents are indexed (the write period),  followed by a period where no documents are indexed or updated ever again (the read-only period). The other assumption is that each cluster has own ILM policies.  A leader cluster shouldn't propagate actions / steps to follower cluster and visa versa.\r\n\r\nCCR will add a mechanism to indicate in the leader cluster that a leader index is being followed by one or more indices from another cluster.  A follower cluster should indicate this prior to following a leader index in the leader cluster.\r\n\r\nCCR will also add a mechanism for the ILM to specify that a leader index is “done indexing” and will be read-only thereafter - that is, it has left the write period and entered the read-only period. The fact that a leader index is read only is also replicated to follower index. Once a leader index has been marked as “done indexing”,  follower clusters will continue following until they have replicated all updates, then automatically unfollows (1). CCR in the following cluster will then indicate to the leader cluster that this follower index no longer follows the leader index.\r\n\r\nOn the leader cluster:\r\n* ILM will be able to use these mechanism to mark an index as “done indexing” once the index has been rolled over.\r\n* ILM will wait execute actions / steps that are destructive for CCR leader indices. These ILM steps wait until the indication that an index has followers has been removed. (0 indices are following a leader index)\r\n\r\nOn the follower cluster:\r\n* ILM will not execute actions / steps that are destructive for CCR on follower indices. These ILM actions / steps will wait until follower indices have been unfollowed and the ready only attribute has been set.\r\n\r\n1: This would be an operation that: pauses index following, closes, unfollows and then opens the index.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442066452","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442066452","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442066452,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA2NjQ1Mg==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T13:56:06Z","updated_at":"2018-11-27T13:56:06Z","author_association":"MEMBER","body":"We discussed yesterday in more detail what the read only attribute is, in order to let ILM safely operate describe operations in the follower side.\r\n\r\nILM can use the readonly action to set the `index.blocks.write` index setting. If that index is being followed then CCR will automatically replicate that to the corresponding follower index in a follower cluster. ILM in a following cluster can then automatically unfollow a follower index if `index.blocks.write` index setting has been set and the global checkpoint of a shards in a follow index are equal to the global checkpoint in the corresponding leader index. When the follower index has been unfollowed then ILM is allowed to execute destructive operations on this index (shrink or delete action), since it has become a regular index. ILM should not perform destructive operations on follower indices (this can be checked by checking custom metadata in `IndexMetaData`).\r\n\r\nThis part of the CCR ILM integration can already be implemented, so we should start soon.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442074966","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442074966","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442074966,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA3NDk2Ng==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T14:21:44Z","updated_at":"2018-11-27T14:25:12Z","author_association":"MEMBER","body":"We discussed using the `index.blocks.write` index setting before and said that its not a good idea to use this setting and we should have a different setting for this. This is because users may set the write block themselves for other reasons and then unset it later intending to keep indexing into that index. Therefore we cannot be sure this setting means the indexing is complete for that index. I think we should do this on a separate setting. I opened https://github.com/elastic/elasticsearch/issues/35944 this morning which is basically the same mechanism but using a different setting which would solve this part of the CCR ILM issue and also be good for other use cases too. We can also make sure that once this new setting is set it cannot be unset which I think is important for these cases","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442075974","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442075974","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442075974,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA3NTk3NA==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T14:24:24Z","updated_at":"2018-11-27T14:27:30Z","author_association":"MEMBER","body":"> ILM should not perform destructive operations on follower indices (this can be checked by checking custom metadata in IndexMetaData).\r\n\r\nIs this saying that follower indexes should never run shrink or delete? If so I don't think this restriction is necessary since the index will no longer be following by the time it gets to the warm phase\r\n\r\nEDIT: actually I see what this means now. We should not perform destructive operations if the follower index is still following. In this case we should go to the ERROR step. In the case that things have worked as expected the index would not be a follower index anymore but a regular index so would be fine to run destructive operations","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442077334","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442077334","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442077334,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA3NzMzNA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T14:28:09Z","updated_at":"2018-11-27T14:28:09Z","author_association":"MEMBER","body":"> This is because users may set the write block themselves for other reasons and then unset it later intending to keep indexing into that index.\r\n\r\nThis was discussed yesterday and the conclusion was that this is problem also in other scenarios. Something like a readonly api should be build that turns an index into a read only index forever. But that should be tackled outside ccr / ilm. \r\n\r\n> Is this saying that follower indexes should never run shrink or delete?\r\n\r\nWell not when it is actively following a leader index. The index would first need to be unfollowed before that could be done.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442077760","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442077760","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442077760,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA3Nzc2MA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T14:29:21Z","updated_at":"2018-11-27T14:29:21Z","author_association":"MEMBER","body":"> actually I see what this means now. We should not perform destructive operations if the follower index is still following. In this case we should go to the ERROR step. In the case that things have worked as expected the index would not be a follower index anymore but a regular index so would be fine to run destructive operations\r\n\r\n:+1: ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442078792","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442078792","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442078792,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA3ODc5Mg==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T14:32:21Z","updated_at":"2018-11-27T14:32:21Z","author_association":"MEMBER","body":"> This was discussed yesterday and the conclusion was that this is problem also in other scenarios. Something like a readonly api should be build that turns an index into a read only index forever. But that should be tackled outside ccr / ilm.\r\n\r\nI agree that we should build a readonly API that makes the index readonly forever but I don't think using the write block is a good idea in the interim. Users may already be used to using the write block as part of maintenance workflows, if the index reacts to that setting at a time that the user does not expect then the results are pretty bad since the index will un-follow the leader when its up to date meaning it is not going to be a copy of the leader. I think we should use something other than the write block.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442081893","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442081893","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442081893,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA4MTg5Mw==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T14:40:52Z","updated_at":"2018-11-27T14:40:52Z","author_association":"MEMBER","body":"I see, that makes sense. So instead of relying on `index.blocks.write`, ILM on a follower cluster would rely on something like `index.lifecycle.index_complete`. Should this new index setting also control whether a write block is set? Because otherwise documents can still be indexed while this setting is set.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442089076","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442089076","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442089076,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjA4OTA3Ng==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T15:00:05Z","updated_at":"2018-11-27T15:00:05Z","author_association":"MEMBER","body":"> Should this new index setting also control whether a write block is set? Because otherwise documents can still be indexed while this setting is set.\r\n\r\nThis is definitely up for discussion but I think we need something that has a clear intention and meaning that the index is not intended to be written to agian","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442112586","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442112586","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442112586,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjExMjU4Ng==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T15:59:56Z","updated_at":"2018-11-27T15:59:56Z","author_association":"CONTRIBUTOR","body":"In the ILM sync, we decided that we're going to move ahead with a solution as proposed in #35944 (`index_complete` setting or similar) as it not only addresses the issue with following indices, but also other issues we're facing around Beats integration with ILM.  More detail will be added to that issue shortly.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442421096","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442421096","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442421096,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjQyMTA5Ng==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2018-11-28T11:54:19Z","updated_at":"2018-11-28T11:54:19Z","author_association":"MEMBER","body":"> actually I see what this means now. We should not perform destructive operations if the follower index is still following. In this case we should go to the ERROR step. In the case that things have worked as expected the index would not be a follower index anymore but a regular index so would be fine to run destructive operations\r\n\r\nSmall comment here - I was thinking that we add a post rollover/pre-shrink wait condition that waits for the index to have no followers. It may take a bit for all the followers to catch up with the leader index and unsubscribe.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/442422875","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-442422875","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":442422875,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjQyMjg3NQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-11-28T12:01:12Z","updated_at":"2018-11-28T12:01:12Z","author_association":"MEMBER","body":"++ I was thinking the same thanks for commenting on it explicitly","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/448811365","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-448811365","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":448811365,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0ODgxMTM2NQ==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2018-12-20T00:44:51Z","updated_at":"2018-12-20T00:44:51Z","author_association":"CONTRIBUTOR","body":"@martijnvg and I discussed this briefly on Slack, and while the high-level concepts for handling ILM and CCR are sound, there are a few options for how we can handle the details of doing so, particularly in the interface that will be used for writing ILM policies for indices which interact with CCR.\r\n\r\n## Option 1: Add an \"unfollow_when_ready\" action\r\n\r\nThis is the simplest option in that it keeps the logic for unfollowing an index contained to one new explicit action.  This would likely take the form of a new Hot phase action which could be used in place of Rollover, which would move to the Error step if applied to an index that is not a follower.  This would require checks in certain actions (Shrink, possibly Readonly and ForceMerge) to verify that the index is not currently following as we would not be guaranteed to be able to safely perform those operations otherwise, and may involve the Rollover action verifying that it is not being used on a following index\r\n\r\nPros:\r\n* Requires different policies to be used on the leader and on the follower\r\n* Aligns with the intention of the Warm phase as being for after all indexing has completed (and therefore following is no longer necessary)\r\n* Fails relatively fast\r\n* Explicit about what operations are being performed\r\n* The timing of the gap in readability of the index required for unfollowing is relatively predictable\r\n\r\nCons:\r\n* There are two different types of policies - ones can be used on \"regular\" indices, and ones which can be used on \"follower\" indices. This may be confusing or frustrating to users.\r\n* Requires users to know about the \"Unfollow\" action\r\n\r\n## Option 2: Unfollow automatically in the Hot phase or as part of Rollover\r\n\r\nThis option would either add steps to the Rollover action or inject an action into the Hot phase to automatically unfollow an index once the leader has signaled that indexing is complete. This would allow policies to be more easily reused between leader and follower clusters, and may be more inuitive for the user: Once indexing is complete, the follower would automatically decouple itself from the leader and each would proceed with their policies completely independently.\r\n\r\nPros:\r\n* With careful design of the execution model, may allow certain policies to be copied verbatim from leader to follower\r\n* Aligns with the intention of the Warm phase as being for after all indexing has completed (and therefore following is no longer necessary)\r\n* Easy path to doing \"the correct thing\" for the user\r\n* The timing of the gap in readability of the index required for unfollowing is relatively predictable\r\n\r\nCons:\r\n* Not explicit about what operations are being performed\r\n* Requires extra complexity as each step in the unfollowing process must have a check to see if it is being used on a following index, and if not, skip execution. (due to being unable to choose between branches of steps)\r\n* Requires extra complexity either in injecting an action or in adding steps to the Rollover action\r\n* Doing this as part of Rollover means overloading Rollover to mean \"Rollover or Unfollow\", which is confusing, but doing it automatically means any Rollover action in a policy used on a follower action is meaningless, which is also confusing\r\n\r\n## Option 3: Unfollow automatically before dangerous actions\r\n\r\nThis option is similar to Option 2, but would perform unfollowing if and only if an action which is unsafe to perform on a following index is specified in the policy, immediately before performing the operation. This would be implemented by adding several steps to each action which cannot be safely performed on a following index (Shrink, possibly Readonly and ForceMerge) to automatically unfollow the index before performing the action. \r\n\r\nPros:\r\n* The gap in readability of the index required for unfollowing is only required for the indices which actually need it\r\n* Easy-ish path to doing \"the correct thing\" for the user\r\n* Not mutually exclusive with Option 1 - we could still have unfollowing be available as an explicit step\r\n* Putting off unfollowing until the last minute may allow e.g. replication to occur simultaneously with allocation in the Warm phase\r\n\r\nCons:\r\n* Requires adding lots of extra steps to actions which are not directly related to the action itself\r\n* Not explicit about what operations are being performed\r\n* It is not guaranteed that we ever unfollow the index, which may lead to the leader getting unexpectedly \"stuck\" on actions such as Shrink or Delete if followers retain history leases\r\n* The timing of the gap in readability of the index required for unfollowing is less predictable\r\n\r\n---\r\n\r\nCurrently, my personal preference is for Option 2, though I think I could easily be swayed to Option 1.  I think Option 3 is \"too magical\" - it's difficult to explain, less predictable, and adds a lot of complexity to the code.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/448925979","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-448925979","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":448925979,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0ODkyNTk3OQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-12-20T09:09:41Z","updated_at":"2018-12-20T09:09:57Z","author_association":"MEMBER","body":"My preferences largely follow @gwbrown's. \r\n\r\nOption 3 is quite hard to explain to a user and would add a lot of complexity to the code. Also I think for most use cases the user will not want to move to the warm phase until replication has finished meaning that every action would need to first unfollow and thats essentially option 2 anyway.\r\n\r\nI think Option 1 will lead to frustration for users. I'm not sure users will see \"Requires different policies to be used on the leader and on the follower\" as a pro and will find it hard to understand why the policies need to be different between the leader and the follower.\r\n\r\nMy preference is therefore for option 2. Additionally I think it might be better to have an implicit action rather than having the logic built into the rollover action. My reasoning here is:\r\n* If a user is not using the rollover action but it is a following index we will still do the right thing. Explaining to a user that they need to use a rollover action on the follower index even though they don't use it on the leader index is problematic IMO\r\n* Implicit actions are easier to explain than overloading an existing action\r\n* A user can omit the rollover action on the follow index and thing will work fine which helps to mitigate \"any Rollover action in a policy used on a follower action is meaningless\"\r\n* I think the unfollowing process should consist of 3 steps:\r\n    1. Cluster state wait step - Checks if this is a follower index, if so checks for indexing_complete setting (this is necessary in case there is no rollover action used)\r\n    2. Async wait step - Calls CCR API to check if index is caught up (if this check can be done in cluster state we can combine this step with the previous\r\n    3. Async action step - Calls CCR API to unfollow leader\r\n* The second and third step above may not need to check if the index is a following index if the CCR APIs return an error or response that indicates the index is not a follower index (since we can detect that response and move to the next step)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/449056170","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-449056170","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":449056170,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTA1NjE3MA==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2018-12-20T16:29:13Z","updated_at":"2018-12-20T16:29:13Z","author_association":"CONTRIBUTOR","body":"I agree, option 2 seems to be the clearest. We have a history of injecting implicit\r\nactions, and that caused some confusion. If we go with injecting an unfollow action \r\nafter the rollover action, then it would be nice if we showed it in the stored \r\npolicy, at least in the explain APIs phase info. I am concerned this will potentially \r\ncause other confusion if we disallow explicitly defining this action when PUTing \r\na policy, but I think it should show itself in the Expain API.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/449485859","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-449485859","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":449485859,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTQ4NTg1OQ==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2018-12-21T20:04:36Z","updated_at":"2018-12-21T20:05:10Z","author_association":"CONTRIBUTOR","body":"After talking @talevy and @martijnvg a bit, I'd like to have a real-time discussion about which option we should go with when people are available to do so.\r\n\r\nAdditionally, @martijnvg uncovered another thing we'll have to make a decision about: CCR does not respect index templates when creating follower indices, so that approach for setting policies on new indices won't work for follower indices.  There are a couple ways we could handle this, which aren't necessarily mutually exclusive:\r\n1. Simply keep `index.lifecycle.name` as a setting that is managed by CCR and copied from the leader to the follower. This requires the policies on the leader and the follower to have the same name, although the policies themselves could be different.\r\n2. Add a parameter to the CCR APIs/auto-follow patterns that allows specifying a policy name for the follower index.\r\n\r\nThis is also something I think we should discuss as a team when everyone is available again.  I don't think this blocks any work, as we can test for the moment assuming Option 1 very easily, but we do need to make a final decision before shipping.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/453193066","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-453193066","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":453193066,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MzE5MzA2Ng==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2019-01-10T17:59:58Z","updated_at":"2019-01-10T19:43:01Z","author_association":"CONTRIBUTOR","body":"Following a Zoom discussion with @jakelandis, @martijnvg, @dakrone, and @talevy, we have come to a decision on the above questions.\r\n\r\nRegarding how to specify the Unfollow action:  In order to give the user maximum flexibility while also maintaining ease of use, the Unfollow action will be available as an explicit action in the Hot, Warm, and Cold phases, and will automatically run before the Shrink action (and in the future, any other actions which require it) [edit: and the Rollover action, see below].  If the index is not a follower index, Unfollow is a no-op, so we do not have concerns about this impacting non-follower indices or problems with policies that specify the Unfollow action multiple times.\r\n\r\nRegarding policy names on follower indices: We are going to require follower indices to have the same policy name as their leader index for now, while keeping in mind the possibility to add the ability to specify a different policy name to the CCR APIs if and when we determine that this is a needed feature. This would be a non-breaking change and could be easily added at that point.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/453215758","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-453215758","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":453215758,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MzIxNTc1OA==","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"created_at":"2019-01-10T19:08:17Z","updated_at":"2019-01-10T19:08:17Z","author_association":"CONTRIBUTOR","body":"> and will automatically run before the Shrink action (and in the future, any other actions which require it)\r\n\r\nIIRC we also discussed having it automatically run before the Rollover action too. If this is not the case we should revisit this part of the discussion. (also +1 on explicit + implicit unfollow) ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/453227540","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-453227540","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":453227540,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MzIyNzU0MA==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2019-01-10T19:42:36Z","updated_at":"2019-01-10T19:42:36Z","author_association":"CONTRIBUTOR","body":"Ah, yes, you are correct, I just forgot to write it. Doing that on rollover as well allows for reuse of policies between leader and follower, but not doing it automatically in the Hot phase gives the flexibility to control when in the lifecycle the follower is decoupled.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/460133318","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-460133318","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":460133318,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MDEzMzMxOA==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2019-02-04T05:14:07Z","updated_at":"2019-02-04T05:14:07Z","author_association":"CONTRIBUTOR","body":"All of the tasks listed above are complete & backported to 6.x, which means the outstanding concerns we have around ILM and CCR operating on the same indices have been addressed.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/460428277","html_url":"https://github.com/elastic/elasticsearch/issues/34648#issuecomment-460428277","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34648","id":460428277,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2MDQyODI3Nw==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2019-02-04T21:54:00Z","updated_at":"2019-02-04T21:54:00Z","author_association":"CONTRIBUTOR","body":"Given a recent discovery, I'm reopening this until work on https://github.com/elastic/elasticsearch/issues/37165 progresses until this item is complete:\r\n`integrate shard history retention leases with cross-cluster replication`\r\n\r\nUntil then, the work already done on ILM to utilize shard history retention leases is effectively a no-op.","performed_via_github_app":null}]