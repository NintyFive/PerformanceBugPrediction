{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/26674","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26674/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26674/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26674/events","html_url":"https://github.com/elastic/elasticsearch/issues/26674","id":258163662,"node_id":"MDU6SXNzdWUyNTgxNjM2NjI=","number":26674,"title":"scaled_float does not work in dynamic templates across multiple types","user":{"login":"travisp","id":165698,"node_id":"MDQ6VXNlcjE2NTY5OA==","avatar_url":"https://avatars0.githubusercontent.com/u/165698?v=4","gravatar_id":"","url":"https://api.github.com/users/travisp","html_url":"https://github.com/travisp","followers_url":"https://api.github.com/users/travisp/followers","following_url":"https://api.github.com/users/travisp/following{/other_user}","gists_url":"https://api.github.com/users/travisp/gists{/gist_id}","starred_url":"https://api.github.com/users/travisp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/travisp/subscriptions","organizations_url":"https://api.github.com/users/travisp/orgs","repos_url":"https://api.github.com/users/travisp/repos","events_url":"https://api.github.com/users/travisp/events{/privacy}","received_events_url":"https://api.github.com/users/travisp/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"assignees":[{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2017-09-15T21:03:11Z","updated_at":"2019-02-18T14:27:29Z","closed_at":"2019-02-18T14:27:29Z","author_association":"NONE","active_lock_reason":null,"body":"<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`): 5.4 through 5.6\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nWhen creating a default dynamic template that uses `scaled_float` and setting a `scaling_factor`, the mapping will be successfully applied to the first type that Elasticsearch encounters. When encountering a second type, with field names of the same type, Elasticsearch gives the following error `Field [X] misses required parameter [scaling_factor]`\r\n\r\nThe same issue was reported by another user in April in the Elasticsearch mailing list: https://discuss.elastic.co/t/mapper-parsing-exception-when-creating-the-same-document-with-different-type/82987\r\n\r\n**Steps to reproduce**:\r\n\r\n1. Create two dynamic templates for different types, with the same name and both with type scaled_float and a scaling_factor.\r\n2. Index into the first type, then index into the second type (it will fail)\r\n\r\nAlternatively:\r\n1. Create one _default_ dynamic template with scaled_float type and scaling_factor set\r\n2. Index into one type with a field that'll match the dynamic template\r\n3. Index into a second type with the same field name that'll match the dynamic template (this will fail)\r\n\r\nReproduction inside Elasticsearch unit tests:\r\n\r\ntest-mapping_any.json :\r\n```json\r\n{\r\n    \"dynamic_templates\":[\r\n        {\r\n            \"scaled_float_template\":{\r\n                \"match\":\"incoming_integer\",\r\n                \"mapping\":{\r\n                    \"type\":\"scaled_float\",\r\n                    \"scaling_factor\":1000\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\ntest-data.json :\r\n```json\r\n{\r\n    \"name\":\"some name\",\r\n    \"incoming_integer\": 54\r\n}\r\n```\r\n\r\n\r\n```java\r\n   // DynamicTemplatesTests (probably not the best place, but it works)\r\n    public void testScaledFloatDynamic() throws Exception {\r\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/dynamictemplate/scaled_float/test-mapping_any.json\");\r\n        client().admin().indices().prepareCreate(\"test\").addMapping(\"transaction_one\", mapping)\r\n            .addMapping(\"transaction_two\", mapping).get();\r\n\r\n        String data = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/dynamictemplate/scaled_float/test-data.json\");\r\n\r\n        BulkResponse response = client().prepareBulk().add(new IndexRequest(\"test\", \"transaction_one\", \"1\").source(data, XContentType.JSON)).get();\r\n        assertThat(response.hasFailures(), is(false));\r\n        assertThat(response.getItems()[0].isFailed(), equalTo(false));\r\n\r\n        GetMappingsResponse mappingResponse = client().admin().indices().prepareGetMappings(\"test\").get();\r\n\r\n        response = client().prepareBulk().add(new IndexRequest(\"test\", \"transaction_two\", \"1\").source(data, XContentType.JSON)).get();\r\n        assertThat(response.hasFailures(), is(false)); \r\n        assertThat(response.getItems()[0].isFailed(), equalTo(false));\r\n    }\r\n```\r\n\r\nThe second request fails with \"Field [incoming_integer] misses required parameter [scaling_factor]\"\r\n\r\nThe mapping for `transaction_one`, in the mappingResponse variable is:\r\n```\r\n{\"transaction_one\":{\"dynamic_templates\":[{\"scaled_float_template\":{\"match\":\"incoming_integer\",\"mapping\":{\"scaling_factor\":1000,\"type\":\"scaled_float\"}}}],\"properties\":{\"incoming_integer\":{\"type\":\"scaled_float\",\"scaling_factor\":1000.0},\"name\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\",\"ignore_above\":256}}}}}}\r\n```\r\n\r\nThe mapping for `transaction_two`, in the mappingResponse variable is:\r\n```\r\n{\"transaction_two\":{\"dynamic_templates\":[{\"scaled_float_template\":{\"match\":\"incoming_integer\",\"mapping\":{\"scaling_factor\":1000,\"type\":\"scaled_float\"}}}]}}\r\n```\r\n\r\nYou can see that the dynamic templates are identical, and both have a scaling_factor, but the insert into the second type always fails with a complaint about \"scaling_factor\"\r\n\r\nUpdate:\r\n\r\nI don't know the internals of Elasticsearch well, but it looks like the problem is that because mappings actually have to be the same between types, the code fails to apply the scaling_factor to the second type after the first was created. In the method `org.elasticsearch.index.mapper.DocumentParser.createBuilderFromFieldType`, it passes in no information into the new builder about scaling factor.\r\n\r\nThe example failing test passes if the `createBuilderFromFieldType` method is updated to include the following elseif statement:\r\n\r\n```\r\n        } else if (fieldType instanceof ScaledFloatFieldMapper.ScaledFloatFieldType) {\r\n            builder = new ScaledFloatFieldMapper.Builder(currentFieldName).scalingFactor(\r\n                ((ScaledFloatFieldMapper.ScaledFloatFieldType) fieldType).getScalingFactor()\r\n            );\r\n```\r\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}