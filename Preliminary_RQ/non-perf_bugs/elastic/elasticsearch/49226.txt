{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/49226","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/49226/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/49226/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/49226/events","html_url":"https://github.com/elastic/elasticsearch/issues/49226","id":524177777,"node_id":"MDU6SXNzdWU1MjQxNzc3Nzc=","number":49226,"title":"my bool query_string Query condition error(version 7.2)","user":{"login":"lqPrototype","id":30515981,"node_id":"MDQ6VXNlcjMwNTE1OTgx","avatar_url":"https://avatars1.githubusercontent.com/u/30515981?v=4","gravatar_id":"","url":"https://api.github.com/users/lqPrototype","html_url":"https://github.com/lqPrototype","followers_url":"https://api.github.com/users/lqPrototype/followers","following_url":"https://api.github.com/users/lqPrototype/following{/other_user}","gists_url":"https://api.github.com/users/lqPrototype/gists{/gist_id}","starred_url":"https://api.github.com/users/lqPrototype/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lqPrototype/subscriptions","organizations_url":"https://api.github.com/users/lqPrototype/orgs","repos_url":"https://api.github.com/users/lqPrototype/repos","events_url":"https://api.github.com/users/lqPrototype/events{/privacy}","received_events_url":"https://api.github.com/users/lqPrototype/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-11-18T07:11:22Z","updated_at":"2019-11-18T10:32:11Z","closed_at":"2019-11-18T10:32:11Z","author_association":"NONE","active_lock_reason":null,"body":"Function request：I need to retrieve the content from two index tables in full-text, and need to support and, or exclusion and other simple symbols. There are nested type fields in a table, and some fields need to be excluded. None of them.\r\n\r\n\r\nFirst, I use query string to query:\r\n```\r\n{\r\n        query: {\r\n          bool: {\r\n            must_not: [\r\n              {\r\n                term: { available: false },\r\n              },\r\n            ],\r\n            must: {\r\n              bool: {\r\n                should: [\r\n                  {\r\n                    query_string: {\r\n                      fuzzy_transpositions: true,\r\n                      analyze_wildcard: true,\r\n                      query: queryString,\r\n                      allow_leading_wildcard: true,\r\n                      default_operator: 'OR',\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        },\r\n        highlight: {\r\n          order: 'score',\r\n          fragment_size: '80',\r\n          number_of_fragments: 1,\r\n          pre_tags: ['<mark class=\"highlight_color\">'],\r\n          post_tags: ['</mark>'],\r\n          fields: {\r\n            '*': {},\r\n          },\r\n        },\r\n      };\r\n```\r\nGood times are not long. If you encounter the content in the nested field, you will not be able to retrieve the content. But I am very happy that the contents of both index tables can be retrieved.\r\n\r\n\r\n\r\nIn order to solve the problem that the query string of full-text retrieval can retrieve nested, I looked up a lot of content and finally achieved what I wanted. Later, I changed the condition query。\r\n\r\n```\r\n{\r\n        query: {\r\n          bool: {\r\n            must_not: [\r\n              {\r\n                term: { available: false },\r\n              },\r\n            ],\r\n            must: {\r\n              bool: {\r\n                should: [\r\n                  {\r\n                    nested: {\r\n                      path: 'extend',\r\n                      query: {\r\n                        query_string: {\r\n                          fuzzy_transpositions: true,\r\n                          analyze_wildcard: true,\r\n                          query: queryString,\r\n                          allow_leading_wildcard: true,\r\n                          default_operator: 'OR',\r\n                          fields: ['extend.v'],\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                  {\r\n                    nested: {\r\n                      path: 'account_data',\r\n                      query: {\r\n                        query_string: {\r\n                          fuzzy_transpositions: true,\r\n                          analyze_wildcard: true,\r\n                          query: queryString,\r\n                          allow_leading_wildcard: true,\r\n                          default_operator: 'OR',\r\n                          fields: [\r\n                            'account_data.password',\r\n                            'account_data.nickName',\r\n                            'account_data.accountType',\r\n                            'account_data.account',\r\n                            'account_data.desc',\r\n                          ],\r\n                        },\r\n                      },\r\n                    },\r\n                  },\r\n                  {\r\n                    query_string: {\r\n                      fuzzy_transpositions: true,\r\n                      analyze_wildcard: true,\r\n                      query: queryString,\r\n                      allow_leading_wildcard: true,\r\n                      default_operator: 'OR',\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            },\r\n          },\r\n        },\r\n        highlight: {\r\n          order: 'score',\r\n          fragment_size: '80',\r\n          number_of_fragments: 1,\r\n          pre_tags: ['<mark class=\"highlight_color\">'],\r\n          post_tags: ['</mark>'],\r\n          fields: {\r\n            '*': {},\r\n          },\r\n        },\r\n      }\r\n\r\n```\r\nGood times don't last long, unhappy, terrible things happen again. The above condition query can only query the contents of nested, and report an error. The contents of nested field can be retrieved, but the contents of another index table can't be retrieved, and report an error. The error is as follows.\r\n\r\n```\r\n{\r\n    \"took\": 71,\r\n    \"timed_out\": false,\r\n    \"_shards\": {\r\n        \"total\": 10,\r\n        \"successful\": 5,\r\n        \"skipped\": 0,\r\n        \"failed\": 5,\r\n        \"failures\": [\r\n            {\r\n                \"shard\": 0,\r\n                \"index\": \"suspect_table\",\r\n                \"node\": \"Ms5RKmmORAS69eT-QTvFcQ\",\r\n                \"reason\": {\r\n                    \"type\": \"query_shard_exception\",\r\n                    \"reason\": \"failed to create query: {\\n  \\\"bool\\\" : {\\n    \\\"must\\\" : [\\n      {\\n        \\\"bool\\\" : {\\n          \\\"should\\\" : [\\n            {\\n              \\\"nested\\\" : {\\n                \\\"query\\\" : {\\n                  \\\"query_string\\\" : {\\n                    \\\"query\\\" : \\\"'exe'\\\",\\n                    \\\"fields\\\" : [\\n                      \\\"extend.v^1.0\\\"\\n                    ],\\n                    \\\"type\\\" : \\\"best_fields\\\",\\n                    \\\"default_operator\\\" : \\\"or\\\",\\n                    \\\"max_determinized_states\\\" : 10000,\\n                    \\\"allow_leading_wildcard\\\" : true,\\n                    \\\"enable_position_increments\\\" : true,\\n                    \\\"fuzziness\\\" : \\\"AUTO\\\",\\n                    \\\"fuzzy_prefix_length\\\" : 0,\\n                    \\\"fuzzy_max_expansions\\\" : 50,\\n                    \\\"phrase_slop\\\" : 0,\\n                    \\\"analyze_wildcard\\\" : true,\\n                    \\\"escape\\\" : false,\\n                    \\\"auto_generate_synonyms_phrase_query\\\" : true,\\n                    \\\"fuzzy_transpositions\\\" : true,\\n                    \\\"boost\\\" : 1.0\\n                  }\\n                },\\n                \\\"path\\\" : \\\"extend\\\",\\n                \\\"ignore_unmapped\\\" : false,\\n                \\\"score_mode\\\" : \\\"avg\\\",\\n                \\\"boost\\\" : 1.0\\n              }\\n            },\\n            {\\n              \\\"nested\\\" : {\\n                \\\"query\\\" : {\\n                  \\\"query_string\\\" : {\\n                    \\\"query\\\" : \\\"'exe'\\\",\\n                    \\\"fields\\\" : [\\n                      \\\"account_data.account^1.0\\\",\\n                      \\\"account_data.accountType^1.0\\\",\\n                      \\\"account_data.desc^1.0\\\",\\n                      \\\"account_data.nickName^1.0\\\",\\n                      \\\"account_data.password^1.0\\\"\\n                    ],\\n                    \\\"type\\\" : \\\"best_fields\\\",\\n                    \\\"default_operator\\\" : \\\"or\\\",\\n                    \\\"max_determinized_states\\\" : 10000,\\n                    \\\"allow_leading_wildcard\\\" : true,\\n                    \\\"enable_position_increments\\\" : true,\\n                    \\\"fuzziness\\\" : \\\"AUTO\\\",\\n                    \\\"fuzzy_prefix_length\\\" : 0,\\n                    \\\"fuzzy_max_expansions\\\" : 50,\\n                    \\\"phrase_slop\\\" : 0,\\n                    \\\"analyze_wildcard\\\" : true,\\n                    \\\"escape\\\" : false,\\n                    \\\"auto_generate_synonyms_phrase_query\\\" : true,\\n                    \\\"fuzzy_transpositions\\\" : true,\\n                    \\\"boost\\\" : 1.0\\n                  }\\n                },\\n                \\\"path\\\" : \\\"account_data\\\",\\n                \\\"ignore_unmapped\\\" : false,\\n                \\\"score_mode\\\" : \\\"avg\\\",\\n                \\\"boost\\\" : 1.0\\n              }\\n            },\\n            {\\n              \\\"query_string\\\" : {\\n                \\\"query\\\" : \\\"'exe'\\\",\\n                \\\"fields\\\" : [ ],\\n                \\\"type\\\" : \\\"best_fields\\\",\\n                \\\"default_operator\\\" : \\\"or\\\",\\n                \\\"max_determinized_states\\\" : 10000,\\n                \\\"allow_leading_wildcard\\\" : true,\\n                \\\"enable_position_increments\\\" : true,\\n                \\\"fuzziness\\\" : \\\"AUTO\\\",\\n                \\\"fuzzy_prefix_length\\\" : 0,\\n                \\\"fuzzy_max_expansions\\\" : 50,\\n                \\\"phrase_slop\\\" : 0,\\n                \\\"analyze_wildcard\\\" : true,\\n                \\\"escape\\\" : false,\\n                \\\"auto_generate_synonyms_phrase_query\\\" : true,\\n                \\\"fuzzy_transpositions\\\" : true,\\n                \\\"boost\\\" : 1.0\\n              }\\n            }\\n          ],\\n          \\\"adjust_pure_negative\\\" : true,\\n          \\\"boost\\\" : 1.0\\n        }\\n      }\\n    ],\\n    \\\"must_not\\\" : [\\n      {\\n        \\\"term\\\" : {\\n          \\\"available\\\" : {\\n            \\\"value\\\" : false,\\n            \\\"boost\\\" : 1.0\\n          }\\n        }\\n      }\\n    ],\\n    \\\"adjust_pure_negative\\\" : true,\\n    \\\"boost\\\" : 1.0\\n  }\\n}\",\r\n                    \"index_uuid\": \"40pL0rfHTI-Dxa8VYqAj9g\",\r\n                    \"index\": \"suspect_table\",\r\n                    \"caused_by\": {\r\n                        \"type\": \"illegal_state_exception\",\r\n                        \"reason\": \"[nested] failed to find nested object under path [extend]\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"hits\": {\r\n        \"total\": {\r\n            \"value\": 0,\r\n            \"relation\": \"eq\"\r\n        },\r\n        \"max_score\": null,\r\n        \"hits\": []\r\n    }\r\n}\r\n```\r\n\r\n\r\nExpectation: I hope to use query_string to retrieve all fields in full text, and find the contents of nested and multiple tables.\r\n\r\n\r\n","closed_by":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"performed_via_github_app":null}