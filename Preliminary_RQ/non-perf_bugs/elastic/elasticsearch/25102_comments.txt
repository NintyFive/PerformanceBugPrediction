[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/306791079","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-306791079","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":306791079,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNjc5MTA3OQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2017-06-07T13:15:35Z","updated_at":"2017-06-07T13:15:35Z","author_association":"CONTRIBUTOR","body":"@jpountz Would you have an explanation for this performance regression between 5.3 and 5.4? Looks like a heavy query.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/306798142","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-306798142","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":306798142,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNjc5ODE0Mg==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2017-06-07T13:41:28Z","updated_at":"2017-06-07T13:41:28Z","author_association":"CONTRIBUTOR","body":"[This change in Lucene](https://issues.apache.org/jira/browse/LUCENE-7641) happened between these versions and relates to range queries. It added extra testing logic to range queries to test if it was more efficient to compute documents that do not match the range on single-valued fields when more than half the documents in the index would match.\r\n\r\nWhile this sped up the more common case of a small number of range queries it may not pay off so well in a compound query like yours with very many small ranges (at least that's my working assumption).\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/306803402","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-306803402","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":306803402,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNjgwMzQwMg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-06-07T13:59:32Z","updated_at":"2017-06-07T13:59:32Z","author_association":"CONTRIBUTOR","body":"I think https://github.com/elastic/elasticsearch/pull/23119 is more likely to trigger changes in performance of range queries, even though it is still unclear to me why it would cause a slowdown in that case.\r\n\r\n@nenadvicentic Would you mind sharing:\r\n - your actual query,\r\n - the [profile](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-profile.html) output\r\n - the output of the [hot threads](https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-hot-threads.html) API **while the query is running** . Taking it a couple times might help.\r\n\r\nThanks!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/306822037","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-306822037","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":306822037,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNjgyMjAzNw==","user":{"login":"nenadvicentic","id":4405210,"node_id":"MDQ6VXNlcjQ0MDUyMTA=","avatar_url":"https://avatars3.githubusercontent.com/u/4405210?v=4","gravatar_id":"","url":"https://api.github.com/users/nenadvicentic","html_url":"https://github.com/nenadvicentic","followers_url":"https://api.github.com/users/nenadvicentic/followers","following_url":"https://api.github.com/users/nenadvicentic/following{/other_user}","gists_url":"https://api.github.com/users/nenadvicentic/gists{/gist_id}","starred_url":"https://api.github.com/users/nenadvicentic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nenadvicentic/subscriptions","organizations_url":"https://api.github.com/users/nenadvicentic/orgs","repos_url":"https://api.github.com/users/nenadvicentic/repos","events_url":"https://api.github.com/users/nenadvicentic/events{/privacy}","received_events_url":"https://api.github.com/users/nenadvicentic/received_events","type":"User","site_admin":false},"created_at":"2017-06-07T14:59:58Z","updated_at":"2017-06-07T15:00:30Z","author_association":"NONE","body":"Hi @jpountz ,\r\n\r\nI collected performance data.\r\n\r\nThis is the actual query:\r\n[Elasticsearch-slow-query.txt](https://github.com/elastic/elasticsearch/files/1058390/Elasticsearch-slow-query.txt)\r\n\r\nProfiling data from 3 versions of Elasticsearch: **5.3.2, 5.4.0 and 5.4.1**, running the above query (same query, same data). I only removed output data from `hits` array. Rest of it is there.\r\n\r\n[Elasticsearch-slow-query-example-profiling-info_v5.3.2.txt](https://github.com/elastic/elasticsearch/files/1058394/Elasticsearch-slow-query-example-profiling-info_v5.3.2.txt)\r\n[Elasticsearch-slow-query-example-profiling-info_v5.4.0.txt](https://github.com/elastic/elasticsearch/files/1058395/Elasticsearch-slow-query-example-profiling-info_v5.4.0.txt)\r\n[Elasticsearch-slow-query-example-profiling-info_v5.4.1.txt](https://github.com/elastic/elasticsearch/files/1058396/Elasticsearch-slow-query-example-profiling-info_v5.4.1.txt)\r\n\r\nAnd here are 3 checks for hot_threads. All three are only for version **5.4.1**:\r\n\r\n[Elasticsearch-slow-query-hot_threads_take1_v5.4.1.txt](https://github.com/elastic/elasticsearch/files/1058415/Elasticsearch-slow-query-hot_threads_take1_v5.4.1.txt)\r\n[Elasticsearch-slow-query-hot_threads_take2_v5.4.1.txt](https://github.com/elastic/elasticsearch/files/1058417/Elasticsearch-slow-query-hot_threads_take2_v5.4.1.txt)\r\n[Elasticsearch-slow-query-hot_threads_take3_v5.4.1.txt](https://github.com/elastic/elasticsearch/files/1058419/Elasticsearch-slow-query-hot_threads_take3_v5.4.1.txt)\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/306856436","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-306856436","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":306856436,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNjg1NjQzNg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-06-07T16:51:58Z","updated_at":"2017-06-07T16:51:58Z","author_association":"CONTRIBUTOR","body":"I think I understand what is happening. We have heuristics in place in order to estimate how many documents each leaf of the query tree matches so that we can pick the optimal execution order. However this heuristic is not very accurate, it can easily be off by about 1024, and the fact that there are many tiny ranges makes the error add up and Elasticsearch ends up assuming that it is better to iterate over all docs of the `plot` type and check whether they match the `bool` query rather than iterate documents that match the `bool` query and check whether they are in the `plot` type. In addition to being a linear scan, this is slow due to our best efforts to optimize for execution order, so on each document, we sort ranges by cost before trying to match them, which is the bottleneck according to the hot threads.\r\n\r\nI quickly checked, and none of the ranges seems to match more than 100 elements, so I think it would be worth rewriting this `bool` query of ranges into a giant `terms` query for all possible values. If you happen to have ranges that are not tiny sometimes, then I would suggest to have a `bool` query that has one `range` clause for each large range (say more than 100 elements as a start, should be tuned afterwards), and to merge all small ranges and `term` queries into a single `terms` clause.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/307051048","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-307051048","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":307051048,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNzA1MTA0OA==","user":{"login":"nenadvicentic","id":4405210,"node_id":"MDQ6VXNlcjQ0MDUyMTA=","avatar_url":"https://avatars3.githubusercontent.com/u/4405210?v=4","gravatar_id":"","url":"https://api.github.com/users/nenadvicentic","html_url":"https://github.com/nenadvicentic","followers_url":"https://api.github.com/users/nenadvicentic/followers","following_url":"https://api.github.com/users/nenadvicentic/following{/other_user}","gists_url":"https://api.github.com/users/nenadvicentic/gists{/gist_id}","starred_url":"https://api.github.com/users/nenadvicentic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nenadvicentic/subscriptions","organizations_url":"https://api.github.com/users/nenadvicentic/orgs","repos_url":"https://api.github.com/users/nenadvicentic/repos","events_url":"https://api.github.com/users/nenadvicentic/events{/privacy}","received_events_url":"https://api.github.com/users/nenadvicentic/received_events","type":"User","site_admin":false},"created_at":"2017-06-08T09:31:48Z","updated_at":"2017-06-08T09:31:48Z","author_association":"NONE","body":"I have tried to rewrite the query, but without success.\r\n\r\nInitially, I have tried to convert all ranges with less then 100 elements to single `TermsQuery`, but I hit the limit for total query length, or `TermsQuery` length (I had ~7000 values in terms query). In the end, I converted only ranges with less then 10 elements to the single terms query, to keep the size of query text within allowed range.\r\n\r\nHowever, once working, query took around **30 sec** (compared to **2-6 sec** in **v5.3.2**). More, when I tried to profile request, I've got `TimeParsingException`, so I could not proceed. I reported issue here: elastic/elasticsearch-net#2778\r\n\r\nRegarding new query execution heuristics, could this be something worth fixing? Parent/child part of query limits amount of children to less then 100 plots. Also, **400 ranges**, each with additional **+1024** estimation, it's still only **409600** items extra of **10 million** items, which is **4%** error in worst possible case. It seems to be too small number to switch to full scan of items.\r\n\r\nIs there a way to opt-out from new heuristics logic, in order to keep performance level similar to **v5.3.2** for problematic queries?\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/307063513","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-307063513","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":307063513,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNzA2MzUxMw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-06-08T10:24:35Z","updated_at":"2017-06-08T10:24:35Z","author_association":"CONTRIBUTOR","body":"> Is there a way to opt-out from new heuristics logic\r\n\r\nThere is no way to work-around it, but on 5.4 you could take advantage of the fact that the [`dis_max` query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html) does not yet implement the optimization. So if you replace your `bool` query with a `dis_max`, that should get you back to similar performance as before.\r\n\r\n> Also, 400 ranges, each with additional +1024 estimation, it's still only 409600 items extra of 10 million items, which is 4% error\r\n\r\nCould you share how many documents match your `bool` query that contains 400 ranges (in the entire index, no type filter), how many documents you have in the `plot` type, and how many documents have a value for the `id1` field (can be done with an `exists` query).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/307314890","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-307314890","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":307314890,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNzMxNDg5MA==","user":{"login":"nenadvicentic","id":4405210,"node_id":"MDQ6VXNlcjQ0MDUyMTA=","avatar_url":"https://avatars3.githubusercontent.com/u/4405210?v=4","gravatar_id":"","url":"https://api.github.com/users/nenadvicentic","html_url":"https://github.com/nenadvicentic","followers_url":"https://api.github.com/users/nenadvicentic/followers","following_url":"https://api.github.com/users/nenadvicentic/following{/other_user}","gists_url":"https://api.github.com/users/nenadvicentic/gists{/gist_id}","starred_url":"https://api.github.com/users/nenadvicentic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nenadvicentic/subscriptions","organizations_url":"https://api.github.com/users/nenadvicentic/orgs","repos_url":"https://api.github.com/users/nenadvicentic/repos","events_url":"https://api.github.com/users/nenadvicentic/events{/privacy}","received_events_url":"https://api.github.com/users/nenadvicentic/received_events","type":"User","site_admin":false},"created_at":"2017-06-09T07:17:26Z","updated_at":"2017-06-09T07:17:26Z","author_association":"NONE","body":"Here is information about the data in the Elasticsearch index:\r\n\r\nIt is single parent-child relationship: parent `registrygroup` having 1 or more `plot` children (1 to 50).\r\n\r\nTotal parent items: 3224996\r\nTotal child items: 10238610 - all child items are of `plot` type, each `plot` has `id1`  (more accurate name would be `groupId`)\r\n\r\nRange sub-queries are acting like access list, so in my example fits all items. In average case it will be 10-60% of items.\r\n\r\nWhat I think can be improved: example query I gave fetches single parent item **by id**. Result is 1 parent with 1 child item. So heuristics should figure that querying by `id` has highest selectivity and then `parent-child` relation. This seemed to work fine until version **5.4**.\r\n\r\nBellow is output of the query from **v5.3.2** (with _source data removed):\r\n\r\n```\r\n{\r\n   \"took\": 2453,\r\n   \"timed_out\": false,\r\n   \"_shards\": {\r\n      \"total\": 5,\r\n      \"successful\": 5,\r\n      \"failed\": 0\r\n   },\r\n   \"hits\": {\r\n      \"total\": 1,\r\n      \"max_score\": 3,\r\n      \"hits\": [\r\n         {\r\n            \"_index\": \"my_index\",\r\n            \"_type\": \"registrygroup\",\r\n            \"_id\": \"75016e435\",\r\n            \"_score\": 3,\r\n            \"_source\": {\r\n               ...\r\n            },\r\n            \"inner_hits\": {\r\n               \"plot\": {\r\n                  \"hits\": {\r\n                     \"total\": 1,\r\n                     \"max_score\": 1,\r\n                     \"hits\": [\r\n                        ...\r\n                     ]\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      ]\r\n   }\r\n}\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/308373189","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-308373189","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":308373189,"node_id":"MDEyOklzc3VlQ29tbWVudDMwODM3MzE4OQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-06-14T09:15:01Z","updated_at":"2017-06-14T09:15:01Z","author_association":"CONTRIBUTOR","body":"> It is single parent-child relationship: parent registrygroup having 1 or more plot children (1 to 50).\r\n\r\nDo you mean that parents have at most 50 children? This probably means you would get much better performance by modeling your join with a `nested` object. Usually the only reason to prefer parent-child over nested is to avoid the indexing overhead of having to reindex all children when a single one needs to be added/removed/updated. But with at most 50 children I believe this would not be an issue.\r\n\r\n> So heuristics should figure that querying by id has highest selectivity and then parent-child relation. This seemed to work fine until version 5.4.\r\n\r\nThis is not the way it worked before 5.4 but you are right that we should try to do a better job with this kind of queries when filters on the parent are more selective than the join. The one thing that makes it tricky is that Lucene's query execution model requires that doc ids are visited in order, yet there is no relationship between the doc IDs of children documents and their parent, they can even be in different segments. The good news if you manage to migrate to nested docs rather than parent/child is that `nested` maintain order, ie. if `parentDocId1 < parentDocId2` then every child of `parentDocId1` has a doc ID that is less than every child of `parentDocId2`, which allows us to make much better decisions about how to run the query.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/311060422","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-311060422","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":311060422,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTA2MDQyMg==","user":{"login":"nenadvicentic","id":4405210,"node_id":"MDQ6VXNlcjQ0MDUyMTA=","avatar_url":"https://avatars3.githubusercontent.com/u/4405210?v=4","gravatar_id":"","url":"https://api.github.com/users/nenadvicentic","html_url":"https://github.com/nenadvicentic","followers_url":"https://api.github.com/users/nenadvicentic/followers","following_url":"https://api.github.com/users/nenadvicentic/following{/other_user}","gists_url":"https://api.github.com/users/nenadvicentic/gists{/gist_id}","starred_url":"https://api.github.com/users/nenadvicentic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nenadvicentic/subscriptions","organizations_url":"https://api.github.com/users/nenadvicentic/orgs","repos_url":"https://api.github.com/users/nenadvicentic/repos","events_url":"https://api.github.com/users/nenadvicentic/events{/privacy}","received_events_url":"https://api.github.com/users/nenadvicentic/received_events","type":"User","site_admin":false},"created_at":"2017-06-26T13:33:54Z","updated_at":"2017-06-26T13:33:54Z","author_association":"NONE","body":"Problem is, `child` objects are actually pins on the map and in map cases they are completely independent from parent items. If I would recreate index turning child objects into nested objects, any child matching my x-y-z tile on the map would return complete parent item with all children, regardless if children belong to x-y-z or not. Same goes for the `id` ranges I'm filtering for. One match would return everything. Additionally, this approach would require making projections of nested items.\r\n\r\nI think looking at object modeling just distracts from the core problem here. Same query dropping from 5 seconds to 100 seconds between 2 minor versions of Elasticsearch should be clear sign that there is an issue to look for.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/312815661","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-312815661","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":312815661,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMjgxNTY2MQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-07-04T08:31:03Z","updated_at":"2017-07-04T08:31:03Z","author_association":"CONTRIBUTOR","body":"I am looking into that issue, however I disagree that object modeling is a distraction. Regardless of that issue, if you care about search performance, then you should not use parent-child relations as this is our only query that needs to perform linear scans.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/313025275","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-313025275","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":313025275,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMzAyNTI3NQ==","user":{"login":"nenadvicentic","id":4405210,"node_id":"MDQ6VXNlcjQ0MDUyMTA=","avatar_url":"https://avatars3.githubusercontent.com/u/4405210?v=4","gravatar_id":"","url":"https://api.github.com/users/nenadvicentic","html_url":"https://github.com/nenadvicentic","followers_url":"https://api.github.com/users/nenadvicentic/followers","following_url":"https://api.github.com/users/nenadvicentic/following{/other_user}","gists_url":"https://api.github.com/users/nenadvicentic/gists{/gist_id}","starred_url":"https://api.github.com/users/nenadvicentic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nenadvicentic/subscriptions","organizations_url":"https://api.github.com/users/nenadvicentic/orgs","repos_url":"https://api.github.com/users/nenadvicentic/repos","events_url":"https://api.github.com/users/nenadvicentic/events{/privacy}","received_events_url":"https://api.github.com/users/nenadvicentic/received_events","type":"User","site_admin":false},"created_at":"2017-07-05T07:32:24Z","updated_at":"2017-07-05T07:32:24Z","author_association":"NONE","body":"@jpountz I attached additional test-query and it's profiling results in 5.3.2 and 5.4.2. Maybe this gives additional insight where the problem might be.\r\n\r\nIf I run my child range-query without parent part (it's attached at the bottom) over all `plot` objects it finishes in **2.03 secs on 5.3.2** and in **4.1 secs on 5.4.2**. This range-query is basically child query from my original example, but extracted and run separately. This is **2 secs slowdown** and for me it fits the with explanation that range query implementation is now different.\r\n\r\nHowever, this 2 secs slowdown does not explain 20x performance drop on original parent-child query (**5 secs to 100 secs**). That is the reason why I think there is a bug. My blind guess is that range-query in 5.4.2 is unnecessarily re-run multiply times, instead of once.\r\n\r\n\r\n[elasticsearch-my-request.txt](https://github.com/elastic/elasticsearch/files/1123805/elasticsearch-my-request.txt)\r\n[elasticsearch-response-profile-v5.3.2.txt](https://github.com/elastic/elasticsearch/files/1123807/elasticsearch-response-profile-v5.3.2.txt)\r\n[elasticsearch-response-profile-v5.4.2.txt](https://github.com/elastic/elasticsearch/files/1123808/elasticsearch-response-profile-v5.4.2.txt)\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319628244","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-319628244","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":319628244,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTYyODI0NA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-08-02T10:03:20Z","updated_at":"2017-08-02T10:03:20Z","author_association":"CONTRIBUTOR","body":"The situation should get better when/if https://issues.apache.org/jira/browse/LUCENE-7897 gets merged.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/323002768","html_url":"https://github.com/elastic/elasticsearch/issues/25102#issuecomment-323002768","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25102","id":323002768,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMzAwMjc2OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-08-17T08:22:35Z","updated_at":"2017-08-17T08:22:35Z","author_association":"CONTRIBUTOR","body":"LUCENE-7897 has been merged. Closing.","performed_via_github_app":null}]