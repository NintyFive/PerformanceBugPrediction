{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/496","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/496/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/496/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/496/events","html_url":"https://github.com/elastic/elasticsearch/issues/496","id":408742,"node_id":"MDU6SXNzdWU0MDg3NDI=","number":496,"title":"Add query information to the mapping system","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2010-11-09T13:38:07Z","updated_at":"2013-04-05T13:16:44Z","closed_at":"2013-04-05T13:16:44Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Like most search systems, the focus in the ES schema is on indexing.\n\nWell, the search system is about SEARCHING too!  \n\nThe schema should be able to specify query type information such as:\n- sortable (and default single sort order, which could be \"score\")\n- facetable (and default facet fields)\n- facet style (single select vs. multi select)\n- displayable (client-side hint)\n- internal (don't hand out past our internal walls)\n- searchable / filterable\n- range filterable\n- ...\n\nWhich can be used as a default for queries, or overridden in the query itself.  Some are hard fast rules (sorry, but you just aren't allowed to search this!)\n\nIt also adds a protection that the index isn't used in ways that are dangerous (i.e. using unexpected additional facet fields or sort orders could cause memory to exceed the allocated VM size that the system was tuned for).  \n\nIf it is ok to define the indexing properties in the schema, it should be perfectly fine to express the query side as well.  Otherwise, a whole other schema implemented in parallel (either hard coded -- ICK!, or dynamic and rebuilt by everyone using ES).\n\nYou add this, and I can build a generic test UI for ES that does a very nice job of using this schema to handle searching on any arbitrary ES index.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}