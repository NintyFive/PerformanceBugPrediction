{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/38629","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38629/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38629/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/38629/events","html_url":"https://github.com/elastic/elasticsearch/issues/38629","id":408191871,"node_id":"MDU6SXNzdWU0MDgxOTE4NzE=","number":38629,"title":"Random allocation for unassigned shards to prevent node replacement hotspots","user":{"login":"vigyasharma","id":869395,"node_id":"MDQ6VXNlcjg2OTM5NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/869395?v=4","gravatar_id":"","url":"https://api.github.com/users/vigyasharma","html_url":"https://github.com/vigyasharma","followers_url":"https://api.github.com/users/vigyasharma/followers","following_url":"https://api.github.com/users/vigyasharma/following{/other_user}","gists_url":"https://api.github.com/users/vigyasharma/gists{/gist_id}","starred_url":"https://api.github.com/users/vigyasharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vigyasharma/subscriptions","organizations_url":"https://api.github.com/users/vigyasharma/orgs","repos_url":"https://api.github.com/users/vigyasharma/repos","events_url":"https://api.github.com/users/vigyasharma/events{/privacy}","received_events_url":"https://api.github.com/users/vigyasharma/received_events","type":"User","site_admin":false},"labels":[{"id":837246479,"node_id":"MDU6TGFiZWw4MzcyNDY0Nzk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/Allocation","name":":Distributed/Allocation","color":"0e8a16","default":false,"description":"All issues relating to the decision making around placing a shard (both master logic & on the nodes)"},{"id":929267538,"node_id":"MDU6TGFiZWw5MjkyNjc1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/team-discuss","name":"team-discuss","color":"fbca04","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-02-08T15:07:49Z","updated_at":"2019-02-20T15:16:56Z","closed_at":"2019-02-20T15:16:56Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### The Problem\r\nThe `BalancedShardAllocator` in Elasticsearch balances shards across nodes using a weight function that works on two features - \r\n\r\n* `weightShard`: Total number of shards on a node\r\n* `weightIndex`: Number of shards on the node for the index being considered for move/allocation.\r\n\r\n```java\r\nprivate float weight(Balancer balancer, ModelNode node, String index, int numAdditionalShards) {\r\n    final float weightShard = node.numShards() + numAdditionalShards - balancer.avgShardsPerNode();\r\n    final float weightIndex = node.numShards(index) + numAdditionalShards - balancer.avgShardsPerNode(index);\r\n    return theta0 * weightShard + theta1 * weightIndex;\r\n}\r\n\r\n/* theta0 and theta1 can be configured via dynamic settings and cluster and index level\r\n * theta0 + theta1 = 1 is always enforced\r\n */\r\n```\r\n\r\nHere `weightIndex` prevents a concentrating same index shards on one node. This generally works fine. But when there is a heavy skew in shard counts, like when a single new empty node is added, or gets replaced in an otherwise loaded cluster, `weightIndex` cannot offset the effect of `weightShard`.\r\nIn such cases, unassigned shards get heavily allocated on this single replaced/new node.\r\n\r\nThis is most commonly seen for newly created indexes when few new nodes are added, or a node gets replaced. Since new indexes are usually the ones getting a lot of traffic, in time series and index rollover patterns, this end up overwhelming the new/replced node.\r\n\r\n\r\n### Proposed Solution\r\nFor unassigned shards, we propose allocating them in a round robin fashion across all nodes starting from any random node. All primaries are assigned first, index by index, followed by first replica of each index and so on, similar to [current ES allocation order](https://github.com/elastic/elasticsearch/blob/v6.6.0/server/src/main/java/org/elasticsearch/cluster/routing/allocation/allocator/BalancedShardsAllocator.java#L798-L806).\r\n\r\nThis ensures that we never assign too many shards of the same index on one node, unless no other nodes are eligible (due to disk watermarks, awareness deciders etc.) in which case it is inevitable.\r\n\r\nThe current recommendation around this, is to use `[cluster|index].routing.allocation.total_shards_per_node` setting. But this is a hard limit and leaves our shards unassigned if some nodes are ineligible due to other deciders like watermarks. With the above change, we can prevent index level shard concentration on a best effort basis.\r\n\r\nAs a side effect, newly added nodes (and replacement nodes) fill up slower now, as they now rely on rebalancing to fill up. This is anyway the case if no new indexes are getting created, and hence an acceptable tradeoff.\r\n\r\n**We would like to raise a PR for this if this seems like a viable alternative**\r\n\r\nNote: *`moveShards()` and `balance()` will still use the existing approach of shard count based weight function*","closed_by":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"performed_via_github_app":null}