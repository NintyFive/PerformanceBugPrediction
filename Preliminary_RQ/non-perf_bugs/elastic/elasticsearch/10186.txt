{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/10186","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10186/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10186/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10186/events","html_url":"https://github.com/elastic/elasticsearch/issues/10186","id":63237067,"node_id":"MDU6SXNzdWU2MzIzNzA2Nw==","number":10186,"title":"Recover from DNS outage on startup","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"labels":[{"id":160579278,"node_id":"MDU6TGFiZWwxNjA1NzkyNzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/Discovery-Plugins","name":":Distributed/Discovery-Plugins","color":"0e8a16","default":false,"description":"Anything related to our integration plugins with EC2, GCP and Azure"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":110815527,"node_id":"MDU6TGFiZWwxMTA4MTU1Mjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/help%20wanted","name":"help wanted","color":"207de5","default":true,"description":"adoptme"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-03-20T14:18:27Z","updated_at":"2017-03-17T23:21:06Z","closed_at":"2017-03-17T23:21:06Z","author_association":"MEMBER","active_lock_reason":null,"body":"If you start an elasticsearch node, that has trouble with DNS, it will never recover from this and continue spitting exceptions, even if the DNS problems are fixed. The reason for this is, that in `UnicastZenPing` constructor we have the following code:\n\n```\n        for (String host : hosts) {\n            try {\n                TransportAddress[] addresses = transportService.addressesFromString(host);\n                // we only limit to 1 addresses, makes no sense to ping 100 ports\n                for (int i = 0; (i < addresses.length && i < LIMIT_PORTS_COUNT); i++) {\n                    configuredTargetNodes.add(new DiscoveryNode(UNICAST_NODE_PREFIX + unicastNodeIdGenerator.incrementAndGet() + \"#\", addresses[i], version.minimumCompatibilityVersion()));\n                }\n            } catch (Exception e) {\n                throw new ElasticsearchIllegalArgumentException(\"Failed to resolve address for [\" + host + \"]\", e);\n            }\n        }\n        this.configuredTargetNodes = configuredTargetNodes.toArray(new DiscoveryNode[configuredTargetNodes.size()]);\n```\n\n`transportService.addressesFromString(host)` calls `InetSocketAddress` which in turn tries to resolve the applied hostname and fails, thus marking returning `InetSocketAddress.isResolved()` as `false` - forever. This method is used by netty to check if connecting to the endpoint makes sense at all.\n### How to reproduce locally\n\nIf you want to reproduce, take this config and disable network on your system (will work when network is enabled, as `localhost.spinscale.de` resolves to 127.0.0.1.\n\n```\ndiscovery.zen.ping.multicast.enabled: false\ndiscovery.zen.ping.unicast.hosts: [\"localhost.spinscale.de:9300\" ]\n```\n### Fix proposal\n1. First, remove the exception output, catch `UnresolvedAddressException` in `UnicastZenPing.sendPings()` and log a single line, telling the problem including the hostname\n2. Make sure the `InetAddress` and its `isResolved()` method is not cached. Not sure what is the best approach here, either create the InetSocketAddress object before each connect try or maybe there are some configurable properties around this\n","closed_by":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"performed_via_github_app":null}