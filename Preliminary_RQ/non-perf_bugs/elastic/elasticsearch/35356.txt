{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/35356","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35356/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35356/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35356/events","html_url":"https://github.com/elastic/elasticsearch/issues/35356","id":378525580,"node_id":"MDU6SXNzdWUzNzg1MjU1ODA=","number":35356,"title":"Updating ILM policy for an index while in the same phase does not respect new policy's same phase's min_age","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"labels":[{"id":912828538,"node_id":"MDU6TGFiZWw5MTI4Mjg1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/ILM+SLM","name":":Core/Features/ILM+SLM","color":"0e8a16","default":false,"description":"Index and Snapshot lifecycle management"},{"id":23715,"node_id":"MDU6TGFiZWwyMzcxNQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Edocs","name":">docs","color":"db755e","default":false,"description":"General docs changes"}],"state":"closed","locked":false,"assignee":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"assignees":[{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2018-11-08T00:19:16Z","updated_at":"2018-12-21T21:55:22Z","closed_at":"2018-12-21T21:55:22Z","author_association":"MEMBER","active_lock_reason":null,"body":"If I have two competing policies:\r\n\r\n``` json\r\nPUT _ilm/policy/my_lifecycle3\r\n{\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"warm\": {\r\n        \"min_age\": \"30s\",\r\n        \"actions\": {\r\n          \"forcemerge\": {\r\n            \"max_num_segments\": 1\r\n          },\r\n          \"shrink\": {\r\n            \"number_of_shards\": 1\r\n          },\r\n          \"allocate\": {\r\n            \"include\": {\r\n              \"type\": \"\"\r\n            },\r\n            \"exclude\": {},\r\n            \"require\": {}\r\n          }\r\n        }\r\n      },\r\n      \"cold\": {\r\n        \"min_age\": \"60s\",\r\n        \"actions\": {\r\n          \"allocate\": {\r\n            \"number_of_replicas\": 2,\r\n            \"include\": {\r\n              \"type\": \"cold\"\r\n            },\r\n            \"exclude\": {},\r\n            \"require\": {}\r\n          }\r\n        }\r\n      },\r\n      \"delete\": {\r\n        \"min_age\": \"2m\",\r\n        \"actions\": {\r\n          \"delete\": {}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd an alternate policy:\r\n\r\n``` json\r\nPUT _ilm/policy/newpolicy\r\n{\r\n  \"policy\": {\r\n    \"phases\": {\r\n      \"warm\": {\r\n        \"min_age\": \"100m\",\r\n        \"actions\": {\r\n          \"forcemerge\": {\r\n            \"max_num_segments\": 1\r\n          },\r\n          \"allocate\": {\r\n            \"number_of_replicas\": 2,\r\n            \"include\": {\r\n              \"type\": \"cold\"\r\n            },\r\n            \"exclude\": {},\r\n            \"require\": {}\r\n          }\r\n        }\r\n      },\r\n      \"delete\": {\r\n        \"min_age\": \"200m\",\r\n        \"actions\": {\r\n          \"delete\": {}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAnd I create an index with the first policy (where the \"warm phase kicks in at\r\n30 seconds\"):\r\n\r\n``` json\r\nPUT /foo\r\n{\r\n  \"settings\": {\r\n    \"index.lifecycle.name\": \"my_lifecycle3\",\r\n    \"index.number_of_shards\": 2\r\n  }\r\n}\r\n```\r\n\r\nThen wait at least 30 seconds until the \"foo\" index is in the\r\n`warm/complete/complete` action (meaning everything in the warm phase has\r\nfinished, the index is between 30 and 60 seconds old)\r\n\r\nNext, I update the policy for the \"foo\" index to use the \"newpolicy\", which has\r\na \"warm\" phase with a min_age of 100 minutes:\r\n\r\n``` json\r\nPUT /foo/_settings\r\n{\r\n  \"index.lifecycle.name\": \"newpolicy\"\r\n}\r\n```\r\n\r\nThe step info for the `foo` index is still at `warm/complete/complete`, meaning\r\nthat it has now skipped the steps that would normally occur in the `newpolicy`\r\n\"warm\" phase, even though the index is not old enough yet to transition into the\r\n\"warm\" phase with the new policy.","closed_by":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}