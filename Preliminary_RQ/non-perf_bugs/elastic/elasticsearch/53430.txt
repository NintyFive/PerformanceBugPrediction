{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/53430","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53430/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53430/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53430/events","html_url":"https://github.com/elastic/elasticsearch/issues/53430","id":579480668,"node_id":"MDU6SXNzdWU1Nzk0ODA2Njg=","number":53430,"title":"[CI][master] DocsClientYamlTestSuiteIT put-auto-follow-pattern","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"labels":[{"id":912824565,"node_id":"MDU6TGFiZWw5MTI4MjQ1NjU=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/CCR","name":":Distributed/CCR","color":"0e8a16","default":false,"description":"Issues around the Cross Cluster State Replication features"},{"id":148612629,"node_id":"MDU6TGFiZWwxNDg2MTI2Mjk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Etest-failure","name":">test-failure","color":"207de5","default":false,"description":"Triaged test failures from CI"}],"state":"closed","locked":false,"assignee":{"login":"tlrx","id":642733,"node_id":"MDQ6VXNlcjY0MjczMw==","avatar_url":"https://avatars1.githubusercontent.com/u/642733?v=4","gravatar_id":"","url":"https://api.github.com/users/tlrx","html_url":"https://github.com/tlrx","followers_url":"https://api.github.com/users/tlrx/followers","following_url":"https://api.github.com/users/tlrx/following{/other_user}","gists_url":"https://api.github.com/users/tlrx/gists{/gist_id}","starred_url":"https://api.github.com/users/tlrx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tlrx/subscriptions","organizations_url":"https://api.github.com/users/tlrx/orgs","repos_url":"https://api.github.com/users/tlrx/repos","events_url":"https://api.github.com/users/tlrx/events{/privacy}","received_events_url":"https://api.github.com/users/tlrx/received_events","type":"User","site_admin":false},"assignees":[{"login":"tlrx","id":642733,"node_id":"MDQ6VXNlcjY0MjczMw==","avatar_url":"https://avatars1.githubusercontent.com/u/642733?v=4","gravatar_id":"","url":"https://api.github.com/users/tlrx","html_url":"https://github.com/tlrx","followers_url":"https://api.github.com/users/tlrx/followers","following_url":"https://api.github.com/users/tlrx/following{/other_user}","gists_url":"https://api.github.com/users/tlrx/gists{/gist_id}","starred_url":"https://api.github.com/users/tlrx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tlrx/subscriptions","organizations_url":"https://api.github.com/users/tlrx/orgs","repos_url":"https://api.github.com/users/tlrx/repos","events_url":"https://api.github.com/users/tlrx/events{/privacy}","received_events_url":"https://api.github.com/users/tlrx/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2020-03-11T19:01:04Z","updated_at":"2020-03-24T13:21:01Z","closed_at":"2020-03-24T13:21:01Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Log : https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+master+multijob-unix-compatibility/os=centos-8&&immutable/627/console\r\nBuild Scans:  https://gradle-enterprise.elastic.co/s/t7pibrqbzjvsm\r\n\r\nREPRODUCE WITH: ./gradlew ':docs:integTestRunner' --tests \"org.elasticsearch.smoketest.DocsClientYamlTestSuiteIT.test {yaml=reference/ccr/apis/auto-follow/put-auto-follow-pattern/line_15}\" \\\r\n  -Dtests.seed=1FB43FBC4EBFC245 \\\r\n  -Dtests.security.manager=true \\\r\n  -Dtests.locale=da \\\r\n  -Dtests.timezone=America/Cuiaba \\\r\n  -Dcompiler.java=13\r\n\r\nDoesn't reproduce for me\r\n\r\n```\r\nCaused by: java.lang.AssertionError: expected [2xx] status code but api [raw[method=PUT path=_ccr/auto_follow/auto_follow_pattern_name]] returned [400 Bad Request] [{\"error\":{\"root_cause\":[{\"type\":\"resource_not_found_exception\",\"reason\":\"license info is missing for cluster [remote_cluster]\",\"stack_trace\":\"org.elasticsearch.ResourceNotFoundException: license info is missing for cluster [remote_cluster]\\n\\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:168)\\n\\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:162)\\n\\tat org.elasticsearch.action.support.ContextPreservingActionListener.onResponse(ContextPreservingActionListener.java:43)\\n\\tat org.elasticsearch.action.ActionListenerResponseHandler.handleResponse(ActionListenerResponseHandler.java:54)\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1057)\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1057)\\n\\tat org.elasticsearch.transport.InboundHandler$1.doRun(InboundHandler.java:220)\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\n\\tat org.elasticsearch.common.util.concurrent.EsExecutors$DirectExecutorService.execute(EsExecutors.java:177)\\n\\tat org.elasticsearch.transport.InboundHandler.handleResponse(InboundHandler.java:212)\\n\\tat org.elasticsearch.transport.InboundHandler.messageReceived(InboundHandler.java:138)\\n\\tat org.elasticsearch.transport.InboundHandler.inboundMessage(InboundHandler.java:102)\\n\\tat org.elasticsearch.transport.TcpTransport.inboundMessage(TcpTransport.java:667)\\n\\tat org.elasticsearch.transport.netty4.Netty4MessageChannelHandler.channelRead(Netty4MessageChannelHandler.java:62)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:227)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:615)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:578)\\n\\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat java.base/java.lang.Thread.run(Thread.java:834)\\n\"}],\"type\":\"status_exception\",\"reason\":\"can not fetch remote cluster state as the license state of the remote cluster [remote_cluster] could not be determined\",\"caused_by\":{\"type\":\"resource_not_found_exception\",\"reason\":\"license info is missing for cluster [remote_cluster]\",\"stack_trace\":\"org.elasticsearch.ResourceNotFoundException: license info is missing for cluster [remote_cluster]\\n\\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:168)\\n\\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:162)\\n\\tat org.elasticsearch.action.support.ContextPreservingActionListener.onResponse(ContextPreservingActionListener.java:43)\\n\\tat org.elasticsearch.action.ActionListenerResponseHandler.handleResponse(ActionListenerResponseHandler.java:54)\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1057)\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1057)\\n\\tat org.elasticsearch.transport.InboundHandler$1.doRun(InboundHandler.java:220)\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\n\\tat org.elasticsearch.common.util.concurrent.EsExecutors$DirectExecutorService.execute(EsExecutors.java:177)\\n\\tat org.elasticsearch.transport.InboundHandler.handleResponse(InboundHandler.java:212)\\n\\tat org.elasticsearch.transport.InboundHandler.messageReceived(InboundHandler.java:138)\\n\\tat org.elasticsearch.transport.InboundHandler.inboundMessage(InboundHandler.java:102)\\n\\tat org.elasticsearch.transport.TcpTransport.inboundMessage(TcpTransport.java:667)\\n\\tat org.elasticsearch.transport.netty4.Netty4MessageChannelHandler.channelRead(Netty4MessageChannelHandler.java:62)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:227)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:615)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:578)\\n\\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat java.base/java.lang.Thread.run(Thread.java:834)\\n\"},\"stack_trace\":\"org.elasticsearch.ElasticsearchStatusException: can not fetch remote cluster state as the license state of the remote cluster [remote_cluster] could not be determined\\n\\tat org.elasticsearch.xpack.ccr.CcrLicenseChecker.clusterStateUnknownRemoteLicense(CcrLicenseChecker.java:448)\\n\\tat org.elasticsearch.xpack.ccr.CcrLicenseChecker.lambda$checkRemoteClusterLicenseAndFetchClusterState$5(CcrLicenseChecker.java:180)\\n\\tat org.elasticsearch.xpack.ccr.CcrLicenseChecker$1.onFailure(CcrLicenseChecker.java:231)\\n\\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:168)\\n\\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:162)\\n\\tat org.elasticsearch.action.support.ContextPreservingActionListener.onResponse(ContextPreservingActionListener.java:43)\\n\\tat org.elasticsearch.action.ActionListenerResponseHandler.handleResponse(ActionListenerResponseHandler.java:54)\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1057)\\n\\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1057)\\n\\tat org.elasticsearch.transport.InboundHandler$1.doRun(InboundHandler.java:220)\\n\\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\\n\\tat org.elasticsearch.common.util.concurrent.EsExecutors$DirectExecutorService.execute(EsExecutors.java:177)\\n\\tat org.elasticsearch.transport.InboundHandler.handleResponse(InboundHandler.java:212)\\n\\tat org.elasticsearch.transport.InboundHandler.messageReceived(InboundHandler.java:138)\\n\\tat org.elasticsearch.transport.InboundHandler.inboundMessage(InboundHandler.java:102)\\n\\tat org.elasticsearch.transport.TcpTransport.inboundMessage(TcpTransport.java:667)\\n\\tat org.elasticsearch.transport.netty4.Netty4MessageChannelHandler.channelRead(Netty4MessageChannelHandler.java:62)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\\n\\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:227)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\\n\\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\\n\\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\\n\\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\\n\\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:615)\\n\\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:578)\\n\\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\\n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\\n\\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\\n\\tat java.base/java.lang.Thread.run(Thread.java:834)\\nCaused by: org.elasticsearch.ResourceNotFoundException: license info is missing for cluster [remote_cluster]\\n\\t... 38 more\\n\"},\"status\":400}]Open stacktrace\r\n[2020-03-11T14:07:09,441][INFO ][o.e.s.DocsClientYamlTestSuiteIT] [test] [yaml=reference/ccr/apis/auto-follow/put-auto-follow-pattern/line_15] before test\r\n[2020-03-11T14:07:09,674][INFO ][o.e.s.DocsClientYamlTestSuiteIT] [test] initializing REST clients against [http://[::1]:34583, http://127.0.0.1:36961]\r\n[2020-03-11T14:07:10,741][INFO ][o.e.s.DocsClientYamlTestSuiteIT] [test] initializing client, minimum es version [8.0.0], master version, [8.0.0], hosts [http://[::1]:34583, http://127.0.0.1:36961]\r\n[2020-03-11T14:07:11,405][INFO ][o.e.s.DocsClientYamlTestSuiteIT] [test] Stash dump on test failure [{\r\n  \"stash\" : {\r\n    \"host\" : \"127.0.0.1:36961\",\r\n    \"body\" : {\r\n      \"error\" : {\r\n        \"root_cause\" : [\r\n          {\r\n            \"type\" : \"resource_not_found_exception\",\r\n            \"reason\" : \"license info is missing for cluster [remote_cluster]\",\r\n            \"stack_trace\" : \"org.elasticsearch.ResourceNotFoundException: license info is missing for cluster [remote_cluster]\r\n\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:168)\r\n\tat org.elasticsearch.license.RemoteClusterLicenseChecker$1.onResponse(RemoteClusterLicenseChecker.java:162)\r\n\tat org.elasticsearch.action.support.ContextPreservingActionListener.onResponse(ContextPreservingActionListener.java:43)\r\n```\r\n\r\nPossibly related to : https://github.com/elastic/elasticsearch/issues/36815","closed_by":{"login":"tlrx","id":642733,"node_id":"MDQ6VXNlcjY0MjczMw==","avatar_url":"https://avatars1.githubusercontent.com/u/642733?v=4","gravatar_id":"","url":"https://api.github.com/users/tlrx","html_url":"https://github.com/tlrx","followers_url":"https://api.github.com/users/tlrx/followers","following_url":"https://api.github.com/users/tlrx/following{/other_user}","gists_url":"https://api.github.com/users/tlrx/gists{/gist_id}","starred_url":"https://api.github.com/users/tlrx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tlrx/subscriptions","organizations_url":"https://api.github.com/users/tlrx/orgs","repos_url":"https://api.github.com/users/tlrx/repos","events_url":"https://api.github.com/users/tlrx/events{/privacy}","received_events_url":"https://api.github.com/users/tlrx/received_events","type":"User","site_admin":false},"performed_via_github_app":null}