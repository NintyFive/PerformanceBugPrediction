[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63348799","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63348799","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63348799,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMzQ4Nzk5","user":{"login":"gmarz","id":1594777,"node_id":"MDQ6VXNlcjE1OTQ3Nzc=","avatar_url":"https://avatars0.githubusercontent.com/u/1594777?v=4","gravatar_id":"","url":"https://api.github.com/users/gmarz","html_url":"https://github.com/gmarz","followers_url":"https://api.github.com/users/gmarz/followers","following_url":"https://api.github.com/users/gmarz/following{/other_user}","gists_url":"https://api.github.com/users/gmarz/gists{/gist_id}","starred_url":"https://api.github.com/users/gmarz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gmarz/subscriptions","organizations_url":"https://api.github.com/users/gmarz/orgs","repos_url":"https://api.github.com/users/gmarz/repos","events_url":"https://api.github.com/users/gmarz/events{/privacy}","received_events_url":"https://api.github.com/users/gmarz/received_events","type":"User","site_admin":false},"created_at":"2014-11-17T18:15:41Z","updated_at":"2014-11-17T18:15:41Z","author_association":"MEMBER","body":"+1\n\nWhile I agree that it makes sense to have `SingleBucketAggregation` return the same structure as `MultiBucketAggregation`, you could also leverage the new `meta` field which was added in #8279 to specifically to deal with scenarios like this.\n\nThis is especially an issue in NEST, since it's a strongly-typed client and we need to know the exact C# type to deserialize the agg response to.\n\nThe `meta` field will greatly simplify this code in particular: https://github.com/elasticsearch/elasticsearch-net/blob/develop/src/Nest/Resolvers/Converters/Aggregations/AggregationConverter.cs#L26, since we'll be able to associate each agg request with the response type in the `meta` field.\n\ncc @Mpdreamz \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63355698","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63355698","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63355698,"node_id":"MDEyOklzc3VlQ29tbWVudDYzMzU1Njk4","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2014-11-17T18:58:52Z","updated_at":"2014-11-17T18:58:52Z","author_association":"MEMBER","body":"+1, being able to program against both in a similar fashion would be great. Something being either a leave or node is an easier mental model then having two types of nodes where the shape is dependent on parent metadata not actually returned in the response.\n\nThat said: `\"key\": \"some_key_that_makes_sense\",` is that a trivial problem? If we can't give it any meaningful key for `SingleBucketAggregation`'s, leaving it out might also cause code that looks for buckets and keys to misbehave. Having said this I remember generated keys being discussed somewhere but my memory is drawing a blank on where and what the conclusion was :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63445219","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63445219","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63445219,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDQ1MjE5","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2014-11-18T09:47:56Z","updated_at":"2014-11-18T09:47:56Z","author_association":"CONTRIBUTOR","body":"-1 on the JSON side ... Single bucket ages both semantically and logically hold no buckets... It'd be like saying that java shouldn't have objects and instead you should always work with collections.... And to work with a single object you'll need to have a collection of size 1... Just so you'd work with objects the same way you work with collections.\n\nYes... You need to know what you're working with... On the lang clients on the other hand it might make sense to generalize the tree traversal \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63445609","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63445609","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63445609,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDQ1NjA5","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-11-18T09:51:17Z","updated_at":"2014-11-18T09:51:17Z","author_association":"CONTRIBUTOR","body":"@uboness i think it depends on the consumer.  If a user writes a single agg then it makes sense to return that value without the intermediate bucket.  For general purpose tools like Kibana it may make more sense to have a standard representation.  I'm wondering if this more verbose syntax should be a query time option.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63465956","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63465956","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63465956,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDY1OTU2","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2014-11-18T12:48:57Z","updated_at":"2014-11-18T12:48:57Z","author_association":"CONTRIBUTOR","body":"even with the generic consumers (e.g. kibana), they still need to distinguish between metrics and buckets right? and I also wonder how generic is it? For example, I'm sure the kibana is very much aware of the different types of aggs it exposes to the users and so there's dedicated code for each anyway (visualize the different aggs differently regardless of their nature).\n\nOne of the things I always liked in the json structure of aggs is that it's very intuitive and human readable. Navigating like `last_year.monthly_purchases.january.avg_price`... is more intuitive than `last_year.xxxxx.monthly_purchases.january.avg_price` where `last_year` is a filter agg (no clue what this `xxxxx` is as it has not logical explanation)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63484082","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63484082","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63484082,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDg0MDgy","user":{"login":"brwe","id":4320215,"node_id":"MDQ6VXNlcjQzMjAyMTU=","avatar_url":"https://avatars0.githubusercontent.com/u/4320215?v=4","gravatar_id":"","url":"https://api.github.com/users/brwe","html_url":"https://github.com/brwe","followers_url":"https://api.github.com/users/brwe/followers","following_url":"https://api.github.com/users/brwe/following{/other_user}","gists_url":"https://api.github.com/users/brwe/gists{/gist_id}","starred_url":"https://api.github.com/users/brwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brwe/subscriptions","organizations_url":"https://api.github.com/users/brwe/orgs","repos_url":"https://api.github.com/users/brwe/repos","events_url":"https://api.github.com/users/brwe/events{/privacy}","received_events_url":"https://api.github.com/users/brwe/received_events","type":"User","site_admin":false},"created_at":"2014-11-18T15:06:07Z","updated_at":"2014-11-18T15:06:07Z","author_association":"CONTRIBUTOR","body":"> the json structure of aggs is that it's very intuitive and human readable. \n\nCannot say that for me but if enough people feel that way then maybe @clintongormley proposal to have query time parameter flag for that might make sense.\n\n> Yes... You need to know what you're working with...\n\nThis is actually the problem and why I opened the issue. It would be great to have the result in a such generic way that one would not have to know the type of aggregation because the structure is always the same. \nMetrics and buckets would still have to be distinguished with this change and I wonder if this is not also something we could change in a second step but have no smart idea right now. \n\nAs for Kibana, I am unfamiliar with the implementation details and how much of a relief this change would actually be, so I summon @rashidkpc to join the discussion.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63689046","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63689046","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63689046,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNjg5MDQ2","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2014-11-19T18:32:41Z","updated_at":"2014-11-19T18:32:41Z","author_association":"MEMBER","body":"Interesting discussion, I am +1 on making the structure generic if possible. I think it would help a lot those users who write client code that interacts with elasticsearch, by making their life easier and their code better. There is a little price in terms of readability for the human eye, if that's a big concern we could have some kind of `human` flag as Clint mentioned...not sure how much that would end up complicating the codebase on our end though. Would be interesting to hear opinions from actual users here!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63701698","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63701698","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63701698,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNzAxNjk4","user":{"login":"rashidkpc","id":1250387,"node_id":"MDQ6VXNlcjEyNTAzODc=","avatar_url":"https://avatars1.githubusercontent.com/u/1250387?v=4","gravatar_id":"","url":"https://api.github.com/users/rashidkpc","html_url":"https://github.com/rashidkpc","followers_url":"https://api.github.com/users/rashidkpc/followers","following_url":"https://api.github.com/users/rashidkpc/following{/other_user}","gists_url":"https://api.github.com/users/rashidkpc/gists{/gist_id}","starred_url":"https://api.github.com/users/rashidkpc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rashidkpc/subscriptions","organizations_url":"https://api.github.com/users/rashidkpc/orgs","repos_url":"https://api.github.com/users/rashidkpc/repos","events_url":"https://api.github.com/users/rashidkpc/events{/privacy}","received_events_url":"https://api.github.com/users/rashidkpc/received_events","type":"User","site_admin":false},"created_at":"2014-11-19T19:50:24Z","updated_at":"2014-11-19T19:50:24Z","author_association":"NONE","body":"From a Kibana perspective @javanna hits the nail on the head. Dealing with aggregations that don't have a buckets array is a real pain. While yes, we have different code for different aggs it would be really nice to be able to treat at least all bucket aggs the same\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63716903","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63716903","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63716903,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNzE2OTAz","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2014-11-19T21:28:16Z","updated_at":"2014-11-19T21:28:16Z","author_association":"CONTRIBUTOR","body":"well.. for me, having an output for a simple filter agg like the following qualifies as wrong & misleading:\n\n``` json\n\"aggregations\": {\n    \"last_year\": {\n        \"doc_count\": 130,\n        \"buckets\": [\n            {\n                \"avg_price\" : { \"value\" : 56.3 }\n            }\n        ]\n    }\n}\n```\n- wrong - because filter aggs should not have buckets (it's meaningless)\n- misleading - because the response indicates that filter agg can have more than one\n  bucket. \n\nFurther more, a common functionality in multi bucket aggs is that every bucket has an identifying key... what is the key in the example above? One can also request the buckets to be returned as an object (instead of an array) where each bucket is keyed by its key... and now what? how would the response look like? will we have a fake key for single bucket aggs? a fixed fake key? or require the user to provide a key? and if we do... what will the user call it.. I can't think of any key that would make sense, cause we're trying to name something that has no name.\n\nThe way I look at JSON responses is that their structure should be as self documenting as possible. We don't have schemas (and we don't want schemas) so the output needs to be semantically correct - that what makes a good API IMO. Now, perhaps you can write tools around this API that make your life easier if you really need to treat all agg responses the same (as I mentioned above, you can always have this code on the client side). I don't consider this to be human vs. machine - returning semantically correct structures is not for \"humans\" only.. at least IMO.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/63815182","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-63815182","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":63815182,"node_id":"MDEyOklzc3VlQ29tbWVudDYzODE1MTgy","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2014-11-20T14:26:51Z","updated_at":"2014-11-20T14:26:51Z","author_association":"CONTRIBUTOR","body":"I am not a fan of returning a `buckets` element for all aggregations in the `json` either. However, I don't know if this would help, but I would be ok with having a `getBuckets` helper method on the Java API for all bucket aggregations that would return a list with a single element (the agg itself) for single-bucket aggregations.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/64235986","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-64235986","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":64235986,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MjM1OTg2","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2014-11-24T18:04:51Z","updated_at":"2014-11-24T18:06:15Z","author_association":"MEMBER","body":"+1 making the result consistent, or at the very least providing a flag that enables the behavior\n\n> Single bucket ages both semantically and logically hold no buckets\n> wrong - because filter aggs should not have buckets (it's meaningless)\n\nConceptually, I think it is the exact opposite.  When I explain buckets to people, I tell them a bucket is simply a criteria that documents can match.  If the document matches the criteria, it is added to the bucket.  Some buckets dynamically add criteria as they encounter new values (`terms`, `histogram`), while other's are hard-coded upfront (`range`)\n\nA filter bucket has a single criteria: does this doc match the filter?  If yes, add to the bucket.  It's a boolean operation, so it only has one bucket, but conceptually it behaves identically to any other bucket.  Ditto for Global bucket (criteria is \"all\").\n\nFor most practical applications, you don't really know what the results coming back are.  The only way to definitively know is by keeping the original request and serializing each level based on the request. Alternatively, you get to play the introspection game at every level. \n\nTo make the point:  if we followed that logic to it's extreme, the `range` bucket should change it's output when only one range is requested, since we are expecting the user to know that only one range is coming back.\n\n### Real life example\n\nHere is a very real, simple example that you might find on an ecommerce site.  This isn't a \"generic\" tool like Kibana, but would definitely benefit from generic responses.  When you hit the main page, you get a tree of all colors and all brands:\n\n``` json\n{\n   \"aggs\":{\n      \"colors\":{\n         \"terms\":{\n            \"field\":\"color\",\n            \"size\":10\n         },\n         \"aggs\":{\n            \"brand\":{\n               \"terms\":{\n                  \"field\":\"brand\",\n                  \"size\":10\n               },\n               \"aggs\":{\n                  \"avgPrice\":{\n                     \"avg\":{  \"field\":\"price\" }\n                  }\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nNow imagine a user selects `\"Red\"` and `\"Toyota\"`.  The aggregation changes to:\n\n``` json\n{\n\"aggs\":{\n   \"colors\":{\n      \"filter\":{\n         \"term\":{\n            \"color\":\"Red\"\n         }\n      },\n      \"aggs\":{\n         \"brand\":{\n            \"filter\":{\n               \"term\":{\n                  \"brand\":\"Toyota\"\n               }\n            },\n            \"aggs\":{\n               \"avgPrice\":{\n                  \"avg\":{ \"field\":\"price\" }\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nThe `terms` buckets are replaced with a `filter` bucket for those two selected terms.  Presently, to parse both of these responses, the application needs to introspect each level to determine if it switches from `terms` to `filter`:\n\n``` php\n$first = $response['aggs']['colors'];\n\n// Using `terms` for `color`\nif ($first['buckets'] !== null) {\n  foreach ($first['buckets'] as $color) {\n    $second = $color;\n\n    //  using `terms` for `brand`\n    if ($second['buckets'] !== null) {\n      foreach ($second['buckets'] as $brand) {\n        $avgPrice = $brand['avgPrice']['value'];\n        // ... do business logic here ...\n      }\n    } else {   //  using `filter` for `brand`\n      $avgPrice = $second['avgPrice']['value'];\n      // ... do business logic here ...\n    }\n  }\n} else {  // using `filter` for `color`\n  $second = $first['brand'];              // NOTE: we have to hardcode the agg name here!\n\n  //  using `terms` for `brand`\n  if ($second['buckets'] !== null) {\n    foreach ($second['buckets'] as $brand) {\n      $avgPrice = $brand['avgPrice']['value'];\n      // ... do business logic here ...\n    }\n  } else {   //  using `filter` for `brand`\n      $avgPrice = $second['avgPrice']['value'];\n      // ... do business logic here ...\n    }\n} \n```\n\nIf everything came back as a bucket, you can just iterate over everything:\n\n``` php\nforeach ($response['aggs']['colors']['buckets'] as $color) {\n  foreach ($color['brand']['buckets'] as $brand) {\n    $avgPrice = $brand['avgPrice']['value'];   \n    // ... do business logic here ...\n  }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/64505832","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-64505832","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":64505832,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NTA1ODMy","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2014-11-26T02:23:03Z","updated_at":"2014-11-26T02:23:03Z","author_association":"CONTRIBUTOR","body":"@polyfractal I'm totally with you on how you explain aggs (I invented it :D)\n\nto your example, the way I look at it, this agg is wrongly constructed:\n\n``` json\n{\n\"aggs\":{\n   \"colors\":{\n      \"filter\":{\n         \"term\":{\n            \"color\":\"Red\"\n         }\n      },\n      \"aggs\":{\n         \"brand\":{\n            \"filter\":{\n               \"term\":{\n                  \"brand\":\"Toyota\"\n               }\n            },\n            \"aggs\":{\n               \"avgPrice\":{\n                  \"avg\":{ \"field\":\"price\" }\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nit should be:\n\n``` json\n{\n\"aggs\":{\n   \"red\":{\n      \"filter\":{\n         \"term\":{\n            \"color\":\"Red\"\n         }\n      },\n      \"aggs\":{\n         \"toyota\":{\n            \"filter\":{\n               \"term\":{\n                  \"brand\":\"Toyota\"\n               }\n            },\n            \"aggs\":{\n               \"avgPrice\":{\n                  \"avg\":{ \"field\":\"price\" }\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nbecause with the second agg, you're effectively asking for the avg price of a red toyota, and when the response comes back you do:\n\n``` php\n$response['aggs'][$selected_color][$selected_brand]['avgPrice']['value']\n```\n\nperhaps it's just a purist way of looking at things, but it is semantically correct. That said, I understand the practical aspect of having it and as I mentioned above, like @jpountz I'm fine if the APIs provide helper methods there (so @polyfractal you can add it to your php client)... but in the JSON, it just feels wrong to me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/299550622","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-299550622","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":299550622,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTU1MDYyMg==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2017-05-05T19:08:10Z","updated_at":"2017-05-05T19:08:10Z","author_association":"MEMBER","body":"Looking at the discussion that happened on this ticket, I would say that there was no consensus on making this change hence we may want to close it. Or should we discuss it again on the next FixItFriday @clintongormley ?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/299868376","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-299868376","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":299868376,"node_id":"MDEyOklzc3VlQ29tbWVudDI5OTg2ODM3Ng==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-05-08T13:35:10Z","updated_at":"2017-05-08T13:35:10Z","author_association":"CONTRIBUTOR","body":"@javanna Should probably be a discussion for the aggs team - part of the decision about whether we need to refactor the aggs framework and how we'd do it.  Marking has high hanging fruit","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/309076985","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-309076985","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":309076985,"node_id":"MDEyOklzc3VlQ29tbWVudDMwOTA3Njk4NQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2017-06-16T16:49:46Z","updated_at":"2017-06-16T16:49:46Z","author_association":"MEMBER","body":"cc @colings86 ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/311096091","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-311096091","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":311096091,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMTA5NjA5MQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2017-06-26T15:36:04Z","updated_at":"2017-06-26T15:36:04Z","author_association":"MEMBER","body":"We spoke about this in the aggs team meeting and although there was almost a consensus feeling that this would be good to fix, there currently isn't a way to change the response format of an aggregation without making a hard braking change with no period of deprecation which makes this change very tricky and we didn't feel the current arguments for this change warrant such a harsh break int eh product on a major version or not. If/When we implement https://github.com/elastic/elasticsearch/issues/11184 we should revisit this since it would provide a path for this change to be made but until then this is effectively stalled","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/368031849","html_url":"https://github.com/elastic/elasticsearch/issues/8510#issuecomment-368031849","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8510","id":368031849,"node_id":"MDEyOklzc3VlQ29tbWVudDM2ODAzMTg0OQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-02-23T14:56:45Z","updated_at":"2018-02-23T14:56:45Z","author_association":"MEMBER","body":"After discussing this again I am closing this issue because there is not a definitive argument for why this would be better and after the format being set for this long we should only change the format if there is a very compelling reason. In this case there are good arguments on both sides and there is no definitive argument for this.","performed_via_github_app":null}]