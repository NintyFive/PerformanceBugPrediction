[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69197860","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69197860","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69197860,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MTk3ODYw","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-01-08T15:46:31Z","updated_at":"2015-01-08T15:46:31Z","author_association":"CONTRIBUTOR","body":"This looks much simpler to me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69197978","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69197978","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69197978,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MTk3OTc4","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2015-01-08T15:47:19Z","updated_at":"2015-01-08T15:47:19Z","author_association":"CONTRIBUTOR","body":"+1\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69198710","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69198710","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69198710,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MTk4NzEw","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2015-01-08T15:51:40Z","updated_at":"2015-01-08T15:51:40Z","author_association":"CONTRIBUTOR","body":"Big +1.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69202112","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69202112","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69202112,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MjAyMTEy","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-01-08T16:11:17Z","updated_at":"2015-01-08T16:11:17Z","author_association":"CONTRIBUTOR","body":"the one thing that we are loosing here is request timeouts here that we where able to put into the `get(TimeValue)` and friends calls. I think we can just put this on the request itself. Also if users want to have Future like classes that they can just collect I think we can provide a utility listener that allows you do to this.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69204385","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69204385","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69204385,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MjA0Mzg1","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-01-08T16:24:51Z","updated_at":"2015-01-08T16:24:51Z","author_association":"MEMBER","body":"Sounds great to me! I've been bitten by not calling `.get()` more than once...\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69219468","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69219468","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69219468,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MjE5NDY4","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2015-01-08T17:54:47Z","updated_at":"2015-01-08T17:54:47Z","author_association":"MEMBER","body":"+1. Looks like a good compromise between the alternatives.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69399008","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69399008","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69399008,"node_id":"MDEyOklzc3VlQ29tbWVudDY5Mzk5MDA4","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2015-01-09T21:07:19Z","updated_at":"2015-01-09T21:07:19Z","author_association":"MEMBER","body":"I like it!. I think that adding the timeout to the request itself will be misleading, since there users might think its a timeout on the call itself (like search timeout, that still returns values), compared to just giving up on the call completely (which is what the future does). In that context, I like the notion of future that also implements an `ActionListener` that someone can pass to the call and then work with it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69400806","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69400806","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69400806,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDAwODA2","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-01-09T21:20:47Z","updated_at":"2015-01-09T21:20:47Z","author_association":"CONTRIBUTOR","body":"ok cool it seems like we are sold here. I took a quick look at this and it's going to create a boat load of compile errors so I think the easiest path here is to do this over time and add one API a time and / or deprecate them? I'd like to start with this rather sooner than later since that way everybody can help when folks are idling etc?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69401310","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69401310","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69401310,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDAxMzEw","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-01-09T21:24:34Z","updated_at":"2015-01-09T21:24:34Z","author_association":"MEMBER","body":"> I'd like to start with this rather sooner than later since that way everybody can help when folks are idling etc?\n\n+1\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69474321","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69474321","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69474321,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDc0MzIx","user":{"login":"jprante","id":635745,"node_id":"MDQ6VXNlcjYzNTc0NQ==","avatar_url":"https://avatars1.githubusercontent.com/u/635745?v=4","gravatar_id":"","url":"https://api.github.com/users/jprante","html_url":"https://github.com/jprante","followers_url":"https://api.github.com/users/jprante/followers","following_url":"https://api.github.com/users/jprante/following{/other_user}","gists_url":"https://api.github.com/users/jprante/gists{/gist_id}","starred_url":"https://api.github.com/users/jprante/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jprante/subscriptions","organizations_url":"https://api.github.com/users/jprante/orgs","repos_url":"https://api.github.com/users/jprante/repos","events_url":"https://api.github.com/users/jprante/events{/privacy}","received_events_url":"https://api.github.com/users/jprante/received_events","type":"User","site_admin":false},"created_at":"2015-01-10T22:14:08Z","updated_at":"2015-01-10T22:14:08Z","author_association":"CONTRIBUTOR","body":"The API can be a bit confusing when mixed with blocking/non-blocking methods. It could even be more simplified with Observables, like in Couchbase http://docs.couchbase.com/developer/java-2.0/observables.html  explained in this blog post http://blog.couchbase.com/why-couchbase-chose-rxjava-new-java-sdk\n\n``` java\npublic interface ClusterAdminService ... {\n    Observable<ClusterHealthResponse> health(ClusterHealthRequest request);\n```\n\nbut that is for the time when ES is ready for Java 8 :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69487691","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69487691","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69487691,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDg3Njkx","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T08:51:49Z","updated_at":"2015-01-11T08:51:49Z","author_association":"CONTRIBUTOR","body":"I actually wonder if it makes sense to seperate blocking and non-blocking API interface wise and just make one call another. that would mean 1 method per endpoint and clear distinction.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69489868","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69489868","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69489868,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDg5ODY4","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T10:33:20Z","updated_at":"2015-01-11T10:33:20Z","author_association":"CONTRIBUTOR","body":"we could actually just have a single version of the method that returns the already available listenable action future :\n\n``` java\npublic interface ClusterAdminClient extends ElasticsearchClient<ClusterAdminClient> {\n\n    ListenableActionFuture<ClusterHealthResponse> health(ClusterHealthRequest request);\n```\n\nthen, if you'd like blocking:\n\n``` java\nClusterHealthResponse response = client.health(request).actionGet();\n```\n\nblocking with timeout:\n\n``` java\nClusterHealthResponse response = client.health(request).actionGet(5, TimeUnit.SECONDS);\n```\n\nnon-blocking:\n\n``` java\nclient.health(request).addListener(new ActionListener<ClusterHealthResponse>() {\n    void onResponse(Response response) {\n        ...\n    }\n\n    void onFailure(Throwable e) {\n        ...\n    }\n}\n```\n\nI'm not a big fan of the `actionGet` method. Would've been nice if we could just use the `get` method of the `Future`... but that would come at the price of giving up the elasticsearch exception translation.. that said, the interface will be much clearer (instead of having both `actionGet` and `get`... we'll only have `get`)... we could consider defining new constructs to fix/clean this.\n\nAlso, I'd say that with any blocking version of the method, you'd want the option of specifying a timeout which will clutter the blocking API IMO. Encapsulating all this logic (blocking/non-blocking/timeouts) in a single object, keeps the API clean. (just something to consider)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69493836","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69493836","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69493836,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NDkzODM2","user":{"login":"ppurang","id":326738,"node_id":"MDQ6VXNlcjMyNjczOA==","avatar_url":"https://avatars0.githubusercontent.com/u/326738?v=4","gravatar_id":"","url":"https://api.github.com/users/ppurang","html_url":"https://github.com/ppurang","followers_url":"https://api.github.com/users/ppurang/followers","following_url":"https://api.github.com/users/ppurang/following{/other_user}","gists_url":"https://api.github.com/users/ppurang/gists{/gist_id}","starred_url":"https://api.github.com/users/ppurang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppurang/subscriptions","organizations_url":"https://api.github.com/users/ppurang/orgs","repos_url":"https://api.github.com/users/ppurang/repos","events_url":"https://api.github.com/users/ppurang/events{/privacy}","received_events_url":"https://api.github.com/users/ppurang/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T13:07:59Z","updated_at":"2015-01-11T13:07:59Z","author_association":"NONE","body":"+1 for uboness with reservations. \n\nGenerally any get, post, put etc. should be a sum type: `\\/[Throwable, HttpResponse]` which is somehow encoded by the `ActionListener` callbacks, but callbacks don't compose. Then you need a transformation  (think `map`)  from the `HttpResponse` to the target type - noting that a Http response represents failures too (example: a 400 when a 201 was expected). Having this infrastructure in place makes other things rather easy. \n\nTimeouts SHOULD be enforced by the consumer of the asynchronous calls and they are different from tcp timeouts (connection and read timeouts) which are configured for the underlying http clients. \n\nProviding an API like `Future.get` that blocks forever should be illegal and is a crime against API consumers if not humanity :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69500744","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69500744","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69500744,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTAwNzQ0","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T16:42:55Z","updated_at":"2015-01-11T16:43:04Z","author_association":"MEMBER","body":"Having the version that returns a Future is exactly what makes the current api trappy.  It is very easy to not realize you need to call get/actionGet/whatever.  The original proposed version that takes a request and returns a response is what we need 90% of the time.  Whether the async version is via an additional optional listener argument, or through a wrapper, I don't care, but the common case should be simple and obvious how to use.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69501655","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69501655","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69501655,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTAxNjU1","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T17:07:15Z","updated_at":"2015-01-11T17:07:15Z","author_association":"CONTRIBUTOR","body":">  I'm not a big fan of the actionGet method. Would've been nice if we could just use the get method of the Future... but that would come at the price of giving up the elasticsearch exception translation.. that said, the interface will be much clearer (instead of having both actionGet and get... we'll only have get)... we could consider defining new constructs to fix/clean this.\n\nsorry but this is kind of over-engineering is the problem here and in many other places of elasticsearch. We have to make APIs simple and only be useable in a single way. you have async and sync you have all you need. We are trying to fix things and not making them worse. the `.get()`. needs to go and those API need to be simple to call. if you need timeouts etc. just use async you can impl that on top of this and or expose it on a different level ie. lightweight clients. But first fix this API that essentially can cause critical issues ie. tests not finding problems because of a missing get.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69504839","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69504839","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69504839,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTA0ODM5","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T18:26:59Z","updated_at":"2015-01-11T18:26:59Z","author_association":"CONTRIBUTOR","body":"> Having the version that returns a Future is exactly what makes the current api trappy. It is very easy to not realize you need to call get/actionGet/whatever. The original proposed version that takes a request and returns a response is what we need 90% of the time. Whether the async version is via an additional optional listener argument, or through a wrapper, I don't care, but the common case should be simple and obvious how to use.\n\nsorry, I disagree with this argument. Futures are core Java construct since 1.5 and it's the basic construct in java when it comes to async calls. I also don't buy the argument that it's trappy... I don't think that in 2015 we need to explain developers what a `Future` is, but for argument sake, if you need response `X` and you get a `Future<X>` back, you'll need to get the `X` out of the returned `Future` (simply because there'll be no other way to get it). Moreover, I'd argue that returning a `Future` solidifies the API as it forces the user to \"think\" async and be aware of the consequences of blocking vs. non-blocking... we then leave the decision what to use when to the user, based on its use case. \n\n> sorry but this is kind of over-engineering is the problem here and in many other places of elasticsearch. We have to make APIs simple and only be useable in a single way. you have async and sync you have all you need. We are trying to fix things and not making them worse. the .get(). needs to go and those API need to be simple to call. if you need timeouts etc. just use async you can impl that on top of this and or expose it on a different level ie. lightweight clients.\n\nI don't see the over-engineering when it coming to using `Future`s for a remote API. \n\n> We have to make APIs simple and only be useable in a single way. you have async and sync you have all you need. We are trying to fix things and not making them worse. the .get(). needs to go and those API need to be simple to call. if you need timeouts etc. just use async you can impl that on top of this and or expose it on a different level ie. lightweight clients.\n\nnot exposing timeouts in the API is throwing a load on the users. The client interfaces **are** the Java clients, why would you want to ask users to build additional clients on top of those? Furthermore, as stated above, IMO we should encourage users to think async and timeouts...  \n\n> But first fix this API that essentially can cause critical issues ie. tests not finding problems because of a missing get.\n\nIf we have those, then these are **bugs** in our tests, not an API issue... IMO at least\n\nAll said above, obviously this is turning into one of those discussions where ppl have different strong opinions on. I have no intention here in starting a religious war :)... just to state **an** opinion (at the end, the approach the most ppl vote for should be used)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69505371","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69505371","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69505371,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTA1Mzcx","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T18:40:42Z","updated_at":"2015-01-11T18:40:42Z","author_association":"CONTRIBUTOR","body":"> sorry, I disagree with this argument. Futures are core Java construct since 1.5 and it's the basic construct in java when it comes to async calls.\n\n@uboness I think, the confusion is not around returning Future, but the fact that Future is still not a \"free pass\" as far as making things intuitive.\n\nIn my opinion, the APIs have to try to make it obvious that the call is asynchronous. You can still return Future, if you take other precautions such as naming the method `submitXXX()`, or if the whole class has Async in the name, or other possibilities. Alternatively, asynchronous methods can return void and take a CompletionHandler-like parameter, thats also obvious.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69505518","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69505518","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69505518,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTA1NTE4","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T18:44:32Z","updated_at":"2015-01-11T18:44:32Z","author_association":"CONTRIBUTOR","body":"> If we have those, then these are bugs in our tests, not an API issue... IMO at least\n\nWell, it depends what the tests are doing. If the tests are using the API the same way the user would, and frequently making these mistakes, then it means we should think about the API? Its a sign that users might make the same exact mistakes in their code.\n\nOn the other hand, if the test bugs in question are doing crazy expert stuff that only tests should be doing, then it should carry much less weight.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69505533","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69505533","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69505533,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTA1NTMz","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T18:44:54Z","updated_at":"2015-01-11T18:44:54Z","author_association":"MEMBER","body":"> I don't think that in 2015 we need to explain developers what a Future is, but for argument sake, if you need response X and you get a Future<X> back, you'll need to get the X out of the returned Future (simply because there'll be no other way to get it).\n\nI do occasionally see people calling things and not blocking on them. This is usually trouble around bulk indexing that results in them filling up their queues. I _really_ wish that it weren't true, but it is.\n\nI personally wish that we would go with the `Future`s as well because I think that the listener approach is more effort. However, I think the that complication will force people to use the synchronous approach more often then not, which will lead to less unexpected issues from them.\n\n> Whether the async version is via an additional optional listener argument, or through a wrapper, I don't care, but the common case should be simple and obvious how to use.\n\nI wonder if we should add `healthAsync` to be more obvious about what's going on when the two functions live side-by-side. I feel like the .NET Framework does this to great effect.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69512633","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69512633","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69512633,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTEyNjMz","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T21:34:44Z","updated_at":"2015-01-11T21:34:44Z","author_association":"MEMBER","body":"> > Whether the async version is via an additional optional listener argument, or through a wrapper, I don't care, but the common case should be simple and obvious how to use.\n> \n> I wonder if we should add healthAsync to be more obvious about what's going on when the two functions live side-by-side.\n\nThis is what Robert suggested, and I'm fine with that.  What I would like to see from this issue is a clearer separation between sync and async, and the sync should be easy to call (since we use it the vast majority of the time).  I was not suggesting before that async was trappy, but that having the common way to make a request (through prepareX right now) is trappy for calls that I don't care about the result (which is how I've been bitten by this in the past).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69513281","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69513281","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69513281,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTEzMjgx","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T21:49:54Z","updated_at":"2015-01-11T21:49:54Z","author_association":"MEMBER","body":"And +1 to Simon's sentiment that there should be exactly one way to make a request (one way for a sync request, and one way for an async request).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69514247","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69514247","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69514247,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTE0MjQ3","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-01-11T22:10:58Z","updated_at":"2015-01-11T22:10:58Z","author_association":"MEMBER","body":"+1 to that\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69542465","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69542465","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69542465,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTQyNDY1","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T08:59:46Z","updated_at":"2015-01-12T08:59:46Z","author_association":"CONTRIBUTOR","body":"I like the `xxxxAsync` version as long as both methods (sync & async) are under the same interface. If you split the interfaces (per one of @s1monw's suggestions) I think it's redundant. \n\nI still don't think we should push the timeout logic to the users. it should be easy to provide a timeout to the blocking call.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69542894","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69542894","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69542894,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTQyODk0","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T09:04:43Z","updated_at":"2015-01-12T09:04:43Z","author_association":"CONTRIBUTOR","body":"> personally wish that we would go with the Futures as well because I think that the listener approach is more effort.\n\nThe futures will need to be listenable futures anyway (futures you can't listen to are useless IMO)... so effort-wise there's not much different between the pure listener/callback approach to a listenable future one. I also don't think providing a listener (either to the future or to the method itself) really frightens ppl...\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69543088","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69543088","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69543088,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTQzMDg4","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T09:07:15Z","updated_at":"2015-01-12T09:07:15Z","author_association":"CONTRIBUTOR","body":"> Well, it depends what the tests are doing. If the tests are using the API the same way the user would, and frequently making these mistakes, then it means we should think about the API? Its a sign that users might make the same exact mistakes in their code.\n\nso it's the question indeed, but since all our APIs return a response, not \"getting\" the response and asserting it should be considered a bug.. no? (I can't think of any \"fire & forget\" API that we expose)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69562328","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69562328","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69562328,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTYyMzI4","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T12:21:29Z","updated_at":"2015-01-12T12:21:29Z","author_association":"CONTRIBUTOR","body":"Its a bug in the API if it makes this mistake easy to happen. That is all I am saying. I recently encountered this bug myself, on #9146.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69562868","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69562868","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69562868,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTYyODY4","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T12:26:45Z","updated_at":"2015-01-12T12:26:45Z","author_association":"MEMBER","body":"I actually really like @uboness suggestion of one endpoint returning `ListenableActionFuture<T>`. \n\nObservables (through rxjava) provide an even more ideal uniform abstraction for composable (async) (cold or warm) operations (with timeout/throttle support) as @jprante mentioned and AFAIK is java 6 and up (never worked with rx on java though).  But that might instigate an even bigger flame war :)\n\nWith composability in mind I would personally prefer to keep cold futures on the interface\n\n``` java\nListenableActionFuture<ClusterHealthResponse> healthAsync(ClusterHealthRequest request);\n```\n\nOver the callback pattern overload that wraps over hot futures.\n\nwith\n\n``` java\nClusterHealthResponse health(ClusterHealthRequest request);\nClusterHealthResponse health(ClusterHealthRequest request, int timeout, TimeUnit timeoutUnit);\n```\n\nsimply calling `.healthAsync(request).get(...)`\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/69661072","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-69661072","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":69661072,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjYxMDcy","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T22:39:11Z","updated_at":"2015-01-12T22:39:11Z","author_association":"CONTRIBUTOR","body":"Unrelated to whether we'll be using `Future`s or just callbacks... with moving to the simple builder oriented approach we can actually consider removing all the dedicated API methods from the client and have the it minimal:\n\n``` java\nstatic interface Client {\n\n    <Res extends Response, Req extends Request<Res>> Res execute(Req request);\n\n    <Res extends Response, Req extends Request<Res>> Res execute(Req request, long timeout, TimeUnit timeUnit);\n\n    <Res extends Response, Req extends Request<Res>> void execute(Req request, Callback<Res> callback);\n}\n```\n\nthis assumes that every unique request has a 1-to-1 mapping to a unique response (which I believe it's the case) and we can express this association by having the request be parameterized with its response.... a la:\n\n``` java\ninterface Response {\n}\n\ninterface Request<R extends Response> {\n}\n```\n\nThe reason we can do that is because the builder effectively defines the type of request we execute so I don't see the need to have a method for every request type:\n\n``` java\nClusterHealthRequestBuilder healthRequest = AdminBuilders.health().setWaitForGreenStatus();\nClusterHealthResponse health = client.execute(healthRequest.build());\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/71846456","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-71846456","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":71846456,"node_id":"MDEyOklzc3VlQ29tbWVudDcxODQ2NDU2","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2015-01-28T14:51:22Z","updated_at":"2015-01-28T14:51:33Z","author_association":"CONTRIBUTOR","body":"+1 to what @uboness  said here\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/72051624","html_url":"https://github.com/elastic/elasticsearch/issues/9201#issuecomment-72051624","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9201","id":72051624,"node_id":"MDEyOklzc3VlQ29tbWVudDcyMDUxNjI0","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-01-29T16:10:39Z","updated_at":"2015-01-29T16:10:39Z","author_association":"MEMBER","body":"+1 to @uboness. I just caught myself writing a test where I was not treating the response as async.\n\nFYI, both `SearchRequest`, `MoreLikeThisRequest`, and `SearchScrollRequest` map to `SearchResponse`, but this shouldn't break your desired Client interface. Pretty sure the rest are one-to-one.\n\nWhile on the topic, `MoreLikeThisRequest` is unique in that it requires a constructor arg (index name) that you cannot supply using a setter.\n","performed_via_github_app":null}]