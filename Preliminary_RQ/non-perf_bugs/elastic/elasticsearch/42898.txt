{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/42898","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42898/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42898/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42898/events","html_url":"https://github.com/elastic/elasticsearch/issues/42898","id":452567680,"node_id":"MDU6SXNzdWU0NTI1Njc2ODA=","number":42898,"title":"scaled_float offers 53-bit precision instead of the usual 64-bit precision of longs","user":{"login":"yrodiere","id":412878,"node_id":"MDQ6VXNlcjQxMjg3OA==","avatar_url":"https://avatars1.githubusercontent.com/u/412878?v=4","gravatar_id":"","url":"https://api.github.com/users/yrodiere","html_url":"https://github.com/yrodiere","followers_url":"https://api.github.com/users/yrodiere/followers","following_url":"https://api.github.com/users/yrodiere/following{/other_user}","gists_url":"https://api.github.com/users/yrodiere/gists{/gist_id}","starred_url":"https://api.github.com/users/yrodiere/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yrodiere/subscriptions","organizations_url":"https://api.github.com/users/yrodiere/orgs","repos_url":"https://api.github.com/users/yrodiere/repos","events_url":"https://api.github.com/users/yrodiere/events{/privacy}","received_events_url":"https://api.github.com/users/yrodiere/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2019-06-05T15:28:34Z","updated_at":"2019-07-05T16:36:18Z","closed_at":"2019-07-05T16:36:13Z","author_association":"NONE","active_lock_reason":null,"body":"**Elasticsearch version** (`bin/elasticsearch --version`): 7.1.1, but probably every earlier version that supports `scaled_float` too (confirmed on 5.6, 6.7, 7.0 at least)\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (`java -version`): using the docker container, so I don't know. Probably 8?\r\n\r\n**OS version** (`uname -a` if on a Unix-like system):\r\n```\r\nLinux yrodiere.redhat 5.0.19-200.fc29.x86_64 #1 SMP Tue May 28 13:56:29 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nThe documentation advertises the `scaled_float` field type as:\r\n\r\n> A floating point number that is backed by a long, scaled by a fixed double scaling factor.\r\n\r\nOne would expect such a number to offer 64-bit precision, which is the precision of longs in Java.\r\n\r\nHowever, testing reveals that the precision is somewhere around 53 bits instead, suspiciously close to that of a double. And sure enough, looking at the code, values sent to Elasticsearch when indexing and building queries (bounds of a range query, for example) are interpreted as doubles, even if the value is a string (quoted as required by JSON).\r\n\r\nThus, even if the user sends a 64-bit precision floating point number, that precision will be lost when Elasticsearch converts it to a double, and the resulting long will only have 53 \"significant\" bits.\r\n\r\nThe problem seems to lie in `org.elasticsearch.index.mapper.ScaledFloatFieldMapper.ScaledFloatFieldType#scale`:\r\n\r\n```java\r\n        private double scale(Object input) {\r\n            return new BigDecimal(Double.toString(parse(input))).multiply(BigDecimal.valueOf(scalingFactor)).doubleValue();\r\n        }\r\n\r\n    static Double parse(Object value) {\r\n        return objectToDouble(value);\r\n    }\r\n\r\n    private static double objectToDouble(Object value) {\r\n        double doubleValue;\r\n\r\n        if (value instanceof Number) {\r\n            doubleValue = ((Number) value).doubleValue();\r\n        } else if (value instanceof BytesRef) {\r\n            doubleValue = Double.parseDouble(((BytesRef) value).utf8ToString());\r\n        } else {\r\n            doubleValue = Double.parseDouble(value.toString());\r\n        }\r\n\r\n        return doubleValue;\r\n    }\r\n```\r\n\r\nStrangely, it converts the input to a double, then to a string, then to a `BigDecimal`. Unless there is some sort of sanitizing going on here, this looks like converting to a `BigDecimal` directly would work just as well, *and* provide 64-bit precision when the input is a string (can't tell about JSON numbers, I think they'll still be parsed as doubles long before we reach this method):\r\n\r\n```java\r\n        private long scale(Object input) {\r\n            return parse(input).multiply(BigDecimal.valueOf(scalingFactor)).unscaledValue().longValue();\r\n        }\r\n\r\n    static BigDecimal parse(Object value) {\r\n        return objectToBigDecimal(value);\r\n    }\r\n\r\n    private static BigDecimal objectToBigDecimal(Object value) {\r\n        BigDecimal bigDecimalValue;\r\n\r\n        if (value instanceof BigDecimal) { // Not sure this one is currently useful, but it might be if the JSON parser sometimes produces BigDecimals\r\n            bigDecimalValue = ((BigDecimal) value);\r\n        else if (value instanceof BigInteger) { // Not sure this one is currently useful, but it might be if the JSON parser sometimes produces BigInteger\r\n            bigDecimalValue = new BigDecimal((BigInteger) value);\r\n        } else if (value instanceof Number) {\r\n            bigDecimalValue = BigDecimal.valueOf(((Number) value).doubleValue());\r\n        } else if (value instanceof BytesRef) {\r\n            bigDecimalValue = new BigDecimal(((BytesRef) value).utf8ToString());\r\n        } else {\r\n            bigDecimalValue = new BigDecimal(value.toString());\r\n        }\r\n\r\n        return bigDecimalValue;\r\n    }\r\n```\r\n\r\n**Steps to reproduce**:\r\n\r\n```zsh\r\n# Just to make it easier to re-run the test\r\ncurl -XDELETE localhost:9200/mytest/\\?pretty 1>&2 2>/dev/null || true\r\n# Field with a scaling factor of 1.0.\r\n# The bug can be reproduced with other scaling factors, but this one is easier to reason with.\r\ncurl -XPUT -H \"Content-Type: application/json\" localhost:9200/mytest/\\?pretty -d'{\"mappings\":{\"properties\":{\"myscaled\":{\"type\":\"scaled_float\",\"scaling_factor\":1.0}}}}'\r\n# Index 10^17 (~56 bits in binary, significantly lower than Long.MAX_VALUE which requires 64 bits)\r\ncurl -XPUT -H \"Content-Type: application/json\" localhost:9200/mytest/_doc/1\\?pretty\\&refresh=true -d'{\"myscaled\":\"100000000000000000\"}'\r\n# Search for documents with a field value between 10^17-1 and 10^17+1: no hit\r\ncurl -XPOST -H \"Content-Type: application/json\" localhost:9200/mytest/_count\\?pretty -d'{\"query\":{\"range\":{\"myscaled\":{\"lt\":\"100000000000000001\",\"gt\":\"99999999999999999\"}}}}'\r\n# Search for documents with a field value between 10^17-10 and 10^17+10: the document is found\r\ncurl -XPOST -H \"Content-Type: application/json\" localhost:9200/mytest/_count\\?pretty -d'{\"query\":{\"range\":{\"myscaled\":{\"lt\":\"100000000000000010\",\"gt\":\"99999999999999990\"}}}}'\r\n```\r\n\r\n**Provide logs (if relevant)**:\r\n\r\nResult of executing the script above against ES 7.1.1 (`docker.elastic.co/elasticsearch/elasticsearch:7.1.1`):\r\n\r\n```\r\n{\r\n  \"acknowledged\" : true\r\n}\r\n{\r\n  \"acknowledged\" : true,\r\n  \"shards_acknowledged\" : true,\r\n  \"index\" : \"mytest\"\r\n}\r\n{\r\n  \"_index\" : \"mytest\",\r\n  \"_type\" : \"_doc\",\r\n  \"_id\" : \"1\",\r\n  \"_version\" : 1,\r\n  \"result\" : \"created\",\r\n  \"forced_refresh\" : true,\r\n  \"_shards\" : {\r\n    \"total\" : 2,\r\n    \"successful\" : 1,\r\n    \"failed\" : 0\r\n  },\r\n  \"_seq_no\" : 0,\r\n  \"_primary_term\" : 1\r\n}\r\n{\r\n  \"count\" : 0,\r\n  \"_shards\" : {\r\n    \"total\" : 1,\r\n    \"successful\" : 1,\r\n    \"skipped\" : 0,\r\n    \"failed\" : 0\r\n  }\r\n}\r\n{\r\n  \"count\" : 1,\r\n  \"_shards\" : {\r\n    \"total\" : 1,\r\n    \"successful\" : 1,\r\n    \"skipped\" : 0,\r\n    \"failed\" : 0\r\n  }\r\n}\r\n```","closed_by":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"performed_via_github_app":null}