[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475202115","html_url":"https://github.com/elastic/elasticsearch/issues/40308#issuecomment-475202115","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40308","id":475202115,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTIwMjExNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T11:59:18Z","updated_at":"2019-03-21T11:59:18Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475298436","html_url":"https://github.com/elastic/elasticsearch/issues/40308#issuecomment-475298436","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40308","id":475298436,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTI5ODQzNg==","user":{"login":"mark-vieira","id":4106672,"node_id":"MDQ6VXNlcjQxMDY2NzI=","avatar_url":"https://avatars2.githubusercontent.com/u/4106672?v=4","gravatar_id":"","url":"https://api.github.com/users/mark-vieira","html_url":"https://github.com/mark-vieira","followers_url":"https://api.github.com/users/mark-vieira/followers","following_url":"https://api.github.com/users/mark-vieira/following{/other_user}","gists_url":"https://api.github.com/users/mark-vieira/gists{/gist_id}","starred_url":"https://api.github.com/users/mark-vieira/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mark-vieira/subscriptions","organizations_url":"https://api.github.com/users/mark-vieira/orgs","repos_url":"https://api.github.com/users/mark-vieira/repos","events_url":"https://api.github.com/users/mark-vieira/events{/privacy}","received_events_url":"https://api.github.com/users/mark-vieira/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T16:16:43Z","updated_at":"2019-03-21T16:17:05Z","author_association":"CONTRIBUTOR","body":"> But we are never using that library explicitly in our source code. That's a transitive dependency needed by jackson-dataformat-yaml I guess.\r\n\r\nThen it should actually be declared as `runtimeOnly` since we don't need this at compile time.\r\n\r\n> If I want to depend in my project on another jackson version (2.9.8), I must explicitly set as well snakeyaml dependency manually which IMHO breaks the transitive dependency management principe.\r\n\r\nIf this is the case then I assume you are using Maven, which has different transitive dependency semantics than Gradle. It is preferring the \"nearest\" dependency rather than the newest one.\r\n\r\n> Can we exclude in the generated pom.xml this dependency?\r\n\r\nUnfortunately no, as this would then break anyone that depends on this library that _doesn't_ also explicitly bring in snakeyaml through some other means.\r\n\r\nCould a workaround for you be to simply exclude snakeyaml in your POM when depending on `x-content`?\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.elasticsearch</groupId>\r\n  <artifactId>elasticsearch-x-content</artifactId>\r\n  <version>7.0.0-beta1</version>\r\n  <exclusions>\r\n    <exclusion>\r\n      <groupId>org.yaml</groupId>\r\n      <artifactId>snakeyaml</artifactId>\r\n    </exclusion>\r\n  </exclusions>\r\n</dependency>\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475300993","html_url":"https://github.com/elastic/elasticsearch/issues/40308#issuecomment-475300993","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40308","id":475300993,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTMwMDk5Mw==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T16:23:00Z","updated_at":"2019-03-21T16:23:00Z","author_association":"MEMBER","body":"Thanks @mark-vieira for your answer.\r\n\r\n> Unfortunately no, as this would then break anyone that depends on this library that doesn't also explicitly bring in snakeyaml through some other means.\r\n\r\nWhich is a bad practice IMHO.\r\nI mean that in someone has in its code an `import` using `xyz` library, then he should always declare it explicitly. ie. let say the lib maintainer decides to remove completely using this lib and use its own implementation, the project won't compile anymore as soon as you're upgrading the lib.\r\n\r\n> Could a workaround for you be to simply exclude snakeyaml in your POM\r\n\r\nOf course. By no mean, I said it is a blocker.\r\nI'm definitely working around that but I find weird having to declare a dependency I'm not using explicitly. I can of course change the order of the libs I'm using in the maven pom which IIRC would \"solve\" the \"problem\".\r\n\r\nSo feel free to close this issue if we don't intend to fix that for Maven users at least.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475314690","html_url":"https://github.com/elastic/elasticsearch/issues/40308#issuecomment-475314690","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40308","id":475314690,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTMxNDY5MA==","user":{"login":"mark-vieira","id":4106672,"node_id":"MDQ6VXNlcjQxMDY2NzI=","avatar_url":"https://avatars2.githubusercontent.com/u/4106672?v=4","gravatar_id":"","url":"https://api.github.com/users/mark-vieira","html_url":"https://github.com/mark-vieira","followers_url":"https://api.github.com/users/mark-vieira/followers","following_url":"https://api.github.com/users/mark-vieira/following{/other_user}","gists_url":"https://api.github.com/users/mark-vieira/gists{/gist_id}","starred_url":"https://api.github.com/users/mark-vieira/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mark-vieira/subscriptions","organizations_url":"https://api.github.com/users/mark-vieira/orgs","repos_url":"https://api.github.com/users/mark-vieira/repos","events_url":"https://api.github.com/users/mark-vieira/events{/privacy}","received_events_url":"https://api.github.com/users/mark-vieira/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T16:56:27Z","updated_at":"2019-03-21T16:56:27Z","author_association":"CONTRIBUTOR","body":"> I mean that in someone has in its code an import using xyz library, then he should always declare it explicitly.\r\n\r\nThis is exactly what we are doing, which is what is causing this issue to begin with. We don't rely on transitive dependencies in any of our projects. We explicitly declare all dependencies. So rather than rely on Jackson bringing in snakeyaml we exclude all transitive dependencies (thus the excludes in our generated POM) and explicitly declare snakeyaml as a direct dependency. \r\n\r\nThe problem you are running into is the way that Maven prefers versions when encountering a conflict. It chooses the version for the dependency it encounters _closest_ in the dependency graph. FWIW, you would still encounter this problem of yours even if we excluded our snakeyaml dependency and relied on transitive dependency management depending on _where_ the conflicting dependency was found in your dependency graph Maven might still prefer the version we brought in.\r\n\r\nDue to this inherit ambiguity in the way Maven performs conflict resolution its inevitable you will run into conflict issues like this and have to either (a) exclude the conflicting dependency you don't want (b) add an explicit dependency on the version or (c) use something like a `<dependencyManagement>` declaration to tell Maven you prefer a certain version.\r\n\r\n> Of course. By no mean, I said it is a blocker.\r\nI'm definitely working around that but I find weird having to declare a dependency I'm not using explicitly.\r\n\r\nI agree completely. As mentioned above though, tweaking our generated POM would not _completely_ eliminate this problem, although it would fix it for your specific case. The underlying problem is that often times declaring an \"unneeded\" dependency is the best or only way to influence Maven dependency resolution. It's inherently wrong, as you indicate, which is why there are other mechanisms to solve this kind of problem with more robust dependency management engines like Gradle ;)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475319976","html_url":"https://github.com/elastic/elasticsearch/issues/40308#issuecomment-475319976","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40308","id":475319976,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTMxOTk3Ng==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T17:08:50Z","updated_at":"2019-03-21T17:08:50Z","author_association":"MEMBER","body":"> This is exactly what we are doing, which is what is causing this issue to begin with. We don't rely on transitive dependencies in any of our projects. We explicitly declare all dependencies. So rather than rely on Jackson bringing in snakeyaml we exclude all transitive dependencies (thus the excludes in our generated POM) and explicitly declare snakeyaml as a direct dependency.\r\n\r\nThat's something I kind of disagree with. I mean that if the code does not explicitly declare an `import` on `snakeyaml` in its code, then we don't really depend on `snakeyaml`. I'd say it's like an implementation detail. Although I agree that we depend on it because it needs to be in the classpath to work. But for my own projects, I let the dependency manager (Maven) solve that for me.\r\nBut I guess it's the way it works in Gradle land vs. Maven land. 😃 \r\n\r\n> or (c) use something like a `<dependencyManagement>` declaration to tell Maven you prefer a certain version.\r\n\r\nThat's exactly what I'm doing.\r\n\r\n> which is why there are other mechanisms to solve this kind of problem with more robust dependency management engines like Gradle ;)\r\n\r\nHaha! I don't want to enter that debate 😄 \r\n\r\nSo let me close this issue then as `won't fix`. \r\nThanks for looking at it.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/475323714","html_url":"https://github.com/elastic/elasticsearch/issues/40308#issuecomment-475323714","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/40308","id":475323714,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NTMyMzcxNA==","user":{"login":"mark-vieira","id":4106672,"node_id":"MDQ6VXNlcjQxMDY2NzI=","avatar_url":"https://avatars2.githubusercontent.com/u/4106672?v=4","gravatar_id":"","url":"https://api.github.com/users/mark-vieira","html_url":"https://github.com/mark-vieira","followers_url":"https://api.github.com/users/mark-vieira/followers","following_url":"https://api.github.com/users/mark-vieira/following{/other_user}","gists_url":"https://api.github.com/users/mark-vieira/gists{/gist_id}","starred_url":"https://api.github.com/users/mark-vieira/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mark-vieira/subscriptions","organizations_url":"https://api.github.com/users/mark-vieira/orgs","repos_url":"https://api.github.com/users/mark-vieira/repos","events_url":"https://api.github.com/users/mark-vieira/events{/privacy}","received_events_url":"https://api.github.com/users/mark-vieira/received_events","type":"User","site_admin":false},"created_at":"2019-03-21T17:18:16Z","updated_at":"2019-03-21T17:18:16Z","author_association":"CONTRIBUTOR","body":"> That's something I kind of disagree with.\r\n\r\nThat's fair. We are simply trying to make our resolved dependencies explicit. There are other ways to do this, like relying on dependency resolution rules to include resolved versions. This has it's own issues though, as these things don't get published in a POM so consumers won't use the same versions as us.\r\n\r\n>  I mean that if the code does not explicitly declare an import on snakeyaml in its code, then we don't really depend on snakeyaml. I'd say it's like an implementation detail. Although I agree that we depend on it because it needs to be in the classpath to work.\r\n\r\nWhich is why it should really be `runtime` scoped dependency, but it's a dependency nonetheless. And changing the scope doesn't solve the conflict issue either.\r\n\r\nThanks for the discussion. There's no simple solution here. In the end dependency conflicts will arise and need to be resolved, either explicitly, or via some implicit ruleset that may or may not align with the requirements of all your included dependencies. In the end this generally falls in the lap of the consumer (you) ;)","performed_via_github_app":null}]