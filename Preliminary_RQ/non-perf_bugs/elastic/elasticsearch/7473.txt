{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/7473","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7473/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7473/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7473/events","html_url":"https://github.com/elastic/elasticsearch/issues/7473","id":41238590,"node_id":"MDU6SXNzdWU0MTIzODU5MA==","number":7473,"title":"Query returns wrong/different results when in a percolator","user":{"login":"bejs","id":1192840,"node_id":"MDQ6VXNlcjExOTI4NDA=","avatar_url":"https://avatars2.githubusercontent.com/u/1192840?v=4","gravatar_id":"","url":"https://api.github.com/users/bejs","html_url":"https://github.com/bejs","followers_url":"https://api.github.com/users/bejs/followers","following_url":"https://api.github.com/users/bejs/following{/other_user}","gists_url":"https://api.github.com/users/bejs/gists{/gist_id}","starred_url":"https://api.github.com/users/bejs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bejs/subscriptions","organizations_url":"https://api.github.com/users/bejs/orgs","repos_url":"https://api.github.com/users/bejs/repos","events_url":"https://api.github.com/users/bejs/events{/privacy}","received_events_url":"https://api.github.com/users/bejs/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2014-08-27T00:43:48Z","updated_at":"2014-09-02T15:00:09Z","closed_at":"2014-09-02T15:00:09Z","author_association":"NONE","active_lock_reason":null,"body":"First up, I'm using Elasticsearch v1.1.1\n\nI am getting an unexpected result from a percolator. I have broken it down to it's simplest parts and it still not working as I it should.\n\nFirstly I create a new index with mapping:\n\n```\nPUT /test1\n{\n   \"mappings\": {\n      \"product\": {\n         \"properties\": {\n            \"subject\": {\n               \"type\": \"nested\",\n               \"properties\": {\n                  \"code\": {\n                     \"type\": \"string\"\n                  }\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nThen I create two objects for testing:\n\n```\nPUT /test1/product/12345\n{\n    \"subject\": {\n        \"code\": \"FA\"\n    }\n}\n```\n\n```\nPUT /test1/product/12346\n{\n    \"subject\": {\n        \"code\": \"BA\"\n    }\n}\n```\n\nThen I create a query that I would expect to match on the second record only:\n\n```\nGET /test1/product/_search\n{\n   \"query\": {\n      \"filtered\": {\n         \"query\": {\n            \"match_all\": []\n         },\n         \"filter\": {\n            \"bool\": {\n               \"must_not\": [\n                  {\n                     \"query\": {\n                        \"nested\": {\n                           \"path\": \"subject\",\n                           \"query\": {\n                              \"prefix\": {\n                                 \"subject.code\": \"fa\"\n                              }\n                           }\n                        }\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   }\n}\n```\n\nSo far everything is working as expected. The query returns the second record, the first one being excluded by the filter.\n\nI then use the same query to create a percolator:\n\n```\nPUT /test1/.percolator/TEST\n{\n   \"query\": {\n      \"filtered\": {\n         \"query\": {\n            \"match_all\": []\n         },\n         \"filter\": {\n            \"bool\": {\n               \"must_not\": [\n                  {\n                     \"query\": {\n                        \"nested\": {\n                           \"path\": \"subject\",\n                           \"query\": {\n                              \"prefix\": {\n                                 \"subject.code\": \"fa\"\n                              }\n                           }\n                        }\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   }\n}\n```\n\nAnd test against both records:\n\n```\nGET /test1/product/12345/_percolate\n\nGET /test1/product/12346/_percolate\n```\n\nThey both return the same result:\n\n```\n{\n   \"took\": 1,\n   \"_shards\": {\n      \"total\": 5,\n      \"successful\": 5,\n      \"failed\": 0\n   },\n   \"total\": 1,\n   \"matches\": [\n      {\n         \"_index\": \"test1\",\n         \"_id\": \"TEST\"\n      }\n   ]\n}\n```\n\nI have tested this without a nested object and it operates as I would expect. At first I thought perhaps the match_all was doing something strange to the percolator but when it wasn't a nested object it worked fine.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}