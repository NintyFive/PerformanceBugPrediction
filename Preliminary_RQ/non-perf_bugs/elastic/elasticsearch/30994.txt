{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30994","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30994/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30994/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30994/events","html_url":"https://github.com/elastic/elasticsearch/issues/30994","id":328028624,"node_id":"MDU6SXNzdWUzMjgwMjg2MjQ=","number":30994,"title":"Query latency increases with multiple shards","user":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"labels":[{"id":163824881,"node_id":"MDU6TGFiZWwxNjM4MjQ4ODE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Indices%20APIs","name":":Core/Features/Indices APIs","color":"0e8a16","default":false,"description":"APIs to create and manage indices"},{"id":73544,"node_id":"MDU6TGFiZWw3MzU0NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Enon-issue","name":">non-issue","color":"cfcfcf","default":false,"description":null},{"id":1223177445,"node_id":"MDU6TGFiZWwxMjIzMTc3NDQ1","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v7.0.0-beta1","name":"v7.0.0-beta1","color":"dddddd","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-05-31T07:43:48Z","updated_at":"2019-02-07T10:48:55Z","closed_at":"2018-06-08T06:33:02Z","author_association":"MEMBER","active_lock_reason":null,"body":"**Description of the problem including expected versus actual behavior**:\r\n\r\nWith https://github.com/elastic/elasticsearch/pull/30783 we have reduced the number of maximum concurrent shard requests to the number of nodes but at most 256. Previously this was dependent on the number of nodes and old default number of shards (5).\r\n\r\nIn our benchmarks we see an increase of query latency for benchmarks which explicitly set the number of shards to 5 (e.g. [geonames](https://elasticsearch-benchmarks.elastic.co/#tracks/geonames/nightly/30d) or [geopoints](https://elasticsearch-benchmarks.elastic.co/#tracks/geopoint/nightly/30d)). For example, the 50th percentile latency for the polygon query in [geopoints](https://elasticsearch-benchmarks.elastic.co/#tracks/geopoint/nightly/30d) has increased from 59 ms to 153 ms. Similary, for the painless_static query in [geonames](https://elasticsearch-benchmarks.elastic.co/#tracks/geonames/nightly/30d) the 50th percentile service time has increased from 504 ms to 1488 ms (the system is completely saturated in the latter case and it makes no sense to look at latency that's why I mentioned service time here).\r\n\r\n\r\n**Steps to reproduce**:\r\n\r\nThe problem can be reproduced with the following Rally benchmarks:\r\n\r\n```\r\n# state after PR 30783\r\nesrally --revision=d7040ad7b41 --track=\"geonames\" --include-tasks=\"create-index,index-append,force-merge,painless_static\"\r\n# manually revert https://github.com/elastic/elasticsearch/pull/30783 \r\ncd $(awk -F \" = \" '$1~/^src\\.root\\.dir/ {print $2}' ~/.rally/rally.ini)/elasticsearch\r\ngit revert 2984734197223003dc80ed1ac4e8366f8d49ed1c\r\n# state before (i.e. d7040ad7b41 without 29847341972)\r\nesrally --revision=current --track=\"geonames\" --include-tasks=\"create-index,index-append,force-merge,painless_static\"\r\n# reset your local state again!\r\ngit reset --hard origin/master\r\n```\r\n\r\nUnfortunately you have to manually revert the work introduced in https://github.com/elastic/elasticsearch/pull/30783 because we had [yet another regression](https://github.com/elastic/elasticsearch/issues/30801) in between that caused Elasticsearch to OOM (which was fixed by https://github.com/elastic/elasticsearch/pull/30820).\r\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}