[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422782944","html_url":"https://github.com/elastic/elasticsearch/issues/33845#issuecomment-422782944","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33845","id":422782944,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjc4Mjk0NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-09-19T12:26:45Z","updated_at":"2018-09-19T12:26:45Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/439301071","html_url":"https://github.com/elastic/elasticsearch/issues/33845#issuecomment-439301071","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33845","id":439301071,"node_id":"MDEyOklzc3VlQ29tbWVudDQzOTMwMTA3MQ==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2018-11-16T07:01:33Z","updated_at":"2018-11-16T07:03:25Z","author_association":"CONTRIBUTOR","body":"We don't plan to introduce a Bulk Users API.\r\nOn balance we think that the number of genuine use cases for this API wouldn't justify the ongoing maintenance cost of having to support another API.\r\n\r\nBulk APIs introduce complications around error handling and reporting, and do not necessarily have a major improvement on performance unless an API primarily bound by network latency.\r\n\r\nHowever for users who need to create many users at once, we have some recommendations:\r\n\r\nThere are 2 parts to the existing user creation API that have the biggest impact on throughput.\r\n1. \"refresh\"\r\n2. password hashing\r\n\r\nFor a long time the API has supported different options for these, but we're added more testing and docs around them in #34729 (see #35242 and #35574).\r\n\r\n## Refresh\r\nBy default the PutUser API does the equivalent of `refresh=true`. This is a divergence from other Elasticsearch APIs where the default is `refresh=false`.\r\nIf creating multiple users, performing a refresh after every user is quite costly. Including `refresh=false` as a query parameter can have a noticeable improvement on throughput. Even with default password hashing (see below) it's a 10% improvement.\r\n\r\n## Password Hashing\r\nThis is a bigger improvement (spoiler: up to 200%).\r\nPassword hashing is intentionally slow. The idea is that if your data is leaked somehow, then you want to make it expensive for attackers to crack your stored passwords.\r\nThe default password hasher in ES6.x is `bcrypt10`, and by design, it makes heavy use of the node's CPU. \r\nThere are 2 options for offloading some of that work:\r\n1. Use a cheaper (but less secure) hasher\r\n2. Perform the hashing on the client.\r\n\r\n### Cheap Password Hashing\r\nThe cheapest hasher we support for password storage is `bcrypt4`.\r\nThat's not very secure, and we definitely would not recommend that you use that in a production environment. But if you are regularly spinning up new test environments where your password security is less important to you, then you can [configure the `xpack.security.authc.password_hashing.algorithm` setting](https://www.elastic.co/guide/en/elasticsearch/reference/6.4/security-settings.html#hashing-settings) to be `bcrypt4`, and get about a 200% improvement in throughput.\r\nThis does not require any changes to your API calls, just 1 change to your `elasticsearch.yml`.\r\nBut, to stress, **We do not recommend this in production environments**.\r\n\r\n### Pre Hashed Passwords\r\nThe other option is to hash the password before it is sent to the API.\r\nIf you are automating the setup of users from scripts, then this may actually be a big security improvement for you, as your scripts will not need to contain the plaintext password.\r\nYou will need to hash the passwords in the same format as the server's default hasher but our hash formats are fairly standard (bcrypt or PBKDF2), and there are compatible libraries for most languages and many automation tools.  \r\nIf you have faster (or more CPUs) on your client machine, or can pre-hash the passwords before you need to load them, then this can also get a 200% improvement in throughput, without needing to sacrifice hash strength.\r\n\r\n## Conclusion\r\n\r\nI wrote a fairly naive, single threaded python script that creates users in a serial fashion and ran it my 2 year old laptop (with Elasticsearch also running on that laptop).\r\n\r\nFor the default options (server side hashing with bcrypt10, default refresh=true) I can create about **8.5 users per second**.\r\n\r\nWith client-side hashing and `refresh=false`, I can create about **37 users per second**.\r\nEven if you have 5000 users to create, that should only about 2.5 minutes.\r\n\r\nUnless there's a really compelling reason to revisit this, we feel that the existing features provide the right set of options for the Put User API, and those throughput numbers are reasonable.\r\n \r\n  ","performed_via_github_app":null}]