{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/3881","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3881/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3881/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3881/events","html_url":"https://github.com/elastic/elasticsearch/issues/3881","id":20830854,"node_id":"MDU6SXNzdWUyMDgzMDg1NA==","number":3881,"title":"Multiple tokens at the same position not working correctly with match query if AND operator is used","user":{"login":"lukas-vlcek","id":205174,"node_id":"MDQ6VXNlcjIwNTE3NA==","avatar_url":"https://avatars2.githubusercontent.com/u/205174?v=4","gravatar_id":"","url":"https://api.github.com/users/lukas-vlcek","html_url":"https://github.com/lukas-vlcek","followers_url":"https://api.github.com/users/lukas-vlcek/followers","following_url":"https://api.github.com/users/lukas-vlcek/following{/other_user}","gists_url":"https://api.github.com/users/lukas-vlcek/gists{/gist_id}","starred_url":"https://api.github.com/users/lukas-vlcek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lukas-vlcek/subscriptions","organizations_url":"https://api.github.com/users/lukas-vlcek/orgs","repos_url":"https://api.github.com/users/lukas-vlcek/repos","events_url":"https://api.github.com/users/lukas-vlcek/events{/privacy}","received_events_url":"https://api.github.com/users/lukas-vlcek/received_events","type":"User","site_admin":false},"labels":[{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null},{"id":56772237,"node_id":"MDU6TGFiZWw1Njc3MjIzNw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.90.6","name":"v0.90.6","color":"e0e0e0","default":false,"description":null},{"id":37906111,"node_id":"MDU6TGFiZWwzNzkwNjExMQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.0.0.Beta1","name":"v1.0.0.Beta1","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"assignees":[{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2013-10-10T19:51:49Z","updated_at":"2013-10-15T08:16:55Z","closed_at":"2013-10-14T12:10:38Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"If multiple tokens are output at the same position then `match` queries are not working correctly if `AND` operator is used.\n\nFirst I noticed this issue when using Hunspell token filter (something similar has been reported in [LUCENE-5057](https://issues.apache.org/jira/browse/LUCENE-5057) but it is not really a Lucene issue). With Hunspell it is possible to get multiple output tokens from a single input token, all at the same position. However, client query usually contains only one of those tokens or token that can output different set of tokens. When using `match` query and `AND` operator the document is not matching (while it should be).\n\n_I also think that this can impact other linguistics packages (like Basis`s RBL?)_\n\nSimilar situation can be simulated using synonym filter. Imagine that we are using query time synonyms.\n\nLet's say we index simple document:\n\n```\n{ text : \"Quick brown fox\" }\n```\n\nand we define query time synonym \"quick, fast\". Now let's see what we can do with this in the following [recreation script](https://gist.github.com/lukas-vlcek/6923179) (using ES 0.90.5), output commented below:\n\n```\n#!/bin/sh\n\necho \"Elasticsearch version\"\ncurl localhost:9200; echo; echo;\n\necho \"Delete index\"; curl -X DELETE 'localhost:9200/i'; echo; echo;\n\necho \"Create index with analysis and mappings\"; curl -X PUT 'localhost:9200/i' -d '{\n  \"settings\" : {\n    \"analysis\" : {\n      \"analyzer\" : {\n        \"index\" : {\n          \"type\" : \"custom\",\n          \"tokenizer\" : \"standard\",\n          \"filter\" : [\"lowercase\"]\n        },\n        \"search\" : {\n          \"type\" : \"custom\",\n          \"tokenizer\" : \"standard\",\n          \"filter\" : [\"lowercase\",\"synonym\"]\n        }\n      },\n      \"filter\" : {\n        \"synonym\" : {\n          \"type\" : \"synonym\",\n          \"synonyms\" : [\n            \"fast, quick\"\n          ]\n  }}},\n  \"mappings\" : {\n    \"t\" : {\n      \"properties\" : {\n        \"text\" : {\n          \"type\" : \"string\",\n          \"index_analyzer\" : \"index\",\n          \"search_analyzer\" : \"search\"\n}}}}}}'; echo; echo;\n\n# Wait for all the index shards to be allocated\ncurl -s -X GET 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s' > /dev/null\n\necho \"Test synonyms for 'fast': should output two tokens\"; curl -X POST 'localhost:9200/i/_analyze?analyzer=search&format=text&text=fast'; echo; echo;\n\necho \"Index data: 'Quick brown fox'\"; curl -X POST 'localhost:9200/i/t' -d '{\n  \"text\" : \"Quick brown fox\"\n}'; echo; echo;\n\necho \"Refresh Lucene reader\"; curl -X POST 'localhost:9200/i/_refresh'; echo; echo;\n\necho \"Testing search\";\necho ===========================\necho \"1) query_string: quick\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"query_string\":{\"query\":\"quick\",\"default_field\":\"text\"}}}'; echo; echo;\n\necho \"2) query_string: fast - is search_analyzer used?\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"query_string\":{\"query\":\"fast\",\"default_field\":\"text\"}}}'; echo; echo;\n\necho \"2.5) query_string: fast - forcing search_analyzer\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"query_string\":{\"query\":\"fast\",\"default_field\":\"text\",\"analyzer\":\"search\"}}}'; echo; echo;\n\necho \"3) query_string: fast - forcing search_analyzer, forcing AND operator\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"query_string\":{\"query\":\"fast\",\"default_field\":\"text\",\"analyzer\":\"search\",\"default_operator\":\"AND\"}}}'; echo; echo;\n\necho \"4) match query: quick\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"match\":{\"text\":{\"query\":\"quick\",\"analyzer\":\"search\"}}}}'; echo; echo;\n\necho \"5) match query: fast\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"match\":{\"text\":{\"query\":\"fast\",\"analyzer\":\"search\"}}}}'; echo; echo;\n\necho \"6) match query: fast - forcing AND operator\";\ncurl -X GET 'localhost:9200/_search' -d '{\"query\":{\"match\":{\"text\":{\"query\":\"fast\",\"analyzer\":\"search\",\"operator\":\"AND\"}}}}'; echo; echo;\n```\n\nOutput of queries:\n\n```\n1) query_string: quick\n{\"took\":4,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":1,\"max_score\":0.15342641,\"hits\":[{\"_index\":\"i\",\"_type\":\"t\",\"_id\":\"0N2FX_vxR5qsMTYczFPl1w\",\"_score\":0.15342641, \"_source\" : {\n  \"text\" : \"Quick brown fox\"\n}}]}}\n\n2) query_string: fast - is search_analyzer used?\n{\"took\":2,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":0,\"max_score\":null,\"hits\":[]}}\n\n2.5) query_string: fast - forcing search_analyzer\n{\"took\":3,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":1,\"max_score\":0.04500804,\"hits\":[{\"_index\":\"i\",\"_type\":\"t\",\"_id\":\"0N2FX_vxR5qsMTYczFPl1w\",\"_score\":0.04500804, \"_source\" : {\n  \"text\" : \"Quick brown fox\"\n}}]}}\n\n3) query_string: fast - forcing search_analyzer, forcing AND operator\n{\"took\":2,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":1,\"max_score\":0.04500804,\"hits\":[{\"_index\":\"i\",\"_type\":\"t\",\"_id\":\"0N2FX_vxR5qsMTYczFPl1w\",\"_score\":0.04500804, \"_source\" : {\n  \"text\" : \"Quick brown fox\"\n}}]}}\n\n4) match query: quick\n{\"took\":2,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":1,\"max_score\":0.04500804,\"hits\":[{\"_index\":\"i\",\"_type\":\"t\",\"_id\":\"0N2FX_vxR5qsMTYczFPl1w\",\"_score\":0.04500804, \"_source\" : {\n  \"text\" : \"Quick brown fox\"\n}}]}}\n\n5) match query: fast\n{\"took\":3,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":1,\"max_score\":0.04500804,\"hits\":[{\"_index\":\"i\",\"_type\":\"t\",\"_id\":\"0N2FX_vxR5qsMTYczFPl1w\",\"_score\":0.04500804, \"_source\" : {\n  \"text\" : \"Quick brown fox\"\n}}]}}\n\n6) match query: fast - forcing AND operator\n{\"took\":4,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":0,\"max_score\":null,\"hits\":[]}}\n```\n\nMy comments on results:\n\n_(note that comment no.2 may contain question regarding other non related issue)_\n\n1) `query_string` for query \"quick\" works as expected.\n\n2) `query_string` for query \"fast\" does not seem to work. According to the [documentation](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#string) I was expecting that `search_analyzer` defined in `string` type mapping would be used. But anyway, this should not be the topic of this issue... :smile:\n\n2.5) `query_string` for query \"fast\" works (if I explicitly force `search` analyzer) so we can say query time synonym works fine.\n\n3) The same situation as in 2.5) except we are forcing `AND` operator. It should work and it is working.\n\n4) Now, let's use `match` query and query for \"quick\". It works fine.\n\n5) Again, `match` query but query for \"fast\". It works, so far so good.\n\n6) The same as in 5) except we are forcing `AND` operator. It should work (I hope) but it is not.\n\nIf I could speculate about why this is happening:\n\na) MatchQueryParser does something like:\n\n```\n... if (\"and\".equalsIgnoreCase(op)) {\n    matchQuery.setOccur(BooleanClause.Occur.MUST);\n} ...\n```\n\nb) and MatchQuery does not take account on the position of tokens. It simply stacks all incoming tokens into BooleanQuery. It contains patterns similar to the following excerpt:\n\n```\nBooleanQuery q = new BooleanQuery(positionCount == 1);\nfor (int i = 0; i < numTokens; i++) {\n    boolean hasNext = buffer.incrementToken();\n    assert hasNext == true;\n    final Query currentQuery = newTermQuery(mapper, new Term(field, termToByteRef(termAtt)));\n    q.add(currentQuery, occur);\n}\n```\n\nThe position of tokens is not taken into account which would explain why this is not working as expected in combination with `AND` operator in situations described above.\nI think if incoming tokens share the same position it should generate Boolean subquery with `OR` operator (?).\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}