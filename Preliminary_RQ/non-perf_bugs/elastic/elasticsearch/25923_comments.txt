[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/318363433","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-318363433","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":318363433,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODM2MzQzMw==","user":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"created_at":"2017-07-27T13:34:16Z","updated_at":"2017-07-27T13:34:16Z","author_association":"MEMBER","body":"@colings86 / @polyfractal do you have any thoughts on this?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/318364913","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-318364913","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":318364913,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODM2NDkxMw==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2017-07-27T13:39:32Z","updated_at":"2017-07-27T13:39:32Z","author_association":"CONTRIBUTOR","body":"This is similar to the sorted aggs work that @jimczi has been talking about for a few months. I believe it isn't super simple to get the hits in any order other than the one that they come in now.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/318381950","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-318381950","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":318381950,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODM4MTk1MA==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2017-07-27T14:38:36Z","updated_at":"2017-07-27T14:38:36Z","author_association":"MEMBER","body":"Yeah, that was my thought as well.  I wonder if existing index sorting (https://www.elastic.co/guide/en/elasticsearch/reference/master/index-modules-index-sorting.html) would help.  It'd guarantee the order within a segment, but I'm not sure how it would interact with aggs when traversing segments.  My guess is that the script would have to handle going \"backwards\" when a new segment is loaded/collected. But I haven't actually played with index sorting yet so dunno.\r\n\r\nI believe @jimczi's idea was to build on top of index sorting, but I'm not sure what else is needed to accomplish it. :)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/318521512","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-318521512","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":318521512,"node_id":"MDEyOklzc3VlQ29tbWVudDMxODUyMTUxMg==","user":{"login":"jeacott1","id":16600100,"node_id":"MDQ6VXNlcjE2NjAwMTAw","avatar_url":"https://avatars3.githubusercontent.com/u/16600100?v=4","gravatar_id":"","url":"https://api.github.com/users/jeacott1","html_url":"https://github.com/jeacott1","followers_url":"https://api.github.com/users/jeacott1/followers","following_url":"https://api.github.com/users/jeacott1/following{/other_user}","gists_url":"https://api.github.com/users/jeacott1/gists{/gist_id}","starred_url":"https://api.github.com/users/jeacott1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeacott1/subscriptions","organizations_url":"https://api.github.com/users/jeacott1/orgs","repos_url":"https://api.github.com/users/jeacott1/repos","events_url":"https://api.github.com/users/jeacott1/events{/privacy}","received_events_url":"https://api.github.com/users/jeacott1/received_events","type":"User","site_admin":false},"created_at":"2017-07-28T00:16:03Z","updated_at":"2017-07-31T03:20:11Z","author_association":"NONE","body":"what if the map interface was adjusted (or a new entry point - pre-map or something) so that at least per segment could be accessed in order? it wouldn't be perfect but it would be a big step forward and likely more than close enough for my needs.\r\n\r\nat most, per shard is all that's really required. TS data can be managed as sequential indexes queried as required. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/375397367","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-375397367","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":375397367,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTM5NzM2Nw==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2018-03-22T17:45:18Z","updated_at":"2018-03-22T17:45:18Z","author_association":"MEMBER","body":"Hey all.  This feature request is an interesting idea but since its opening we have not seen enough feedback that it is a feature we should pursue.  It's also a fairly complex change because it touches some of the very low-level data organization parts of Elasticsearch.\r\n\r\nWe prefer to close this issue as a clear indication that we are not going to work on this at this time. We are always open to reconsidering this in the future based on compelling feedback; despite this issue being closed please feel free to leave feedback on the proposal (including +1s).\r\n\r\nIn the meantime, I think the easiest solution is to discretize the data into some acceptable level of granularity (e.g. `date_histo` with 5s interval, etc) and then perform the calculation with a `bucket_script` or in the client.  By operating on the buckets, rather than the raw data, you'll get properly sorted results.  \r\n\r\nGiven the distributed nature of ES, I'm not sure we can do this at the shard level because we'll never know if better data exists on a different shard.  Pipeline aggs are probably the only good solution here.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/375452085","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-375452085","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":375452085,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTQ1MjA4NQ==","user":{"login":"jeacott1","id":16600100,"node_id":"MDQ6VXNlcjE2NjAwMTAw","avatar_url":"https://avatars3.githubusercontent.com/u/16600100?v=4","gravatar_id":"","url":"https://api.github.com/users/jeacott1","html_url":"https://github.com/jeacott1","followers_url":"https://api.github.com/users/jeacott1/followers","following_url":"https://api.github.com/users/jeacott1/following{/other_user}","gists_url":"https://api.github.com/users/jeacott1/gists{/gist_id}","starred_url":"https://api.github.com/users/jeacott1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeacott1/subscriptions","organizations_url":"https://api.github.com/users/jeacott1/orgs","repos_url":"https://api.github.com/users/jeacott1/repos","events_url":"https://api.github.com/users/jeacott1/events{/privacy}","received_events_url":"https://api.github.com/users/jeacott1/received_events","type":"User","site_admin":false},"created_at":"2018-03-22T20:47:08Z","updated_at":"2018-03-22T20:47:08Z","author_association":"NONE","body":"@polyfractal well thats put a dent in my day :(\r\n\"discretize the data into some acceptable level of granularity\" does not at all deal with the issue of calculating an integral, or many other custom functions over a timeseries. \r\nvery sad to see this shelved as its a huge blocker for a lot of timeseries usecases, indeed anything vaguely custom needs access to sorted data.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/375468592","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-375468592","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":375468592,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTQ2ODU5Mg==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2018-03-22T21:47:32Z","updated_at":"2018-03-22T21:47:32Z","author_association":"MEMBER","body":"Sorry to be the bearer of bad news :(\r\n\r\nSome thoughts:\r\n\r\n> \"discretize the data into some acceptable level of granularity\" does not at all deal with the issue of calculating an integral, or many other custom functions over a timeseries.\r\n\r\nAssuming we're working with data points stored in Elasticsearch (e.g. not a real-valued function itself, but the output from that function at discrete points), the data has already been discretized based on the sampling period or timestamp granularity.  E.g. if your timestamps are millisecond precision, you're implicitly discretized to millisecond approximations of the real signal.  Calculating the integral on any dataset of discrete points is automatically an approximation of the true integral.\r\n\r\nWith that in mind, there are some options:\r\n\r\n- You could do with a sorted scroll and iterate over the raw data points, calculating the integral locally.  It could be made faster by using index-time sorting.\r\n- Another option is to use the new composite aggregation and set a `date_histo` to the same interval as your sampling period, which will give you a pageable view into the time-series data (without the memory hit of a regular aggregation).  Index sorting could help here too.\r\n- Finally, if you have enough memory, you could just do a regular `date_histo` with the interval set to the sampling period.\r\n\r\nThe \"gotcha\" with the those options is that they are all working effectively on the raw data.  There's no real way to work with sorted, sequential data efficiently in a distributed map/reduce environment.  Since each shard is independent of the other shards, any calculation that requires sequential access to a sorted stream can't be done in a shard-local manner.  No individual shard knows if it has a complete view of the timeseries at a point in time.\r\n\r\nSo if parallelism is needed, best a map/reduce system can do is summarize the data into buckets like `date_histo` does, because that can be done in a shard-local manner and reduced to the final set of buckets.  Then you work on that summarized, larger granularity view instead.  For the intergal problem, the ∑<sub>[k=0, n]</sub>(bucket_count<sub>k</sub> * bucket_width<sub>k</sub>) is an approximation of the integral.\r\n\r\nThere are some slightly more accurate ways to calculate an integral in a map/reduce environment, such as doing [Monte Carlo approximations](https://hplgit.github.io/map-reduce4sci/doc/pub/MapReduce.html).  But my understanding is that this requires chunks of sequential data to be co-located (which Elasticsearch doesn't provide), and it's still an approximation.\r\n\r\nI'd really love to support more advanced time-series functionality, but they become very tricky in a distributed environment.  Many time-series calculations require sequential data which is not something that's doable in a map/reduce situation. Simply sorting each shard independently doesn't help because we still have to deal with the results from other shards.\r\n\r\n_Addendum_ \r\nThere is a scenario where the user has configured custom routing, so that each independent time-series is routed to a specific shard.  In that case we could theoretically provide a sorted stream of data, since we know the data for the entire series is shard-local.  I doubt we'd ever build features like that though, since it essentially gives up on scalability, would create a certain class of aggs that only work if your data is configured a certain way, and would not work with multiple non-colocated series (e.g. correlate two time-series that were on different shards)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/375475283","html_url":"https://github.com/elastic/elasticsearch/issues/25923#issuecomment-375475283","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25923","id":375475283,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NTQ3NTI4Mw==","user":{"login":"jeacott1","id":16600100,"node_id":"MDQ6VXNlcjE2NjAwMTAw","avatar_url":"https://avatars3.githubusercontent.com/u/16600100?v=4","gravatar_id":"","url":"https://api.github.com/users/jeacott1","html_url":"https://github.com/jeacott1","followers_url":"https://api.github.com/users/jeacott1/followers","following_url":"https://api.github.com/users/jeacott1/following{/other_user}","gists_url":"https://api.github.com/users/jeacott1/gists{/gist_id}","starred_url":"https://api.github.com/users/jeacott1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeacott1/subscriptions","organizations_url":"https://api.github.com/users/jeacott1/orgs","repos_url":"https://api.github.com/users/jeacott1/repos","events_url":"https://api.github.com/users/jeacott1/events{/privacy}","received_events_url":"https://api.github.com/users/jeacott1/received_events","type":"User","site_admin":false},"created_at":"2018-03-22T22:15:20Z","updated_at":"2018-03-22T22:15:20Z","author_association":"NONE","body":"thanks for the huge answer!\r\nre shards and reading data, if I use a single shard per index (and/or use routing affinity), and manage data distribution by creating new sequential (in time) indexes, and replicas for read scale, I think I can have my cake and eat it, each shard would contain a complete set of data for a time period, and a map reduce across indexes would be straight forward. \r\nI understand that a sorted map_script input would not be useful in every circumstance, but I think just because its not directly useful in the common 'doc hashed to multiple shards case' is no reason to dismiss the option. if that were the case, shard routing would likely never have made the cut either.\r\n\r\nhoping this gets further consideration at some point. deferring to scrolling api and hauling all the data out of ES doesn't really sound like a viable option. \r\n\r\nCheers.","performed_via_github_app":null}]