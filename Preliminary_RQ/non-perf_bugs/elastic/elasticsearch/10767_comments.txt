[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/96403157","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-96403157","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":96403157,"node_id":"MDEyOklzc3VlQ29tbWVudDk2NDAzMTU3","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-04-26T16:01:42Z","updated_at":"2015-04-26T16:01:42Z","author_association":"CONTRIBUTOR","body":"Hi @bsander \n\nInteresting question.  It would be nice to be able to cache the output of a script, although we'd need to be able to mark it as cacheable (eg can't contain `rand()` etc).\n\nHowever, the problem as you describe it above can be solved today using the `function_score` query.  The script would run once for every document, and use the calculated price for the `_score`.  Any prices outside the desired range (calculated as part of the script) could be excluded with `min_score`, and the resulting price would be returned in the `score` field, eg:\n\n```\nDELETE t\n\nPOST t/t/_bulk\n{\"index\":{}}\n{\"num\":1}\n{\"index\":{}}\n{\"num\":2}\n{\"index\":{}}\n{\"num\":3}\n{\"index\":{}}\n{\"num\":4}\n{\"index\":{}}\n{\"num\":5}\n{\"index\":{}}\n{\"num\":6}\n{\"index\":{}}\n{\"num\":7}\n{\"index\":{}}\n{\"num\":8}\n{\"index\":{}}\n{\"num\":9}\n{\"index\":{}}\n{\"num\":10}\n\n\nGET t/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"match_all\": {}\n      },\n      \"min_score\": 0,\n      \"boost_mode\": \"replace\", \n      \"functions\": [\n        {\n          \"script_score\": {\n            \"script\": \"num = doc['num'].value; if (num >= min_val && num <= max_val) { return num}; return -1\",\n            \"params\": {\n              \"min_val\": 3,\n              \"max_val\": 5\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nreturns:\n\n```\n\"hits\": {\n  \"total\": 3,\n  \"max_score\": 5,\n  \"hits\": [\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"AUz2cefd6wt16ozAgRtq\",\n        \"_score\": 5,\n        \"_source\": {\n           \"num\": 5\n        }\n     },\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"AUz2cefd6wt16ozAgRtp\",\n        \"_score\": 4,\n        \"_source\": {\n           \"num\": 4\n        }\n     },\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"AUz2cefd6wt16ozAgRto\",\n        \"_score\": 3,\n        \"_source\": {\n           \"num\": 3\n        }\n     }\n  ]\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/101166274","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-101166274","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":101166274,"node_id":"MDEyOklzc3VlQ29tbWVudDEwMTE2NjI3NA==","user":{"login":"bsander","id":517850,"node_id":"MDQ6VXNlcjUxNzg1MA==","avatar_url":"https://avatars1.githubusercontent.com/u/517850?v=4","gravatar_id":"","url":"https://api.github.com/users/bsander","html_url":"https://github.com/bsander","followers_url":"https://api.github.com/users/bsander/followers","following_url":"https://api.github.com/users/bsander/following{/other_user}","gists_url":"https://api.github.com/users/bsander/gists{/gist_id}","starred_url":"https://api.github.com/users/bsander/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bsander/subscriptions","organizations_url":"https://api.github.com/users/bsander/orgs","repos_url":"https://api.github.com/users/bsander/repos","events_url":"https://api.github.com/users/bsander/events{/privacy}","received_events_url":"https://api.github.com/users/bsander/received_events","type":"User","site_admin":false},"created_at":"2015-05-12T07:28:48Z","updated_at":"2015-05-12T07:28:48Z","author_association":"NONE","body":"Hi @clintongormley, \n\nThanks for your thorough response. We've been experimenting with your approach during the last week and indeed it does reduce the time spent calculating prices by quite a margin. It does however complicate other interactions with the content, for instance when sorting by price _ascending_ or sorting by an entirely different field. Where we would normally just change the `sort` directive, we need to change our query in various different places to support sorting by price. Also, queries where price isn't necessarily relevant become much slower than they used to with this method, so we need to watch out for that too.\n\nSo, for the sake of maintainability, it would still be much better for us to be able to use cached values from previously executed scripts instead.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/102458543","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-102458543","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":102458543,"node_id":"MDEyOklzc3VlQ29tbWVudDEwMjQ1ODU0Mw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-05-15T16:58:11Z","updated_at":"2015-05-15T16:58:11Z","author_association":"CONTRIBUTOR","body":"> sorting by price ascending\n\njust add:\n\n```\n\"sort\": { \"_score\": {\"order\": \"asc\" }}\n```\n\n> or sorting by an entirely different field\n\nJust do:\n\n```\n\"sort\": [\n    { \"some_field\": { \"order\": \"asc\" }},\n    { \"_score\": { \"order\": \"asc\" }}\n]\n```\n\n> Also, queries where price isn't necessarily relevant become much slower than they used to with this method, so we need to watch out for that too.\n\nYes, you need to send the right query for the right purpose.\n\n> So, for the sake of maintainability, it would still be much better for us to be able to use cached values from previously executed scripts instead.\n\nElasticsearch has no idea what is happening inside your script.  Even if we were to add a `_cache` flag, then we'd need to know how long to cache it for, how many values we should cache etc, all of which makes the execution more complex, and produces more garbage to use up the heap and require collection.\n\nI'll leave this as discuss, but I think: better to send the right query for the right job.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/135148169","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-135148169","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":135148169,"node_id":"MDEyOklzc3VlQ29tbWVudDEzNTE0ODE2OQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2015-08-26T19:35:56Z","updated_at":"2015-08-26T19:35:56Z","author_association":"CONTRIBUTOR","body":"Closing. As @clintongormley pointed out, this can be improved a lot by just formulating the query differently.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/245504207","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-245504207","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":245504207,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NTUwNDIwNw==","user":{"login":"gm42","id":16498973,"node_id":"MDQ6VXNlcjE2NDk4OTcz","avatar_url":"https://avatars3.githubusercontent.com/u/16498973?v=4","gravatar_id":"","url":"https://api.github.com/users/gm42","html_url":"https://github.com/gm42","followers_url":"https://api.github.com/users/gm42/followers","following_url":"https://api.github.com/users/gm42/following{/other_user}","gists_url":"https://api.github.com/users/gm42/gists{/gist_id}","starred_url":"https://api.github.com/users/gm42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gm42/subscriptions","organizations_url":"https://api.github.com/users/gm42/orgs","repos_url":"https://api.github.com/users/gm42/repos","events_url":"https://api.github.com/users/gm42/events{/privacy}","received_events_url":"https://api.github.com/users/gm42/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T06:18:09Z","updated_at":"2016-09-08T06:25:32Z","author_association":"CONTRIBUTOR","body":"Is this advice still valid? I have opened a discussion topic: https://discuss.elastic.co/t/script-result-caching-reusing/60042\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/248307889","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-248307889","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":248307889,"node_id":"MDEyOklzc3VlQ29tbWVudDI0ODMwNzg4OQ==","user":{"login":"gm42","id":16498973,"node_id":"MDQ6VXNlcjE2NDk4OTcz","avatar_url":"https://avatars3.githubusercontent.com/u/16498973?v=4","gravatar_id":"","url":"https://api.github.com/users/gm42","html_url":"https://github.com/gm42","followers_url":"https://api.github.com/users/gm42/followers","following_url":"https://api.github.com/users/gm42/following{/other_user}","gists_url":"https://api.github.com/users/gm42/gists{/gist_id}","starred_url":"https://api.github.com/users/gm42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gm42/subscriptions","organizations_url":"https://api.github.com/users/gm42/orgs","repos_url":"https://api.github.com/users/gm42/repos","events_url":"https://api.github.com/users/gm42/events{/privacy}","received_events_url":"https://api.github.com/users/gm42/received_events","type":"User","site_admin":false},"created_at":"2016-09-20T13:54:29Z","updated_at":"2016-09-20T14:00:26Z","author_association":"CONTRIBUTOR","body":"The discussion I opened would need to be updated now, as I dug deeper into it.\n\nHowever I just noticed that document score is not accessible in the post_filter, as per #20131\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/249355180","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-249355180","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":249355180,"node_id":"MDEyOklzc3VlQ29tbWVudDI0OTM1NTE4MA==","user":{"login":"dmitry","id":5091,"node_id":"MDQ6VXNlcjUwOTE=","avatar_url":"https://avatars1.githubusercontent.com/u/5091?v=4","gravatar_id":"","url":"https://api.github.com/users/dmitry","html_url":"https://github.com/dmitry","followers_url":"https://api.github.com/users/dmitry/followers","following_url":"https://api.github.com/users/dmitry/following{/other_user}","gists_url":"https://api.github.com/users/dmitry/gists{/gist_id}","starred_url":"https://api.github.com/users/dmitry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dmitry/subscriptions","organizations_url":"https://api.github.com/users/dmitry/orgs","repos_url":"https://api.github.com/users/dmitry/repos","events_url":"https://api.github.com/users/dmitry/events{/privacy}","received_events_url":"https://api.github.com/users/dmitry/received_events","type":"User","site_admin":false},"created_at":"2016-09-24T09:26:21Z","updated_at":"2016-09-24T09:26:21Z","author_association":"CONTRIBUTOR","body":"I have the same case, and I don't know how to optimize it with `_score`. Also, as @gm42 noticed #20131 not allows to get `_score` while `post_filter`-ing.\n\nAnother question: is there are a way to apply a filter first in a `post_filter` with boolean condition, and then only in case if it will be not filtered out to apply second filter with script filter?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/249355829","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-249355829","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":249355829,"node_id":"MDEyOklzc3VlQ29tbWVudDI0OTM1NTgyOQ==","user":{"login":"dmitry","id":5091,"node_id":"MDQ6VXNlcjUwOTE=","avatar_url":"https://avatars1.githubusercontent.com/u/5091?v=4","gravatar_id":"","url":"https://api.github.com/users/dmitry","html_url":"https://github.com/dmitry","followers_url":"https://api.github.com/users/dmitry/followers","following_url":"https://api.github.com/users/dmitry/following{/other_user}","gists_url":"https://api.github.com/users/dmitry/gists{/gist_id}","starred_url":"https://api.github.com/users/dmitry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dmitry/subscriptions","organizations_url":"https://api.github.com/users/dmitry/orgs","repos_url":"https://api.github.com/users/dmitry/repos","events_url":"https://api.github.com/users/dmitry/events{/privacy}","received_events_url":"https://api.github.com/users/dmitry/received_events","type":"User","site_admin":false},"created_at":"2016-09-24T09:41:17Z","updated_at":"2016-09-24T09:42:30Z","author_association":"CONTRIBUTOR","body":"As I understand here is already 3 ES users, who have very similar use case and since one year here is no solution for this case.\n\nMy understanding:\n- `_cache` (across multiple ES requests) not allowed for parametrized or non-parametrized script function as they could be undeterministic;\n- script functions cannot be cached to be used across one ES request (first in function_score, then in `aggs`, then in `post_filter`, and afterwards in `sort`);\n- `_score` not accessible in a `post_filter` (#20131), and nobody know when it could be solved;\n- `min_score` is just a tiny optimization, which will not  work in our case (what about `max_score`, why it's missing?);\n\nAfter listing possible optimization variants I find out there are no solution at the moment to write a good ES query to optimizely get filtered, aggregated and sorted results in a resasonable time frame.\n\n@clintongormley  @jpountz \nCan you please at least suggest some additional optimization practices, which are invisible for us?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/249496454","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-249496454","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":249496454,"node_id":"MDEyOklzc3VlQ29tbWVudDI0OTQ5NjQ1NA==","user":{"login":"gm42","id":16498973,"node_id":"MDQ6VXNlcjE2NDk4OTcz","avatar_url":"https://avatars3.githubusercontent.com/u/16498973?v=4","gravatar_id":"","url":"https://api.github.com/users/gm42","html_url":"https://github.com/gm42","followers_url":"https://api.github.com/users/gm42/followers","following_url":"https://api.github.com/users/gm42/following{/other_user}","gists_url":"https://api.github.com/users/gm42/gists{/gist_id}","starred_url":"https://api.github.com/users/gm42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gm42/subscriptions","organizations_url":"https://api.github.com/users/gm42/orgs","repos_url":"https://api.github.com/users/gm42/repos","events_url":"https://api.github.com/users/gm42/events{/privacy}","received_events_url":"https://api.github.com/users/gm42/received_events","type":"User","site_admin":false},"created_at":"2016-09-26T07:18:02Z","updated_at":"2016-09-26T07:32:53Z","author_association":"CONTRIBUTOR","body":"@dmitry the sad truth might be that we need a different technology when it's necessary to perform custom map/reduce at this level. It's a kind-of compute-search-and-throw-away scenario, rather than everything-indexed scenario which seems better covered by ES.\n\nI need to stick with ES for the time being, so I will keep trying to make it fit for my use case - but some tell-tale signs are evident.\n\nMy workaround is to simply get all results (without post_filter on score) and then filter them out on the application side. I know, very inefficient and not scalable, but couldn't find any other approach so far\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/293305415","html_url":"https://github.com/elastic/elasticsearch/issues/10767#issuecomment-293305415","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10767","id":293305415,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MzMwNTQxNQ==","user":{"login":"mausch","id":95194,"node_id":"MDQ6VXNlcjk1MTk0","avatar_url":"https://avatars1.githubusercontent.com/u/95194?v=4","gravatar_id":"","url":"https://api.github.com/users/mausch","html_url":"https://github.com/mausch","followers_url":"https://api.github.com/users/mausch/followers","following_url":"https://api.github.com/users/mausch/following{/other_user}","gists_url":"https://api.github.com/users/mausch/gists{/gist_id}","starred_url":"https://api.github.com/users/mausch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mausch/subscriptions","organizations_url":"https://api.github.com/users/mausch/orgs","repos_url":"https://api.github.com/users/mausch/repos","events_url":"https://api.github.com/users/mausch/events{/privacy}","received_events_url":"https://api.github.com/users/mausch/received_events","type":"User","site_admin":false},"created_at":"2017-04-11T15:44:10Z","updated_at":"2017-04-11T15:44:10Z","author_association":"NONE","body":"Just found this issue, seems to be very similar to one I create a while ago: https://github.com/elastic/elasticsearch/issues/13469","performed_via_github_app":null}]