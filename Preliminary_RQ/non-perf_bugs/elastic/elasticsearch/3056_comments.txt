[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/18099013","html_url":"https://github.com/elastic/elasticsearch/issues/3056#issuecomment-18099013","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3056","id":18099013,"node_id":"MDEyOklzc3VlQ29tbWVudDE4MDk5MDEz","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2013-05-18T11:06:05Z","updated_at":"2013-05-18T11:06:05Z","author_association":"CONTRIBUTOR","body":"Hiya\n\nThis is a really interesting question (and thanks for the runnable gist!)\n\nThe issue is that the nested match_all is only matching docs which have\nnested docs. Really, you just care about whether a doc has any review by a\nregistered member, because all other products get the score of 3. In order\nto do that, we need to expose member.id in the parent doc as well, which we\ncan do by adding `include_in_parent: true` to the nested mapping.\n\nThen we write the query to match docs with member reviews, and calculate\nthe score using your script, and docs without member reviews, which get a\nscore of 3. For this we use a `bool` query with two clauses. Also, set\n`disable_coord` to true, so that the \"pure\" score from each clause comes\nthrough. Otherwise the bool query would divide the score by the number of\nclauses (ie 2).\n\n```\n  \"bool\" : {\n     \"disable_coord\" : 1,\n     \"should\" : [\n        { clause to match docs without member reviews },\n        { clause to match docs with member reviews }\n     ]\n  }\n```\n\nSo the clause WITH member reviews looks like the following:\n\n{\n   \"filtered\" : {\n      \"filter\" : {\n         \"exists\" : {\n            \"field\" : \"review.user.member_id\"\n         }\n      },\n      \"query\" : {\n         \"nested\" : {\n            \"query\" : {\n               \"custom_score\" : {\n                  \"script\" : \"doc[\\u0027review.user.member_id\\u0027].empty\n? 3 : doc[\\u0027review.rate\\u0027].value\",\n                  \"query\" : {\n                     \"match_all\" : {}\n                  }\n               }\n            },\n            \"score_mode\" : \"avg\",\n            \"path\" : \"review\"\n         }\n      }\n   }\n}\n\nThen, the clause to match docs WITHOUT reviews.  Initially, I wrote this:\n\n{\n   \"constant_score\" : {\n      \"boost\" : 3,\n      \"filter\" : {\n         \"missing\" : {\n            \"field\" : \"review.user.member_id\"\n         }\n      }\n   }\n}\n\nBut the score of `3` was being combined with the query norm, and so\nreturning values like 0.9xxxx. Weirdly, the custom_score doesn't get\ncombined with the query norm.  I'm not sure if that is intentional or not,\nbut that's the way it is.  So the way to get a pure score of `3` from the\nabove is to wrap it in a custom_score query, and have the script just\nreturn `3`:\n\n{\n   \"custom_score\" : {\n      \"script\" : \"3\",\n      \"query\" : {\n         \"constant_score\" : {\n            \"filter\" : {\n               \"missing\" : {\n                  \"field\" : \"review.user.member_id\"\n               }\n            }\n         }\n      }\n   }\n},\n\nThe full query is here: https://gist.github.com/clintongormley/5604037\n\nIMPORTANT: you're paying the cost of this calculation at query time, but\nall the information is known at index time.  A much better approach would\nbe to just calculate the avg rating when you index a document and store it\nas a field: `avg_rating`.  Then you can sort by that field.\n\nclint\n\nOn 17 May 2013 21:12, Junjun Zhang notifications@github.com wrote:\n\n> I recently ran into a problem of missing documents in query result when\n> custom score script is used. After some testing, I found that the problem\n> seems occur when the script tries to access a field in a nested doc where a\n> particular root document does not contain any such nested doc.\n> \n> To reproduce the problem, test data and queries can be found here:\n> http://goo.gl/iHOc5. The example may not make much sense in real world,\n> but the idea is to sort products by average rate from users' review. One\n> particular requirement is to always treat anonymous user's rate as 3 and\n> assign rate as 3 for products with no reviews.\n> \n> We can determine whether a user is anonymous or not by checking\n> review.user.member_id field is empty or not:\n> doc['review.user.member_id'].empty, this seems work fine except that\n> products with no reviews are dropped out in the result as the first query\n> example shows. Is this a bug? As there is no query/filter that excludes\n> documents, shouldn't all documents be returned?\n> \n> Also, there seems no way to determine whether a review exists or not. The\n> second query example shows doc['review'].empty does not work, this makes\n> sense because indeed, there is not such field as 'review' under the\n> 'product' index, 'review' is a nested document. However, the question\n> remains: is there a way to determine the existence of a nested doc?\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/elasticsearch/elasticsearch/issues/3056\n> .\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/22767008","html_url":"https://github.com/elastic/elasticsearch/issues/3056#issuecomment-22767008","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3056","id":22767008,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNzY3MDA4","user":{"login":"btiernay","id":2717578,"node_id":"MDQ6VXNlcjI3MTc1Nzg=","avatar_url":"https://avatars3.githubusercontent.com/u/2717578?v=4","gravatar_id":"","url":"https://api.github.com/users/btiernay","html_url":"https://github.com/btiernay","followers_url":"https://api.github.com/users/btiernay/followers","following_url":"https://api.github.com/users/btiernay/following{/other_user}","gists_url":"https://api.github.com/users/btiernay/gists{/gist_id}","starred_url":"https://api.github.com/users/btiernay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btiernay/subscriptions","organizations_url":"https://api.github.com/users/btiernay/orgs","repos_url":"https://api.github.com/users/btiernay/repos","events_url":"https://api.github.com/users/btiernay/events{/privacy}","received_events_url":"https://api.github.com/users/btiernay/received_events","type":"User","site_admin":false},"created_at":"2013-08-16T13:49:06Z","updated_at":"2013-08-16T13:49:49Z","author_association":"NONE","body":"For the future reader, https://github.com/elasticsearch/elasticsearch/issues/3058 was created to address:\n\n> Weirdly, the custom_score doesn't get combined with the query norm.  I'm not sure if that is intentional or not, but that's the way it is. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/51593095","html_url":"https://github.com/elastic/elasticsearch/issues/3056#issuecomment-51593095","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3056","id":51593095,"node_id":"MDEyOklzc3VlQ29tbWVudDUxNTkzMDk1","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-08-08T12:11:39Z","updated_at":"2014-08-08T12:11:39Z","author_association":"CONTRIBUTOR","body":"Closed in favour of #3495\n","performed_via_github_app":null}]