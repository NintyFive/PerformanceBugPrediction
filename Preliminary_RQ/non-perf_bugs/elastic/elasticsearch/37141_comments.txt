[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451446546","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-451446546","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":451446546,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTQ0NjU0Ng==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-01-04T13:42:09Z","updated_at":"2019-01-04T13:42:09Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451527073","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-451527073","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":451527073,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTUyNzA3Mw==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2019-01-04T18:26:50Z","updated_at":"2019-01-04T18:28:21Z","author_association":"MEMBER","body":"I think the two issues described are separate.\r\n\r\n> `nested.foo_alias2` and `nested -> foo_alias2` can both be defined like this, even if one of them points to `parent.foo` while the other points to `parent.foo2`. \r\n\r\nIt looks like it's generally possible to define the same field twice in the mapping, so long as their mapping definitions are compatible and can be merged together. For example, the following mapping is valid, and the first definition happens to 'win out':\r\n\r\n```\r\nPUT index\r\n{\r\n  \"mappings\": {\r\n    \"_doc\": {\r\n      \"properties\": {\r\n          \"nested\": {\r\n              \"properties\": {\r\n                  \"field\": {\r\n                      \"type\":\"keyword\"\r\n                }\r\n              }\r\n          },\r\n          \"nested.field\": {\r\n              \"type\":\"keyword\",\r\n              \"boost\": 3.0\r\n          }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBecause the path of an alias is allowed to be updated, the two different definitions for `nested.foo_alias2` are merged together, and the one with `path: parent.foo` happens to win. Note that this can't happen if the duplicate field is specified at the same level. For example, the following mapping fails with a parsing exception:\r\n\r\n```\r\nPUT index\r\n{\r\n  \"mappings\": {\r\n    \"_doc\": {\r\n      \"properties\": {\r\n          \"nested.field\": {\r\n              \"type\":\"keyword\"\r\n          },\r\n          \"nested.field\": {\r\n              \"type\":\"keyword\"\r\n          }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis makes me think we should discuss the behavior around duplicate mapping entries more broadly. I'm happy to file another issue with details. Finally for context, I wanted to note that in #36418 we're discussing whether the path of a field alias should be updatable at all, or if this is too prone to bugs.\r\n\r\n> `_field_caps` doesn't return a nested field of type object, only `nested.foo_alias2` is returned\r\n\r\n@jimczi clarified offline that we follow the path of the concrete field when we resolve the hierarchy. So `nested.foo_alias2` will check the `parent.foo2` path and only include `parent` in the response. If we'd like this behavior to change, it would be great to file a new issue focused on the `_field_caps` API and field aliases.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451561451","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-451561451","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":451561451,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTU2MTQ1MQ==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2019-01-04T20:37:46Z","updated_at":"2019-01-04T20:37:46Z","author_association":"CONTRIBUTOR","body":"@jtibshirani thank you for the details.\r\nThere is still one unanswered question: \r\n> are . dots allowed in fields definitions for alias type of fields? If they are, shouldn't have the same behavior as a normal dotted field definition?\r\n\r\nIf I define this mapping:\r\n\r\n```\r\n        \"properties\" : {\r\n          \"parent\": {\r\n\t\t\t  \"type\" : \"keyword\"\r\n          },\r\n          \"a.b.c\": {\r\n          \t\"type\":\"alias\",\r\n          \t\"path\":\"parent\"\r\n          },\r\n          \"x.y.z\": {\r\n          \t\"type\":\"keyword\"\r\n          }\r\n        }\r\n```\r\n\r\nand call `_field_caps` on the index, I get confusing a output:\r\n\r\n```\r\n        \"parent\": {\r\n            \"keyword\": {\r\n                \"type\": \"keyword\",\r\n                \"searchable\": true,\r\n                \"aggregatable\": true\r\n            }\r\n        },\r\n        \"x.y\": {\r\n            \"object\": {\r\n                \"type\": \"object\",\r\n                \"searchable\": false,\r\n                \"aggregatable\": false\r\n            }\r\n        },\r\n        \"a.b.c\": {\r\n            \"keyword\": {\r\n                \"type\": \"keyword\",\r\n                \"searchable\": true,\r\n                \"aggregatable\": true\r\n            }\r\n        },\r\n        \"x\": {\r\n            \"object\": {\r\n                \"type\": \"object\",\r\n                \"searchable\": false,\r\n                \"aggregatable\": false\r\n            }\r\n        },\r\n        \"x.y.z\": {\r\n            \"keyword\": {\r\n                \"type\": \"keyword\",\r\n                \"searchable\": true,\r\n                \"aggregatable\": true\r\n            }\r\n        }\r\n```\r\n\r\n`x.y.z` is \"expanded\" in a hierarchy of `object` fields, while the `alias` field `a.b.c` is not.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451568002","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-451568002","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":451568002,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTU2ODAwMg==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2019-01-04T21:04:29Z","updated_at":"2019-01-04T21:04:29Z","author_association":"MEMBER","body":"Yes, dots are allowed in the names of field aliases, since they have the same structure as any other field (and can appear under an object mapping, etc.). I think what's happening in your example is the same as what I described above:\r\n\r\n> @jimczi clarified offline that we follow the path of the concrete field when we resolve the hierarchy. So nested.foo_alias2 will check the parent.foo2 path and only include parent in the response.\r\n\r\nWhen determining what object mappings to return, we first resolve alias fields to their concrete fields, then look at all parents of those concrete fields. This means that the object mappings `a` and `a.b` are never returned. It would be good to open a new issue to discuss this behavior, and if we think it should change.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452762304","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-452762304","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":452762304,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1Mjc2MjMwNA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2019-01-09T16:35:16Z","updated_at":"2019-01-09T16:43:35Z","author_association":"MEMBER","body":"*tl;dr*\r\n\r\nI've provided a workaround in SQL so there's no action that needs to be taken; I'm posting this mainly to record my findings in case somebody else bumps into this in the future. \r\nFor the record, the approach taken in SQL is akin the mapping API - namely the structure for a dotted alias is visible to the user.\r\n\r\n*long story*\r\n\r\nWhile working on the fix for #37224, I've with both the mapping and the field caps API and like @astefan I was surprised by the behavior between the two APIs in how they treat `object` mapping.\r\n\r\nWhile the mapping API always reports the full hierarchy for a field regardless of its type (alias or not), `field_caps` does not.\r\nFurther more there's no property to indicate why this occurs (namely the target field is an alias) and one has to infer what's going by looking at the mapping API which provides information that does not appear in `field_caps`.\r\n\r\nTo wit, take the following mapping:\r\n```json\r\n{\r\n  \"mappings\": {\r\n    \"doc\": {\r\n      \"properties\": {\r\n        \"x.y\" : { \"type\" : \"short\" },\r\n        \"a.b\" : { \"type\" : \"alias\" , \"path\" : \"x.y\" }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nMapping API returns:\r\n```\r\nGET /an_alias/_mapping\r\n\r\n{\r\n  \"an_alias\": {\r\n    \"mappings\": {\r\n      \"doc\": {\r\n        \"properties\": {\r\n          \"a\": {\r\n            \"properties\": {\r\n              \"b\": {\r\n                \"type\": \"alias\",\r\n                \"path\": \"x.y\"\r\n              }\r\n            }\r\n          },\r\n          \"x\": {\r\n            \"properties\": {\r\n              \"y\": {\r\n                \"type\": \"short\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhich shows the object structure (notice `a` and `x`).\r\n\r\n`field_caps` however provides a different view (I've eliminated fields starting with `_`):\r\n\r\n```\r\nGET /an_alias/_field_caps?fields=*\r\n\r\n{\r\n  \"fields\": {\r\n    \"x.y\": {\r\n      \"short\": {\r\n        \"type\": \"short\",\r\n        \"searchable\": true,\r\n        \"aggregatable\": true\r\n      }\r\n    },\r\n    \"a.b\": {\r\n      \"short\": {\r\n        \"type\": \"short\",\r\n        \"searchable\": true,\r\n        \"aggregatable\": true\r\n      }\r\n    },\r\n    \"x\": {\r\n      \"object\": {\r\n        \"type\": \"object\",\r\n        \"searchable\": false,\r\n        \"aggregatable\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nnotice there's `x` but there's no `a`.\r\n\r\nI realize these are two different APIs: one is about mapping, the other one, fairly advanced and about fields. However the fact that fields of type `object` are *sometimes* returned in one vs *always* in the other is unexpected.\r\n\r\nAsking for particular fields also has a peculiar behavior.\r\nTake the response for a concrete field:\r\n\r\n```\r\nGET /an_alias/_field_caps?fields=x.y\r\n\r\n{\r\n  \"fields\": {\r\n    \"x.y\": {\r\n      \"short\": {\r\n        \"type\": \"short\",\r\n        \"searchable\": true,\r\n        \"aggregatable\": true\r\n      }\r\n    },\r\n    \"x\": {\r\n      \"object\": {\r\n        \"type\": \"object\",\r\n        \"searchable\": false,\r\n        \"aggregatable\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n`a.b` is not included in the pattern for `x.y` which is expected.\r\n\r\nHowever for an alias field:\r\n\r\n```\r\nGET /an_alias/_field_caps?fields=a.b\r\n\r\n{\r\n  \"fields\": {\r\n    \"a.b\": {\r\n      \"short\": {\r\n        \"type\": \"short\",\r\n        \"searchable\": true,\r\n        \"aggregatable\": true\r\n      }\r\n    },\r\n    \"x\": {\r\n      \"object\": {\r\n        \"type\": \"object\",\r\n        \"searchable\": false,\r\n        \"aggregatable\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n`x` is being returned alongside `x.y`. I find this confusing since on one hand the initial alias name is preserved yet its hierarchy is not.\r\n(I think) I understand the reasons behind the behavior however as a user of both APIs I was quite surprised by the outcome. \r\nSome potential improvements can be:\r\n1. return the hierarchy for alias fields, just like `mapping` does (so for `a.b` alias, there would be `a` returned as well)\r\n2. signal that a field is an alias by specifying its target - this clarifies the rest of the structure which has a different naming then the potentially requested include:\r\n```\r\nGET /an_alias/_field_caps?fields=a.b\r\n\r\n{\r\n  \"fields\": {\r\n    \"a.b\": {\r\n      \"short\": {\r\n        \"type\": \"short\",\r\n        \"searchable\": true,\r\n        \"aggregatable\": true,\r\n        \"alias\" : \"x.y\"\r\n      }\r\n    },\r\n    \"x\": {\r\n      \"object\": {\r\n        \"type\": \"object\",\r\n        \"searchable\": false,\r\n        \"aggregatable\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n3. explain the behavior for `alias` types in the docs (maybe the example in this ticket is good enough?)\r\n\r\nThanks,","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/454087651","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-454087651","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":454087651,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NDA4NzY1MQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2019-01-14T17:22:21Z","updated_at":"2019-01-14T17:22:21Z","author_association":"MEMBER","body":"As Julie noticed in this [comment](https://github.com/elastic/elasticsearch/issues/37141#issuecomment-451527073), there are two issues outlined here. The first one about declaring a field with the same hierarchy in two ways should be tracked in a separate issue.\r\nWe discussed the second issue offline and agreed that we prefer to keep the alias field transparent in the `_field_caps` API. The `_field_caps` API is useful to merge multiple fields coming from different indices     so it makes sense to not treat alias fields differently (they can be alias in some indices and concrete fields in others). For these reasons I am closing this issue, we will keep the current behavior in `_field_caps` regarding aliases.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/454170051","html_url":"https://github.com/elastic/elasticsearch/issues/37141#issuecomment-454170051","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37141","id":454170051,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NDE3MDA1MQ==","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"created_at":"2019-01-14T21:34:39Z","updated_at":"2019-01-14T21:34:39Z","author_association":"MEMBER","body":"As a note, I filed #37437 to discuss the question around duplicate field mappings.","performed_via_github_app":null}]