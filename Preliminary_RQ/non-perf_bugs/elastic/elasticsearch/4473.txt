{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/4473","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4473/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4473/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4473/events","html_url":"https://github.com/elastic/elasticsearch/issues/4473","id":24389521,"node_id":"MDU6SXNzdWUyNDM4OTUyMQ==","number":4473,"title":"ES with Multi-Cluster Search Support","user":{"login":"gseng","id":6201111,"node_id":"MDQ6VXNlcjYyMDExMTE=","avatar_url":"https://avatars2.githubusercontent.com/u/6201111?v=4","gravatar_id":"","url":"https://api.github.com/users/gseng","html_url":"https://github.com/gseng","followers_url":"https://api.github.com/users/gseng/followers","following_url":"https://api.github.com/users/gseng/following{/other_user}","gists_url":"https://api.github.com/users/gseng/gists{/gist_id}","starred_url":"https://api.github.com/users/gseng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gseng/subscriptions","organizations_url":"https://api.github.com/users/gseng/orgs","repos_url":"https://api.github.com/users/gseng/repos","events_url":"https://api.github.com/users/gseng/events{/privacy}","received_events_url":"https://api.github.com/users/gseng/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2013-12-16T23:40:19Z","updated_at":"2014-01-14T00:02:54Z","closed_at":"2014-01-13T23:37:02Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## ES with Multi-Cluster Search Support\n\nIt'd be nice to be able to query across multiple clusters and get their aggregated results.\n\nOur initial motivation is to view Kibana results across multiple clusters. See: [Enhancement: Allow conntections to multiple ES backends from a single Kibana instance](https://github.com/elasticsearch/kibana/issues/22).\n\nHowever, since we also use/query ES directly, a proxy would work far better than changing Kibana.\n\nIn the discussion above, it was decided (by Shay) that the place to do it would be at the ES level.\n\nThe following is a proposal to achieve it at the ES level. This is some very early planning and I've decided to post it early to make sure I'm not duplicating work or am on a totally wrong path (which is totally possible). Any feedback/comments are appreciated.\n## Proposal\n\nThe general plan is to make a query only node (termed 'search load balancer' in `elasticsearch.yml`) and have a list of cluster names that we want to query.\n\nDuring a search, the node will query from each of the shards in each of the clusters and aggregate the results.\n## Details\n- Make a query only node\n  - In `elasticsearch.yml`\n    - `node.master: false`\n    - `node.data:   false`\n  - I'm hoping this means that we can isolate code changes to only the search portion.\n- Accommodate multiple clusters\n  - Have `ZenDiscover` reach out to all the listed clusters to get their state.\n  - `ClusterService` will contain a map of `ClusterName -> ClusterState`.\n    - To maintain the interface, `clusterService.state()` will just return the first cluster.\n    - We can have another interface that will allow us to get the the cluster map.\n  - `MulticastZenPing` will have to listen for changes in the listed clusters and update the corresponding cluster state.\n- Searching across multiple clusters\n  - I've only looked at `TransportSearchTypeAction` and `TransportSearchQueryThenFetchAction` so far.\n  - In the `BaseAsyncAction`, we'll need to get all the relevant shards across each cluster and query them (`sendExecuteFirstPhase`).\n  - We change `expectedSuccessfulOps` and `expectedTotalOps` to the multi-cluster counts so that in `onFirstPhaseResult` we know when to move on (`innerMoveToSecondPhase`).\n  - In `moveToSecondPhase`, we again use the metadata from each cluster and do the actual fetch of the documents.\n  - Finally in `innerFinishHim`, we merge all the results with the `SearchPhaseController` and return the response via the normally.\n\nThanks!\n","closed_by":{"login":"gseng","id":6201111,"node_id":"MDQ6VXNlcjYyMDExMTE=","avatar_url":"https://avatars2.githubusercontent.com/u/6201111?v=4","gravatar_id":"","url":"https://api.github.com/users/gseng","html_url":"https://github.com/gseng","followers_url":"https://api.github.com/users/gseng/followers","following_url":"https://api.github.com/users/gseng/following{/other_user}","gists_url":"https://api.github.com/users/gseng/gists{/gist_id}","starred_url":"https://api.github.com/users/gseng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gseng/subscriptions","organizations_url":"https://api.github.com/users/gseng/orgs","repos_url":"https://api.github.com/users/gseng/repos","events_url":"https://api.github.com/users/gseng/events{/privacy}","received_events_url":"https://api.github.com/users/gseng/received_events","type":"User","site_admin":false},"performed_via_github_app":null}