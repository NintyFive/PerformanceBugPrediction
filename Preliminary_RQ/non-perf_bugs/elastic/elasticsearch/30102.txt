{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30102","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30102/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30102/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30102/events","html_url":"https://github.com/elastic/elasticsearch/issues/30102","id":317455041,"node_id":"MDU6SXNzdWUzMTc0NTUwNDE=","number":30102,"title":"CCR Rest API design","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"labels":[{"id":912824565,"node_id":"MDU6TGFiZWw5MTI4MjQ1NjU=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/CCR","name":":Distributed/CCR","color":"0e8a16","default":false,"description":"Issues around the Cross Cluster State Replication features"},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2017-09-21T12:52:21Z","updated_at":"2019-03-08T15:22:05Z","closed_at":"2019-03-08T15:22:04Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"*Original comment by @bleskes:*\n\n## Top Level Overview\r\n\r\nThis is a meta issue to capture all the initial thoguhts and design of the REST API for the LINK REDACTED. We currently see the need for the following API, each described in more details below:\r\n\r\n- Creates a new index to follow a remote index  \r\n- Convert an existing index to a following index\r\n- Disconnect a following index\r\n- Monitoring, most specificly expose the currentlag\r\n- Register a auto follow pattern to automatically create following indices for newly created indices on the remote cluster (phase 2)\r\n\r\nThe API design assumes we will use the remote cluster configuration of Cross Cluster Search (which will require minor tweaks not described here).\r\n\r\n## Create a following index\r\n\r\nThis API is used to create a new index on the local cluster that immediatley start following an index on a remote cluster. The newly create index will have the same meta data as the remote index. The default name will be identical but can optionally changed.\r\n\r\nNotes:\r\n- We could shorten this to a url only scheme (/_xpack/xdcr/_follow/{{remote:index}}), but I think a body is good for future proofing\r\n- Should not apply local index templates\r\n\r\n```\r\nPUT /_xpack/xdcr/_create_and_follow/\r\nPUT {index}/_xpack/xdcr/_create_and_follow/ (create with explicit name)\r\n{\r\n    \"leader\": { // we may want shorten this based on remote_cluster:index notation.\r\n        \"index\": \"name\",  \r\n        \"remote_cluster\": \"name\" // refers to a remote cluster in cross cluster search config\r\n    }\r\n}\r\n```\r\n\r\n## Make an existing index become a follower\r\n\r\nThis API takes an existing index and adds the needed metadata to make it a follower. The API validates that the index is closed but doesn't close it nor open it. This needs to be done by explicit calls to the dedicated API.\r\n\r\nThis API also needs to validate that the remote following index is compatible with the local one. This includes the mapping and metadata but also some kind of sanity check using history uuids. Caveats here include people restoring this index from a snapshot, which will destroy it's history uuid. Sadly this is a likely scenario as we plan to use snapshot and restore as a way to boostrap indices initially.\r\n\r\n```\r\nPOST {index}/_xpack/xdcr/_follow \r\n{\r\n    \"leader\": { // we may shorten this based on remote_cluster:index notation.\r\n        \"index\": \"name\",  \r\n        \"remote_cluster\": \"name\"\r\n    }\r\n}\r\n```\r\n\r\n## Disconnect a following index\r\n\r\nTakes a following index and makes it a \"normal\" one. It should verify that the index is closed before doing so.\r\n\r\n```\r\nPOST {index}/_xpack/xdcr/_unfollow\r\n```\r\n\r\n## Monitor/Stats\r\n\r\nThe goal of the API is to give easy access to statiscs that are relevant for CCR. This information is exposed by index stats and job status but you'll quite an expert knowledge to figure out how to tie things together. To that end we offer an API that does the heavy lifing. \r\n\r\n```\r\nPOST /_xpack/xdcr/_stats\r\n```\r\n\r\nreturns a per index, per shard map of lag information\r\n\r\n```\r\n{\r\n    \"index\": {\r\n        \"_metadata\": {\r\n            ... anything relevant to syncing of mappings etc.\r\n        },\r\n        \"0\": {\r\n            \"completed_upto\": 1024,\r\n            \"leader_max_seq_no\": 1050, // the task fetches this information and stores it locally\r\n            \"lag\": 26 // convenience number subtracting leader_max_seq_no from  completed_upto  \r\n            ... inline any interestig information from the task,\r\n            \"error\": ... (if the last job fetch had an error, report here)\r\n            \"last_fetch\": \"20170131...\"\r\n        }, ...\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Register an auto follow patterns (phase 2)\r\n\r\nRegister a auto follow pattern to automatically create following indices for newly created indices on the remote cluster (phase 2)\r\n\r\nThis is a rough sketch. We don't plan to implement this at first phase of the project. That said, it's good to start discussion going on how this may look like and how it may or may not affect the components being built. This API will be important for the timebased data use case\r\n\r\n```\r\nPOST /_xpack/xdcr/_autofollow/{{remote_cluster}}\r\n{\r\n    \"index_pattern\": \"logstash-*,.kibana\",\r\n    \"include_deletes\": true // do we really need auto delete? people can go and delete themselves, and automatic deletes are obvsiouly dangerous and complicates things.\r\n}\r\n```\r\n\r\n","closed_by":{"login":"dnhatn","id":13474362,"node_id":"MDQ6VXNlcjEzNDc0MzYy","avatar_url":"https://avatars3.githubusercontent.com/u/13474362?v=4","gravatar_id":"","url":"https://api.github.com/users/dnhatn","html_url":"https://github.com/dnhatn","followers_url":"https://api.github.com/users/dnhatn/followers","following_url":"https://api.github.com/users/dnhatn/following{/other_user}","gists_url":"https://api.github.com/users/dnhatn/gists{/gist_id}","starred_url":"https://api.github.com/users/dnhatn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnhatn/subscriptions","organizations_url":"https://api.github.com/users/dnhatn/orgs","repos_url":"https://api.github.com/users/dnhatn/repos","events_url":"https://api.github.com/users/dnhatn/events{/privacy}","received_events_url":"https://api.github.com/users/dnhatn/received_events","type":"User","site_admin":false},"performed_via_github_app":null}