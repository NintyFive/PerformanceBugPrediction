{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/2063","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2063/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2063/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2063/events","html_url":"https://github.com/elastic/elasticsearch/issues/2063","id":5317558,"node_id":"MDU6SXNzdWU1MzE3NTU4","number":2063,"title":"Add regex filter on terms_stats facet","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2012-06-28T08:11:35Z","updated_at":"2012-09-03T07:30:42Z","closed_at":"2012-09-03T07:30:42Z","author_association":"MEMBER","active_lock_reason":null,"body":"As discussed with @clintongormley in the mailing list : https://groups.google.com/forum/?hl=fr&fromgroups#!topic/elasticsearch/E0Y0Ew7NlxE\n\nIn short :\nI would like to be able to restrict results only on terms of a given length in a terms_stats facet. \n\nMore details :\nUse case Gist is here : https://gist.github.com/3007168\n\nLetâ€™s say I have a document like this :\n\n``` json\n{\n  \"id\":\"212468504455168001\",\n  \"location\":{\n    \"lat\":46.20715933,\n    \"lon\":6.14494212\n  },\n  \"lat\":46.20715933,\n  \"lng\":6.14494212,\n  \"path\":\"1022232003013110123223112\",\n  \"created_at\":1339491413\n}\n```\n\nI defined first an analyzer and a mapping for field path:\n\n``` json\n      \"analyzer\":{\n        \"myanalyzer\":{\n          \"type\":\"custom\",\n          \"tokenizer\":\"mytokenizer\"\n        }\n      },\n      \"tokenizer\":{\n        \"mytokenizer\":{\n          \"type\":\"edgeNGram\",\n          \"min_gram\":\"1\",\n          \"max_gram\":\"25\",\n          \"side\":\"front\"\n        }\n      }\n```\n\nThen I defined a mapping for field path:\n\n``` json\n        \"path\":{\"type\":\"string\", \"analyzer\":\"myanalyzer\"}\n```\n\nAs you can see, I apply a EdgeNGram on path field. So my path is broken in 25 tokens like : 1,10,102,1022,...,1022232003013110123223112\n\nMy need is now to compute facets on this field as a key, but only for tokens with a size of x (x depends to the user).\n\nSo if x is 4, I want to compute on the first 4 characters of my path.\n\nMy facet is :\n\n``` json\n    \"path_lat\":{\n      \"terms_stats\":{\n        \"key_field\":\"path\",\n        \"value_field\":\"lat\",\n        \"size\":0\n      },\n      \"facet_filter\":{\n        \"geo_bounding_box\":{\n          \"location\":{\n            \"top_left\":{ \"lat\":84.4740645845916,  \"lon\":-179.999999 },\n            \"bottom_right\":{ \"lat\":-75.67219739055291, \"lon\":179.999999 }\n          }\n        }\n      }\n    }\n```\n\nMy concern is that I get facets for the 25 tokens for each document.\n\n``` json\n{\n  \"took\" : 3,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 3,\n    \"failed\" : 2,\n    \"failures\" : [ {\n      \"index\" : \"dpitestcase\",\n      \"shard\" : 3,\n      \"status\" : 500,\n      \"reason\" : \"No active shards\"\n    }, {\n      \"index\" : \"dpitestcase\",\n      \"shard\" : 4,\n      \"status\" : 500,\n      \"reason\" : \"No active shards\"\n    } ]\n  },\n  \"hits\" : {\n    \"total\" : 1,\n    \"max_score\" : 1.0,\n    \"hits\" : [ ]\n  },\n  \"facets\" : {\n    \"path_lat\" : {\n      \"_type\" : \"terms_stats\",\n      \"missing\" : 0,\n      \"terms\" : [ {\n        \"term\" : \"1022232003013110123223112\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223200301311012322311\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222320030131101232231\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022232003013110123223\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223200301311012322\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222320030131101232\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022232003013110123\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223200301311012\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222320030131101\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022232003013110\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223200301311\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222320030131\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022232003013\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223200301\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222320030\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022232003\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223200\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222320\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022232\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102223\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10222\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1022\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"102\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"10\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      }, {\n        \"term\" : \"1\",\n        \"count\" : 1,\n        \"total_count\" : 1,\n        \"min\" : 46.20715933,\n        \"max\" : 46.20715933,\n        \"total\" : 46.20715933,\n        \"mean\" : 46.20715933\n      } ]\n    }\n  }\n}\n```\n\nBut, I only need to compute facet on the edgeNGram with a length of 4.\n","closed_by":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"performed_via_github_app":null}