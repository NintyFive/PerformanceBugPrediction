{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/397","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/397/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/397/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/397/events","html_url":"https://github.com/elastic/elasticsearch/issues/397","id":342551,"node_id":"MDU6SXNzdWUzNDI1NTE=","number":397,"title":"Mapper: Dynamic Template Support","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":49729,"node_id":"MDU6TGFiZWw0OTcyOQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.12.0","name":"v0.12.0","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2010-10-01T14:55:30Z","updated_at":"2010-10-14T10:56:14Z","closed_at":"2010-10-01T21:56:11Z","author_association":"MEMBER","active_lock_reason":null,"body":"Dynamic templates allow to define mapping templates that will be applied when dynamic introduction of fields / objects happens. \n\nFor example, we might want to have all fields to be stored by default, or all `string` fields to be stored, or have `string` fields to always be indexed as `multi_field` once `analyzed` and once `not_analyzed`. Here is a simple example:\n\n```\n{\n    \"person\" : {\n        \"dynamic_templates\" : [\n            {\n                \"template_1\" : {\n                    \"match\" : \"multi*\",\n                    \"mapping\" : {\n                        \"type\" : \"multi_field\",\n                        \"fields\" : {\n                            \"{name}\" : {\"type\": \"{dynamic_tpye}\", \"index\" : \"analyzed\", \"store\" : \"yes\"},\n                            \"org\" : {\"type\": \"{dynamic_type}\", \"index\" : \"not_analyzed\", \"store\" : \"yes\"}\n                        }\n                    }\n                }\n            },\n            {\n                \"template_2\" : {\n                    \"match\" : \"*\",\n                    \"match_mapping_type\" : \"string\",\n                    \"mapping\" : {\n                        \"type\" : \"string\",\n                        \"index\" : \"not_analyzed\"\n                    }\n                }\n            }\n        ]\n    }\n}\n```\n\nThe above mapping will create a `multi_field` mapping for all field names starting with `multi`, and will map all `string` types to be `not_analyzed`.\n\nThe `dynamic_templates` section can be placed only on the root object. and it is applied to all inner objects / fields.\n\nDynamic templates are named to allow for simple merge behavior. A new mapping, just with a new template can be \"put\" and that template will be added, or if it has the same name, the template will be replaced.\n\nThe `match` allow to define matching on the field name. An `unmatch` option is also available to exclude fields if they do match on `match`. The `match_mapping_type` controls if this template will be applied only for dynamic fields of the specified type (as guessed by the json format).\n\nThe format of all the matching is `simple` format, allowing to use `*` as a matching element supporting simple patterns such as `xxx*`, `*xxx`, `xxx*yyy` (with arbitrary number of pattern types), as well as direct equality. The `match_pattern` can be set to `regex` to allow for regular expression based matching.\n\nThe `mapping` element provides the actual mapping definition. The `{name}` keyword can be used and will be replaced with the actual dynamic field name being introduced. The `{dynamic_type}` (or `{dynamicType}`) can be used and will be replaced with the mapping derived based on the field type (or the derived type, like `date`).\n\nComplete generic settings can also be applied, for example, to have all mappings be stored, just set:\n\n```\n{\n    \"person\" : {\n        \"dynamic_templates\" : [\n            {\n                \"store_generic\" : {\n                    \"match\" : \"*\",\n                    \"mapping\" : {\n                        \"store\" : \"yes\"\n                    }\n                }\n            }\n        ]\n    }\n}\n```\n","closed_by":null,"performed_via_github_app":null}