{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/10788","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10788/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10788/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10788/events","html_url":"https://github.com/elastic/elasticsearch/issues/10788","id":70710439,"node_id":"MDU6SXNzdWU3MDcxMDQzOQ==","number":10788,"title":"Integration testing framework overrides System.out which breaks logging output to console","user":{"login":"Unisay","id":1009751,"node_id":"MDQ6VXNlcjEwMDk3NTE=","avatar_url":"https://avatars1.githubusercontent.com/u/1009751?v=4","gravatar_id":"","url":"https://api.github.com/users/Unisay","html_url":"https://github.com/Unisay","followers_url":"https://api.github.com/users/Unisay/followers","following_url":"https://api.github.com/users/Unisay/following{/other_user}","gists_url":"https://api.github.com/users/Unisay/gists{/gist_id}","starred_url":"https://api.github.com/users/Unisay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Unisay/subscriptions","organizations_url":"https://api.github.com/users/Unisay/orgs","repos_url":"https://api.github.com/users/Unisay/repos","events_url":"https://api.github.com/users/Unisay/events{/privacy}","received_events_url":"https://api.github.com/users/Unisay/received_events","type":"User","site_admin":false},"labels":[{"id":60445228,"node_id":"MDU6TGFiZWw2MDQ0NTIyOA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Etest","name":">test","color":"5319e7","default":false,"description":"Issues or PRs that are addressing/adding tests"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2015-04-24T14:55:45Z","updated_at":"2016-01-18T13:02:37Z","closed_at":"2016-01-18T13:02:37Z","author_association":"NONE","active_lock_reason":null,"body":"First of all in a separate Thread `org.apache.lucene.util.TestRuleLimitSysouts` gets loaded:\n\n```\nat org.apache.lucene.util.TestRuleLimitSysouts.<clinit>(TestRuleLimitSysouts.java:79)\nat org.apache.lucene.util.LuceneTestCase.<clinit>(LuceneTestCase.java:552)\nat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:35)\nat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\nat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\nat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\nat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\nat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\nat java.lang.Thread.run(Thread.java:745)\n```\n\nIt contains following static init block:\n\n```\n  /**\n   * We capture system output and error streams as early as possible because\n   * certain components (like the Java logging system) steal these references and\n   * never refresh them.\n   * \n   * Also, for this exact reason, we cannot change delegate streams for every suite.\n   * This isn't as elegant as it should be, but there's no workaround for this.\n   */\n  static {\n    System.out.flush();\n    System.err.flush();\n\n    final String csn = Charset.defaultCharset().name();\n    capturedSystemOut = new DelegateStream(System.out, csn, bytesWritten);\n    capturedSystemErr = new DelegateStream(System.err, csn, bytesWritten);\n\n    System.setOut(capturedSystemOut.printStream);\n    System.setErr(capturedSystemErr.printStream);\n  }\n```\n\nAs you can see `System.out` is overridden here. \nThe problem with `DelegateStream capturedSystemOut` which replaces original stream is that it also limits number of bytes that could be output:\n\n```\nprivate void validateClassAnnotations() {\n    Class<?> target = RandomizedTest.getContext().getTargetClass();\n    if (target.isAnnotationPresent(Limit.class)) {\n      int bytes = target.getAnnotation(Limit.class).bytes();\n      if (bytes < 0 || bytes > 1 * 1024 * 1024) {\n        throw new AssertionError(\"The sysout limit is insane. Did you want to use \"\n            + \"@\" + LuceneTestCase.SuppressSysoutChecks.class.getName() + \" annotation to \"\n            + \"avoid sysout checks entirely?\");\n      }\n    }\n  }\n```\n\nand somehow removes line-ending chars (\\n) so that all logging output which goes to console consists of many logging event clued together into one big line.\n\nSince original output stream is never returned back it also affects all output which happens in the same JVM - e.g. log output formatting of other integration tests is broken.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}