[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161030076","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161030076","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161030076,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTAzMDA3Ng==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T16:55:56Z","updated_at":"2015-12-01T16:55:56Z","author_association":"MEMBER","body":"My vote would be for number three or four:\n\n> Option 3: Add SORTED doc values to _type and _id\n> Option 4: Add SORTED doc values to _type and BINARY to _id\n\nWith #14783 we already enable doc values for `_type`, so it makes sense to individually call out the `_id` as well. This also allows changes to happen to `_type` without necessarily breaking `_id`.\n\nIn my experience, most users do not use random sorting, but sorting on `_id` is not very common either. With only sorting in mind, I would expect to see `_id` used for non-random sorting a lot more than for random sorting. However, for other use cases, such as referencing the `_id` in other scenarios that use fielddata (e.g., rarely, but sometimes in aggregations, as well as scripts), it may tip it in favor of being binary.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161036151","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161036151","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161036151,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTAzNjE1MQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T17:12:00Z","updated_at":"2015-12-01T17:12:00Z","author_association":"CONTRIBUTOR","body":"There is a _huge_ difference between `_type` and `_id` when it comes to the expense of docvalues.\n\n`_type` is a lowish cardinality field. This means if you have only 2 unique values `foo` and `bar`, lucene will deduplicate this and write 1 bit per document. If you only have 1 unique `type` (also common), we will write 0 bits per document, each segment just has in the metadata \"all docs have value `foo`: it costs nothing). So for 10M documents with 2 types, docvalues for this field costs a little over a megabyte.\n\nOn the other hand unique ids are high cardinality by definition: deduplication does nothing. Either choice is extremely costly in comparison. Lets consider 10M documents with ids of length in bytes 16 each and make some guesses:\n- BINARY might you ~ 160MB for the bytes (10M \\* 16). That is how binary works: its just a straightforward encoding of what you gave it. If the IDs do not have a fixed length, but are instead variable length, then there are additional costs.\n- SORTED might cost you ~160MB for the bytes (10M \\* 16) and additional 30MB (10M \\* 24bpv) for ordinals. The bytes are prefix compressed in this case, because access by ordinal is more important, but for randomish ids this compression will probably not be very efficient. Access to the bytes is also slower, that is the downside of prefix compression (which likely does not help).\n\nI just want to make it clear this is apples and oranges. The fact we turned on docvalues for type is irrelevant when it comes to unique ids. We need very strong use cases and features IMO if we are going to incur this cost.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161037816","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161037816","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161037816,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTAzNzgxNg==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T17:18:05Z","updated_at":"2015-12-01T17:18:05Z","author_association":"MEMBER","body":"Very good info @rmuir, as usual. It makes me think that `_id` supporting doc values should exist (particularly in light of #15155), but it should be opt-in.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161038415","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161038415","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161038415,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTAzODQxNQ==","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T17:20:21Z","updated_at":"2015-12-01T17:20:21Z","author_association":"CONTRIBUTOR","body":"I think it's actually 20 bytes for ES's auto-generated IDs (15 fully binary bytes for the Flake ID, and 20 bytes once it's Base64 encoded) ... but, yeah, this would be a big cost ...\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161039291","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161039291","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161039291,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTAzOTI5MQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T17:23:51Z","updated_at":"2015-12-01T17:23:51Z","author_association":"CONTRIBUTOR","body":"Why do we base64? This probably bloats the terms dict today.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161041057","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161041057","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161041057,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTA0MTA1Nw==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T17:30:59Z","updated_at":"2015-12-01T17:30:59Z","author_association":"MEMBER","body":"> It makes me think that _id supporting doc values should exist \n\nWhy can't a user store this in their own field if they want to do something crazy with it? I don't think we should add back configurability for metadata fields, even if it is just one. It was a lot of work to remove that (#8143), and these are our fields, for internal use by elasticsearch. Edge cases like described in  #15155 can be handled by a user field with doc values enabled, if they want to do such a crazy thing.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161042056","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-161042056","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":161042056,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTA0MjA1Ng==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T17:34:55Z","updated_at":"2015-12-01T17:34:55Z","author_association":"MEMBER","body":"But edge cases like #15155 cannot be handled without some other special handling because it's the access of the `_id` that is the slowdown. Adding a doc value field does not bypass that cost.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/166457908","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-166457908","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":166457908,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NjQ1NzkwOA==","user":{"login":"eeeebbbbrrrr","id":5117238,"node_id":"MDQ6VXNlcjUxMTcyMzg=","avatar_url":"https://avatars3.githubusercontent.com/u/5117238?v=4","gravatar_id":"","url":"https://api.github.com/users/eeeebbbbrrrr","html_url":"https://github.com/eeeebbbbrrrr","followers_url":"https://api.github.com/users/eeeebbbbrrrr/followers","following_url":"https://api.github.com/users/eeeebbbbrrrr/following{/other_user}","gists_url":"https://api.github.com/users/eeeebbbbrrrr/gists{/gist_id}","starred_url":"https://api.github.com/users/eeeebbbbrrrr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eeeebbbbrrrr/subscriptions","organizations_url":"https://api.github.com/users/eeeebbbbrrrr/orgs","repos_url":"https://api.github.com/users/eeeebbbbrrrr/repos","events_url":"https://api.github.com/users/eeeebbbbrrrr/events{/privacy}","received_events_url":"https://api.github.com/users/eeeebbbbrrrr/received_events","type":"User","site_admin":false},"created_at":"2015-12-21T23:31:28Z","updated_at":"2015-12-21T23:31:28Z","author_association":"NONE","body":"Hi all!  @pickypg linked this issue to me because he knows it's near and dear to my heart.\n\nMy exact use case (shameless plug:  @zombodb:  https://github.com/zombodb/zombodb) is actually what y'all are describing as an \"edge case\" in #15155 -- that is, ES is being used as a searching index only (ie, store=false, _source=disabled), and an external \"source of truth\" (Postgres) is used to provide document data back to the user.\n\nWhile @zombodb might be unique in implementation, I doubt its general approach of providing `_id` values and using them to later lookup records in an external source is.\n\nAn implementation detail is that @zombodb, through a REST endpoint plugin, uses the SCAN+SCROLL API to retrieve all matching `_id` values, re-encodes them as 6byte pairs, and streams them back as a binary blob.\n\nAgainst ES v1.7 (and 1.6 and 1.5), benchmarking has shown that the overhead of simply retrieving the `_id` value completely swamps searching and even the String-->byte encoding ZDB does, so I'm excited y'all are looking at ways to make this better.\n\n(as an aside, I've actually spent quite a bit of time debugging this (against 1.5), and found that _if_ a parent<-->child mapping exists, using its cache to lookup the `_id` by ordinal (bypassing Lucene, decompressing, and decoding the `_id`) is nearly an order of magnitude faster.  I gave some patches to @pickypg awhile back through my employer's support agreement, but we all kinda decided it wasn't worth the effort of integrating into ES because v2.0 was near and changed everything.)\n\nThe idea that such things can \"be handled by a user field with doc values enabled\" isn't really true, as @pickypg pointed out, because ES is still doing all the work to retrieve the `_id` value for each hit.\n\nSo a half-baked idea would be:  What if retrieving the `_id` could be disabled on a search-by-search basis?  Instead, the search request would specify a \"user field with doc values enabled\" that is a copy of the `_id` value.  Maybe more generally, the ability to elide returning all the fields that are deemed \"for internal use by elasticsearch\"? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/166752409","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-166752409","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":166752409,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Njc1MjQwOQ==","user":{"login":"eeeebbbbrrrr","id":5117238,"node_id":"MDQ6VXNlcjUxMTcyMzg=","avatar_url":"https://avatars3.githubusercontent.com/u/5117238?v=4","gravatar_id":"","url":"https://api.github.com/users/eeeebbbbrrrr","html_url":"https://github.com/eeeebbbbrrrr","followers_url":"https://api.github.com/users/eeeebbbbrrrr/followers","following_url":"https://api.github.com/users/eeeebbbbrrrr/following{/other_user}","gists_url":"https://api.github.com/users/eeeebbbbrrrr/gists{/gist_id}","starred_url":"https://api.github.com/users/eeeebbbbrrrr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eeeebbbbrrrr/subscriptions","organizations_url":"https://api.github.com/users/eeeebbbbrrrr/orgs","repos_url":"https://api.github.com/users/eeeebbbbrrrr/repos","events_url":"https://api.github.com/users/eeeebbbbrrrr/events{/privacy}","received_events_url":"https://api.github.com/users/eeeebbbbrrrr/received_events","type":"User","site_admin":false},"created_at":"2015-12-22T22:35:17Z","updated_at":"2015-12-22T22:44:49Z","author_association":"NONE","body":"So I experimented with this idea (disabling returning _id and _type) against v1.7 (I'm not in a position to work with v2.x yet).\n\nAll I did was quickly hack `FetchPhase.java` to set the `fieldsVisitor` to null and then guard against that in the places it's used, and hardcoded both the \"type\" and \"id\" properties of the `SearchHit` to the empty string.\n\nI then setup a little benchmark using @zombodb.\n\nWith a query that returns 14k documents, retrieving all the \"ids\" in a SCAN+SCROLL loop:\n\nStock ES: 17 per second\nHacked Version: 120 per second\n\nOf course, all the ids were blank, so it's not very useful!\n\nI then added a `doc_values=true` field to the index that contains a copy of the `_id` field.  Against the hacked version, I was able to sustain 104 per second.  That's about a 6x gain.  There's definitely quite a bit of overhead in uid decoding.\n\nIn case you care how I hacked FetchPhase.java:  https://gist.github.com/eeeebbbbrrrr/9af88e6dc88943450c73\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/166889526","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-166889526","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":166889526,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Njg4OTUyNg==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-12-23T12:58:06Z","updated_at":"2015-12-23T12:58:06Z","author_association":"CONTRIBUTOR","body":"> With a query that returns 14k documents\n\nYou should just return the top-N instead. That is what lucene is designed to do.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/166948302","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-166948302","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":166948302,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Njk0ODMwMg==","user":{"login":"eeeebbbbrrrr","id":5117238,"node_id":"MDQ6VXNlcjUxMTcyMzg=","avatar_url":"https://avatars3.githubusercontent.com/u/5117238?v=4","gravatar_id":"","url":"https://api.github.com/users/eeeebbbbrrrr","html_url":"https://github.com/eeeebbbbrrrr","followers_url":"https://api.github.com/users/eeeebbbbrrrr/followers","following_url":"https://api.github.com/users/eeeebbbbrrrr/following{/other_user}","gists_url":"https://api.github.com/users/eeeebbbbrrrr/gists{/gist_id}","starred_url":"https://api.github.com/users/eeeebbbbrrrr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eeeebbbbrrrr/subscriptions","organizations_url":"https://api.github.com/users/eeeebbbbrrrr/orgs","repos_url":"https://api.github.com/users/eeeebbbbrrrr/repos","events_url":"https://api.github.com/users/eeeebbbbrrrr/events{/privacy}","received_events_url":"https://api.github.com/users/eeeebbbbrrrr/received_events","type":"User","site_admin":false},"created_at":"2015-12-23T17:20:04Z","updated_at":"2015-12-23T17:20:04Z","author_association":"NONE","body":"> You should just return the top-N instead. That is what lucene is designed to do.\n\nThe point is that there's room for significant improvement around how `_uid` is handled.  I was trying to show what the overhead is -- and on my test data on my laptop, it's about 6x.  If a reasonable way to improve this can be found, everyone wins.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/166956217","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-166956217","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":166956217,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Njk1NjIxNw==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-12-23T17:51:31Z","updated_at":"2015-12-23T17:51:31Z","author_association":"CONTRIBUTOR","body":"Well, lucene just isn't designed to return 14k documents, and by the way docvalues aren't designed for that either. for such huge numbers then a database is a better solution, as it is designed for those use cases.\n\nJust like you wouldn't move your house with a sports car: its a faster vehicle, but its gonna be slower overall.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/166962708","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-166962708","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":166962708,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Njk2MjcwOA==","user":{"login":"eeeebbbbrrrr","id":5117238,"node_id":"MDQ6VXNlcjUxMTcyMzg=","avatar_url":"https://avatars3.githubusercontent.com/u/5117238?v=4","gravatar_id":"","url":"https://api.github.com/users/eeeebbbbrrrr","html_url":"https://github.com/eeeebbbbrrrr","followers_url":"https://api.github.com/users/eeeebbbbrrrr/followers","following_url":"https://api.github.com/users/eeeebbbbrrrr/following{/other_user}","gists_url":"https://api.github.com/users/eeeebbbbrrrr/gists{/gist_id}","starred_url":"https://api.github.com/users/eeeebbbbrrrr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eeeebbbbrrrr/subscriptions","organizations_url":"https://api.github.com/users/eeeebbbbrrrr/orgs","repos_url":"https://api.github.com/users/eeeebbbbrrrr/repos","events_url":"https://api.github.com/users/eeeebbbbrrrr/events{/privacy}","received_events_url":"https://api.github.com/users/eeeebbbbrrrr/received_events","type":"User","site_admin":false},"created_at":"2015-12-23T18:20:08Z","updated_at":"2015-12-23T18:20:08Z","author_association":"NONE","body":"> Just like you wouldn't move your house with a sports car: its a faster vehicle, but its gonna be slower overall.\n\nI don't know how this is relevant. \n\nIf y'all make progress towards improving `_uid` in whatever way, I'd be happy to help test and benchmark changes.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/189538989","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-189538989","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":189538989,"node_id":"MDEyOklzc3VlQ29tbWVudDE4OTUzODk4OQ==","user":{"login":"shamak","id":4411414,"node_id":"MDQ6VXNlcjQ0MTE0MTQ=","avatar_url":"https://avatars0.githubusercontent.com/u/4411414?v=4","gravatar_id":"","url":"https://api.github.com/users/shamak","html_url":"https://github.com/shamak","followers_url":"https://api.github.com/users/shamak/followers","following_url":"https://api.github.com/users/shamak/following{/other_user}","gists_url":"https://api.github.com/users/shamak/gists{/gist_id}","starred_url":"https://api.github.com/users/shamak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shamak/subscriptions","organizations_url":"https://api.github.com/users/shamak/orgs","repos_url":"https://api.github.com/users/shamak/repos","events_url":"https://api.github.com/users/shamak/events{/privacy}","received_events_url":"https://api.github.com/users/shamak/received_events","type":"User","site_admin":false},"created_at":"2016-02-27T00:38:21Z","updated_at":"2016-02-27T00:38:21Z","author_association":"NONE","body":"Hey, I stumbled upon this issue while I was trying to do something similar in Elasticsearch. I aimed (ambitiously) to retrieve ~1million documents in under 1 second based on a simple filter query. I noticed the unzipping of the '_id' field was taking a while (~8seconds) using the hot_threads API:\n\n```\norg.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.readInternal(NIOFSDirectory.java:179)\norg.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:342)\norg.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:54)\norg.apache.lucene.store.DataInput.readVInt(DataInput.java:122)\norg.apache.lucene.store.BufferedIndexInput.readVInt(BufferedIndexInput.java:221)\norg.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.visitDocument(CompressingStoredFieldsRe\nder.java:249) org.apache.lucene.index.SegmentReader.document(SegmentReader.java:335)\norg.elasticsearch.search.fetch.FetchPhase.loadStoredFields(FetchPhase.java:427)\norg.elasticsearch.search.fetch.FetchPhase.createSearchHit(FetchPhase.java:219)\norg.elasticsearch.search.fetch.FetchPhase.execute(FetchPhase.java:184)\norg.elasticsearch.search.SearchService.executeFetchPhase(SearchService.java:401)\norg.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryFetchTransportHandler.messageReceived(SearchServiceTransportAction.java:833)\norg.elasticsearch.search.action.SearchServiceTransportAction$SearchQueryFetchTransportHandler.messageReceived(SearchServiceTransportAction.java:824)\n```\n\nSo I wrote a plugin to stop retrieving the '_id' field, and just retrieve a secondary, integer, doc_values field from the document, specified in the query. I thought this would be super quick but suprisingly, it took almost the same amount of time and now, the hot_threads API showed:\n\n```\n org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.readInternal(NIOFSDirectory.java:179)\n       org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:342)\n       org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:54)\n       org.apache.lucene.store.DataInput.readVInt(DataInput.java:122)\n       org.apache.lucene.store.BufferedIndexInput.readVInt(BufferedIndexInput.java:221)\n       org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.visitDocument(CompressingStoredFieldsReader.java:249)\n       org.apache.lucene.index.SegmentReader.document(SegmentReader.java:335)\n       org.elasticsearch.search.lookup.SourceLookup.loadSourceIfNeeded(SourceLookup.java:70)\n       org.elasticsearch.search.lookup.SourceLookup.extractRawValues(SourceLookup.java:145)\n       plugin.retrievedocvalues.search.fetch.CustomFetchPhase.createSearchHit(CustomFetchPhase.java:256)\n       plugin.retrievedocvalues.search.fetch.CustomFetchPhase.execute(CustomFetchPhase.java:189)\n       plugin.retrievedocvalues.search.CustomSearchService.executeFetchPhase(CustomSearchService.java:500)\n```\n\nThe query I'm using is against a custom endpoint and the body is:\n\n```\n { \"sort\": \"_doc\",\n    \"_source\": false,\n   \"fields\": [\"foo\"]\n    \"size\": 1000000,\n    \"filter\": {\n        \"bool\": {\n            \"should\": [\n                {\n                    \"term\": {\n                        \"foo\": \"bar\"\n                    }\n                },\n                {\n                    \"term\": {\n                        \"baz\": \"qux\"\n                    }\n                }\n            ]\n        }\n    }\n```\n\nThe field 'foo' is an integer field which has doc_values enabled on ES version 1.7.1. The weird thing is the aggregation on the field is super quick, but retrieving the data itself is slow.\n\nI guess the underlying point is it may not be that much faster to enable doc_values on the '_id' field since I can't see much of an improvement, unless I'm missing something which someone here could point out?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/190202209","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-190202209","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":190202209,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDIwMjIwOQ==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2016-02-29T13:05:25Z","updated_at":"2016-02-29T13:05:25Z","author_association":"MEMBER","body":"@shamak you can use `fielddata_fields` in your search request to retrieve field values from doc values (or in memory field data). Fields are meant to get stored fields with a fall back to _source (which was [removed](15017) in 5.x as it is confusing):\n\n```\nGET _search\n{\n  \"fielddata_fields\": [ \"fieldname\"]\n}\n```\n\nNote though that getting 10K docs should be done with a scroll rather than getting so many docs at one.\n\nSince we now promote doc values as a possible data storage (next to _source and stored fields) , I wonder if we should support a `doc_value_fields` entry in the search response. I think more and more people will expect it to be there. /cc @clintongormley @jpountz \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/190234373","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-190234373","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":190234373,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDIzNDM3Mw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-02-29T14:36:29Z","updated_at":"2016-02-29T14:36:29Z","author_association":"CONTRIBUTOR","body":"> Since we now promote doc values as a possible data storage (next to _source and stored fields) , I wonder if we should support a doc_value_fields entry in the search response. I think more and more people will expect it to be there. /cc @clintongormley @jpountz\n\nThat's essentially what `fielddata_fields` is.  We were talking about not using the doc values terminology in favour of in-memory vs on-disk fielddata, although I don't think that's the right tradeoff either.  The \"fielddata\" term has history, and referring to doc values as \"on-disk\" does them a disservice given that they're usually cached in RAM.\n\nSo yes, maybe we should add `doc_values_fields` (or just `doc_values`?) as a synonym for `fielddata_fields`?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/198302459","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-198302459","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":198302459,"node_id":"MDEyOklzc3VlQ29tbWVudDE5ODMwMjQ1OQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-03-18T10:47:48Z","updated_at":"2016-03-18T10:47:48Z","author_association":"CONTRIBUTOR","body":"Something else we could consider would be to only store the id and type in doc values and not in stored fields in order to not incur a large increase of index size. The benefit is that we would not need any new option on the mappings. However the fetch phase would have to 3 random seeks instead of 1, which could hurt if the index size is much larger than the fs cache.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/198395438","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-198395438","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":198395438,"node_id":"MDEyOklzc3VlQ29tbWVudDE5ODM5NTQzOA==","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars2.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"created_at":"2016-03-18T14:52:47Z","updated_at":"2016-03-18T14:52:47Z","author_association":"CONTRIBUTOR","body":"> However the fetch phase would have to 3 random seeks instead of 1, which could hurt if the index size is much larger than the fs cache.\n\nI suppose then disabling _source would entirely skip stored fields which is kind of cool.\n\nI suspect the _type is going to be cached super fast, especially if we ever decide to sort by _type. Many many use cases use a single type per index so the type lookup is just metadata. Either way I suspect you'd see closer to 2 seeks than 3. Even still, 2 is much worse than 1.\n\nAnother question: do we really need to return the _id and _type all the time? I know I typically just wanted some portion of the _source. Usually, like, two or three fields from _source and a couple of highlights. Anyway, maybe we should allow those to be disabled.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/198408478","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-198408478","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":198408478,"node_id":"MDEyOklzc3VlQ29tbWVudDE5ODQwODQ3OA==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2016-03-18T15:26:10Z","updated_at":"2016-03-18T15:26:10Z","author_association":"MEMBER","body":"I like the idea of _not_ always returning those fields as it's unnecessary information in a lot of cases, especially for the single `_type` use case. We call it metadata, so maybe we should treat it like metadata and only return it when requested (defaulting to true).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/198538157","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-198538157","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":198538157,"node_id":"MDEyOklzc3VlQ29tbWVudDE5ODUzODE1Nw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-03-18T20:54:32Z","updated_at":"2016-03-18T20:54:32Z","author_association":"CONTRIBUTOR","body":"I am fine with allowing some of those meta fields to not be returned, but I tend to like that they are returned by default: it is easy to forget that some things are not available if they are not returned by default, and it makes reindexing easier as you don't have to think about fields that you might need for reindexing: everything is there by default.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222933618","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-222933618","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":222933618,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjkzMzYxOA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T08:58:20Z","updated_at":"2016-06-01T08:58:20Z","author_association":"MEMBER","body":"I made some tests to check the cost of adding the docvalues to the _id field. I tried to index 1M documents with one field (_id) and different configurations.\nI tested 3 configurations:\n- _id with index=true and stored=true\n- _id with index=true, stored=false and binary doc values.\n- _id with index=true, stored=false and sorted doc values.\n  For the generation of the _id I tried all the configurations with UUIDs.base64UUID and UUIDs.randomBase64UUID. \n\n### base64UUID\n\n| Configuration | Size | Docs/s | Random access (docs/s) | Sequential access(docs/s) |\n| :-: | :-: | :-: | :-: | :-: |\n| Stored | 12 MB | 372,000 | 532,000 | 716,000 |\n| BinaryDV | 26 MB | 378,000 | 9,009,000 | 40,000,000 |\n| SortedDV | 13 MB | 255,000 | 4,608,000 | 16,129,000 |\n\nThe binary doc values doubles the size of the index because they don't use any compression. They are very fast for accessing any values and the indexation speed is almost the same as the stored field. \nThe sorted doc values have almost the same size than the stored field, this is due to the prefix compression that they use to store the values.  They are also quite fast to access any values but the indexation is slower ( ˜= 30% slower).\n\n### randomBase64UUID\n\n| Configuration | Size | Docs/s | Random access (docs/s) | Sequential access(docs/s) |\n| :-: | :-: | :-: | :-: | :-: |\n| Stored | 49 MB | 332,000 | 719,000 | 1,751,000 |\n| BinaryDV | 46 MB | 358,000 | 8,695,000 | 38,461,000 |\n| SortedDV | 48MB | 246,000 | 5,524,000 | 9,523,000 |\n\nFor the random id case, the size of the index is almost the same for the 3 configurations but the sorted doc values are still slower to index the data.\n\nI ran some benchmark and the extra cost during the indexation for the sorted doc values is the sorting of the dictionary (in this case we need to do it twice, one for the terms dictionary of the postings and one for the sorted doc values).\nSince each _id is unique I tried to add a way to search on the sorted doc values directly, to do so I just added a file that contains the docID for each _id. It's an extra cost of 4 bytes per documents (it's faster for random access to use a full int instead of a vint or a block compression) and to search a docID it needs to retrieve the ordinal of the term first and then seek/read the docID. For existing _id the search is faster than the one that uses the postings but it can be slower when the _id does not exist and does not share a prefix with the existing ones (the latter case is optimized in the terms dictionary of the postings).\nI don't know if this can be something we want to explore but I wanted to propose at least one option if the extra cost of adding doc values to the _id field is prohibitive.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223149265","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-223149265","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":223149265,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzE0OTI2NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T22:55:36Z","updated_at":"2016-06-01T22:55:36Z","author_association":"CONTRIBUTOR","body":"Thanks for testing! The hybrid postings/doc-values idea sounds appealing, but it might be challenging to expose it cleanly? (I haven't thought much about it). Otherwise I am wondering how much [LUCENE-7299](https://issues.apache.org/jira/browse/LUCENE-7299)  would close the gap in terms of indexing speed with SORTED_SET doc values and also that maybe we should implement tome simple compression on binary doc values for such cases (eg. based on the most common ngrams).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223290808","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-223290808","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":223290808,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzI5MDgwOA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2016-06-02T13:27:19Z","updated_at":"2016-06-02T13:27:19Z","author_association":"CONTRIBUTOR","body":"I don't think the idea of trying to use the postings dictionary for the term dictionary will work well (besides practical concerns). It will simply be too slow.\n\nThe problem is, they are different data structures (it is like trie versus tree, but the difference is important).\n\nThe terms dictionary is optimized for lookup by \"String\", but the docvalues dictionary is optimized for lookup by ordinal.\n\nThe docvalues lookup by term is much slower than the postings one, because its not optimized for that. The inverse is true for lookup by ordinal: the entire datastructure is built around doing this with as little overhead as possible: it can do random access within a block, etc. \n\nGiven that even a vint for prefix/suffix length is too costly for that case, I don't think we should introduce a branch per-byte with something like n-gram compression. I have run the numbers for that on several datasets (real data: not artificial crap like IDs) and it only saves something like 25% space for that datastructure, depending on the text: in many cases lower than that.\n\nIts important to keep seek-by-ord fast at the moment, because too much code uses sorted/sorted_set docvalues in an abusive fashion with a seek-by-ord for every document, to lookup the text. Elasticsearch has gotten a little better by incorporating things like global ordinals, but it still has bad guys like its scripting support. There are similar cases for other lucene users and even in some lucene modules itself. Historically, people wrote code expecting this to be \"ok\" and \"fast\" with fieldcache/fielddata, because that did no compression at all: not even prefix compression. A lot of this code was just ported to docvalues without addressing this, so we still have to keep it fast.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319310537","html_url":"https://github.com/elastic/elasticsearch/issues/11887#issuecomment-319310537","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11887","id":319310537,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTMxMDUzNw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-08-01T08:54:54Z","updated_at":"2017-08-01T08:54:54Z","author_association":"CONTRIBUTOR","body":"We don't want to add an option to metadata fields, and we don't want to make everyone pay the price for doc values on `_id` so we will have to do without doc values on `_id`.","performed_via_github_app":null}]