{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/33823","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33823/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33823/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33823/events","html_url":"https://github.com/elastic/elasticsearch/issues/33823","id":361347636,"node_id":"MDU6SXNzdWUzNjEzNDc2MzY=","number":33823,"title":"Stat doesn't get updated after an initial stat check","user":{"login":"yznima","id":28398072,"node_id":"MDQ6VXNlcjI4Mzk4MDcy","avatar_url":"https://avatars3.githubusercontent.com/u/28398072?v=4","gravatar_id":"","url":"https://api.github.com/users/yznima","html_url":"https://github.com/yznima","followers_url":"https://api.github.com/users/yznima/followers","following_url":"https://api.github.com/users/yznima/following{/other_user}","gists_url":"https://api.github.com/users/yznima/gists{/gist_id}","starred_url":"https://api.github.com/users/yznima/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yznima/subscriptions","organizations_url":"https://api.github.com/users/yznima/orgs","repos_url":"https://api.github.com/users/yznima/repos","events_url":"https://api.github.com/users/yznima/events{/privacy}","received_events_url":"https://api.github.com/users/yznima/received_events","type":"User","site_admin":false},"labels":[{"id":146836529,"node_id":"MDU6TGFiZWwxNDY4MzY1Mjk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Stats","name":":Core/Features/Stats","color":"0e8a16","default":false,"description":"Statistics tracking and retrieval APIs"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-09-18T14:58:13Z","updated_at":"2018-09-28T12:22:04Z","closed_at":"2018-09-28T12:22:04Z","author_association":"NONE","active_lock_reason":null,"body":"<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`):\r\n\r\nVersion: 6.2.4, Build: ccec39f/2018-04-12T20:37:28.497551Z, JVM: 1.8.0_152\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (`java -version`):\r\n\r\njava version \"1.8.0_152\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_152-b16)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)\r\n\r\n**OS version** (`uname -a` if on a Unix-like system):\r\n\r\nDarwin  16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 21 20:07:39 PDT 2018; root:xnu-3789.73.14~1/RELEASE_X86_64 x86_64\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nThe stat api doesn't return correct information, such as store size, for about 10 seconds. This happens when there is an initial `/_stats` request, then some write or query and finally a later `/_stats` requests.\r\n\r\n**Steps to reproduce**:\r\n\r\nHere is a failing unittest.\r\n\r\n1. Create a simple Index\r\n2. Request for the stats of the node. \r\n3. Write some result\r\n4. Assert the size of the store has increased. The assertion fails since the store size doesn't increase. I tried a combination of refresh and flush to maybe force the number to update but that didn't work either. As soon as I remove the initial stat request or introduce a 12 seconds sleep after the write, the assertion passes which seems like the initial request causes something to hang or take a really long time. \r\n\r\n```java\r\nimport java.util.HashMap;\r\nimport java.util.UUID;\r\n\r\nimport org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;\r\nimport org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;\r\nimport org.elasticsearch.action.admin.indices.stats.IndicesStatsRequest;\r\nimport org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;\r\nimport org.elasticsearch.action.bulk.BulkRequestBuilder;\r\nimport org.elasticsearch.action.index.IndexRequest;\r\nimport org.elasticsearch.action.support.WriteRequest;\r\nimport org.elasticsearch.common.settings.Settings;\r\nimport org.elasticsearch.test.ESIntegTestCase;\r\nimport org.junit.Test;\r\n\r\n@ESIntegTestCase.ClusterScope(numDataNodes = 1, scope = ESIntegTestCase.Scope.SUITE, numClientNodes = 0, supportsDedicatedMasters = false)\r\npublic class StoreSizeIT extends ESIntegTestCase {\r\n\r\n  private static final String INDEX_NAME = \"store_size_test\";\r\n  private static final String TYPE_NAME = \"_doc\";\r\n  private static final int DOC_COUNT = 1_000;\r\n\r\n  @Test\r\n  public void Test_StoreSize() throws Exception {\r\n    createIndex(INDEX_NAME,\r\n        Settings.builder()\r\n            .put(\"number_of_shards\", 1)\r\n            .put(\"number_of_replicas\", 0)\r\n            .build());\r\n\r\n    // Perform an initial stat request to use later \r\n    // to check for the impact of the write request\r\n    client().admin()\r\n        .cluster()\r\n        .nodesStats(new NodesStatsRequest().all())\r\n        .actionGet();\r\n\r\n    final BulkRequestBuilder builder = client().prepareBulk()\r\n        .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\r\n\r\n    for (int i = 0; i < DOC_COUNT; i++) {\r\n      final HashMap<String,String> source = new HashMap<>();\r\n      source.put(\"name\", UUID.randomUUID().toString());\r\n\r\n      final IndexRequest request = new IndexRequest(INDEX_NAME, TYPE_NAME,\r\n          UUID.randomUUID().toString()).create(true).source(source);\r\n      builder.add(request);\r\n    }\r\n    builder.get();\r\n\r\n    // Thread.sleep(12000);\r\n    final IndicesStatsResponse indicesStatsResponse = client().admin()\r\n        .indices()\r\n        .stats(new IndicesStatsRequest().includeSegmentFileSizes(true))\r\n        .get();\r\n    final long bytes = indicesStatsResponse.getPrimaries().store.getSize().getBytes();\r\n    assertTrue(\"\" + bytes, bytes > 1000); \r\n  }\r\n}\r\n```\r\n\r\n\r\n","closed_by":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"performed_via_github_app":null}