{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/19301","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19301/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19301/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/19301/events","html_url":"https://github.com/elastic/elasticsearch/issues/19301","id":164280077,"node_id":"MDU6SXNzdWUxNjQyODAwNzc=","number":19301,"title":"Async REST client implementation","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"labels":[{"id":407508641,"node_id":"MDU6TGFiZWw0MDc1MDg2NDE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Java%20Low%20Level%20REST%20Client","name":":Core/Features/Java Low Level REST Client","color":"0e8a16","default":false,"description":"Minimal dependencies Java Client for Elasticsearch"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-07-07T10:40:13Z","updated_at":"2016-07-13T12:24:59Z","closed_at":"2016-07-08T10:29:27Z","author_association":"MEMBER","active_lock_reason":null,"body":"I have been working on adding an async variant of the `performRequest` method to our `RestClient`. We currently have only the sync version, and we use apache http client internally. The http client is created by the `RestClient`, or it can be created externally and provided (see [here](https://github.com/elastic/elasticsearch/blob/master/client/rest/src/main/java/org/elasticsearch/client/RestClient.java#L384)), so that anything can be customized as long as supported by the underlying http client implementation.\n\nFor the async method we are thinking about using apache async http client. The apache async client class implements a different interface (`HttpAsyncClient` rather than `HttpClient`), although the way to configure it is similar to its sync sibling that it depends on. We would like to use only one client internally, which would have to be the async one then, in which case the sync `performRequest` method would just forward to the async one and wait for a response from it.\n\nThere are a couple of concerns around relying solely on the apache async http client:\n- the async client doesn't seem as widely used as the sync one. People are mostly familiar with the sync one. Most of our users (hard to measure, just guts feeling) will use our sync method, but will end up using the async client internally anyways if we go for using async only internally, which is transparent only up to the point where users provide their own instance of the client with their own configuration (ssl, basic auth, custom timeouts...).\n- apache async client doesn't support (yet) transparent content decompression, which means people are not going to be able to make advantage of http compressed responses out of the box. The client won't provide the needed \"accept\" header, so no compressed responses will be returned.\n\nThere may be other limitations that I haven't bumped into yet, suggestions are welcome. In general, do we think that the compressed response limitation is a big deal? I would say no but I opened this issue so we can discuss and come to a conclusion or evaluate alternatives.\n\nA couple of alternatives to using only the apache async client internally:\n1) Support both clients and use one or the other depending on the method called, or have two different `RestClient` implementations. The latter may sound cleaner, but it ends up complicating things quite a bit, especially moving forward with the high level client (e.g. which client impl is needed/required/supported for each specific api?).\n2) Use an async client only internally, but not the apache one. It needs to be able to send get and delete requests with body (or allow to make it possible with few lines of code).\n","closed_by":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"performed_via_github_app":null}