[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/259933095","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-259933095","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":259933095,"node_id":"MDEyOklzc3VlQ29tbWVudDI1OTkzMzA5NQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-11T10:56:02Z","updated_at":"2016-11-11T10:56:02Z","author_association":"CONTRIBUTOR","body":"@jpountz we discussed this on FixItFriday but didn't reach a conclusion - said we'd hold off for your input\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260291297","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-260291297","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":260291297,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDI5MTI5Nw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T09:47:49Z","updated_at":"2016-11-14T09:47:49Z","author_association":"CONTRIBUTOR","body":"This kind of feature would help compute exhaustive results, which can't be done with the current API. However it's not clear to me which aggregations would benefit from it in terms of memory usage (eg. the example agg should work pretty well with breadth_first?). Currently I tend to see it more as a solution to #4915 (with less scope, which is needed anyway since pagination in general is not something we can implement) than to memory-usage issues.\n\nReading your proposal makes me wonder whether we could achieve the same result without modifying aggregations but exending the current [`slice`](https://www.elastic.co/guide/en/elasticsearch/reference/5.0/search-request-scroll.html#sliced-scroll) parameter to also work with non-scroll requests and non-numeric fields.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260294512","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-260294512","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":260294512,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDI5NDUxMg==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T10:02:19Z","updated_at":"2016-11-14T10:02:30Z","author_association":"CONTRIBUTOR","body":"> eg. the example agg should work pretty well with breadth_first?\n\nA breadth_first request would be ignored (or error?) because it is reliant on results from the child agg.\n\n> exending the current slice parameter to also work with non-scroll requests and non-numeric fields.\n\nIt can be more complex than that - sometimes we are talking about multi-value fields e.g. an exhaustive analysis of all tags used in stackoverflow articles.\n\n> without modifying aggregations \n\nAggs themselves wouldn't change - the proposal is isolated to adding another type of filter to the existing IncludeExclude class.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261246531","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261246531","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261246531,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI0NjUzMQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T13:30:23Z","updated_at":"2016-11-17T13:30:23Z","author_association":"CONTRIBUTOR","body":"I prototyped this in IncludeExclude and benchmarked for a high-cardinality query (finding which of the 2.7m user accounts on StackOverflow look like they haven't been active since 2010). Each question doc has many user accounts associated with them. Example query:\n\n```\nGET stackq3/_search\n{\n   \"size\": 0,\n   \"aggs\": {\n      \"accountRetirementCandidates\": {\n         \"terms\": {\n            \"field\": \"user\",\n            \"size\": 10000,\n            \"include\": {\n               \"partition\": 1,\n               \"of\": 100\n            },\n            \"order\": {\n               \"lastVisit\": \"asc\"\n            }\n         },\n         \"aggs\": {\n            \"lastVisit\": {\n               \"max\": {\n                  \"field\": \"lastUpdateDate\"\n               }\n            },\n            \"lastActiveBefore2010\": {\n               \"bucket_selector\": {\n                  \"buckets_path\": {\n                     \"lastVisit\": \"lastVisit\"\n                  },\n                  \"script\": \"params.lastVisit<1262445274573l\"\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nWithout term partitioning getting an exhaustive list simply would not be feasible as a single request on the existing data model and would require resorting to entity-centric indexing.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261263485","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261263485","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261263485,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI2MzQ4NQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T14:40:32Z","updated_at":"2016-11-17T14:40:32Z","author_association":"MEMBER","body":"> A breadth_first request would be ignored (or error?) because it is reliant on results from the child agg.\n\nThe breadth_first would work, it's just that in this case the child agg (bucket_selector) would be executed with the terms aggregation and the second round would compute the cardinality for the selected terms.\n\nIsn't it possible to do this with a scripted terms aggs ? The execution time should be similar since you need to access the term (and not just the global ordinals) to compute the hash ?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261274321","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261274321","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261274321,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3NDMyMQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T15:18:49Z","updated_at":"2016-11-17T15:18:49Z","author_association":"CONTRIBUTOR","body":"> the second round would compute the cardinality for the selected terms.\n\nBreadth first is ignored in my first example because the top-level terms aggs is sorted on the child numSessions cardinality agg. [This code](https://github.com/elastic/elasticsearch/blob/master/core/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregator.java#L197) is where it decides NOT to do breadth_first on a child agg because it sees it is responsible for sorting.\n\n> Isn't it possible to do this with a scripted terms aggs ?\n\nYes, but being a script\n1) I expect it to be slower\n2) It needs to get hold of a decent hash algo e.g. MurmurHash\n3) It would need to work with multi-value fields (see my last StackOverflow example query)\n4) It doesn't have (faster) access to ordinals.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261277367","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261277367","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261277367,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3NzM2Nw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T15:29:03Z","updated_at":"2016-11-17T15:29:14Z","author_association":"CONTRIBUTOR","body":"I think Jim still made a good point that it would be nice to figure out whether we could do the partitioning differently so that we do not have to access values to know whether they are part of the current partition.\n\nOne way would be to use the ordinal range `[partition*maxOrd/numPartitions, (partition+1)*maxOrd/numPartitions]` even though it also has drawbacks, since eg. the partitions would become different if some terms are added or removed before we got time to retrieve data for all partitions.\n\nAnother way would be to use ranges of terms. For instance if there are 256 partitions in total, we could partition based on the first byte (we could figure out the ordinal range by calling `lookupTerm` on the min/max values). But this has a different issue that partitions can have very different sizes (especially in the worst case that they all share a common prefix, like urls).\n\nSomething I like about this proposal in general is that hopefully it would solve some of the use-cases behind the \"paging support for aggregations\" request. (#4915)\nBased on the pros/cons of all options, I think I would lean towards using ordinal ranges (`[partition*maxOrd/numPartitions, (partition+1)*maxOrd/numPartitions]`) for strings and hashing for numbers?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261279763","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261279763","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261279763,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI3OTc2Mw==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T15:37:06Z","updated_at":"2016-11-17T15:37:06Z","author_association":"CONTRIBUTOR","body":"I think we're on the same page with the ordinal support? Rough PR here: https://github.com/elastic/elasticsearch/pull/21626\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261280928","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261280928","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261280928,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4MDkyOA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T15:41:17Z","updated_at":"2016-11-17T15:41:17Z","author_association":"MEMBER","body":"> Breadth first is ignored in my first example because the top-level terms aggs is sorted on the child numSessions cardinality agg. This code is where it decides NOT to do breadth_first on a child agg because it sees it is responsible for sorting.\n\nRight I missed the fact that the bucket selector needs to access the result of the cardinality ;).\n\n> I think Jim still made a good point that it would be nice to figure out whether we could do the partitioning differently so that we do not have to access values to know whether they are part of the current partition.\n\nI like the global ords proposal but how can we ensure that maxOrd does not change between requests ?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261281681","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261281681","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261281681,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4MTY4MQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T15:43:47Z","updated_at":"2016-11-17T15:43:47Z","author_association":"CONTRIBUTOR","body":"> I like the global ords proposal but how can we ensure that maxOrd does not change between requests?\n\nIndeed we can't. So this would be best-effort only, similarly to pagination when not using the scroll API.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261287231","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261287231","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261287231,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI4NzIzMQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T16:01:49Z","updated_at":"2016-11-17T16:01:49Z","author_association":"CONTRIBUTOR","body":"Note: from my benchmark tests there's a sweet spot to the num partitions you select because bigger numbers= lower-memory requests and faster (individual) responses but you have to do more requests to process all the data. The costs start to accumulate with high partition numbers because there's a fixed-cost element to running each request which is the feeding of _all_ terms into the Include filter. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261292330","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261292330","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261292330,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5MjMzMA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T16:19:21Z","updated_at":"2016-11-17T16:19:21Z","author_association":"MEMBER","body":"> Indeed we can't. So this would be best-effort only, similarly to pagination when not using the scroll API.\n\nThe problem (like with paginations) is that there is no way to check if a response is valid or not. This makes this feature usable only on static indices otherwise the results could be completely wrong. \nSince this is intended to exhaust a terms aggregation with high cardinality I think that precision should come before speed. Could we just rely on the term itself for the partitioning ? I know it will be slow but at least it will always work. Maybe we can figure out after how to speed up things but the ordinal based partition seems risky to me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261298286","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261298286","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261298286,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTI5ODI4Ng==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T16:39:36Z","updated_at":"2016-11-17T16:39:36Z","author_association":"CONTRIBUTOR","body":"The client can use this to avoid ordinals:\n\n```\n     \"execution_hint\":\"map\",\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261301648","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261301648","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261301648,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTMwMTY0OA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-11-17T16:51:32Z","updated_at":"2016-11-17T16:51:32Z","author_association":"MEMBER","body":"@markharwood sorry I jumped from this issue to the PR and realized that afterward. Though I agree with Adrien here, we should be able to use the ordinals for the terms agg and the strings for the partitioning. This way the aggregation is still fast and always accurate ? I really don't know how to use this if I need to ensure that my index is not updated meanwhile. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261509133","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261509133","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261509133,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTUwOTEzMw==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2016-11-18T11:20:17Z","updated_at":"2016-11-18T11:20:17Z","author_association":"CONTRIBUTOR","body":"Refresh problems aside, presumably there's a more fundamental issue that partitioning on global ordinals will give wrong results in a multi-shard system because \"global\" is only in the sense of spanning segments - not shards. For this reason we _have to_ partition on values.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/261514130","html_url":"https://github.com/elastic/elasticsearch/issues/21487#issuecomment-261514130","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21487","id":261514130,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MTUxNDEzMA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-11-18T11:48:43Z","updated_at":"2016-11-18T11:48:43Z","author_association":"MEMBER","body":"@markharwood lol !\n","performed_via_github_app":null}]