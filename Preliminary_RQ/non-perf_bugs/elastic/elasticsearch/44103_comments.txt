[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509564701","html_url":"https://github.com/elastic/elasticsearch/issues/44103#issuecomment-509564701","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44103","id":509564701,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTU2NDcwMQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-07-09T09:22:23Z","updated_at":"2019-07-09T09:22:23Z","author_association":"COLLABORATOR","body":"Pinging @elastic/ml-core","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509575444","html_url":"https://github.com/elastic/elasticsearch/issues/44103#issuecomment-509575444","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44103","id":509575444,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTU3NTQ0NA==","user":{"login":"davidkyle","id":2353640,"node_id":"MDQ6VXNlcjIzNTM2NDA=","avatar_url":"https://avatars1.githubusercontent.com/u/2353640?v=4","gravatar_id":"","url":"https://api.github.com/users/davidkyle","html_url":"https://github.com/davidkyle","followers_url":"https://api.github.com/users/davidkyle/followers","following_url":"https://api.github.com/users/davidkyle/following{/other_user}","gists_url":"https://api.github.com/users/davidkyle/gists{/gist_id}","starred_url":"https://api.github.com/users/davidkyle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidkyle/subscriptions","organizations_url":"https://api.github.com/users/davidkyle/orgs","repos_url":"https://api.github.com/users/davidkyle/repos","events_url":"https://api.github.com/users/davidkyle/events{/privacy}","received_events_url":"https://api.github.com/users/davidkyle/received_events","type":"User","site_admin":false},"created_at":"2019-07-09T09:52:12Z","updated_at":"2019-07-09T09:52:12Z","author_association":"MEMBER","body":"The response format is not new to 7.3 it was like this in 7.2. `_stop` can take wild card arguments `_all` in which case multiple responses are expected some of which will be successful and others may fail. This is analogous to bulk index where some index ops may fail and others succeed. \r\n\r\nIf anything other than a 2xx status code is returned the Rest High Level client will not parse the response, see the comment in #44058. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509594206","html_url":"https://github.com/elastic/elasticsearch/issues/44103#issuecomment-509594206","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44103","id":509594206,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTU5NDIwNg==","user":{"login":"dolaru","id":1785030,"node_id":"MDQ6VXNlcjE3ODUwMzA=","avatar_url":"https://avatars0.githubusercontent.com/u/1785030?v=4","gravatar_id":"","url":"https://api.github.com/users/dolaru","html_url":"https://github.com/dolaru","followers_url":"https://api.github.com/users/dolaru/followers","following_url":"https://api.github.com/users/dolaru/following{/other_user}","gists_url":"https://api.github.com/users/dolaru/gists{/gist_id}","starred_url":"https://api.github.com/users/dolaru/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dolaru/subscriptions","organizations_url":"https://api.github.com/users/dolaru/orgs","repos_url":"https://api.github.com/users/dolaru/repos","events_url":"https://api.github.com/users/dolaru/events{/privacy}","received_events_url":"https://api.github.com/users/dolaru/received_events","type":"User","site_admin":false},"created_at":"2019-07-09T10:52:53Z","updated_at":"2019-07-09T10:52:53Z","author_association":"NONE","body":"The `200` response is misleading because it doesn't indicate that something didn't go as planned. You only get to find out that something went wrong if you actually parse the response and look at `acknowledged`.\r\n\r\nI don't think the `_bulk` API is what we're looking to be consistent with. I'm referencing the behaviour of `_close` in anomaly detection APIs when `force` is **not** specified instead:\r\n - If `_all` or a pattern is used as the job ID, and one of the jobs that match are in a failed state, we don't touch any of the jobs and ask the user to use the force parameter\r\n```json\r\n{\r\n  \"error\": {\r\n    \"root_cause\": [\r\n      {\r\n        \"type\": \"status_exception\",\r\n        \"reason\": \"one or more jobs have state failed, use force close\"\r\n      }\r\n    ],\r\n    \"type\": \"status_exception\",\r\n    \"reason\": \"one or more jobs have state failed, use force close\"\r\n  },\r\n  \"status\": 409\r\n}\r\n```\r\n - If a single job is targeted with the `_close` request, and the job is in a failed state, we do the same... tell the user to use `force`.\r\n```json\r\n{\r\n  \"error\": {\r\n    \"root_cause\": [\r\n      {\r\n        \"type\": \"status_exception\",\r\n        \"reason\": \"cannot close job [some_anomaly_detection_job] because it failed, use force close\"\r\n      }\r\n    ],\r\n    \"type\": \"status_exception\",\r\n    \"reason\": \"cannot close job [some_anomaly_detection_job] because it failed, use force close\"\r\n  },\r\n  \"status\": 409\r\n}\r\n``` \r\n\r\nIn my opinion, this is the correct behaviour. If a data frame transform that has the task state `failed` is targeted by the `_stop` request and force is not specified:\r\n - don't stop any of the matching transforms\r\n - return 409 asking the user to force stop","performed_via_github_app":null}]