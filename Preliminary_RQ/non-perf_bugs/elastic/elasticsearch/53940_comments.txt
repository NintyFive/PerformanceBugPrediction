[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/602420478","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-602420478","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":602420478,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMjQyMDQ3OA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-03-23T07:02:10Z","updated_at":"2020-03-23T07:02:10Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security (:Security/Security)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/628391056","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-628391056","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":628391056,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODM5MTA1Ng==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-05-14T05:13:25Z","updated_at":"2020-05-14T05:13:25Z","author_association":"MEMBER","body":"@tvernum Somehow this just occured to me, but why does the API key document needs to be fetched in the first place? Can we just actively clear the cache when a document is updated? Expiration date is a passive property that takes effect without a document update. But we could still cache the expiration date along with the key to avoid having the fetch the document?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/628400209","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-628400209","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":628400209,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODQwMDIwOQ==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2020-05-14T05:43:32Z","updated_at":"2020-05-14T05:43:32Z","author_association":"CONTRIBUTOR","body":"It doesn't but fetch-by-id is fast and distributed cache management is hard to get right so, on balance, the idea had been that always fetching the document is safer from a provable-correct point of view.\r\n\r\nAs you would have seen in the App Priv cache, you need to deal with new APIs to clear the cache and re-sync the cache if a node leaves the cluster temporarily, etc. etc.\r\n\r\nThe API Key service tries to avoid doing that by caching as little as possible and going back to the index each time. Given the issues you saw with the get threadpool, it might be worth re-thinking that tradeoff, but it requires getting the cache invalidation semantics perfectly correct.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/628665453","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-628665453","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":628665453,"node_id":"MDEyOklzc3VlQ29tbWVudDYyODY2NTQ1Mw==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-05-14T14:15:57Z","updated_at":"2020-05-14T14:15:57Z","author_association":"MEMBER","body":"> re-sync the cache if a node leaves the cluster temporarily\r\n>\r\nActually this is new to me. I haven't thought about this before. Thanks. I will add that for the Application privilege cache.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/629048373","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-629048373","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":629048373,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTA0ODM3Mw==","user":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"created_at":"2020-05-15T06:09:50Z","updated_at":"2020-05-15T06:09:50Z","author_association":"CONTRIBUTOR","body":"> Actually this is new to me. I haven't thought about this before.\r\n\r\nSee \r\nhttps://github.com/elastic/elasticsearch/blob/c0ee68b0a03d0dafcd34bcb168f1e2d3d68f1886/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/CompositeRolesStore.java#L453-L458\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/629049353","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-629049353","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":629049353,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTA0OTM1Mw==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-05-15T06:12:42Z","updated_at":"2020-05-15T06:12:42Z","author_association":"MEMBER","body":"Thanks Tim. Yes I added similar code and relevant tests for NativePrivilegeStore\r\n\r\nhttps://github.com/elastic/elasticsearch/pull/55836/commits/07b7837c4284d40541d51eba66d431dc9680d80c","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/643056543","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643056543","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":643056543,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MzA1NjU0Mw==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-06-12T04:21:20Z","updated_at":"2020-06-12T14:40:55Z","author_association":"MEMBER","body":"~**TLDR**: It would be helpful if **string representations instead of object are used for `roleDescriptors` and `limitedRoleDescriptors`** for the schema of API key document.~ (edit: no longer necessary since [partial deserialisation](https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643305384) is possible)\r\n\r\nSkip parsing the API key document requires the document content to be cached so that it can be reused when the same key comes in again. There is obviously the balance between caching more with higher heap usage vs computational cost. An additional concern is when a large number of keys share the same set of role descriptors (which is a likely case for ingestion usage). In this situation, the repetitive caching of the almost identical document contents will likely offset any benefit from reducing role cache size (#53939).\r\n\r\nHence a two layer caching is needed, e.g.:\r\n1. First layer mapping is: `ApiKeyId -> Tuple<ExpirationDate, UniqueIdofRoleDescriptors>`\r\n2. Second layer mapping is: `UniqueIdOfRoleDescriptors -> RoleDescriptors of ApiKeyDocument`\r\n\r\nwhere `UniqueIdofRoleDescriptors` guarantees that the same set of role descriptors always have the same ID regardless which documents they come frome. This can be achieved by hashing the content of `roleDescriptors` and `limitedRoleDescriptors`. Ideally, we do not want cache the entire API key document since the only relevant parts are `roleDescriptors` and `limitedRoleDescriptors`. However it is challenging to extract them out of a document. We could do it with string manipulation for `response.getSourceAsString()`, but it could be fragile (~existing XContent utils do not help~ **edit**: this is wrong. It is possible to do [partial decode](https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643305384)). If we, however, could afford changes to the schema of API key document so that string representations instead of object are used for `roleDescriptors` and `limitedRoleDescriptors`, it would help simplify the two layer caching implementation. \r\n\r\nUsing string representations for `roleDescriptors` and `limitedRoleDescriptors` of an API key document can also help reducing existing de/serialisation cost. Currently both fields of an API key document are fully deserialised into `Map<String, Object>`. They then get serialised again into ThreadContext with `authenticationSerializer.writeToContext(...)`. If they are in string format, both the serialisation and deserialisation operations are no longer necessary. Also since the exact content of the descriptors are only of interest to `CompositeRolesStore`, it makes sense to defer the full desrialisation until Role building is needed. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/643058693","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643058693","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":643058693,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MzA1ODY5Mw==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-06-12T04:31:00Z","updated_at":"2020-06-12T04:31:00Z","author_association":"MEMBER","body":"Another data point that I'd like to add is that GET API key documet takes about 60% of the time in the authentication process (*not* including authorization). Another thing to consider when we have the thread pool discussion, which currently does not have its own issue.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/643094092","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643094092","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":643094092,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MzA5NDA5Mg==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-06-12T06:35:43Z","updated_at":"2020-06-15T14:09:29Z","author_association":"MEMBER","body":"`response.getSource()` and `authenticationSerializer.writeToContext(...)` _each_ take about 10% of the time in authentication process. Note these could very well increase when the role descriptors get larger. These number are measured when `limitedRoleDescriptors` is from superuser and `roleDescriptors` is null.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/643305384","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643305384","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":643305384,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MzMwNTM4NA==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-06-12T14:36:32Z","updated_at":"2020-06-12T14:36:32Z","author_association":"MEMBER","body":"> TLDR: It would be helpful if string representations instead of object are used for roleDescriptors and limitedRoleDescriptors for the schema of API key document.\r\n> \r\n\r\nThanks @tvernum for prompting me. It is _not_ necessary. The existing XContent utils can partially deserialise an object (`ObjectParserHelper#declareRawObject`), i.e. it can leave an object field untouched and return the raw bytes. Therefore it is possible to achieve what I am proposing ([role cache keyed by hash of role descriptors' string representation](https://github.com/elastic/elasticsearch/issues/53939#issuecomment-643021514)) relatively easily without touching the document schema and additional de/serialisation cost.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/643323446","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643323446","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":643323446,"node_id":"MDEyOklzc3VlQ29tbWVudDY0MzMyMzQ0Ng==","user":{"login":"jaymode","id":4339958,"node_id":"MDQ6VXNlcjQzMzk5NTg=","avatar_url":"https://avatars1.githubusercontent.com/u/4339958?v=4","gravatar_id":"","url":"https://api.github.com/users/jaymode","html_url":"https://github.com/jaymode","followers_url":"https://api.github.com/users/jaymode/followers","following_url":"https://api.github.com/users/jaymode/following{/other_user}","gists_url":"https://api.github.com/users/jaymode/gists{/gist_id}","starred_url":"https://api.github.com/users/jaymode/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaymode/subscriptions","organizations_url":"https://api.github.com/users/jaymode/orgs","repos_url":"https://api.github.com/users/jaymode/repos","events_url":"https://api.github.com/users/jaymode/events{/privacy}","received_events_url":"https://api.github.com/users/jaymode/received_events","type":"User","site_admin":false},"created_at":"2020-06-12T15:06:58Z","updated_at":"2020-06-12T15:06:58Z","author_association":"MEMBER","body":"> Another thing to consider when we have the thread pool discussion, which currently does not have its own issue.\r\n\r\n@ywangd can you elaborate on the threadpool issue/discussion or create an issue for it? I am asking because I am currently working on system indices having their own threadpool(s) for read operations and I'd like to understand if the work that I am doing could help here.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/643842762","html_url":"https://github.com/elastic/elasticsearch/issues/53940#issuecomment-643842762","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53940","id":643842762,"node_id":"MDEyOklzc3VlQ29tbWVudDY0Mzg0Mjc2Mg==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-06-15T00:12:22Z","updated_at":"2020-06-15T00:12:22Z","author_association":"MEMBER","body":"@jaymode I created #58088 for it. Let me know if you need more information about it. Thanks","performed_via_github_app":null}]