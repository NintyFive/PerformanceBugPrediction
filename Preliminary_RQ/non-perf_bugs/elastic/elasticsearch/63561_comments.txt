[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707142891","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707142891","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707142891,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzE0Mjg5MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-10-12T14:07:40Z","updated_at":"2020-10-12T14:07:40Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-security (:Security/Security)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707299661","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707299661","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707299661,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzI5OTY2MQ==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-10-12T19:16:35Z","updated_at":"2020-10-12T19:16:35Z","author_association":"CONTRIBUTOR","body":"If this is relevant, using `/bla,test/_eql/search` (no wildcard) there is no exception being thrown.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707427921","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707427921","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707427921,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzQyNzkyMQ==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-13T01:24:57Z","updated_at":"2020-10-13T01:24:57Z","author_association":"MEMBER","body":"What is the reason for `EqlSearchRequest` to mandate `allow_no_indices=false`? It seems to me that all of its sub-actions actually has the opposite setting, i.e. `allow_no_indices=true`, e.g. [`IndexResolver#resolveAsMergedMapping`](https://github.com/elastic/elasticsearch/blob/7.x/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java#L297-L298) and [`BasicQueryClient#query`](https://github.com/elastic/elasticsearch/blob/7.x/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/execution/search/BasicQueryClient.java#L57-L58).\r\n\r\n`allow_no_indices=false` basically tells the index resolver to [throw error](https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-index.html#multi-index) when a wildcard does not match a valid index. This behaviour is the same regardless of whether security is enabled. However, it worked with security off because this option is never used anywhere to resolve indices (since its sub-actions have `true` value for this option). When security is on, it intercepts any IndicesRequest to verify privileges which requires expanding wildcard. It throws error when it sees that the wildcard does not expand to a valid index and `allow_no_indices` is `false`. \r\n\r\nIn summary, my question is: why mandating `allow_no_indices=false` for EqlSearchRequest? If it is not strictly necessary, this issue can be fixed just by dropping this option. Otherwise, we'll need dig deeper to see other alternatives. But before proceeding too far, it would be great to check the simpler option.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707431249","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707431249","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707431249,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzQzMTI0OQ==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-13T01:37:57Z","updated_at":"2020-10-13T01:37:57Z","author_association":"MEMBER","body":"> If this is relevant, using /bla,test/_eql/search (no wildcard) there is no exception being thrown.\r\n>\r\nThis is expected because the request does not contain any wildcard and `ignore_unavailable` is by default `true`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707467206","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707467206","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707467206,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzQ2NzIwNg==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-13T03:48:45Z","updated_at":"2020-10-13T03:54:56Z","author_association":"MEMBER","body":"Just read the QL team's weekly update which includes some information about why `allow_no_indices=false` is required for `/_eql/search`. IIUC, it needs at least one valid index so the query can be validated against the index mapping, which in turn is built with the FieldCapbilities API. The following code in `IndexResolver#mergedMappings` throws error if no index is available:\r\n\r\nhttps://github.com/elastic/elasticsearch/blob/284aaa8b22accefdaf2fd4a41f705d85a3b2b0ea/x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/index/IndexResolver.java#L307-L309\r\n\r\nHowever, when `allow_no_indices=false` and wildcard expansion gets nothing, the index resolution will fail earlier so that above code won't even be executed. It does not fail because the index resolution is done with `allow_no_indices=true`. In my opinion:\r\n1) eql is trying to do something that is already handled in a better place\r\n2) the semantics of `allow_no_indices` is misused in that eql actually is OK with `allow_no_indices=true` as long as the final list of indices is not empty. But `allow_no_indices` is about behaviour of a single wildcard expansion, it does not say anything about the final list.\r\n\r\nAlso, when security is enabled, wildcard will be expanded into conrete index names based on user's privileges. So the following line in EqlSession is not doing what you expected:\r\nhttps://github.com/elastic/elasticsearch/blob/284aaa8b22accefdaf2fd4a41f705d85a3b2b0ea/x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/EqlSession.java#L98\r\n\r\nFor example, with the following request \r\n```javascript\r\nGET /te*/_eql/search\r\n{\r\n  \"timestamp_field\": \"@timestamp\",\r\n  \"event_category_field\": \"text\",\r\n  \"query\": \"bla where true\"\r\n}\r\n```\r\nThe `indexWildcard` in the above line has value of `test` instead of `te*`. The code is essentially trying to double expand index names, which I believe is the cause of #63529.\r\n\r\nIn summary, I feel we need review how eql handles index expansion so it leverages and aligns with the existing code as much as possible. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707566429","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707566429","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707566429,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzU2NjQyOQ==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-10-13T08:02:10Z","updated_at":"2020-10-13T08:02:10Z","author_association":"CONTRIBUTOR","body":"@ywangd thank you for your analysis. I missed the subtlety of `allow_no_indices` acting only on wildcarded patterns which explains my confusion about\r\n   > If this is relevant, using /bla,test/_eql/search (no wildcard) there is no exception being thrown.\r\n\r\n> This is expected because the request does not contain any wildcard and ignore_unavailable is by default true.\r\n\r\nLeaving this aside though and getting back to my original report, the error `index_not_found_exception` in case Security is enabled in the cluster comes even before any EQL code is being executed.\r\nDoes this mean that Security tries to expand the wildcard expression based on `allow_no_indices` definition which fails, while in the case of a no Security cluster, there is no attempt of expansion until the code reaches EQL where things are not following `allow_no_indices` behavior (where if one wildcarded pattern matches no indices throw an error): EQL looks at the entire list of indices and wildcarded patterns and if the result of all of this is not a valid index, then we throw an exception. Is my understanding correct?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707666831","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707666831","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707666831,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzY2NjgzMQ==","user":{"login":"ywangd","id":2344308,"node_id":"MDQ6VXNlcjIzNDQzMDg=","avatar_url":"https://avatars3.githubusercontent.com/u/2344308?v=4","gravatar_id":"","url":"https://api.github.com/users/ywangd","html_url":"https://github.com/ywangd","followers_url":"https://api.github.com/users/ywangd/followers","following_url":"https://api.github.com/users/ywangd/following{/other_user}","gists_url":"https://api.github.com/users/ywangd/gists{/gist_id}","starred_url":"https://api.github.com/users/ywangd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywangd/subscriptions","organizations_url":"https://api.github.com/users/ywangd/orgs","repos_url":"https://api.github.com/users/ywangd/repos","events_url":"https://api.github.com/users/ywangd/events{/privacy}","received_events_url":"https://api.github.com/users/ywangd/received_events","type":"User","site_admin":false},"created_at":"2020-10-13T11:07:38Z","updated_at":"2020-10-13T11:07:38Z","author_association":"MEMBER","body":"@astefan Your understanding is correct.\r\n> EQL looks at the entire list of indices and wildcarded patterns and if the result of all of this is not a valid index, then we throw an exception.\r\n>\r\nThis behaviour is different from what `allow_no_indices=false` is used for. The `allow_no_indices` option is about expansion of a single wildcard, it does not say anything about the final list (the final result of expanding all index patterns).\r\n\r\nIt seems to me that EQL does not need mandate `allow_no_indices=false` for `EqlSearchRequest` since it does not rely on the behaviour but rather has its own logic to ensure non-empty list of indices.\r\n\r\nThe tricky part is that eql tries to report `Unknown index` along with the original index pattern. With security enabled, the indices expansion is done before the request reaches eql. When the request arrives, the original index pattern is no longer available. This is normally not an issue, because we usually want to fail ealier for any index pattern related issue. But eql seems to have a different requirement. We (es-security) talk about storing the original index pattern in a ThreadContext header, but no concrete plan yet. If this requirement makes sense for eql, maybe eql could be a driving use case for it. I can bring this up in our weekly meeting for broader discussions.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/707677915","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-707677915","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":707677915,"node_id":"MDEyOklzc3VlQ29tbWVudDcwNzY3NzkxNQ==","user":{"login":"albertzaharovits","id":4568420,"node_id":"MDQ6VXNlcjQ1Njg0MjA=","avatar_url":"https://avatars2.githubusercontent.com/u/4568420?v=4","gravatar_id":"","url":"https://api.github.com/users/albertzaharovits","html_url":"https://github.com/albertzaharovits","followers_url":"https://api.github.com/users/albertzaharovits/followers","following_url":"https://api.github.com/users/albertzaharovits/following{/other_user}","gists_url":"https://api.github.com/users/albertzaharovits/gists{/gist_id}","starred_url":"https://api.github.com/users/albertzaharovits/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/albertzaharovits/subscriptions","organizations_url":"https://api.github.com/users/albertzaharovits/orgs","repos_url":"https://api.github.com/users/albertzaharovits/repos","events_url":"https://api.github.com/users/albertzaharovits/events{/privacy}","received_events_url":"https://api.github.com/users/albertzaharovits/received_events","type":"User","site_admin":false},"created_at":"2020-10-13T11:31:23Z","updated_at":"2020-10-13T11:31:23Z","author_association":"CONTRIBUTOR","body":"I concur with Yang's assessment, and I wish to add some clarifications.\r\n\r\n> allow_no_indices acting only on wildcarded patterns \r\n\r\nWhat I understand you mean by this, is that the `allow_no_indices` indices option concerns the individual wildcard pattern expansion, and not the complete indices expression (i.e. the names and patterns separated by commas). This is true in the broad sense. But note that the index expression is resolved fairly [low-level](https://github.com/elastic/elasticsearch/blob/f491422e1edf79ea08d5657b5035f4a5ee444442/server/src/main/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolver.java#L905), usually in the transport search action. This doesn't prevent callers to also interpret the index option and act on it, which is what happens with Security (and apparently in EQL too).\r\nBut for this to work harmoniously, everyone has to agree on a single behaviour for the option.\r\n\r\n> Does this mean that Security tries to expand the wildcard expression based on allow_no_indices definition which fails, while in the case of a no Security cluster, there is no attempt of expansion until the code reaches EQL where things are not following allow_no_indices behavior (where if one wildcarded pattern matches no indices throw an error): EQL looks at the entire list of indices and wildcarded patterns and if the result of all of this is not a valid index, then we throw an exception. Is my understanding correct?\r\n\r\nThat's correct. \r\n\r\nI _think_ it is better for the eql API to respect the `allow_no_indices` option, in the same way that search does (maybe the internal action behind https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-resolve-index-api.html is useful). If the result of the index expression evaluation returns the empty list or if all the indices do not exist, then I think it is reasonable to treat this as a failure scenario in the eql action itself (eg eql query validation error, empty response or index not found exception), as there is no index expression that says \"make sure this expression evaluates to at least one index that exists\".\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/712250625","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-712250625","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":712250625,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjI1MDYyNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-10-19T15:36:28Z","updated_at":"2020-10-19T15:36:28Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-ql (:Query Languages/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/712256782","html_url":"https://github.com/elastic/elasticsearch/issues/63561#issuecomment-712256782","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63561","id":712256782,"node_id":"MDEyOklzc3VlQ29tbWVudDcxMjI1Njc4Mg==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-10-19T15:46:09Z","updated_at":"2020-10-19T15:46:09Z","author_association":"CONTRIBUTOR","body":"@ywangd @albertzaharovits thank you for your input on this issue. Following your comments and further investigation I'm closing this issue and conclude the following:\r\n- [`allow_no_indices` options has been changed to be `true` by default in EQL](https://github.com/elastic/elasticsearch/pull/63573) but it's still possible to have it changed by users\r\n- EQL expectation and `allow_no_indices` behavior are different and, at least for the time being, this will remain like this. We will obey `allow_no_indices` behavior by passing its value to both `_field_caps` and `_search` endpoints but if the outcome of resolving the indices patterns results in a no-index list, then EQL will throw an error. EQL needs at least one valid mapping to be able to evaluate the query that's being passed by users. This is also valid for SQL, but SQL doesn't allow changing `allow_no_indices` setting.\r\n- I will follow-up with another PR to include the original pattern in the error message EQL generates. At the moment `*, -*` (coming from Security resolving an invalid pattern) is included in the message. I understand [the meaning of `*, -*` and the reason for using it](https://github.com/elastic/elasticsearch/issues/63529) (`*` matches all, `-*` matches none which results in an overall \"match none\" choice which many ES APIs expect from an invalid pattern) and I agree this is the correct behavior from Security point of view.\r\n","performed_via_github_app":null}]