[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/138085234","html_url":"https://github.com/elastic/elasticsearch/issues/13348#issuecomment-138085234","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13348","id":138085234,"node_id":"MDEyOklzc3VlQ29tbWVudDEzODA4NTIzNA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-09-06T13:11:50Z","updated_at":"2015-09-06T13:11:50Z","author_association":"CONTRIBUTOR","body":"Hiya @truemped \n\nBad expectations and thus bad test :) (btw, providing the recreation in curl/sense syntax makes it easier to run).  To explain:\n\n```\nPUT test1\n{\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 0\n  }\n}\nPUT test2\n{\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 0\n  }\n}\n\nPUT test1/test/1\n{\n  \"text\": \"lucene beta\"\n}\nPUT test1/test/2\n{\n  \"text\": \"lucene release\"\n}\nPUT test2/test/3\n{\n  \"text\": \"elasticsearch beta\"\n}\nPUT test2/test/4\n{\n  \"text\": \"elasticsearch release\"\n}\n\nGET test1,test2/_validate/query?explain&rewrite\n{\n  \"query\": {\n    \"mlt\": {\n      \"like_text\": \"lucene beta\",\n      \"min_doc_freq\": 1,\n      \"min_term_freq\": 1\n    }\n  }\n}\n```\n\nreturns:\n\n```\n\"explanations\": [\n  {\n     \"index\": \"test1\",\n     \"valid\": true,\n     \"explanation\": \"_all:lucene _all:beta\"\n  },\n  {\n     \"index\": \"test2\",\n     \"valid\": true,\n     \"explanation\": \"_all:beta\"\n  }\n]\n```\n\nnote the use of the `_all` field.\n\nthe version with the IDs:\n\n```\nGET test1,test2/_validate/query?explain&rewrite\n{\n  \"query\": {\n    \"mlt\": {\n      \"ids\": [\"1\"],\n      \"min_doc_freq\": 1,\n      \"min_term_freq\": 1\n    }\n  }\n}\n```\n\nreturns: \n\n```\n\"explanations\": [\n  {\n     \"index\": \"test1\",\n     \"valid\": true,\n     \"explanation\": \"(text:lucene text:beta) -ConstantScore(_uid:test#1)\"\n  },\n  {\n     \"index\": \"test2\",\n     \"valid\": true,\n     \"explanation\": \"() -ConstantScore(_uid:test#1)\"\n  }\n]\n```\n\nIn other words it tries get document `1` from each index, but `test2` doesn't return a doc and so nothing matches.  The `ids` syntax is deprecated in favour of the multi-get syntax:\n\n```\nGET test1,test2/_validate/query?explain&rewrite\n{\n  \"query\": {\n    \"mlt\": {\n      \"docs\": [\n        {\n          \"_index\": \"test1\",\n          \"_type\": \"test\",\n          \"_id\": \"1\"\n        }\n      ],\n      \"min_doc_freq\": 1,\n      \"min_term_freq\": 1\n    }\n  }\n}\n```\n\nthe above request specifies the index and type for the document, so the correct document is used for both indices, returning:\n\n```\n\"explanations\": [\n  {\n     \"index\": \"test1\",\n     \"valid\": true,\n     \"explanation\": \"(text:lucene text:beta) -ConstantScore(_uid:test#1)\"\n  },\n  {\n     \"index\": \"test2\",\n     \"valid\": true,\n     \"explanation\": \"text:beta -ConstantScore(_uid:test#1)\"\n  }\n]\n```\n\nNote: it excludes document `1`, and runs the query on the `text` field, not the `_all` field\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/138241176","html_url":"https://github.com/elastic/elasticsearch/issues/13348#issuecomment-138241176","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13348","id":138241176,"node_id":"MDEyOklzc3VlQ29tbWVudDEzODI0MTE3Ng==","user":{"login":"truemped","id":63618,"node_id":"MDQ6VXNlcjYzNjE4","avatar_url":"https://avatars1.githubusercontent.com/u/63618?v=4","gravatar_id":"","url":"https://api.github.com/users/truemped","html_url":"https://github.com/truemped","followers_url":"https://api.github.com/users/truemped/followers","following_url":"https://api.github.com/users/truemped/following{/other_user}","gists_url":"https://api.github.com/users/truemped/gists{/gist_id}","starred_url":"https://api.github.com/users/truemped/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/truemped/subscriptions","organizations_url":"https://api.github.com/users/truemped/orgs","repos_url":"https://api.github.com/users/truemped/repos","events_url":"https://api.github.com/users/truemped/events{/privacy}","received_events_url":"https://api.github.com/users/truemped/received_events","type":"User","site_admin":false},"created_at":"2015-09-07T08:50:33Z","updated_at":"2015-09-07T08:50:33Z","author_association":"NONE","body":"Hey Clinton,\n\nthanks for the response. I don't really understand the difference between the `ids` and `multi get` query, even though the former one is deprecated now. My understanding of MLT in this case was a two phase algorithm, in which I ask ES to retrieve a certain document, create queries from it and search on the provided indices. Obviously it does so in the `multi get` version so I think this behavior is at least counter intuitive.\n\nIn my case for example the software querying ES might not even know in which index the document is stored. My use case for the `ids` or `multi get` is to save round trip time from the client. If I need to know the exact index in which the document is stored, the `ids/multi get` version is pretty useless to me?!\n\nDoes that make sense?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/138311329","html_url":"https://github.com/elastic/elasticsearch/issues/13348#issuecomment-138311329","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13348","id":138311329,"node_id":"MDEyOklzc3VlQ29tbWVudDEzODMxMTMyOQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-09-07T14:24:01Z","updated_at":"2015-09-07T14:24:01Z","author_association":"CONTRIBUTOR","body":"> My use case for the ids or multi get is to save round trip time from the client. If I need to know the exact index in which the document is stored, the ids/multi get version is pretty useless to me?!\n\nget and multi-get don't work on aliases which point to multiple indices.  that's not get.  That's a search.  If you don't know which indices your documents are in, then you need to do a search instead. No way around it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/138896596","html_url":"https://github.com/elastic/elasticsearch/issues/13348#issuecomment-138896596","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13348","id":138896596,"node_id":"MDEyOklzc3VlQ29tbWVudDEzODg5NjU5Ng==","user":{"login":"markmacmahon","id":441368,"node_id":"MDQ6VXNlcjQ0MTM2OA==","avatar_url":"https://avatars2.githubusercontent.com/u/441368?v=4","gravatar_id":"","url":"https://api.github.com/users/markmacmahon","html_url":"https://github.com/markmacmahon","followers_url":"https://api.github.com/users/markmacmahon/followers","following_url":"https://api.github.com/users/markmacmahon/following{/other_user}","gists_url":"https://api.github.com/users/markmacmahon/gists{/gist_id}","starred_url":"https://api.github.com/users/markmacmahon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markmacmahon/subscriptions","organizations_url":"https://api.github.com/users/markmacmahon/orgs","repos_url":"https://api.github.com/users/markmacmahon/repos","events_url":"https://api.github.com/users/markmacmahon/events{/privacy}","received_events_url":"https://api.github.com/users/markmacmahon/received_events","type":"User","site_admin":false},"created_at":"2015-09-09T12:40:37Z","updated_at":"2015-09-09T12:43:16Z","author_association":"NONE","body":"This is an unfortunate limitation of the MLT API as it means that everywhere we store Ids in our system, we also have to store knowledge of the index from which the Id resides.\n\nWhile this is not a showstopper, it does cause extra complications downstream when we want to do  things like re-indexing without any downtime.\n\nThis approach seems inconsistent with the description of aliases in this part of the [Elasticsearch Documentation](https://www.elastic.co/guide/en/elasticsearch/guide/current/index-aliases.html).\n\n> An index alias is like a shortcut or symbolic link, which can point to one or more indices, \n> and can be used in any API that expects an index name\n\n@clintongormley  Have you got any suggestions on how this could be avoided in an efficient way?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/141670355","html_url":"https://github.com/elastic/elasticsearch/issues/13348#issuecomment-141670355","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13348","id":141670355,"node_id":"MDEyOklzc3VlQ29tbWVudDE0MTY3MDM1NQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-09-19T13:50:52Z","updated_at":"2015-09-19T13:50:52Z","author_association":"CONTRIBUTOR","body":"> This approach seems inconsistent with the description of aliases in this part of the Elasticsearch Documentation.\n\nThis limitation is documented here: https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-index.html\n\n> While this is not a showstopper, it does cause extra complications downstream when we want to do things like re-indexing without any downtime.\n\nActually, reindexing is just fine.  With bulk responses, you get back the original `_index`, `_type`, and `_id` of every document, which you can use when reindexing.\n\n> Have you got any suggestions on how this could be avoided in an efficient way? \n\nIf you don't know what index a document is in, then essentially you have to do a query for that document using the `_id` in a term filter. \n","performed_via_github_app":null}]