[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/653515265","html_url":"https://github.com/elastic/elasticsearch/issues/59011#issuecomment-653515265","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/59011","id":653515265,"node_id":"MDEyOklzc3VlQ29tbWVudDY1MzUxNTI2NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-07-03T12:03:04Z","updated_at":"2020-07-03T12:03:04Z","author_association":"COLLABORATOR","body":"Pinging @elastic/ml-core (:ml)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/653545378","html_url":"https://github.com/elastic/elasticsearch/issues/59011#issuecomment-653545378","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/59011","id":653545378,"node_id":"MDEyOklzc3VlQ29tbWVudDY1MzU0NTM3OA==","user":{"login":"droberts195","id":7405510,"node_id":"MDQ6VXNlcjc0MDU1MTA=","avatar_url":"https://avatars0.githubusercontent.com/u/7405510?v=4","gravatar_id":"","url":"https://api.github.com/users/droberts195","html_url":"https://github.com/droberts195","followers_url":"https://api.github.com/users/droberts195/followers","following_url":"https://api.github.com/users/droberts195/following{/other_user}","gists_url":"https://api.github.com/users/droberts195/gists{/gist_id}","starred_url":"https://api.github.com/users/droberts195/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/droberts195/subscriptions","organizations_url":"https://api.github.com/users/droberts195/orgs","repos_url":"https://api.github.com/users/droberts195/repos","events_url":"https://api.github.com/users/droberts195/events{/privacy}","received_events_url":"https://api.github.com/users/droberts195/received_events","type":"User","site_admin":false},"created_at":"2020-07-03T13:19:04Z","updated_at":"2020-07-03T13:19:04Z","author_association":"CONTRIBUTOR","body":"Interestingly, in `x-pack/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/old_cluster/30_ml_jobs_crud.yml` we have this:\r\n\r\n```\r\nsetup:\r\n  - do:\r\n      index:\r\n        index: .ml-state\r\n        id: \"dummy-document-to-make-index-creation-idempotent\"\r\n        body: >\r\n          {\r\n          }\r\n\r\n  - do:\r\n      cluster.health:\r\n        index: [\".ml-state\"]\r\n        wait_for_status: green\r\n```\r\n\r\nThat strikes me as very dodgy, because it implies that our production code couldn't cope with possible race conditions with the creation of the `.ml-state` index.\r\n\r\nMore recently this won't even help, which probably explains why these tests sometimes fail now.  The index we are actually using is `.ml-state-000001` with its write alias `.ml-state-write`.  `.ml-state` is tolerated as a possible leftover from old versions, but would not be expected to have the write alias `.ml-state-write` pointing at it in 7.7 and above.\r\n\r\nTheory for what happened:\r\n\r\n- Start off in 7.6.  `.ml-state` gets created and we wait for green status, so its replica is assigned and the index is guaranteed to survive a single node being replaced.\r\n- Upgrade some nodes to 7.8, but at least one still on 7.6.  One of the 7.8 nodes decides to create `.ml-state-000001` and moves alias `.ml-state-write` to point at it.  The node that takes the primary is a 7.6 node.  The replica still hasn't been assigned.\r\n- Upgrade remaining nodes to 7.8.  The 7.6 node that took the `.ml-state-000001` index is replaced with a 7.8 node.  Since the replica had not yet been assigned the entire `.ml-state-000001` index is lost.  Since the alias is stored with the index, the `.ml-state-write` alias is also lost.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/653610197","html_url":"https://github.com/elastic/elasticsearch/issues/59011#issuecomment-653610197","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/59011","id":653610197,"node_id":"MDEyOklzc3VlQ29tbWVudDY1MzYxMDE5Nw==","user":{"login":"droberts195","id":7405510,"node_id":"MDQ6VXNlcjc0MDU1MTA=","avatar_url":"https://avatars0.githubusercontent.com/u/7405510?v=4","gravatar_id":"","url":"https://api.github.com/users/droberts195","html_url":"https://github.com/droberts195","followers_url":"https://api.github.com/users/droberts195/followers","following_url":"https://api.github.com/users/droberts195/following{/other_user}","gists_url":"https://api.github.com/users/droberts195/gists{/gist_id}","starred_url":"https://api.github.com/users/droberts195/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/droberts195/subscriptions","organizations_url":"https://api.github.com/users/droberts195/orgs","repos_url":"https://api.github.com/users/droberts195/repos","events_url":"https://api.github.com/users/droberts195/events{/privacy}","received_events_url":"https://api.github.com/users/droberts195/received_events","type":"User","site_admin":false},"created_at":"2020-07-03T16:08:56Z","updated_at":"2020-07-03T16:08:56Z","author_association":"CONTRIBUTOR","body":"We also have quite a few open issues for \"all shards failed\" against our internal state or stats indices: #54887, #55221, #55807, #57102, and #58841\r\n\r\nI am thinking that `MlIndexAndAlias.createIndexAndAliasIfNecessary` should wait for shards to be allocated for the index it creates before returning.  I will create a PR for this.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/654078509","html_url":"https://github.com/elastic/elasticsearch/issues/59011#issuecomment-654078509","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/59011","id":654078509,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NDA3ODUwOQ==","user":{"login":"przemekwitek","id":19312454,"node_id":"MDQ6VXNlcjE5MzEyNDU0","avatar_url":"https://avatars3.githubusercontent.com/u/19312454?v=4","gravatar_id":"","url":"https://api.github.com/users/przemekwitek","html_url":"https://github.com/przemekwitek","followers_url":"https://api.github.com/users/przemekwitek/followers","following_url":"https://api.github.com/users/przemekwitek/following{/other_user}","gists_url":"https://api.github.com/users/przemekwitek/gists{/gist_id}","starred_url":"https://api.github.com/users/przemekwitek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/przemekwitek/subscriptions","organizations_url":"https://api.github.com/users/przemekwitek/orgs","repos_url":"https://api.github.com/users/przemekwitek/repos","events_url":"https://api.github.com/users/przemekwitek/events{/privacy}","received_events_url":"https://api.github.com/users/przemekwitek/received_events","type":"User","site_admin":false},"created_at":"2020-07-06T07:56:50Z","updated_at":"2020-07-06T07:56:50Z","author_association":"CONTRIBUTOR","body":"> That strikes me as very dodgy, because it implies that our production code couldn't cope with possible race conditions with the creation of the .ml-state index.\r\n\r\nI've added this `setup` stanza when I was renaming `.ml-state` to `.ml-state-000001` (see https://github.com/elastic/elasticsearch/pull/52510/files#diff-90e5b005c474a5a63dafd0aa6ce50cbb). Back then I thought the realistic setup for the old (i.e. before upgrade) cluster was to have the `.ml-state` index created from the template and in a green state.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/654097519","html_url":"https://github.com/elastic/elasticsearch/issues/59011#issuecomment-654097519","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/59011","id":654097519,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NDA5NzUxOQ==","user":{"login":"droberts195","id":7405510,"node_id":"MDQ6VXNlcjc0MDU1MTA=","avatar_url":"https://avatars0.githubusercontent.com/u/7405510?v=4","gravatar_id":"","url":"https://api.github.com/users/droberts195","html_url":"https://github.com/droberts195","followers_url":"https://api.github.com/users/droberts195/followers","following_url":"https://api.github.com/users/droberts195/following{/other_user}","gists_url":"https://api.github.com/users/droberts195/gists{/gist_id}","starred_url":"https://api.github.com/users/droberts195/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/droberts195/subscriptions","organizations_url":"https://api.github.com/users/droberts195/orgs","repos_url":"https://api.github.com/users/droberts195/repos","events_url":"https://api.github.com/users/droberts195/events{/privacy}","received_events_url":"https://api.github.com/users/droberts195/received_events","type":"User","site_admin":false},"created_at":"2020-07-06T08:38:05Z","updated_at":"2020-07-06T08:38:05Z","author_association":"CONTRIBUTOR","body":"> Back then I thought the realistic setup for the old (i.e. before upgrade) cluster was to have the `.ml-state` index created from the template and in a green state.\r\n\r\nOh, I see.  Yes, I guess it does make sense in the case where the old cluster is on a version that will create `.ml-state-000001` itself, because it simulates the case of a `.ml-state` left over from a much older version.  So on the master branch it's fine.  But the complication is that in the 7.x/7.8/7.7 branches sometimes the old cluster is going to be on a version that uses `.ml-state` itself, and in this case the extra setup code is making the old cluster go through a different code path to what it would have gone through if it had created the index itself.  The interesting thing is that the setup of the `.ml-state` index for the old cluster creates the index but not the alias.  So this forces the old cluster code to go through the path where it just creates the alias, not the index. Usually when starting from scratch it would create the index and alias simultaneously.  So I bet what this failure shows is that we have a race condition on the code path where we need to create the `.ml-state-write` alias but not the `.ml-state` index.  (The `.ml-state-write` alias predates ILM on the state index - it was added in 6.7 by #37483.)","performed_via_github_app":null}]