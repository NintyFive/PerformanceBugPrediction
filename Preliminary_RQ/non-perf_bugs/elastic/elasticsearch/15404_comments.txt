[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164195271","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164195271","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164195271,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDE5NTI3MQ==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2015-12-12T21:31:02Z","updated_at":"2015-12-12T21:31:02Z","author_association":"MEMBER","body":"> Am I missing something about this change?\n\nThe change is not made arbitrarily or lightly, the problem is actually to\n_support_ various JSON nesting methods, for example:\n\nFor example, given two simple JSON documents:\n\nDocument A:\n\n``` json\n{\n  \"foo\": {\n    \"bar.baz\": 5\n  }\n}\n```\n\nDocument B:\n\n``` json\n{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": 7\n    }\n  }\n}\n```\n\nIf these were in the same document, what does `foo.bar.baz` refer to? 5 or 7?\nWhile useful to be able to have fields with periods in them, it leads to even\nmore confusion than not allowing them.\n\nIt's not just Elasticsearch that \"doesn't like\" ambiguity like this, take for\nexample the [jq](https://stedolan.github.io/jq/) tool:\n\n```\n» echo '{\"foo\": {\"bar.baz\": 5}}' | jq .foo\n{\n  \"bar.baz\": 5\n}\n» echo '{\"foo\": {\"bar.baz\": 5}}' | jq .foo.bar\nnull\n» echo '{\"foo\": {\"bar.baz\": 5}}' | jq .foo.bar.baz\nnull\n```\n\nOr accessing JSON members as objects in Javascript:\n\n```\n» node\n> s = JSON.parse('{\"foo\": {\"bar.baz\": 5}}')\n{ foo: { 'bar.baz': 5 } }\n> s.foo\n{ 'bar.baz': 5 }\n> s.foo.bar.baz\nTypeError: Cannot read property 'baz' of undefined\n    at repl:1:11\n    at REPLServer.self.eval (repl.js:110:21)\n    at Interface.<anonymous> (repl.js:239:12)\n    at Interface.emit (events.js:95:17)\n    at Interface._onLine (readline.js:203:10)\n    at Interface._line (readline.js:532:8)\n    at Interface._ttyWrite (readline.js:761:14)\n    at ReadStream.onkeypress (readline.js:100:10)\n    at ReadStream.emit (events.js:98:17)\n    at emitKey (readline.js:1096:12)\n> s.foo.\"bar.baz\"\n...\n... (node expects more input instead of resolving \"bar.baz\" as a key)\n```\n\nWould you say neither of those tools support JSON fully?\n\nThe complexity of having to remove the \".\" from field names is better than\nambiguous field resolving.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164202774","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164202774","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164202774,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDIwMjc3NA==","user":{"login":"taotetek","id":206719,"node_id":"MDQ6VXNlcjIwNjcxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/206719?v=4","gravatar_id":"","url":"https://api.github.com/users/taotetek","html_url":"https://github.com/taotetek","followers_url":"https://api.github.com/users/taotetek/followers","following_url":"https://api.github.com/users/taotetek/following{/other_user}","gists_url":"https://api.github.com/users/taotetek/gists{/gist_id}","starred_url":"https://api.github.com/users/taotetek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taotetek/subscriptions","organizations_url":"https://api.github.com/users/taotetek/orgs","repos_url":"https://api.github.com/users/taotetek/repos","events_url":"https://api.github.com/users/taotetek/events{/privacy}","received_events_url":"https://api.github.com/users/taotetek/received_events","type":"User","site_admin":false},"created_at":"2015-12-12T23:49:31Z","updated_at":"2015-12-12T23:55:23Z","author_association":"NONE","body":"@dakrone - thank you for the response!\n\nYou compare this limitation to  both javascript and jq - but your assertion is incorrect.  Both javascript and jq fully support JSON with periods in field names, and provide syntax for working with them, as follows:\n\n```\necho \"{\\\"first.name\\\":\\\"brian\\\"}\" | jq .'[\"first.name\"]'\n\"brian\"\n```\n\nYou can use this associative array syntax for accessing fields with periods in them in javascript as well.\n\nIf there now exists a subset of possible JSON documents that are in compliance with the JSON standard, will validate properly with tools that implement the standard, but cannot be inserted into Elasticsearch - then Elasticsearch no longer supports the JSON standard.\n\nWhile I understand that the decision was made in order avoid complexity in the query parser and to avoid some queries possibly resolving in unexpected ways, I find the decision regrettable. \n\nI'll add to this that in general, I'm very happy with Elasticsearch - I don't want my opinion on this matter to come across as a general opinion about ES or the engineers who contribute to it.  \n\nCheers,\nBrian\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164258875","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164258875","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164258875,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDI1ODg3NQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2015-12-13T13:34:50Z","updated_at":"2015-12-14T22:49:07Z","author_association":"MEMBER","body":"> If there now exists a subset of possible JSON documents that are in compliance with the JSON standard, will validate properly with tools that implement the standard, but cannot be inserted into Elasticsearch - then Elasticsearch no longer supports the JSON standard.\n\nThis appears to be the crux of your argument. Namely, you're asserting that since Elasticsearch (intentionally) returns an error on some conforming JSON texts, Elasticsearch does not support the JSON standard.\n\nJSON is a _data interchange format_, and the [JSON standard](https://tools.ietf.org/html/rfc7159) specifies the JSON grammar; the JSON standard does not a put a requirement on applications beyond specifying what a conforming JSON text is and requirements for parsing conforming JSON text.\n\nMost importantly, there is no standard nor practical requirement that applications that accept JSON must handle without error every conforming JSON text.\n\nConsider an application that uses the JSON format for application configuration; some configurations can be conforming JSON text but will be invalid for the application; the application can reject those but still be in conformance with how it _parses_ the configuration file.\n\nSimilarly, a web server that accepts a request with media type `application/json` can reject requests from clients that contain conforming JSON text in the request body, but are not valid requests for that web server. By way of a specific example, Twitter uses JSON to represent tweets and the associated metadata when it is communicating with a client; this does not mean that it must accept as a valid tweet every JSON document sent to one of its endpoints by a Twitter client.\n\nAnd that is what Elasticsearch does. You can send it conforming JSON text via HTTP, but if it does not meet the requirements that Elasticsearch puts on JSON documents, Elasticsearch will give you an [HTTP Bad Request](https://tools.ietf.org/html/rfc7231#section-6.5.1). Elasticsearch will have parsed this document according to the JSON standard, and then after that it tells the client this is a bad request for Elasticsearch.\n\nIf, however, you were to find a conforming JSON document that Elasticsearch does not parse and represent correctly internally according to the JSON standard, or a JSON response from Elasticsearch that is not conforming JSON text, then there would be a legitimate issue and it would be addressed appropriately.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164263779","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164263779","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164263779,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDI2Mzc3OQ==","user":{"login":"taotetek","id":206719,"node_id":"MDQ6VXNlcjIwNjcxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/206719?v=4","gravatar_id":"","url":"https://api.github.com/users/taotetek","html_url":"https://github.com/taotetek","followers_url":"https://api.github.com/users/taotetek/followers","following_url":"https://api.github.com/users/taotetek/following{/other_user}","gists_url":"https://api.github.com/users/taotetek/gists{/gist_id}","starred_url":"https://api.github.com/users/taotetek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taotetek/subscriptions","organizations_url":"https://api.github.com/users/taotetek/orgs","repos_url":"https://api.github.com/users/taotetek/repos","events_url":"https://api.github.com/users/taotetek/events{/privacy}","received_events_url":"https://api.github.com/users/taotetek/received_events","type":"User","site_admin":false},"created_at":"2015-12-13T14:36:50Z","updated_at":"2015-12-13T14:36:50Z","author_association":"NONE","body":"Elasticsearch no longer allows storage of key names that are in compliance with ECMA 404 definition of key names.  \"It parses the full standard in order to reject a subset of it\" is a poor argument for Elasticsearch's support of JSON.  \n\n`Consider an application that uses the JSON format for application configuration; some configurations can be conforming JSON text but will be invalid for the application`\n\nThis is an apples to oranges comparison.  Elasticsearch is not rejecting conforming JSON text that describes a configuration or API call that elasticsearch does not accept.  Elasticsearch is rejecting the storage of JSON keys  that are conforming JSON text within JSON objects that should be perfectly valid to store.  In this case, the structure of the JSON object is perfectly valid, and what you are in fact rejecting is the JSON data exchange format as described by the standard.  \n\nFrom what I'm hearing, it sounds like this decision is permanent.  Since I have no control over it, I'll work around it as best as I can.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164271546","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164271546","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164271546,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDI3MTU0Ng==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2015-12-13T16:16:19Z","updated_at":"2015-12-13T20:43:43Z","author_association":"MEMBER","body":"> Elasticsearch no longer allows storage of key names that are in compliance with ECMA 404 definition of key names.\n\nThe word \"key\" nor the term \"key name\" never appear in [ECMA 404](http://www.ecma-international.org/publications/standards/Ecma-404.htm). The word \"key\" does [appear](https://tools.ietf.org/html/rfc7159#section-1.1) in [RFC 7159](https://tools.ietf.org/html/rfc7159), but only in the context of referring to the [RFC requirement levels](http://www.ecma-international.org/publications/standards/Ecma-404.htm); the term \"key name\" never appears in [RFC 7159](https://tools.ietf.org/html/rfc7159). Both documents do refer to \"name/value\" pairs. However, there is no requirement by either specification that an application must accept all names as being valid for that application.\n\nThe concerns that you're discussing are concerns at the application layer on which the JSON standard places no restrictions.\n\n>  \"It parses the full standard in order to reject a subset of it\" is a poor argument for Elasticsearch's support of JSON.\n\nThe _only_ valid argument that Elasticsearch does not support JSON is to provide an example of conforming JSON text that is not parsed correctly by Elasticsearch, or to provide an example of a response with media type `application/json` that is not conforming JSON text.\n\nElasticsearch, like any other application that consumes JSON, places application logic on top of JSON. This is valid, and in conformance with the intended uses of JSON.\n\n> > Consider an application that uses the JSON format for application configuration; some configurations can be conforming JSON text but will be invalid for the application\n> \n> This is an apples to oranges comparison.\n\nIt is not, because the analogy is for a concern at the application layer, just as Elasticsearch rejecting fields with dots in their name is a concern at the application layer. The JSON standard places no requirements on the application layer.\n\n> Elasticsearch is rejecting the storage of JSON keys that are conforming JSON text within JSON objects that should be perfectly valid to store.\n\nAgain, this is a concern at the application layer. The JSON standard does not concern itself with concepts at the application layer such as \"storage\". It merely specifies what conforming JSON text is, and how it is to be parsed. It does not place requirements on the application layer and rejecting fields with dots in their name is a concern at the application layer.\n\n> In this case, the structure of the JSON object is perfectly valid, and what you are in fact rejecting is the JSON data exchange format as described by the standard.\n\nSuch JSON is valid, and Elasticsearch correctly parses that JSON and then rejects it at the application layer. This does not violate [ECMA 404](http://www.ecma-international.org/publications/standards/Ecma-404.htm) nor [RFC 7159](https://tools.ietf.org/html/rfc7159).\n\n> From what I'm hearing, it sounds like this decision is permanent.\n\nI'm hesitant to use a word like \"permanent\" but it is highly unlikely that this will change. Relates #12068.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164444468","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164444468","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164444468,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDQ0NDQ2OA==","user":{"login":"bryanl","id":240,"node_id":"MDQ6VXNlcjI0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/240?v=4","gravatar_id":"","url":"https://api.github.com/users/bryanl","html_url":"https://github.com/bryanl","followers_url":"https://api.github.com/users/bryanl/followers","following_url":"https://api.github.com/users/bryanl/following{/other_user}","gists_url":"https://api.github.com/users/bryanl/gists{/gist_id}","starred_url":"https://api.github.com/users/bryanl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bryanl/subscriptions","organizations_url":"https://api.github.com/users/bryanl/orgs","repos_url":"https://api.github.com/users/bryanl/repos","events_url":"https://api.github.com/users/bryanl/events{/privacy}","received_events_url":"https://api.github.com/users/bryanl/received_events","type":"User","site_admin":false},"created_at":"2015-12-14T13:58:42Z","updated_at":"2015-12-14T13:58:42Z","author_association":"NONE","body":"Hello, I've been following along, and I'd like to point out two things:\n\n```\n❯❯ node                                                                                                                                                                                                                                                                                                                                   ⏎ setup-install\n> s = JSON.parse('{\"foo\": {\"bar.baz\": 5}}')\n{ foo: { 'bar.baz': 5 } }\n> s.foo\n{ 'bar.baz': 5 }\n> s.foo[\"bar.baz\"]\n5\n```\n\nand \n\n```\necho '{\"foo\": {\"bar.baz\": 5}}' | jq '.foo[\"bar.baz\"]'\n5\n```\n\nBoth node and jq handle keys with periods in them.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/164448179","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164448179","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":164448179,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NDQ0ODE3OQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2015-12-14T14:15:46Z","updated_at":"2015-12-14T14:40:03Z","author_association":"MEMBER","body":"> Both node and jq handle keys with periods in them.\n\n`JSON.parse` from ECMAScript and `jq` are _general purpose_ in their handling of JSON.\n\nNot allowing dots in field names is a logical policy decision enforced in the _application layer_ of Elasticsearch. Elasticsearch correctly _parses_ the field names with dots in them, and then makes a logical policy decision to reject those at the application layer. This is not a violation of the JSON standard, and is consistent with the intended uses of JSON as a _data interchange format_. The JSON standard places no restrictions on the application layer of an application that consumes conforming JSON text.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/165122895","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-165122895","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":165122895,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NTEyMjg5NQ==","user":{"login":"doot0","id":1171137,"node_id":"MDQ6VXNlcjExNzExMzc=","avatar_url":"https://avatars0.githubusercontent.com/u/1171137?v=4","gravatar_id":"","url":"https://api.github.com/users/doot0","html_url":"https://github.com/doot0","followers_url":"https://api.github.com/users/doot0/followers","following_url":"https://api.github.com/users/doot0/following{/other_user}","gists_url":"https://api.github.com/users/doot0/gists{/gist_id}","starred_url":"https://api.github.com/users/doot0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/doot0/subscriptions","organizations_url":"https://api.github.com/users/doot0/orgs","repos_url":"https://api.github.com/users/doot0/repos","events_url":"https://api.github.com/users/doot0/events{/privacy}","received_events_url":"https://api.github.com/users/doot0/received_events","type":"User","site_admin":false},"created_at":"2015-12-16T14:20:19Z","updated_at":"2015-12-16T14:20:19Z","author_association":"NONE","body":"@jasontedor It seems your argument for not supporting these features is because you proactively choose not to \"at the application layer\". Your support for JSON is [explicitly implied](https://www.elastic.co/products/elasticsearch) on the elasticsearch product page under the \"Schema-Free\" heading. \n\nIf one cannot actually index a valid JSON file (with periods in key names) into an elasticsearch DB, surely you should not be claiming that you can?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/165136368","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-165136368","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":165136368,"node_id":"MDEyOklzc3VlQ29tbWVudDE2NTEzNjM2OA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2015-12-16T15:10:40Z","updated_at":"2015-12-17T15:58:26Z","author_association":"MEMBER","body":"> If one cannot actually index a valid JSON file (with periods in key names) into an elasticsearch DB, surely you should not be claiming that you can?\n\nThe claim that Elasticsearch supports JSON does not translate into Elasticsearch has to accept without any restrictions whatsoever every conforming JSON text that is handed to it. There are rules to using the system, they must be understood and followed, and having them doesn't violate any claims that Elasticsearch supports JSON.\n\nFor example, if you specify a field as having type [`long`](https://www.elastic.co/guide/en/elasticsearch/reference/current/number.html) in a mapping, and then pass Elasticsearch a document for which that field can not be parsed as a valid [`long`](https://www.elastic.co/guide/en/elasticsearch/reference/current/number.html), then Elasticsearch _can_ make a logical policy decision at the application layer to reject that document. This is but one of many examples of reasons that conforming JSON text can be rejected at the application layer.\n\nThe _only_ valid argument that Elasticsearch does not fully support JSON is if there exists conforming JSON text that Elasticsearch does not parse correctly, or if there exists a JSON response body from Elasticsearch that is not valid JSON. If either of those possibilities occur, then we have a legitimate issue and it will be addressed appropriately.\n\nBut there is _still_ no standard nor practical requirement that every application that consumes conforming JSON text can not make logical policy decisions based on the contents of the JSON text at the application layer. This is perfectly within the use cases of JSON as a _data interchange format_.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/167984049","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-167984049","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":167984049,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Nzk4NDA0OQ==","user":{"login":"jillesvangurp","id":819187,"node_id":"MDQ6VXNlcjgxOTE4Nw==","avatar_url":"https://avatars2.githubusercontent.com/u/819187?v=4","gravatar_id":"","url":"https://api.github.com/users/jillesvangurp","html_url":"https://github.com/jillesvangurp","followers_url":"https://api.github.com/users/jillesvangurp/followers","following_url":"https://api.github.com/users/jillesvangurp/following{/other_user}","gists_url":"https://api.github.com/users/jillesvangurp/gists{/gist_id}","starred_url":"https://api.github.com/users/jillesvangurp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jillesvangurp/subscriptions","organizations_url":"https://api.github.com/users/jillesvangurp/orgs","repos_url":"https://api.github.com/users/jillesvangurp/repos","events_url":"https://api.github.com/users/jillesvangurp/events{/privacy}","received_events_url":"https://api.github.com/users/jillesvangurp/received_events","type":"User","site_admin":false},"created_at":"2015-12-30T11:37:30Z","updated_at":"2015-12-30T11:37:30Z","author_association":"CONTRIBUTOR","body":"Respectfully, I strongly disagree with the notion that Elasticsearch can break its promise to index any valid json documents and reject content based on rather arbitrary limitations on field names that are not part of the json standard (as defined in https://tools.ietf.org/html/rfc7159). The standard defines what is a legal field name and elasticsearch doesn't support all legal fieldnames anymore.\n\nThis is a major breaking change that is deeply affecting us in multiple points in our architecture. Essentially, json compatibility was sacrificed in favor of syntactic sugar in the query language to be able to refer nested objects in an unambiguous way. That is valid of course but I'm now confronted with multiple external sources of perfectly valid json that used to index just fine that I can no longer index as is in elasticsearch as well as gigabytes of indices that I have to worry about migrating and testing. Migration to ES2 is a nightmare so far because of this. I'm months into planning the migration and still have a gazillion open issues; all revolving around finding and working around stupid dots in field names. This will likely continue to block us for some time and it is not like I haven't got more important stuff to worry about than field interpunction. Also even after I actually migrate this thing successfully I fully expect frequent regressions of dotted json slipping through and causing errors in the future as well. \n\nSo, I respect that this decision was taken. Also I respect the fact that it wasn't taken lightly. But I do hope that Elasticsearch finds a way back to being a general purpose JSON document store, which it currently isn't anymore. IMHO more can be and should have been done to make this less painful.\n\nOne fix that comes to mind is to simply disable dynamic index creation for fields with dots; which is probably what people would prefer rather than the entire document being rejected with some error about dots. We are talking about unmapped fields here that are being dynamically mapped. If you then want the field indexed anyway, all you need to do is rename it or copy it to some field with the dots replaced with underscores (this could even be a mapping feature: auto_convert_dots:true). A couple of new mapping features to enable/disable this behavior would probably fix things for most users and unbreak json compatibility. Any indexed fields would be guaranteed to be dot free this way and instead of fixing the data or the intake pipeline all you need to fix is your mappings.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/167997585","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-167997585","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":167997585,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Nzk5NzU4NQ==","user":{"login":"taotetek","id":206719,"node_id":"MDQ6VXNlcjIwNjcxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/206719?v=4","gravatar_id":"","url":"https://api.github.com/users/taotetek","html_url":"https://github.com/taotetek","followers_url":"https://api.github.com/users/taotetek/followers","following_url":"https://api.github.com/users/taotetek/following{/other_user}","gists_url":"https://api.github.com/users/taotetek/gists{/gist_id}","starred_url":"https://api.github.com/users/taotetek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taotetek/subscriptions","organizations_url":"https://api.github.com/users/taotetek/orgs","repos_url":"https://api.github.com/users/taotetek/repos","events_url":"https://api.github.com/users/taotetek/events{/privacy}","received_events_url":"https://api.github.com/users/taotetek/received_events","type":"User","site_admin":false},"created_at":"2015-12-30T13:17:01Z","updated_at":"2015-12-30T13:23:19Z","author_association":"NONE","body":"@jillesvangurp thank you - I was certain I couldn't be the only person this breaking change caused issues for.  For what it's worth, I've written a small daemon I'm now using that changes \".\"'s found in field names in my syslog traffic.  It was aggravating to burn engineering hours on turning JSON into \"elasticsearch JSON\" but the service is working for us.  The library includes a golang RFC3164 compliant syslog parser and a mutator that can scan keys and change them - in case it might be useful for your current pain it's available at https://github.com/digitalocean/captainslog\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/168144083","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-168144083","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":168144083,"node_id":"MDEyOklzc3VlQ29tbWVudDE2ODE0NDA4Mw==","user":{"login":"dotproto","id":1047763,"node_id":"MDQ6VXNlcjEwNDc3NjM=","avatar_url":"https://avatars1.githubusercontent.com/u/1047763?v=4","gravatar_id":"","url":"https://api.github.com/users/dotproto","html_url":"https://github.com/dotproto","followers_url":"https://api.github.com/users/dotproto/followers","following_url":"https://api.github.com/users/dotproto/following{/other_user}","gists_url":"https://api.github.com/users/dotproto/gists{/gist_id}","starred_url":"https://api.github.com/users/dotproto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dotproto/subscriptions","organizations_url":"https://api.github.com/users/dotproto/orgs","repos_url":"https://api.github.com/users/dotproto/repos","events_url":"https://api.github.com/users/dotproto/events{/privacy}","received_events_url":"https://api.github.com/users/dotproto/received_events","type":"User","site_admin":false},"created_at":"2015-12-31T07:42:25Z","updated_at":"2015-12-31T07:42:25Z","author_association":"NONE","body":"There seems to be a fundamental difference in what the commenters here think the term \"support\" means. One camps sees it as end-to-end support, the other sees it as an input format.\n\nI would contend that “JSON support” means end-to-end support. That is, saying Elasticsearch supports JSON implies to me that I can provide Elasticsearch with a valid, arbitrarily structured JSON document and Elasticsearch will index its contents. As long as the JSON supplied is (ECMA 404) valid, Elasticsearch’s application layer should handle it. Even more so since disallowing periods in the name of a collection's name/value pair is new to ES 2.x.\n\nSaying that Elasticsearch supports JSON is, in my mind, tantamount to saying that JSON objects should flow through the system without limitation. If that’s not the intent of the Elasticsearch dev team and/or Elasticsearch BV, then that should be clearly indicated in the project’s documentation. I’d also suggest that the team avoid describing Elasticsearch supporting JSON because of the obvious confusion associated with that phrase. Rather, the documentation should clearly state (where appropriate) that JSON is only used as a data transfer format or that Elasticsearch supports a subset of JSON.\n\n---\n\nAs a small addendum, I’ve been looking for Elasticsearch documentation on the character/format restrictions for field names. All I managed to find where this issue and a couple other issues on GitHub.\n\nI did find that ES 2.x ues on Lucene 5.x and as far as I can tell Lucene 5.x only requires that [field names are strings](http://lucene.apache.org/core/5_4_0/core/org/apache/lucene/document/Field.html#name). I also found some docs for Solr that clearly specifies [the format of a valid field name](https://cwiki.apache.org/confluence/display/solr/Defining+Fields). \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/168313719","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-168313719","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":168313719,"node_id":"MDEyOklzc3VlQ29tbWVudDE2ODMxMzcxOQ==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-01-01T15:48:56Z","updated_at":"2016-01-09T21:57:10Z","author_association":"MEMBER","body":"> One camps sees it as end-to-end support, the other sees it as an input format.\n\n@svincent The appeal to a formal standard was implied in the following from the [first comment](https://github.com/elastic/elasticsearch/issues/15404#issue-121863781) in this issue (emphasis on \"by definition\" added here):\n\n> Throwing exceptions on JSON field names that contain characters ( such as \".\" ) that are valid in JSON means that _by definition_ Elasticsearch no longer fully supports JSON.\n\nand made explicit in the [third comment](https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164202774) in this issue (the second by the OP):\n\n> Elasticsearch no longer supports the JSON standard.\n\nSaying that an implementation does not support a formal standard has a well-established understanding: there are requirements in the formal standard placed on all implementations that the implementation does not meet.\n\nAn appeal to an actual formal standard was made in the [fifth comment](https://github.com/elastic/elasticsearch/issues/15404#issuecomment-164263779) in this issue (the third by the OP):\n\n> Elasticsearch no longer allows storage of key names that are in compliance with ECMA 404 definition of key names. \"It parses the full standard in order to reject a subset of it\" is a poor argument for Elasticsearch's support of JSON.\n\nAs the comments in this issue continued along these lines with additional appeals to ECMA 404 and RFC 7159, the meaning of \"fully supports JSON\" was solidified. I think it is fair to claim that we have been talking about the same thing: whether or not Elasticsearch is in compliance with the JSON standard.\n\n> I would contend that “JSON support” means end-to-end support.\n\nIn this issue, it does not.\n\n> Saying that Elasticsearch supports JSON is, in my mind, tantamount to saying that JSON objects should flow through the system without limitation.\n\nThis is a requirement that Elasticsearch has never provided.\n\n> As a small addendum, I’ve been looking for Elasticsearch documentation on the character/format restrictions for field names.\n\nIt's in the [breaking changes for 2.0](https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking_20_mapping_changes.html#_field_names_may_not_contain_dots).\n\n> I did find that ES 2.x ues on Lucene 5.x and as far as I can tell Lucene 5.x only requires that [field names are strings](http://lucene.apache.org/core/5_4_0/core/org/apache/lucene/document/Field.html#name).\n\nThe requirement is not from Lucene, it's a requirement from the logic that Elasticsearch builds on top of Lucene.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/168317023","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-168317023","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":168317023,"node_id":"MDEyOklzc3VlQ29tbWVudDE2ODMxNzAyMw==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2016-01-01T16:56:26Z","updated_at":"2016-01-02T16:37:34Z","author_association":"MEMBER","body":"> Respectfully, I strongly disagree with the notion that Elasticsearch can break its promise to index any valid json documents and reject content based on rather arbitrary limitations on field names\n\n@jillesvangurp It is not arbitrary and it was, as you note, not taken lightly. The ultimate reason was to avoid ambiguity, a dangerous problem. This is covered throughly in the [breaking changes for 2.0](https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking_20_mapping_changes.html#_field_names_may_not_contain_dots), #5972, #7112, #11337, #12068, and #14359.\n\n> that are not part of the json standard (as defined in https://tools.ietf.org/html/rfc7159). The standard defines what is a legal field name and elasticsearch doesn't support all legal fieldnames anymore.\n\nPlease note these key clauses from [RFC 7159](https://tools.ietf.org/html/rfc7159):\n\n> `An object is an unordered collection of zero or more name/value`\n> `pairs, where a name is a string and a value is a string, number,`\n> `boolean, null, object, or array.`\n\nand\n\n> `An implementation may set limits on the length and`\n> `character contents of strings.`\n\nI maintain that even without these clauses, Elasticsearch can make a logical policy decision at the application layer to reject certain conforming JSON texts, but these clauses leave no doubt.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/175236751","html_url":"https://github.com/elastic/elasticsearch/issues/15404#issuecomment-175236751","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/15404","id":175236751,"node_id":"MDEyOklzc3VlQ29tbWVudDE3NTIzNjc1MQ==","user":{"login":"davidelang","id":2208335,"node_id":"MDQ6VXNlcjIyMDgzMzU=","avatar_url":"https://avatars1.githubusercontent.com/u/2208335?v=4","gravatar_id":"","url":"https://api.github.com/users/davidelang","html_url":"https://github.com/davidelang","followers_url":"https://api.github.com/users/davidelang/followers","following_url":"https://api.github.com/users/davidelang/following{/other_user}","gists_url":"https://api.github.com/users/davidelang/gists{/gist_id}","starred_url":"https://api.github.com/users/davidelang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidelang/subscriptions","organizations_url":"https://api.github.com/users/davidelang/orgs","repos_url":"https://api.github.com/users/davidelang/repos","events_url":"https://api.github.com/users/davidelang/events{/privacy}","received_events_url":"https://api.github.com/users/davidelang/received_events","type":"User","site_admin":false},"created_at":"2016-01-26T21:24:39Z","updated_at":"2016-01-26T21:24:39Z","author_association":"NONE","body":"During the Project Lumberjack discussions, we were talking about ways to 'flatten' references to multi-tier JSON structure elements and during that discussion we picked ! as the level delimiter, because it's a reserved character in so many languages, people are very unlikely to use it in a name. As this discussion demonstrates, using a period as the delimiter is problematic as it's a common character to use in variable names.\n\nPerhapse the easiest path forward is to tweak Elasticsearch so that the delimiter character is configurable. For ES2.0, leave the default as '.' (as currently defined and documented), and consider migrating to '!' going forward. \n\nRsyslog uses ! as the delimiter, and it is the default on linux distros right now.\nsyslog-ng uses . as the delimiter, so it would have the same problem that ES currently has.\nlogstash accesses multi tier data as [level1][level2]\nnxlog doesn't implement any support for multi-level variables\nsumologic uses . as the delimiter, so it would have the same problem\n\nso in spite of people discussing he issue and the problems using dot as the separator and agreeing on a 'standard', it seems that the different logging systems have gone in different directions (the nice thing about standards is that there are so many to choose from )-:\n","performed_via_github_app":null}]