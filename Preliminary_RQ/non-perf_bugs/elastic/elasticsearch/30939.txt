{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30939","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30939/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30939/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30939/events","html_url":"https://github.com/elastic/elasticsearch/issues/30939","id":327439148,"node_id":"MDU6SXNzdWUzMjc0MzkxNDg=","number":30939,"title":"Dynamic Field Mapping and Templates using numeric_detection does not match documentation","user":{"login":"StevenToth","id":861879,"node_id":"MDQ6VXNlcjg2MTg3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/861879?v=4","gravatar_id":"","url":"https://api.github.com/users/StevenToth","html_url":"https://github.com/StevenToth","followers_url":"https://api.github.com/users/StevenToth/followers","following_url":"https://api.github.com/users/StevenToth/following{/other_user}","gists_url":"https://api.github.com/users/StevenToth/gists{/gist_id}","starred_url":"https://api.github.com/users/StevenToth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StevenToth/subscriptions","organizations_url":"https://api.github.com/users/StevenToth/orgs","repos_url":"https://api.github.com/users/StevenToth/repos","events_url":"https://api.github.com/users/StevenToth/events{/privacy}","received_events_url":"https://api.github.com/users/StevenToth/received_events","type":"User","site_admin":false},"labels":[{"id":141145460,"node_id":"MDU6TGFiZWwxNDExNDU0NjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Mapping","name":":Search/Mapping","color":"0e8a16","default":false,"description":"How fields should be indexed"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null},{"id":23715,"node_id":"MDU6TGFiZWwyMzcxNQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Edocs","name":">docs","color":"db755e","default":false,"description":"General docs changes"}],"state":"closed","locked":false,"assignee":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"assignees":[{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2018-05-29T18:37:33Z","updated_at":"2018-06-05T06:51:53Z","closed_at":"2018-06-05T06:51:53Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\r\n\r\n** Please read the guidelines below. **\r\n\r\nIssues that do not follow these guidelines are likely to be closed.\r\n\r\n1.  GitHub is reserved for bug reports and feature requests. The best place to\r\n    ask a general question is at the Elastic [forums](https://discuss.elastic.co).\r\n    GitHub is not the place for general questions.\r\n\r\n2.  Is this bug report or feature request for a supported OS? If not, it\r\n    is likely to be closed.  See https://www.elastic.co/support/matrix#show_os\r\n\r\n3.  Please fill out EITHER the feature request block or the bug report block\r\n    below, and delete the other block.\r\n\r\n-->\r\n\r\n<!-- Feature request -->\r\n\r\n**Describe the feature**: Bug in Dynamic field mapping of floating point numbers with `numeric_detection` enabled.\r\n\r\n<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`): 6.2.2\r\n\r\n**Plugins installed**: []\r\n\r\n**JVM version** (`java -version`): 1.8.0_66\r\n\r\n**OS version** (`uname -a` if on a Unix-like system): RHEL6\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\nAccording to the documentation on [Dynamic field mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-field-mapping.html#numeric-detection), when `numeric_detection` is enabled passing a floating point number as a `string` will map the field to a `double`.\r\n\r\n```\r\nPUT my_index/_doc/1\r\n{\r\n  \"my_float\":   \"1.0\",\r\n  \"my_integer\": \"1\" \r\n}\r\n```\r\n> The my_float field is added as a double field.\r\n\r\n**However, this actually results in the field being mapped as a `float`.**\r\n\r\nIn addition, the documentation on [Dynamic templates](https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-templates.html#match-mapping-type) indicates that only the following datatypes can be dynamically mapped using `match_mapping_type`:\r\n> Only the following datatypes can be automatically detected: boolean, date, double, long, object, string.\r\n\r\nTherefore, based on the absence of the float datatype in that list and the fact that the floating point numbers are being dynamically mapped with a float datatype, it would seem that **dynamically mapped floating point numbers cannot be mapped to a double datatype using `match_mapping_type`**.  \r\n\r\nThere is a workaround using `match_mapping_type`.  I verified dynamic templates will not allow a value of `float` for the `match_mapping_type`, but I found that using a dynamic template with a `match_mapping_type` of `double` will map the fields that would have been dynamically mapped as `float` to `double`.  See **Steps to reproduce** for an example of the workaround.\r\n\r\n_*DISCLAIMER The following is a shameless plug for 64-bit Unsigned Integer support in Elasticsearch_\r\nThe dynamic mapping to double is needed as there is **no support for 64-bit unsigned integers in Elasticsearch**, whereas the system publishing the data (a custom **_Elastic_** Beat written in Go) does support 64-bit unsigned integers.  The Beat was coded to workaround the limitations of Elasticsearch by publishing the 64-bit unsigned integer values as strings with a trailing '.0', so they are dynamically mapped as doubles.  Otherwise, calculations, including those done in aggregations, in Elasticsearch were generating inaccurate results (even with the understanding that certain precision loss would happen) due to overflows (precision loss is one thing, getting a negative result when it is not mathematically possible is another).  I've only been working with the stack for a short time, but I appreciate the complexity, capabilities and power of it.  However, it feels \"hackish\" to have to treat 64-bit unsigned integers (not an uncommon thing) as floating point numbers masquerading as strings to be able to dynamically map and store them in a way that can efficiently be used in calculations and aggregations. \r\n\r\n**Steps to reproduce**:\r\n\r\n 1. Turn on numeric detection\r\n```\r\nPUT /_template/my_index_template\r\n{\r\n  \"index_patterns\": [\"my_index\"],\r\n  \"mappings\": {\r\n    \"doc\": {\r\n      \"numeric_detection\": true\r\n    }\r\n  }\r\n}\r\n```\r\n 2. Add document\r\n```\r\nPOST my_index/doc/\r\n{\r\n  \"start\":        \"1527613753042816000.0\",\r\n  \"end\":          \"1527613753110000128.0\",\r\n  \"iterations\":   \"100\"\r\n}\r\n```\r\n 3. Get mapping\r\n```\r\nGET my_index/_mapping/\r\n```\r\n`start` and `end` fields are dynamically mapped as `float`\r\n```\r\n{\r\n  \"my_index\": {\r\n    \"mappings\": {\r\n      \"doc\": {\r\n        \"numeric_detection\": true,\r\n        \"properties\": {\r\n          \"end\": {\r\n            \"type\": \"float\"\r\n          },\r\n          \"iterations\": {\r\n            \"type\": \"long\"\r\n          },\r\n          \"start\": {\r\n            \"type\": \"float\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n**WORKAROUND**\r\n\r\n 4. Delete index\r\n```\r\nDELETE /my_index\r\n```\r\n 5. Replace template [with one that maps `double` to `double`]\r\n```\r\nPUT /_template/my_index_template\r\n{\r\n  \"index_patterns\": [\"my_index\"],\r\n  \"mappings\": {\r\n    \"doc\": {\r\n      \"numeric_detection\": true,\r\n      \"dynamic_templates\": [\r\n        {\r\n          \"not_so_double_to_double\": {\r\n            \"match_mapping_type\": \"double\",\r\n            \"mapping\": {\r\n              \"type\": \"double\"\r\n            }\r\n          }\r\n        }\r\n       ]\r\n    }\r\n  }\r\n}\r\n```\r\n 6. Add [same] document\r\n```\r\nPOST my_index/doc/\r\n{\r\n  \"start\":        \"1527613753042816000.0\",\r\n  \"end\":          \"1527613753110000128.0\",\r\n  \"iterations\":   \"100\"\r\n}\r\n```\r\n 7. Get the mapping\r\n```\r\nGET my_index/_mapping/\r\n```\r\n`start` and `end` fields are dynamically mapped as `double`\r\n```\r\n{\r\n  \"my_index\": {\r\n    \"mappings\": {\r\n      \"doc\": {\r\n        \"dynamic_templates\": [\r\n          {\r\n            \"not_so_double_to_double\": {\r\n              \"match_mapping_type\": \"double\",\r\n              \"mapping\": {\r\n                \"type\": \"double\"\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        \"numeric_detection\": true,\r\n        \"properties\": {\r\n          \"end\": {\r\n            \"type\": \"double\"\r\n          },\r\n          \"iterations\": {\r\n            \"type\": \"long\"\r\n          },\r\n          \"start\": {\r\n            \"type\": \"double\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEPILOGUE\r\nJust to illustrate the impact of the mapping using the following query: \r\n```\r\nGET my_index/_search?size=0\r\n{\r\n  \"aggs\": {\r\n    \"avgDurationPerIteration\": {\r\n      \"avg\": {\r\n        \"script\": \"(doc['end'].value - doc['start'].value) / doc['iterations'].value\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n 1. When fields are mapped as `float`\r\n```\r\n{\r\n  \"took\": 1,\r\n  \"timed_out\": false,\r\n  \"_shards\": {\r\n    \"total\": 5,\r\n    \"successful\": 5,\r\n    \"skipped\": 0,\r\n    \"failed\": 0\r\n  },\r\n  \"hits\": {\r\n    \"total\": 1,\r\n    \"max_score\": 0,\r\n    \"hits\": []\r\n  },\r\n  \"aggregations\": {\r\n    \"avgDurationPerIteration\": {\r\n      \"value\": 0\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n 2. When fields are mapped as `double`\r\n```\r\n{\r\n  \"took\": 1,\r\n  \"timed_out\": false,\r\n  \"_shards\": {\r\n    \"total\": 5,\r\n    \"successful\": 5,\r\n    \"skipped\": 0,\r\n    \"failed\": 0\r\n  },\r\n  \"hits\": {\r\n    \"total\": 1,\r\n    \"max_score\": 0,\r\n    \"hits\": []\r\n  },\r\n  \"aggregations\": {\r\n    \"avgDurationPerIteration\": {\r\n      \"value\": 671841.28\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nNOTE: Results are the same even when using `BigDecimal` to do the calculations:\r\n```\r\nGET my_index/_search?size=0\r\n{\r\n  \"aggs\": {\r\n    \"avgDurationPerIteration\": {\r\n      \"avg\": {\r\n        \"script\": \"BigDecimal.valueOf(doc['end'].value).subtract(BigDecimal.valueOf(doc['start'].value)).divide(BigDecimal.valueOf(doc['iterations'].value*1.0)).doubleValue()\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n**Provide logs (if relevant)**:\r\n\r\n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}