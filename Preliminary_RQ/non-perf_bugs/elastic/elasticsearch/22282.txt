{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/22282","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22282/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22282/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22282/events","html_url":"https://github.com/elastic/elasticsearch/issues/22282","id":196685122,"node_id":"MDU6SXNzdWUxOTY2ODUxMjI=","number":22282,"title":"Randomness.get() can make tests non repeatable","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"labels":[{"id":60445228,"node_id":"MDU6TGFiZWw2MDQ0NTIyOA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Etest","name":">test","color":"5319e7","default":false,"description":"Issues or PRs that are addressing/adding tests"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-12-20T14:25:12Z","updated_at":"2016-12-20T15:47:35Z","closed_at":"2016-12-20T15:47:28Z","author_association":"MEMBER","active_lock_reason":null,"body":"The `Randomness` class was introduced to ease tests repeatability, especially around collections shuffling. `Randomness` works by essentially looking for randomized testing classes in our classpath. If they are found, which is always true in our test classes, the random instance is retrieved via `RandomizedContext.current().getRandom()`. This is the right thing to do in most cases (e.g. while executing tests), but breaks repeatability when something should happen on a separate random instance. For instance, our `IngestActionForwarder` uses `Randomness.get()`during its initialization. The class is initialized while initializing a node. That breaks repeatability in our integ tests as nodes are generally initialized once per suite, before the first test runs. To make sure that the sequence is repeatable, we fork a different random doing `new Random(random().nextLong())`. That though is not getting picked up by `IngestActionForwarder` which ends up \"stealing\" a `random.nextInt()` call from the shared randomized context.\r\n\r\nI think that all these random behaviours within a node (in our codebase actually) should rather be seeded and repeatable as much as possible. We already have the node seed setting, hence we should always try and use it when set (if it is not set there isn't much that we can do though).  That means always using the node seed when available and make sure that our tests always provide the setting (for instance `EsSingleNodeTestCase` doesn't but should). The seed should have the precedence over the randomized context. I was surprised to see that there's only one place where we actually use the node seed (when we generate the node id). Every other place using randomness ends up either using randomized context if available in the classpath (potentially causing problems as the node seed is not taken into account), or creating a new random without seed (non repeatable sequence).\r\n\r\nIt seems that the `Randomness.get()` method potentially cause problems, I wonder if we have settings available wherever we use it, in which case we could simply remove the method and replace it with the one that takes the node seed into account. What do people think about this?","closed_by":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"performed_via_github_app":null}