[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/257178095","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-257178095","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":257178095,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NzE3ODA5NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-10-30T20:50:16Z","updated_at":"2016-10-30T20:50:16Z","author_association":"CONTRIBUTOR","body":"What is the use-case that you can solve with `_source` that you cannot solve with doc values? I'm reluctant to expose `_source` in painless but maybe there are other improvements we can make so that `_source` access would not be needed.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/257362418","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-257362418","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":257362418,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NzM2MjQxOA==","user":{"login":"nicolasgarfinkiel","id":384593,"node_id":"MDQ6VXNlcjM4NDU5Mw==","avatar_url":"https://avatars1.githubusercontent.com/u/384593?v=4","gravatar_id":"","url":"https://api.github.com/users/nicolasgarfinkiel","html_url":"https://github.com/nicolasgarfinkiel","followers_url":"https://api.github.com/users/nicolasgarfinkiel/followers","following_url":"https://api.github.com/users/nicolasgarfinkiel/following{/other_user}","gists_url":"https://api.github.com/users/nicolasgarfinkiel/gists{/gist_id}","starred_url":"https://api.github.com/users/nicolasgarfinkiel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nicolasgarfinkiel/subscriptions","organizations_url":"https://api.github.com/users/nicolasgarfinkiel/orgs","repos_url":"https://api.github.com/users/nicolasgarfinkiel/repos","events_url":"https://api.github.com/users/nicolasgarfinkiel/events{/privacy}","received_events_url":"https://api.github.com/users/nicolasgarfinkiel/received_events","type":"User","site_admin":false},"created_at":"2016-10-31T17:33:52Z","updated_at":"2016-10-31T18:02:54Z","author_association":"NONE","body":"I have a lot of fields that I don't index because I never search for them as per my application needs, but of course I need them when retrieving the document source either by search or get. That saves me a lot of indexing and storage resources.\n\nBut for example the other day I needed to know if an array field contained null values. that field I would never ever query, but I needed to check its data integrity from an import process.\n\nAs I said, Painless is great for ad-hoc querying. Something that is trivial in a RDBMS and a bit \"involved\" in ES. IMHO Painless inline is good enough for me.\n\nAnyhow, I don't see why it is ok to have _source in Groovy, JavaScript, etc. but not in Painless.\n\nI know that ES offers me a lot of choices to accomplish a certain task. Some more performant than others. But I don't think that there is any gain in blocking a feature that is not a threat to ES security or stability (a clear line drawer) just because it is not as performant as the other choices, because you never know which use case they might be solving.\n\nI will never index those fields just for the sake that, who knows, some day I might need to query them. Querying the _source allows me not to index \"garbage fields\".\n\nWhat do you think?\n\nPS: As a final note, before groovy was dimmed unfit for default inline scripting, _source was enabled for it. Now we have a safe language as default. :-)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/257414706","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-257414706","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":257414706,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NzQxNDcwNg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-10-31T20:42:32Z","updated_at":"2016-10-31T20:42:32Z","author_association":"CONTRIBUTOR","body":"I did not make the decision to not expose source access but I understand the reasoning. I also understand how using source in queries can help do some one-off queries. I'll add the `discuss` label.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/257514887","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-257514887","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":257514887,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NzUxNDg4Nw==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-11-01T08:41:20Z","updated_at":"2016-11-01T08:41:20Z","author_association":"CONTRIBUTOR","body":"When we made decisions for painless we wanted to ensure that it's secure and fast with respect to it's usecases. Allowing access to `_source` crosses the line here. It means you are doing linear IO on every document matching a query. This is what should be done in reindexing. Hold your breath for a second, I can already see you saying \"but but but\" yes it's not perfect! There are legit usecases where it might be ok to access `_source` like when you have low num of docs and you are not time-critical etc. Some of these usecases are simply not what painless was made for in the first place. Fetching every document in the index on a per-query bases can certainly cause huge stability issues on clusters. If you reindex you do this only once not on a per query basis. \n\n> I know that ES offers me a lot of choices to accomplish a certain task. Some more performant than others. But I don't think that there is any gain in blocking a feature that is not a threat to ES security or stability (a clear line drawer) just because it is not as performant as the other choices, because you never know which use case they might be solving.\n\nI have to disagree with this theory on all levels. With painless we had no BWC at all that means we didn't have to support any feature that we would have not added today. Hence the `_source` limitation. That said, it's not a hard BWC break since we still kinda support other scripting languages that have that difficult feature. If you follow your theory you can't add anything anymore to elasticsearch since the theory renders removal impossible. The flip side is that addition becomes impossible since you have to get it perfect or you are lost. \n\nBack to a usecase and my dream... my dream would be to not have these drowning discussions where X is not supported. I know it's a dream since people think in X Y problems all over the place. When you want to access a value that has no doc values, what are your options? One would be to reindex, (it might be similarly fast in some cases) the other might be adding some functionality that can provide a doc values interface loading stuff from stored fields such that `_source` is not needed anymore. We can for instance make it memory bound and cache things to make it faster or even move it into a plugin etc. such that users need to actively opt in? Let's collect the usercases, and see if we can build a good solution for this rather than cluttering the scripting languages interface with a feature that surprises a lot of people, kills search performance and can cause disk IO to skyrocket.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/257702295","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-257702295","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":257702295,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NzcwMjI5NQ==","user":{"login":"nicolasgarfinkiel","id":384593,"node_id":"MDQ6VXNlcjM4NDU5Mw==","avatar_url":"https://avatars1.githubusercontent.com/u/384593?v=4","gravatar_id":"","url":"https://api.github.com/users/nicolasgarfinkiel","html_url":"https://github.com/nicolasgarfinkiel","followers_url":"https://api.github.com/users/nicolasgarfinkiel/followers","following_url":"https://api.github.com/users/nicolasgarfinkiel/following{/other_user}","gists_url":"https://api.github.com/users/nicolasgarfinkiel/gists{/gist_id}","starred_url":"https://api.github.com/users/nicolasgarfinkiel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nicolasgarfinkiel/subscriptions","organizations_url":"https://api.github.com/users/nicolasgarfinkiel/orgs","repos_url":"https://api.github.com/users/nicolasgarfinkiel/repos","events_url":"https://api.github.com/users/nicolasgarfinkiel/events{/privacy}","received_events_url":"https://api.github.com/users/nicolasgarfinkiel/received_events","type":"User","site_admin":false},"created_at":"2016-11-01T21:23:18Z","updated_at":"2016-11-01T21:23:18Z","author_association":"NONE","body":"You raise many valid points, which makes me understand the why on your decision, though I must say I don't agree with most of them. I will use a lot of RDBMS analogies here, but please bear with me.\n- linear IO on every matching query is not as different as doing a sequential scan. It doesn't matter if the user planned for it. If he issued a query and the planner decided a sequential scan, that's the way it goes. That a user doesn't understand the consequences of his actions doesn't make the RDBMS accountable for.\n- Reindexing is not a practical option. You are better off storing a groovy script.\n- IMHO it has nothing to do with BWC. It has to do more with a lack of a very useful feature, which is a given in most other data stores: exploratory querying.\n- Why not making it available as a DSL parameter? Something like _source_enabled: true. That way you are opting in for it. No surprises. You know what you are doing action.\n\nBTW, is this restriction actually in the docs? I could not find it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258394322","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-258394322","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":258394322,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODM5NDMyMg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-11-04T10:33:02Z","updated_at":"2016-11-04T10:33:02Z","author_association":"CONTRIBUTOR","body":"Discussed in FixItFriday.  We considered adding a safeguard setting which you'd have to explicitly enable to allow source access in scripts, but we have had bad experiences with things like this (eg dots in field names): unaware users tend to copy paste these settings without any thought for the consequences, and we have seen so many issues in the past with people using source in scripts that it's something we're not keen to revisit.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258788499","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-258788499","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":258788499,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODc4ODQ5OQ==","user":{"login":"HonzaKral","id":32132,"node_id":"MDQ6VXNlcjMyMTMy","avatar_url":"https://avatars0.githubusercontent.com/u/32132?v=4","gravatar_id":"","url":"https://api.github.com/users/HonzaKral","html_url":"https://github.com/HonzaKral","followers_url":"https://api.github.com/users/HonzaKral/followers","following_url":"https://api.github.com/users/HonzaKral/following{/other_user}","gists_url":"https://api.github.com/users/HonzaKral/gists{/gist_id}","starred_url":"https://api.github.com/users/HonzaKral/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HonzaKral/subscriptions","organizations_url":"https://api.github.com/users/HonzaKral/orgs","repos_url":"https://api.github.com/users/HonzaKral/repos","events_url":"https://api.github.com/users/HonzaKral/events{/privacy}","received_events_url":"https://api.github.com/users/HonzaKral/received_events","type":"User","site_admin":false},"created_at":"2016-11-07T09:39:33Z","updated_at":"2016-11-07T09:39:33Z","author_association":"MEMBER","body":"I have seen several legitimate use cases for accessing `_source` in your scripts for both queries and aggregations. I would be perfectly comfortable with having this functionality disabled by default as long as it would be dynamically updatable at runtime.\n\nSome use cases (especially compelling if you consider their use in `rescore`):\n- look at detailed fields that are not indexed\n- run complex computation on source of analyzed fields\n- aggregate over fields with no doc_values (ad-hoc exploration)\n- comparing different fields\n\nI strongly believe that this is something we can just solve with documentation - a clear message about what accessing _source means and what are better solutions for that problem.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258829524","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-258829524","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":258829524,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODgyOTUyNA==","user":{"login":"nicolasgarfinkiel","id":384593,"node_id":"MDQ6VXNlcjM4NDU5Mw==","avatar_url":"https://avatars1.githubusercontent.com/u/384593?v=4","gravatar_id":"","url":"https://api.github.com/users/nicolasgarfinkiel","html_url":"https://github.com/nicolasgarfinkiel","followers_url":"https://api.github.com/users/nicolasgarfinkiel/followers","following_url":"https://api.github.com/users/nicolasgarfinkiel/following{/other_user}","gists_url":"https://api.github.com/users/nicolasgarfinkiel/gists{/gist_id}","starred_url":"https://api.github.com/users/nicolasgarfinkiel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nicolasgarfinkiel/subscriptions","organizations_url":"https://api.github.com/users/nicolasgarfinkiel/orgs","repos_url":"https://api.github.com/users/nicolasgarfinkiel/repos","events_url":"https://api.github.com/users/nicolasgarfinkiel/events{/privacy}","received_events_url":"https://api.github.com/users/nicolasgarfinkiel/received_events","type":"User","site_admin":false},"created_at":"2016-11-07T13:01:15Z","updated_at":"2016-11-07T13:01:15Z","author_association":"NONE","body":"You can put as many safeguards as you want, but it won't stop people doing stuff they should not, because exceptions happen, of course, where you dont expect them to happen. Im not saying safeguards are bad, of course they are useful and some of them should be there, but in some cases it feels more like patronising.\n\nYou might create a problem when you try to solve it. An user might naively enable inline scripting for groovy, which was deemed unfit for security reasons, because he need ad hoc source searching, and now not only we have potential performance problems, but as well security problems.\n\nProper documentation and safe defaults are the way to go on this one IMHO.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/269843537","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-269843537","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":269843537,"node_id":"MDEyOklzc3VlQ29tbWVudDI2OTg0MzUzNw==","user":{"login":"rpedela","id":1952582,"node_id":"MDQ6VXNlcjE5NTI1ODI=","avatar_url":"https://avatars1.githubusercontent.com/u/1952582?v=4","gravatar_id":"","url":"https://api.github.com/users/rpedela","html_url":"https://github.com/rpedela","followers_url":"https://api.github.com/users/rpedela/followers","following_url":"https://api.github.com/users/rpedela/following{/other_user}","gists_url":"https://api.github.com/users/rpedela/gists{/gist_id}","starred_url":"https://api.github.com/users/rpedela/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rpedela/subscriptions","organizations_url":"https://api.github.com/users/rpedela/orgs","repos_url":"https://api.github.com/users/rpedela/repos","events_url":"https://api.github.com/users/rpedela/events{/privacy}","received_events_url":"https://api.github.com/users/rpedela/received_events","type":"User","site_admin":false},"created_at":"2016-12-31T02:08:18Z","updated_at":"2016-12-31T02:08:18Z","author_association":"NONE","body":"> When we made decisions for painless we wanted to ensure that it's secure and fast with respect to it's usecases. Allowing access to _source crosses the line here. It means you are doing linear IO on every document matching a query. This is what should be done in reindexing. Hold your breath for a second, I can already see you saying \"but but but\" yes it's not perfect! There are legit usecases where it might be ok to access _source like when you have low num of docs and you are not time-critical etc. Some of these usecases are simply not what painless was made for in the first place. Fetching every document in the index on a per-query bases can certainly cause huge stability issues on clusters. If you reindex you do this only once not on a per query basis.\r\n\r\nWhen you are dealing with TBs (like me), reindexing is always the last resort. It is not a good solution.\r\n\r\n> the other might be adding some functionality that can provide a doc values interface loading stuff from stored fields such that _source is not needed anymore\r\n\r\nI like that idea because it still allows the use cases ```_source``` access enables, but ES can make better performance decisions.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372783076","html_url":"https://github.com/elastic/elasticsearch/issues/21188#issuecomment-372783076","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21188","id":372783076,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Mjc4MzA3Ng==","user":{"login":"jdconrad","id":2126764,"node_id":"MDQ6VXNlcjIxMjY3NjQ=","avatar_url":"https://avatars2.githubusercontent.com/u/2126764?v=4","gravatar_id":"","url":"https://api.github.com/users/jdconrad","html_url":"https://github.com/jdconrad","followers_url":"https://api.github.com/users/jdconrad/followers","following_url":"https://api.github.com/users/jdconrad/following{/other_user}","gists_url":"https://api.github.com/users/jdconrad/gists{/gist_id}","starred_url":"https://api.github.com/users/jdconrad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdconrad/subscriptions","organizations_url":"https://api.github.com/users/jdconrad/orgs","repos_url":"https://api.github.com/users/jdconrad/repos","events_url":"https://api.github.com/users/jdconrad/events{/privacy}","received_events_url":"https://api.github.com/users/jdconrad/received_events","type":"User","site_admin":false},"created_at":"2018-03-13T19:06:26Z","updated_at":"2018-03-13T19:06:26Z","author_association":"CONTRIBUTOR","body":"Closing this issue.  _source will only be allowed in certain contexts.","performed_via_github_app":null}]