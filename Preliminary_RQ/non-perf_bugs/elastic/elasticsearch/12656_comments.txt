[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127797741","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-127797741","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":127797741,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzc5Nzc0MQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-08-04T23:44:15Z","updated_at":"2015-08-04T23:44:15Z","author_association":"CONTRIBUTOR","body":"This code is really broken, this class needs to die right here and now, there is no other way about it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127801597","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-127801597","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":127801597,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzgwMTU5Nw==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-08-05T00:15:06Z","updated_at":"2015-08-05T00:15:06Z","author_association":"CONTRIBUTOR","body":"I'm sorry... I don't see any problem with `SpawnModules` itself here. this construct is there to just promote modularity. The real problem here is that we currently allow/rely on configuring classes in settings - that's the wrong thing here... the fact that in the `DiscoveryModule` we do it when we spawn modules doesn't make the `SpawnModules` wrong (we could just as have that wrong everywhere else in the codebase)\n\nI agree with that in general, all plugin points should be exposed as methods on the relevant modules (and the `DiscoveryModule` is a great example where it's done wrong).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127802344","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-127802344","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":127802344,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzgwMjM0NA==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-08-05T00:21:58Z","updated_at":"2015-08-05T00:21:58Z","author_association":"CONTRIBUTOR","body":"I'll bite: `SpawnShittyModules` is broken because it enforces no contract whatsoever, its the most worthless interface: the last fucking thing we need is 10-20 class instantiation mechanisms.\n\nI consider this blocker issue open until this class is removed. If you like it, go get it from source history.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127825180","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-127825180","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":127825180,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzgyNTE4MA==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-08-05T02:48:42Z","updated_at":"2015-08-05T02:48:42Z","author_association":"CONTRIBUTOR","body":"> I'll bite:\n\nsure... I'm immuned :)\n\n> `SpawnShittyModules` is broken because it enforces no contract whatsoever, its the most worthless interface: the last fucking thing we need is 10-20 class instantiation mechanisms.\n\nI don't know `SpawnShittyModules`... can't find it... but if you do, please go ahead and remove it (it sounds like...hmmm... a shitty class)\n\nThis issue however is about `SpawnModules` and its contract is as simple as \"a module that spawns other modules\"... one could have named it `CompoundModule` which is a module that is made out of other modules, but that's not the case... the name is `SpawnModules`. Would have been nice if this would be ingrained in the `AbstractModule` class, but it isn't. Guice's `AbstractModule#install` method comes close, but it is meant to be used within the `configure` method. The `SpawnModules` enables adding its sub-modules before the injector is created and therefore works well with the `PreProcessModule` construct.\n\nIf you want to remove it, sure... go ahead, but at the same time provide a good alternative that doesn't force a single place in the code knowing about all the services in the codebase(s). In other words, If modules `A` depends on `a1` and `a2` modules, and `a1` defines an internal service `s1`, there's not reason for `A` to directly know about `s1`\\- it's an implementation detail of `a1` and `a1` only.\n\nAnd if you do provide an alternative that enables same level of modularity, that'd be awesome.  But then it's a cleanup as it doesn't really fix any bugs, and therefore I don't see any reason for it to be a blocker for beta1. The referenced bug in this issue has nothing to do with the sole existence of `SpawnModules` class. It's an implementation bug that can be implemented with or without this class (if you load classes by names from settings, you're bound to hit it, regardless of where you do it)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127827455","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-127827455","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":127827455,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzgyNzQ1NQ==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-08-05T03:00:53Z","updated_at":"2015-08-05T03:00:53Z","author_association":"CONTRIBUTOR","body":"> If you want to remove it, sure... go ahead, but at the same time provide a good alternative that doesn't force a single place in the code knowing about all the services in the codebase(s). In other words, If modules A depends on a1 and a2 modules, and a1 defines an internal service s1, there's not reason for A to directly know about s1- it's an implementation detail of a1 and a1 only.\n\nI care very very little about this.\n\nThe top priority is making sure that the code we load up and use, the classes themselves, are correct. This is fundamental to a working application.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127828734","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-127828734","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":127828734,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzgyODczNA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-08-05T03:07:00Z","updated_at":"2015-08-05T03:07:00Z","author_association":"MEMBER","body":"The underlying issue (which took me a lot more reading to understand thanks to _tons_ of concepts with modules, services, components, etc) is `Settings.getAsClass`. This is used as a \"plugin entry point by naming convention\". While I still agree SpawnModules is shitty (it is too hard to comprehend the recursive nature of module loading with it), I will rename this issue to reflect the blocker: `Settings.getAsClass` must go.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/129526593","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-129526593","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":129526593,"node_id":"MDEyOklzc3VlQ29tbWVudDEyOTUyNjU5Mw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2015-08-10T17:00:14Z","updated_at":"2015-08-10T17:00:14Z","author_association":"MEMBER","body":"As a side comment, the problem with `Settings` object acting as a `ClassLoader` is problematic because `Settings` tend to be global, for the entire ES instance while the `ClassLoader` clearly per-plugin (though in ES 1.x it was also global).\nWe can have Guice inject _plugin-aware_ `Settings` but still, one can _leak_ the `Settings` object to a different class by accident and one ends up with GC and CNFE issues.\n\nLong story short, removing any class loading functionality from `Settings` is cleaner since as it stands right now, there are mixed concerns with different lifecycles.\nWe could simply inject the `ClassLoader` to the plugin starting hook or simply ask the plugin to determine that itself (`getClass().getClassLoader()`). It doesn't introduce any global registry (which is problematic in terms of cleanup) and further more, makes it difficult for plugins to get a hold of each-others `ClassLoader`s.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/129527727","html_url":"https://github.com/elastic/elasticsearch/issues/12656#issuecomment-129527727","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12656","id":129527727,"node_id":"MDEyOklzc3VlQ29tbWVudDEyOTUyNzcyNw==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-08-10T17:04:50Z","updated_at":"2015-08-10T17:04:50Z","author_association":"CONTRIBUTOR","body":"@costin absolutely... agree that `Settings` should not hold a class loader at all. Even with this PR in things will still be broken for the exactly same reason you mention and we should not let anyone get a class loader from Settings (as it's bound to fail for plugins)\n","performed_via_github_app":null}]