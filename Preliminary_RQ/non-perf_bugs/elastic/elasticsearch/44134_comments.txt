[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509768700","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-509768700","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":509768700,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTc2ODcwMA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-07-09T19:09:07Z","updated_at":"2019-07-09T19:09:07Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/509946379","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-509946379","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":509946379,"node_id":"MDEyOklzc3VlQ29tbWVudDUwOTk0NjM3OQ==","user":{"login":"danielmitterdorfer","id":1699576,"node_id":"MDQ6VXNlcjE2OTk1NzY=","avatar_url":"https://avatars3.githubusercontent.com/u/1699576?v=4","gravatar_id":"","url":"https://api.github.com/users/danielmitterdorfer","html_url":"https://github.com/danielmitterdorfer","followers_url":"https://api.github.com/users/danielmitterdorfer/followers","following_url":"https://api.github.com/users/danielmitterdorfer/following{/other_user}","gists_url":"https://api.github.com/users/danielmitterdorfer/gists{/gist_id}","starred_url":"https://api.github.com/users/danielmitterdorfer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielmitterdorfer/subscriptions","organizations_url":"https://api.github.com/users/danielmitterdorfer/orgs","repos_url":"https://api.github.com/users/danielmitterdorfer/repos","events_url":"https://api.github.com/users/danielmitterdorfer/events{/privacy}","received_events_url":"https://api.github.com/users/danielmitterdorfer/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T07:35:38Z","updated_at":"2019-07-10T07:35:38Z","author_association":"MEMBER","body":"We have another failure with the same root cause in https://elasticsearch-ci.elastic.co/job/elastic+elasticsearch+7.3+multijob-darwin-compatibility/15/console (build id: `20190710041850-A5CC4B88`):\r\n\r\n\r\nError message:\r\n```\r\nBindTransportException[Failed to bind to [65535-65539]]; nested: IllegalArgumentException[port out of range:65539]\r\n```\r\n<details>\r\n    <summary>Expand full trace</summary>\r\n    <p><pre>\r\njava.lang.RuntimeException: failed to start nodes\r\n\tat __randomizedtesting.SeedInfo.seed([877116860D5FA36B:7885F42059360F20]:0)\r\n\tat org.elasticsearch.test.InternalTestCluster.startAndPublishNodesAndClients(InternalTestCluster.java:1685)\r\n\tat org.elasticsearch.test.InternalTestCluster.reset(InternalTestCluster.java:1221)\r\n\tat org.elasticsearch.test.InternalTestCluster.beforeTest(InternalTestCluster.java:1117)\r\n\tat org.elasticsearch.discovery.single.SingleNodeDiscoveryIT.testCannotJoinNodeWithSingleNodeDiscovery(SingleNodeDiscoveryIT.java:178)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1750)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:938)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:974)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:988)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:817)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:468)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:947)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:832)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:883)\r\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:894)\r\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\r\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\r\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\r\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\r\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\r\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.util.concurrent.ExecutionException: BindTransportException[Failed to bind to [65535-65539]]; nested: IllegalArgumentException[port out of range:65539];\r\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\r\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:192)\r\n\tat org.elasticsearch.test.InternalTestCluster.startAndPublishNodesAndClients(InternalTestCluster.java:1680)\r\n\t... 40 more\r\nCaused by: BindTransportException[Failed to bind to [65535-65539]]; nested: IllegalArgumentException[port out of range:65539];\r\n\tat org.elasticsearch.transport.TcpTransport.bindToPort(TcpTransport.java:389)\r\n\tat org.elasticsearch.transport.TcpTransport.bindServer(TcpTransport.java:355)\r\n\tat org.elasticsearch.transport.nio.MockNioTransport.doStart(MockNioTransport.java:118)\r\n\tat org.elasticsearch.common.component.AbstractLifecycleComponent.start(AbstractLifecycleComponent.java:59)\r\n\tat org.elasticsearch.transport.TransportService.doStart(TransportService.java:230)\r\n\tat org.elasticsearch.common.component.AbstractLifecycleComponent.start(AbstractLifecycleComponent.java:59)\r\n\tat org.elasticsearch.node.Node.start(Node.java:698)\r\n\tat org.elasticsearch.test.InternalTestCluster$NodeAndClient.startNode(InternalTestCluster.java:960)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:688)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\t... 1 more\r\nCaused by: java.lang.IllegalArgumentException: port out of range:65539\r\n</pre></p>\r\n</details>\r\n\r\n\r\nReproduction line (does no reproduce):\r\n\r\n```\r\n./gradlew :server:integTest --tests \"org.elasticsearch.discovery.single.SingleNodeDiscoveryIT.testCannotJoinNodeWithSingleNodeDiscovery\" \\\r\n  -Dtests.seed=877116860D5FA36B \\\r\n  -Dtests.security.manager=true \\\r\n  -Dtests.locale=lt \\\r\n  -Dtests.timezone=America/Monterrey \\\r\n  -Dcompiler.java=12 \\\r\n  -Druntime.java=8\r\n```\r\n\r\nFrequency: According to build-stats this is the only build that has failed with this error so far.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510162200","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510162200","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510162200,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDE2MjIwMA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T17:48:52Z","updated_at":"2019-07-10T17:48:52Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510173762","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510173762","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510173762,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDE3Mzc2Mg==","user":{"login":"alpar-t","id":2565652,"node_id":"MDQ6VXNlcjI1NjU2NTI=","avatar_url":"https://avatars1.githubusercontent.com/u/2565652?v=4","gravatar_id":"","url":"https://api.github.com/users/alpar-t","html_url":"https://github.com/alpar-t","followers_url":"https://api.github.com/users/alpar-t/followers","following_url":"https://api.github.com/users/alpar-t/following{/other_user}","gists_url":"https://api.github.com/users/alpar-t/gists{/gist_id}","starred_url":"https://api.github.com/users/alpar-t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alpar-t/subscriptions","organizations_url":"https://api.github.com/users/alpar-t/orgs","repos_url":"https://api.github.com/users/alpar-t/repos","events_url":"https://api.github.com/users/alpar-t/events{/privacy}","received_events_url":"https://api.github.com/users/alpar-t/received_events","type":"User","site_admin":false},"created_at":"2019-07-10T18:21:35Z","updated_at":"2019-07-10T18:21:35Z","author_association":"CONTRIBUTOR","body":"We identified the root cause of this with @original-brownbear and @mark-vieira . The worker Id keeps increasing for the life of the build daemon so for non ephemeral workers this will grow too large eventually and generate a port range that is outside of the valid range. \r\n\r\nTo fix this we should take modulo `650` to make sure that we generate a valid range. \r\nThis will work for as long as we don't have that many workers within a build. \r\nI'll prepare a PR  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510379183","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510379183","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510379183,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDM3OTE4Mw==","user":{"login":"henningandersen","id":33268011,"node_id":"MDQ6VXNlcjMzMjY4MDEx","avatar_url":"https://avatars2.githubusercontent.com/u/33268011?v=4","gravatar_id":"","url":"https://api.github.com/users/henningandersen","html_url":"https://github.com/henningandersen","followers_url":"https://api.github.com/users/henningandersen/followers","following_url":"https://api.github.com/users/henningandersen/following{/other_user}","gists_url":"https://api.github.com/users/henningandersen/gists{/gist_id}","starred_url":"https://api.github.com/users/henningandersen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henningandersen/subscriptions","organizations_url":"https://api.github.com/users/henningandersen/orgs","repos_url":"https://api.github.com/users/henningandersen/repos","events_url":"https://api.github.com/users/henningandersen/events{/privacy}","received_events_url":"https://api.github.com/users/henningandersen/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T08:09:43Z","updated_at":"2019-07-11T08:09:43Z","author_association":"CONTRIBUTOR","body":"@atorok, in `MockTransportService`, the port range starts from 10300. Additionally, we need to stay out of the ephemeral port range 49152-65535.\r\n\r\nAs a short term workaround your suggestion sounds fine, but the modulo should be something like 380 instead to avoid hitting the ephemeral port range.\r\n\r\nI think we could also explore a different port allocation algorithm using a locking scheme to prevent other VMs from using the same port.\r\n\r\nUnless there is an easy way to provide a better worker id from gradle to the tests? I.e., one that goes from 0/1-number-of-parallel-tests like the old junit worker id?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510385427","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510385427","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510385427,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDM4NTQyNw==","user":{"login":"alpar-t","id":2565652,"node_id":"MDQ6VXNlcjI1NjU2NTI=","avatar_url":"https://avatars1.githubusercontent.com/u/2565652?v=4","gravatar_id":"","url":"https://api.github.com/users/alpar-t","html_url":"https://github.com/alpar-t","followers_url":"https://api.github.com/users/alpar-t/followers","following_url":"https://api.github.com/users/alpar-t/following{/other_user}","gists_url":"https://api.github.com/users/alpar-t/gists{/gist_id}","starred_url":"https://api.github.com/users/alpar-t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alpar-t/subscriptions","organizations_url":"https://api.github.com/users/alpar-t/orgs","repos_url":"https://api.github.com/users/alpar-t/repos","events_url":"https://api.github.com/users/alpar-t/events{/privacy}","received_events_url":"https://api.github.com/users/alpar-t/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T08:26:06Z","updated_at":"2019-07-11T08:26:06Z","author_association":"CONTRIBUTOR","body":"We did explore the possibility of providing our own Id, but there's no way to do that because Gradle doesn't offer any hooks to configure the test workers, so there's no way to pass per  worker properties. \r\n\r\nThe old way would have eventually break down with `--parallel` too because tests from different projects can go in parallel the allocation of IDs needs to be aware of that and I don't think the old implementation was. \r\n\r\nThe locking scheme would get fairly complex, as it has to work across JVM boundaries and needs to make sure allocations are freed when not used. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510404143","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510404143","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510404143,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDQwNDE0Mw==","user":{"login":"henningandersen","id":33268011,"node_id":"MDQ6VXNlcjMzMjY4MDEx","avatar_url":"https://avatars2.githubusercontent.com/u/33268011?v=4","gravatar_id":"","url":"https://api.github.com/users/henningandersen","html_url":"https://github.com/henningandersen","followers_url":"https://api.github.com/users/henningandersen/followers","following_url":"https://api.github.com/users/henningandersen/following{/other_user}","gists_url":"https://api.github.com/users/henningandersen/gists{/gist_id}","starred_url":"https://api.github.com/users/henningandersen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henningandersen/subscriptions","organizations_url":"https://api.github.com/users/henningandersen/orgs","repos_url":"https://api.github.com/users/henningandersen/repos","events_url":"https://api.github.com/users/henningandersen/events{/privacy}","received_events_url":"https://api.github.com/users/henningandersen/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T09:16:18Z","updated_at":"2019-07-11T09:16:18Z","author_association":"CONTRIBUTOR","body":"I think the locking scheme would not be too complicated and will be cleaned up when the JVM exits. Any problem in just hanging on to the lock for the duration of the JVM, thus allocation a stable worker ID or port?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510405551","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510405551","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510405551,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDQwNTU1MQ==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T09:20:10Z","updated_at":"2019-07-11T09:24:28Z","author_association":"MEMBER","body":"> I think the locking scheme would not be too complicated and will be cleaned up when the JVM exits.\r\n\r\nThis imo. Can't we just do the handling of the port allocation from within the test JVM (so we can use the onExit hook) and simply pass a path to a directory that contains a set of lock files for each port range we use via Gradle (and set a sensible default behavior for when running from outside of Gradle)? ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510410656","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510410656","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510410656,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDQxMDY1Ng==","user":{"login":"henningandersen","id":33268011,"node_id":"MDQ6VXNlcjMzMjY4MDEx","avatar_url":"https://avatars2.githubusercontent.com/u/33268011?v=4","gravatar_id":"","url":"https://api.github.com/users/henningandersen","html_url":"https://github.com/henningandersen","followers_url":"https://api.github.com/users/henningandersen/followers","following_url":"https://api.github.com/users/henningandersen/following{/other_user}","gists_url":"https://api.github.com/users/henningandersen/gists{/gist_id}","starred_url":"https://api.github.com/users/henningandersen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henningandersen/subscriptions","organizations_url":"https://api.github.com/users/henningandersen/orgs","repos_url":"https://api.github.com/users/henningandersen/repos","events_url":"https://api.github.com/users/henningandersen/events{/privacy}","received_events_url":"https://api.github.com/users/henningandersen/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T09:34:08Z","updated_at":"2019-07-11T09:34:08Z","author_association":"CONTRIBUTOR","body":"I was thinking about just binding to a port in a range (10200-10299?) and using the first available as the worker id. That avoids leaving files around.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510456202","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510456202","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510456202,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDQ1NjIwMg==","user":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T12:00:04Z","updated_at":"2019-07-11T12:00:04Z","author_association":"CONTRIBUTOR","body":"I'm inclined to go with the technically simpler solution (i.e. using modulo) for now and only if we see this causing issues create a more elaborate solution as outlined by @henningandersen.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510500857","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510500857","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510500857,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDUwMDg1Nw==","user":{"login":"henningandersen","id":33268011,"node_id":"MDQ6VXNlcjMzMjY4MDEx","avatar_url":"https://avatars2.githubusercontent.com/u/33268011?v=4","gravatar_id":"","url":"https://api.github.com/users/henningandersen","html_url":"https://github.com/henningandersen","followers_url":"https://api.github.com/users/henningandersen/followers","following_url":"https://api.github.com/users/henningandersen/following{/other_user}","gists_url":"https://api.github.com/users/henningandersen/gists{/gist_id}","starred_url":"https://api.github.com/users/henningandersen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henningandersen/subscriptions","organizations_url":"https://api.github.com/users/henningandersen/orgs","repos_url":"https://api.github.com/users/henningandersen/repos","events_url":"https://api.github.com/users/henningandersen/events{/privacy}","received_events_url":"https://api.github.com/users/henningandersen/received_events","type":"User","site_admin":false},"created_at":"2019-07-11T14:07:26Z","updated_at":"2019-07-11T14:07:26Z","author_association":"CONTRIBUTOR","body":"Yes, let us see how the modulo solution goes and then decide if this is necessary.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510788761","html_url":"https://github.com/elastic/elasticsearch/issues/44134#issuecomment-510788761","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/44134","id":510788761,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDc4ODc2MQ==","user":{"login":"alpar-t","id":2565652,"node_id":"MDQ6VXNlcjI1NjU2NTI=","avatar_url":"https://avatars1.githubusercontent.com/u/2565652?v=4","gravatar_id":"","url":"https://api.github.com/users/alpar-t","html_url":"https://github.com/alpar-t","followers_url":"https://api.github.com/users/alpar-t/followers","following_url":"https://api.github.com/users/alpar-t/following{/other_user}","gists_url":"https://api.github.com/users/alpar-t/gists{/gist_id}","starred_url":"https://api.github.com/users/alpar-t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alpar-t/subscriptions","organizations_url":"https://api.github.com/users/alpar-t/orgs","repos_url":"https://api.github.com/users/alpar-t/repos","events_url":"https://api.github.com/users/alpar-t/events{/privacy}","received_events_url":"https://api.github.com/users/alpar-t/received_events","type":"User","site_admin":false},"created_at":"2019-07-12T07:55:06Z","updated_at":"2019-07-12T07:55:06Z","author_association":"CONTRIBUTOR","body":"Both PRs have been merged, closing the issue.","performed_via_github_app":null}]