{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/24582","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24582/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24582/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24582/events","html_url":"https://github.com/elastic/elasticsearch/issues/24582","id":227663220,"node_id":"MDU6SXNzdWUyMjc2NjMyMjA=","number":24582,"title":"Aggregation Heap Overflow kills ES (and quickly my whole cluster)","user":{"login":"JeffBolle","id":18576812,"node_id":"MDQ6VXNlcjE4NTc2ODEy","avatar_url":"https://avatars2.githubusercontent.com/u/18576812?v=4","gravatar_id":"","url":"https://api.github.com/users/JeffBolle","html_url":"https://github.com/JeffBolle","followers_url":"https://api.github.com/users/JeffBolle/followers","following_url":"https://api.github.com/users/JeffBolle/following{/other_user}","gists_url":"https://api.github.com/users/JeffBolle/gists{/gist_id}","starred_url":"https://api.github.com/users/JeffBolle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JeffBolle/subscriptions","organizations_url":"https://api.github.com/users/JeffBolle/orgs","repos_url":"https://api.github.com/users/JeffBolle/repos","events_url":"https://api.github.com/users/JeffBolle/events{/privacy}","received_events_url":"https://api.github.com/users/JeffBolle/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-05-10T12:30:14Z","updated_at":"2017-05-11T12:12:45Z","closed_at":"2017-05-11T07:45:36Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\r\n\r\n** Please read the guidelines below. **\r\n\r\nIssues that do not follow these guidelines are likely to be closed.\r\n\r\n1.  GitHub is reserved for bug reports and feature requests. The best place to\r\n    ask a general question is at the Elastic [forums](https://discuss.elastic.co).\r\n    GitHub is not the place for general questions.\r\n\r\n2.  Is this bug report or feature request for a supported OS? If not, it\r\n    is likely to be closed.  See https://www.elastic.co/support/matrix#show_os\r\n\r\n3.  Please fill out EITHER the feature request block or the bug report block\r\n    below, and delete the other block.\r\n\r\n-->\r\n\r\n<!-- Bug report -->\r\n\r\n**Elasticsearch version**: 5.4.0\r\n\r\n**Plugins installed**: [analysis-phonetic,\r\ndiscovery-ec2]\r\n\r\n**JVM version** (`java -version`):\r\nopenjdk version \"1.8.0_121\"\r\nOpenJDK Runtime Environment (build 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13)\r\nOpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode)\r\n\r\n**OS version** (`uname -a` if on a Unix-like system):\r\nLinux es8 4.4.0-77-generic #98-Ubuntu SMP Wed Apr 26 08:34:02 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n**Description of the problem including expected versus actual behavior**:\r\nWhen running an aggregation that I knew was going to be particularly tough on the cluster, the heap was fully consumed and Elasticsearch exited. This happened on each node in the cluster as they tried to execute the query, eventually (within a second or two), bringing all Elasticsearch instances down. I would imagine that when a query gets too terrible for ES to execute, it just fails the query, rather than stopping from running entirely.\r\n\r\nThis looks to be very similar to the issue reported in  #24359 \r\n\r\n**Steps to reproduce**:\r\n\r\nPlease include a *minimal* but *complete* recreation of the problem, including\r\n(e.g.) index creation, mappings, settings, query etc.  The easier you make for\r\nus to reproduce it, the more likely that somebody will take the time to look at it.\r\n\r\n 1. Aggregation was on an index that has only about 100 million docs, but they are relatively large.\r\n 2. Here is the agg query. This was run against a query that would have selected almost all of the docs in the index:\r\n```\"aggs\": [\r\n    {\r\n      \"id\": \"1\",\r\n      \"enabled\": true,\r\n      \"type\": \"cardinality\",\r\n      \"schema\": \"metric\",\r\n      \"params\": {\r\n        \"field\": \"doc.INTERSTING_TERM.keyword\"\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"2\",\r\n      \"enabled\": true,\r\n      \"type\": \"terms\",\r\n      \"schema\": \"bucket\",\r\n      \"params\": {\r\n        \"field\": \"ip.addr\",\r\n        \"size\": 1,\r\n        \"order\": \"desc\",\r\n        \"orderBy\": \"1\"\r\n      }\r\n    },\r\n    {\r\n      \"id\": \"3\",\r\n      \"enabled\": true,\r\n      \"type\": \"significant_terms\",\r\n      \"schema\": \"bucket\",\r\n      \"params\": {\r\n        \"field\": \"url.host.keyword\",\r\n        \"size\": 5\r\n      }\r\n    }\r\n  ],```\r\n 3. This query returns, but if I start increasing the size of the id=2 term, I can quickly reproduce. Above size=5000 is where it definitely dies.\r\n\r\n**Provide logs (if relevant)**:\r\n```\r\n[2017-05-09T21:27:36,758][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [es7] fatal error in thread [elasticsearch[es7][search][T#1]], exiting\r\njava.lang.OutOfMemoryError: Java heap space\r\n        at org.elasticsearch.common.util.PageCacheRecycler$1.newInstance(PageCacheRecycler.java:99) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.PageCacheRecycler$1.newInstance(PageCacheRecycler.java:96) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.recycler.DequeRecycler.obtain(DequeRecycler.java:53) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.recycler.AbstractRecycler.obtain(AbstractRecycler.java:33) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.recycler.DequeRecycler.obtain(DequeRecycler.java:28) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.recycler.FilterRecycler.obtain(FilterRecycler.java:39) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.recycler.Recyclers$3.obtain(Recyclers.java:119) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.recycler.FilterRecycler.obtain(FilterRecycler.java:39) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.PageCacheRecycler.bytePage(PageCacheRecycler.java:147) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.AbstractBigArray.newBytePage(AbstractBigArray.java:112) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.BigByteArray.resize(BigByteArray.java:141) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.BigArrays.resizeInPlace(BigArrays.java:438) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.BigArrays.resize(BigArrays.java:485) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.common.util.BigArrays.grow(BigArrays.java:502) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.metrics.cardinality.HyperLogLogPlusPlus.ensureCapacity(HyperLogLogPlusPlus.java:197) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.metrics.cardinality.HyperLogLogPlusPlus.collect(HyperLogLogPlusPlus.java:232) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregator$OrdinalsCollector.postCollect(CardinalityAggregator.java:280) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregator.postCollectLastCollector(CardinalityAggregator.java:120) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.metrics.cardinality.CardinalityAggregator.getLeafCollector(CardinalityAggregator.java:111) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.AggregatorBase.getLeafCollector(AggregatorBase.java:149) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.AggregatorBase.getLeafCollector(AggregatorBase.java:148) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.AggregatorFactory$MultiBucketAggregatorWrapper$1.collect(AggregatorFactory.java:132) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.bucket.BestBucketsDeferringCollector.prepareSelectedBuckets(BestBucketsDeferringCollector.java:178) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.bucket.DeferringBucketCollector.replay(DeferringBucketCollector.java:44) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.AggregatorBase.runDeferredCollections(AggregatorBase.java:206) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.bucket.terms.GlobalOrdinalsStringTermsAggregator.buildAggregation(GlobalOrdinalsStringTermsAggregator.java:193) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.aggregations.AggregationPhase.execute(AggregationPhase.java:129) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.search.query.QueryPhase.execute(QueryPhase.java:114) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.indices.IndicesService.lambda$loadIntoContext$16(IndicesService.java:1107) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.indices.IndicesService$$Lambda$1878/1928799022.accept(Unknown Source) ~[?:?]\r\n        at org.elasticsearch.indices.IndicesService.lambda$cacheShardLevelResult$18(IndicesService.java:1188) ~[elasticsearch-5.4.0.jar:5.4.0]\r\n        at org.elasticsearch.indices.IndicesService$$Lambda$1879/1275196983.get(Unknown Source) ~[?:?]\r\n```\r\n\r\n","closed_by":{"login":"tlrx","id":642733,"node_id":"MDQ6VXNlcjY0MjczMw==","avatar_url":"https://avatars1.githubusercontent.com/u/642733?v=4","gravatar_id":"","url":"https://api.github.com/users/tlrx","html_url":"https://github.com/tlrx","followers_url":"https://api.github.com/users/tlrx/followers","following_url":"https://api.github.com/users/tlrx/following{/other_user}","gists_url":"https://api.github.com/users/tlrx/gists{/gist_id}","starred_url":"https://api.github.com/users/tlrx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tlrx/subscriptions","organizations_url":"https://api.github.com/users/tlrx/orgs","repos_url":"https://api.github.com/users/tlrx/repos","events_url":"https://api.github.com/users/tlrx/events{/privacy}","received_events_url":"https://api.github.com/users/tlrx/received_events","type":"User","site_admin":false},"performed_via_github_app":null}