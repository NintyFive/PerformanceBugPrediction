{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/34067/events","html_url":"https://github.com/elastic/elasticsearch/issues/34067","id":363801730,"node_id":"MDU6SXNzdWUzNjM4MDE3MzA=","number":34067,"title":"Extra Lucene DocValueExistsQuery fired - due to nested mapping and primary_terms","user":{"login":"jeffreynscrbdee","id":43590168,"node_id":"MDQ6VXNlcjQzNTkwMTY4","avatar_url":"https://avatars1.githubusercontent.com/u/43590168?v=4","gravatar_id":"","url":"https://api.github.com/users/jeffreynscrbdee","html_url":"https://github.com/jeffreynscrbdee","followers_url":"https://api.github.com/users/jeffreynscrbdee/followers","following_url":"https://api.github.com/users/jeffreynscrbdee/following{/other_user}","gists_url":"https://api.github.com/users/jeffreynscrbdee/gists{/gist_id}","starred_url":"https://api.github.com/users/jeffreynscrbdee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeffreynscrbdee/subscriptions","organizations_url":"https://api.github.com/users/jeffreynscrbdee/orgs","repos_url":"https://api.github.com/users/jeffreynscrbdee/repos","events_url":"https://api.github.com/users/jeffreynscrbdee/events{/privacy}","received_events_url":"https://api.github.com/users/jeffreynscrbdee/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-09-25T23:21:53Z","updated_at":"2018-10-02T07:30:24Z","closed_at":"2018-10-02T07:30:24Z","author_association":"NONE","active_lock_reason":null,"body":"<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`): 6.3.2\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nAfter upgrading from 6.0.0 to anything >= 6.1.0, we are getting an extra *DocValueFieldsExistsQuery* [field=_primary_term] being called. This is an extra underlying query that impacts performance. This seems to be potentially introduced at https://github.com/elastic/elasticsearch/pull/27469 which resolves https://github.com/elastic/elasticsearch/issues/24362 based on the release notes. \r\n\r\n**Steps to reproduce**:\r\n\r\n 1. Mapping is defined as \r\n\r\n```\r\n{\r\n    \"mappings\": {\r\n        \"item\": {\r\n            \"item\": {\r\n                \"_all\": {\r\n                    \"enabled\": false\r\n                },\r\n                \"properties\": {\r\n                    \"id\": {\r\n                        \"type\": \"integer\"\r\n                    },\r\n                    \"document_type\": {\r\n                        \"type\": \"keyword\",\r\n                        \"doc_values\": false\r\n                    },\r\n                    \"language\": {\r\n                        \"type\": \"keyword\",\r\n                        \"doc_values\": false\r\n                    },\r\n                    \"authorships\": {\r\n                        \"type\": \"nested\",\r\n                        \"properties\": {\r\n                            \"user_id\": {\r\n                                \"type\": \"keyword\",\r\n                                \"doc_values\": false\r\n                            },\r\n                            \"contribution_types\": {\r\n                                \"type\": \"keyword\",\r\n                                \"doc_values\": false\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n 2. Data inserted is defined as \r\n\r\n```\r\n{\r\n    \"document_type\": \"5\",\r\n    \"language\": \"1\"\r\n}\r\n```\r\n 3. The query which, when profiled, spits out the extra DocValueFieldsExistsQuery (_primary_term) is\r\n\r\n```\r\n{\r\n    \"profile\": true,\r\n    \"query\": {\r\n        \"bool\": {\r\n            \"filter\": [{\r\n                \"terms\": {\r\n                    \"document_type\": [1, 5]\r\n                }\r\n            }, {\r\n                \"terms\": {\r\n                    \"language\": [1]\r\n                }\r\n            }]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe partial results from profiling the query above are \r\n\r\n```\r\n(#ConstantScore(document_type:1 document_type:5) #ConstantScore(language:1)) #DocValuesFieldExistsQuery [field=_primary_term]\"\r\n``` \r\n- the DocValuesFieldExistsQuery is causing extra overhead which adds to the response time.\r\n\r\nSome extra findings - the extra DocValuesFieldExistsQuery *only* surfaces when there is a *nested* mapping *and* all the filter arguments are \"terms\" which means all array-type. For example - if I change `language` to be a term-query which filters on just `1`, the extra Lucene query does not fire.\r\n\r\nSo if there is not a nested mapping, this extra query never fires. If there exists a nested mapping, we can get around it by including a singular *term* query.\r\n\r\nI also profiled 6.0.0 and 6.0.1. 6.0.1 introduces another query which seems like a prerequisite for this new change. Profiling the query above in ES 6.0.1 produces this partial profile output\r\n```\r\n(#ConstantScore(document_type:1 document_type:5) #ConstantScore(language:1)) #(#*:* -_type:__*)\r\n```\r\nThe `#*:* -_type:__*` adds unnecessary overhead as well - it seems to be fire a MatchAllDocsQuery. The current solution seems to be going back to 6.0.0.\r\n\r\nThe performance impacts for us are the following:\r\n1. For our smaller recommendations index, we are getting avg response times of 100+ ms vs 50 ms without the extra query.\r\n2. For one of our bigger indices (300 million docs), our avg response times are 700 ms vs 350 ms.\r\n\r\nThe query example above is simplified compared to our production use case, but the behavior still remains consistent.\r\n\r\nIs this behavior intentional?","closed_by":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"performed_via_github_app":null}