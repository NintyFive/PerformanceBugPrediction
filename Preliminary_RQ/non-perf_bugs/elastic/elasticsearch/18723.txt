{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/18723","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18723/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18723/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18723/events","html_url":"https://github.com/elastic/elasticsearch/issues/18723","id":158361109,"node_id":"MDU6SXNzdWUxNTgzNjExMDk=","number":18723,"title":"Further shard / index placement control by node/racks","user":{"login":"apatrida","id":182340,"node_id":"MDQ6VXNlcjE4MjM0MA==","avatar_url":"https://avatars3.githubusercontent.com/u/182340?v=4","gravatar_id":"","url":"https://api.github.com/users/apatrida","html_url":"https://github.com/apatrida","followers_url":"https://api.github.com/users/apatrida/followers","following_url":"https://api.github.com/users/apatrida/following{/other_user}","gists_url":"https://api.github.com/users/apatrida/gists{/gist_id}","starred_url":"https://api.github.com/users/apatrida/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apatrida/subscriptions","organizations_url":"https://api.github.com/users/apatrida/orgs","repos_url":"https://api.github.com/users/apatrida/repos","events_url":"https://api.github.com/users/apatrida/events{/privacy}","received_events_url":"https://api.github.com/users/apatrida/received_events","type":"User","site_admin":false},"labels":[{"id":837246479,"node_id":"MDU6TGFiZWw4MzcyNDY0Nzk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Distributed/Allocation","name":":Distributed/Allocation","color":"0e8a16","default":false,"description":"All issues relating to the decision making around placing a shard (both master logic & on the nodes)"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-06-03T12:56:26Z","updated_at":"2018-03-20T10:07:35Z","closed_at":"2018-03-20T10:07:34Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"For scalability sometimes you have a read heavy index you want to replicate onto other nodes, but no other indexes.  Use cases that benefit from this control:\n- a batch system starts, wants access to the cluster, but wants some heavy read indexes replicated locally.  so collocate a node on the batch shard that starts with the node, replicates, then runs batches and stays up to date automatically.  You don't want any other indexes residing on this node but a full copy of the desired indexes replicated.\n- a web app is running and doing really high QPS on something such as a recommendation engine or percolation, so wants a local full copy of some of the indexes, that are live and up to date, while accessing the rest of the system at the same time.\n- use cases where you have write-little/read-a-billion and want a local copy per reading process, but kept up to date at all times with the writes coming in.\n\nYou can solve these by having two clusters, but that means either more machines or more processes on the same machines, and trying to balance CPU and memory usage between competing clusters that are not coordinated.\n\nTrying to do this in one cluster, is almost possible with rack awareness, but the settings never allow real control over the behavior.  You cannot say \"I want my webapp nodes to have full copies of only indexes X,Y,Z and nothing else, ever, not even on accident\".  If you try this, there is always some disappointment, such as:\n- you cannot do it with rack awareness on its own, that only means shards and replicas won't appear on same rack.\n- you cannot do it with forced rack because that doesn't play well with auto expand replicas and each rack needs to be present so you end up with error conditions that are false and you can't safely set the replica count on the indexes without endangering the state of the cluster (yellow/red)... and some times auto expand and forced rack just don't seem to work at all together.\n- you cannot do it exclude/include/require settings because the minute you do this, you break auto expand replicas which doesn't consider the correct count of nodes after considering these settings so you end up in bad error states.\n- exclude/include/require is hard to use if you have old systems creating new daily indexes that do not set the exclude flag for your nodes to which you do not want the index to propagate, so is hard to fend of accidental indexes jumping onto nodes that may not be able to handle them.\n\nSo what I would propose is these settings:\n- a per node setting that says \"only accept indexes/replicas I specifically approve to be on my node\"\n- a per index setting \"this index is approved for nodes with attribute X\" (using attributes as allowed by shard allocation awareness) \n- the previous setting (or additional) would indicate if it is a full or balanced copy.  A full copy meaning the node receives a copy of all shards.  A balanced copy indicates that all nodes matching the approval receive some portion of one copy of the shards.\n\nThese do not require replica count to be increased or auto-expand, it basically says \"I need more replicas to cover these conditions\" and if the nodes all die, or one vanishes, it is not an error condition just as auto-expand wouldn't have caused it to be an error condition.\n\nTherefore no indexes created would ever go to these nodes on accident, only approved indexes.\n","closed_by":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"performed_via_github_app":null}