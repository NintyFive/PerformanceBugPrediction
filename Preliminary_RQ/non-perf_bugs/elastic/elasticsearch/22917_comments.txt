[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/276926975","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-276926975","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":276926975,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NjkyNjk3NQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-02-02T10:56:22Z","updated_at":"2017-02-02T10:56:22Z","author_association":"CONTRIBUTOR","body":"@nknize what are your thoughts about this one?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/293345126","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-293345126","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":293345126,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MzM0NTEyNg==","user":{"login":"hanoch","id":1561905,"node_id":"MDQ6VXNlcjE1NjE5MDU=","avatar_url":"https://avatars0.githubusercontent.com/u/1561905?v=4","gravatar_id":"","url":"https://api.github.com/users/hanoch","html_url":"https://github.com/hanoch","followers_url":"https://api.github.com/users/hanoch/followers","following_url":"https://api.github.com/users/hanoch/following{/other_user}","gists_url":"https://api.github.com/users/hanoch/gists{/gist_id}","starred_url":"https://api.github.com/users/hanoch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanoch/subscriptions","organizations_url":"https://api.github.com/users/hanoch/orgs","repos_url":"https://api.github.com/users/hanoch/repos","events_url":"https://api.github.com/users/hanoch/events{/privacy}","received_events_url":"https://api.github.com/users/hanoch/received_events","type":"User","site_admin":false},"created_at":"2017-04-11T17:52:27Z","updated_at":"2017-04-11T17:52:27Z","author_association":"NONE","body":"@nknize will be good to have this enhancement included with the next release (v5.4)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319415246","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-319415246","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":319415246,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTQxNTI0Ng==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-08-01T15:59:50Z","updated_at":"2017-08-01T15:59:50Z","author_association":"CONTRIBUTOR","body":"Could you explain what in particular makes it complex and difficult to work with? I'm a bit torn about making it possible to provide some data that would systematically be ignored. Do you only care about being able to do it in documents or also in queries?\r\n\r\nFor the record, it is possible to have stored-only values by mapping them as `object`s with `enabled:false`:\r\n```\r\nPUT index \r\n{\r\n  \"mappings\": {\r\n    \"doc\": {\r\n      \"properties\": {\r\n        \"my_source_field\": {\r\n          \"type\": \"object\",\r\n          \"enabled\": false\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nPUt index/doc/1\r\n{\r\n  \"my_source_field\": [[[-45, 30, 100], [45, 30, 75], [45, -30, 77], [-45, -30, 101], [-45, 30, 100]]]\r\n}\r\n```\r\n\r\nAnd in case you need to duplicate fields so that you can both store the 3D shape and index the 2D shape, you can have ingest automatically take care of it for you, for instance the following script processor:\r\n\r\n```\r\nPOST _ingest/pipeline/_simulate\r\n{\r\n  \"pipeline\": {\r\n    \"processors\": [\r\n      {\r\n        \"script\": {\r\n          \"source\": \"List removeZFromPoint(List coords) {return coords.subList(0, 2);} List removeZFromPoly(List poly) { return poly.stream().map(this::removeZFromPoint).collect(Collectors.toList()); } List removeZFromShape(List shape) { return shape.stream().map(this::removeZFromPoly).collect(Collectors.toList()); }  ctx.shape_index = removeZFromShape(ctx.shape)\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"docs\": [\r\n    {\r\n      \"_source\": {\r\n        \"shape\": [\r\n          [\r\n            [\r\n              -45,\r\n              30,\r\n              100\r\n            ],\r\n            [\r\n              45,\r\n              30,\r\n              75\r\n            ],\r\n            [\r\n              45,\r\n              -30,\r\n              77\r\n            ],\r\n            [\r\n              -45,\r\n              -30,\r\n              101\r\n            ],\r\n            [\r\n              -45,\r\n              30,\r\n              100\r\n            ]\r\n          ]\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nreturns\r\n\r\n```\r\n{\r\n  \"docs\": [\r\n    {\r\n      \"doc\": {\r\n        \"_index\": \"_index\",\r\n        \"_type\": \"_type\",\r\n        \"_id\": \"_id\",\r\n        \"_source\": {\r\n          \"shape\": [\r\n            [\r\n              [\r\n                -45,\r\n                30,\r\n                100\r\n              ],\r\n              [\r\n                45,\r\n                30,\r\n                75\r\n              ],\r\n              [\r\n                45,\r\n                -30,\r\n                77\r\n              ],\r\n              [\r\n                -45,\r\n                -30,\r\n                101\r\n              ],\r\n              [\r\n                -45,\r\n                30,\r\n                100\r\n              ]\r\n            ]\r\n          ],\r\n          \"shape_index\": [\r\n            [\r\n              [\r\n                -45,\r\n                30\r\n              ],\r\n              [\r\n                45,\r\n                30\r\n              ],\r\n              [\r\n                45,\r\n                -30\r\n              ],\r\n              [\r\n                -45,\r\n                -30\r\n              ],\r\n              [\r\n                -45,\r\n                30\r\n              ]\r\n            ]\r\n          ]\r\n        },\r\n        \"_ingest\": {\r\n          \"timestamp\": \"2017-08-01T15:58:54.722Z\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\nIn that case, you'll just need to make sure to query the `shape_index` field instead of the `shape` field.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319487558","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-319487558","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":319487558,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTQ4NzU1OA==","user":{"login":"hanoch","id":1561905,"node_id":"MDQ6VXNlcjE1NjE5MDU=","avatar_url":"https://avatars0.githubusercontent.com/u/1561905?v=4","gravatar_id":"","url":"https://api.github.com/users/hanoch","html_url":"https://github.com/hanoch","followers_url":"https://api.github.com/users/hanoch/followers","following_url":"https://api.github.com/users/hanoch/following{/other_user}","gists_url":"https://api.github.com/users/hanoch/gists{/gist_id}","starred_url":"https://api.github.com/users/hanoch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanoch/subscriptions","organizations_url":"https://api.github.com/users/hanoch/orgs","repos_url":"https://api.github.com/users/hanoch/repos","events_url":"https://api.github.com/users/hanoch/events{/privacy}","received_events_url":"https://api.github.com/users/hanoch/received_events","type":"User","site_admin":false},"created_at":"2017-08-01T20:30:57Z","updated_at":"2017-08-01T20:42:42Z","author_association":"NONE","body":"We are aware of the workaround to store the other n-dimension (Z, M etc.) of the geo_point/geo_shape (polygon and poylline vertices) in another field, but the product we develop is a general purpose product, where field names are provided by the product users, and can collide with any other auto-generated field names (such as `shape` or `shape_index`).\r\n\r\nIt is much more straight forward to allow ES to be able to store (and retrieve) all the point/shape-vertices n-dimnesions, for example Z, on top of the X, Y dimension. It stream-lines queries against those geometry fields, returning all the geometry field dimensions in a staight-forward way, rather than trying to use workarounds and other type of tricks to try and join the returned X, Y query results with Z values, for example.\r\n\r\nNot being able to store and retrieve geometry `Z` values (as an example) with the geometry type fields can be compared to not being able to store and retrieve the `seconds` value portion from a Date/Time field type, and instead needing to store the `seconds` portion in a second non-date field, or the entire date/time value including the `seconds` value in a second non-date numeric or text field. Imagine that that was a limitation of the date type fields, not being able to store the `seconds` value. We can work with our time values stored in two fields, and manage to get the functionality implemented, working against two fields rather than the one date field, needing to merge and massage the query results, but it makes the usage less intuitive, custom, harder to maintain, and more errors prone. Isn't it much easier and staright forward to have the `seconds` portion of the date field value already included in the field value?\r\n\r\nAlso, think about the need to update the geometry field. Having to manage two fields forces more custom implementation/workarounds, and is more errors prone.\r\n\r\nOn top of all of that, it results in a non-standard index, which can only be queried, edited and managed (e.g. backup/restore, etc.) by custom code/scripts/implementation.\r\n\r\nThis is what we mean by \"complex and difficult to work with\".","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319688388","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-319688388","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":319688388,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTY4ODM4OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-08-02T14:24:35Z","updated_at":"2017-08-02T14:24:35Z","author_association":"CONTRIBUTOR","body":"> the product we develop is a general purpose product, where field names are provided by the product users, and can collide with any other auto-generated field names (such as shape or shape_index)\r\n\r\nI understand you'd like to not have to modify your document at all, but as a workaround to this particular issue you could reserve some namespace for the user document and then deal with your fields with more freedom, eg. `{ \"original_source\": { /* user data is here */ }, /* fields that you need to index or add doc values to are here */ }`.\r\n\r\n> It is much more straight forward to allow ES to be able to store (and retrieve) all the point/shape-vertices n-dimnesions, for example Z, on top of the X, Y dimension.\r\n\r\nI don't disagree it might make things more straight forward in your case. But ignoring everything but the x and y dimensions will be trappy to other users as well. So from our perspective, there is a trade-off between predictability and ease-of-use, and it is not obvious to me that we should favour the latter over the former.\r\n\r\nI have been thinking about accepting z coordinates at index time but rejecting them on the query side to not make users feel like we might use it somehow. But it would still annoy me a bit to not have the same parsing logic on both ends, which is bug-prone. Also, what should we do if the query is built using a pre-indexed shape that has a z dimension in that case?\r\n\r\n> Not being able to store and retrieve geometry Z values (as an example) with the geometry type fields can be compared to not being able to store and retrieve the seconds value portion from a Date/Time field type, and instead needing to store the seconds portion in a second non-date field, or the entire date/time value including the seconds value in a second non-date numeric or text field. Imagine that that was a limitation of the date type fields\r\n\r\nActually, we do have that limitation on date fields, and some users need to store micros or nanos in a different field: #10005.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319723972","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-319723972","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":319723972,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTcyMzk3Mg==","user":{"login":"hanoch","id":1561905,"node_id":"MDQ6VXNlcjE1NjE5MDU=","avatar_url":"https://avatars0.githubusercontent.com/u/1561905?v=4","gravatar_id":"","url":"https://api.github.com/users/hanoch","html_url":"https://github.com/hanoch","followers_url":"https://api.github.com/users/hanoch/followers","following_url":"https://api.github.com/users/hanoch/following{/other_user}","gists_url":"https://api.github.com/users/hanoch/gists{/gist_id}","starred_url":"https://api.github.com/users/hanoch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanoch/subscriptions","organizations_url":"https://api.github.com/users/hanoch/orgs","repos_url":"https://api.github.com/users/hanoch/repos","events_url":"https://api.github.com/users/hanoch/events{/privacy}","received_events_url":"https://api.github.com/users/hanoch/received_events","type":"User","site_admin":false},"created_at":"2017-08-02T16:22:02Z","updated_at":"2017-08-02T16:22:02Z","author_association":"NONE","body":"We already had long discussions with Shane, Sherry, Nick and others from Elastic, explaining the need to support Z values with geometries, and going into depth and more details about the different use cases.\r\nThis requirement is not specific to our use cases, having geometries include Z values is basic DBs (and search engines) requirement, when supporting geometry filed types. I don't think we have any disagreement here.\r\n\r\nTo reiterate some points, and to make sure we are on the same page:\r\n1. we are using ES as a DB, and need to be able store and retrieve geometries including X, Y, Z (and possibly also M & W) along with the geometry field.\r\n2. this functionality is supported by other DBs that support geometries.\r\n3. It will be nice to also be able to do geometry Z-value (on top of the already exiting Lucene X and Y index capabilities) analytics while querying/searching, but this is not a must for now. We can do post query analysis if need to, but the main need to store and retrieve Z values is to be able to store them in the DB and use their values when we query for the geometry field(s).\r\n4. We understand that there are two levels of support - being able to store-and-retrieve Z values with the geometry fields, and being able to actually index and include those Z-values with the query/search/analysis (this portion needs to be supported down in Lucene). It will be nice to get both capabilities, but having Z values search-and-retrieve capabilities without the extra Z value analysis capabilities goes a long way, and completes the ES requirement to be a DB that can support geometry field types, like all the other DBs that support geometry field types.\r\n\r\nAs far as your comment about my comparison/analogy of the geometry `Z` value to a date field `seconds` component, perhaps my analogy was not representative of the basic need of geometry field types to support `Z` values. a better analogy would probably be to imagine that the date fields in ES can only hold the date component (`dd/MM/yyyy`) but not the time component (`HH:mm:ss.sss`). This is basic date field capability. The requirement of having the date field value support micro or nano seconds precision is more about the ability of the field to store higher precision. From basic vs. advanced requirement point of view, it might be compared to the need of the geometry fields to support n-dimensions above X,Y,Z, for example M (measure), W (weight), etc. Z values support is basic geometry field type requirement.\r\n\r\nI think we agree that Z value support is something ES should have out of the box, the question is how can we roll in that support. Should ES:\r\n1. start with store-and-retrieve Z values support and document the limitation of that support, until Lucene can support the analysis portion, or -\r\n2. wait until Z values are fully supported down in Lucene to be able to support ALL the search/query/analysis cases ES already support with X and Y values. I am not sure that will ever be fully completed.\r\n\r\nWith my discussions with Shane and others from Elastic, I was under the impression that approach 1 was chosen - start with the ability to store-and-retrieve Z values with the geometry field types.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319897433","html_url":"https://github.com/elastic/elasticsearch/issues/22917#issuecomment-319897433","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22917","id":319897433,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTg5NzQzMw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-08-03T07:59:12Z","updated_at":"2017-08-03T07:59:12Z","author_association":"CONTRIBUTOR","body":"Agreed with you about the usefulness of support for Z values. I'm just wondering about potential side-effects on other users and it would be a pity that eg. malformed inputs are not detected anymore because of the fact there is an optional 3rd dimension. Or that some users think that the z dimension will be taken into account for their queries while it's not. Even though I tend to dislike adding options to mappings, I'm wondering whether this is something we should only do when an option is turned on (maybe something like `coerce` on numeric fields) so that it can be enabled when you know what you are doing but it is not trappy to the majority of users.","performed_via_github_app":null}]