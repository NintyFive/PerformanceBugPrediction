[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/344891125","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-344891125","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":344891125,"node_id":"MDEyOklzc3VlQ29tbWVudDM0NDg5MTEyNQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-11-16T11:07:55Z","updated_at":"2017-11-16T11:07:55Z","author_association":"CONTRIBUTOR","body":"> This way we could get rid of this mapping entirely or at least just maintain it for a few examples like epoch_millis, epoch_second and dateOptionalTime as the text representation are nowhere near as readable as the date time formats, once internalized.\r\n\r\n++\r\n\r\nWe can deprecate their use in 6.x and say (\"please replace with YYYY...\"), then on upgrade to 7.0, we can auto-upgrade the mappings to use the equivalent date pattern format.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/353306833","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-353306833","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":353306833,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MzMwNjgzMw==","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2017-12-21T09:48:05Z","updated_at":"2017-12-21T09:48:05Z","author_association":"MEMBER","body":"some more discussion about BWC. \r\n\r\n#### Painless\r\n\r\nRight now calling `doc['foo'].value` returns a joda `DateTime` object (due to `ScriptDocValues` in core returning one), which makes it non-trivial to just convert to java time, as many users will have put this kind of code in their scripts to deal with dates.\r\n\r\nA possible work around for this would be to have a `doc['foo'].date_value` object which returns a java time.\r\n\r\n#### Client side runtime casting of bucket keys\r\n\r\n`InternalDateHistogram.Bucket.getKey()` implements the `Bucket` interface, which returns `Object` for the `getKey()` method. In the case of the date histogram a joda `DateTime` is returned, which clients might just be casting to `DateTime` object, because it has always been like that. This might only be uncovered in runtime, and not in compile time for people using Java.\r\n\r\nWe need to check if the high level REST client is affected by this as well.\r\n\r\n#### Different symbols used in date formatting\r\n\r\nThere are a couple of differences when date time formatters are used, according to the java docs. joda time has a `century of era` symbol, using the `C` character. This has been removed fully from java time. Also the `YYYY` formatter is year of era in joda time, but week based year in java time (need to check how much of an impact this really is).\r\n\r\nOne idea was to have a setting which allows to set which date implementation would be used, but this would mean to not have support rolling upgrades as having to have a hard move from one implementation to the other, so we need to support both time libraries at least in scripting.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/358958368","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-358958368","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":358958368,"node_id":"MDEyOklzc3VlQ29tbWVudDM1ODk1ODM2OA==","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2018-01-19T12:52:16Z","updated_at":"2018-01-19T12:52:16Z","author_association":"MEMBER","body":"There are some differences in TZ handling we have to cater for. Jodatime has 593 tz ids, java time 600. java time adds a few new ones (starting with `SystemV` which seem not to be used at all), and those can be ignored. However, java time removes `EST, GMT+0, GMT-0, HST, MST, ROC`.\r\n\r\nThe general recommendation seems to be to use either offsets, like `UTC-08:00` or those region based names like `America/New York` rather than the above as those are ambiguous.\r\n\r\nWe might need to add deprecation warnings for the above timezones.\r\n\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/410237446","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-410237446","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":410237446,"node_id":"MDEyOklzc3VlQ29tbWVudDQxMDIzNzQ0Ng==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2018-08-03T12:23:58Z","updated_at":"2018-08-03T12:23:58Z","author_association":"MEMBER","body":"Relates #10005","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/413363371","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-413363371","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":413363371,"node_id":"MDEyOklzc3VlQ29tbWVudDQxMzM2MzM3MQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2018-08-15T22:48:33Z","updated_at":"2018-08-15T22:48:33Z","author_association":"MEMBER","body":"I've been investigating how we might add support for a bwc layer within 6.x so that using existing joda format strings is backed by java time. This looks completely possible to do with a sysprop that controls whether a mapping layer on parsing formats is enabled, except for the lack of century-of-era support @spinscale mentioned in an earlier comment. This raises the question of whether this extremely esoteric option could be broken in a minor (since there is no migration path anyways, and IMO the likelihood of any user out there using it is almost non-existent). The alternative to this is to build an abstraction layer internally for all datetime uses, so that java/joda use can be swapped by the same sysprop, determine which underlying implementation of the abstraction to use (this would rely on replacing all uses of parsing/formatting on the abstraction). I'd like others opinions on the tradeoffs between these two approaches.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/413363707","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-413363707","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":413363707,"node_id":"MDEyOklzc3VlQ29tbWVudDQxMzM2MzcwNw==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2018-08-15T22:50:10Z","updated_at":"2018-08-15T22:50:10Z","author_association":"MEMBER","body":"Note: A third alternative that I do not see as viable is implementing the century-of-era in java time. While it is possible, it would require quite a bit of code for something that I don't think anyone is actually using.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/413517730","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-413517730","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":413517730,"node_id":"MDEyOklzc3VlQ29tbWVudDQxMzUxNzczMA==","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2018-08-16T11:44:01Z","updated_at":"2018-08-16T11:44:01Z","author_association":"MEMBER","body":"to add some more background: here is a link what century of era refers to in an ISO chronology, i.e. 19th century for all the years from 1900 till 1999: http://joda-time.sourceforge.net/field.html#CenturyOfEra_and_YearOfCentury - which basically leaves you with a super broad/inexact timestamp\r\n\r\nMy unscientific feeling also says, there are not a lot of users of this.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/415320958","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-415320958","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":415320958,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNTMyMDk1OA==","user":{"login":"MovGP0","id":83339,"node_id":"MDQ6VXNlcjgzMzM5","avatar_url":"https://avatars3.githubusercontent.com/u/83339?v=4","gravatar_id":"","url":"https://api.github.com/users/MovGP0","html_url":"https://github.com/MovGP0","followers_url":"https://api.github.com/users/MovGP0/followers","following_url":"https://api.github.com/users/MovGP0/following{/other_user}","gists_url":"https://api.github.com/users/MovGP0/gists{/gist_id}","starred_url":"https://api.github.com/users/MovGP0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MovGP0/subscriptions","organizations_url":"https://api.github.com/users/MovGP0/orgs","repos_url":"https://api.github.com/users/MovGP0/repos","events_url":"https://api.github.com/users/MovGP0/events{/privacy}","received_events_url":"https://api.github.com/users/MovGP0/received_events","type":"User","site_admin":false},"created_at":"2018-08-23T07:35:38Z","updated_at":"2018-08-23T07:35:38Z","author_association":"NONE","body":"Support for [JodaTime](http://www.joda.org/joda-time/) and [NodaTime](https://nodatime.org/) time formats is really important for me. \r\n\r\nFor all business applications I have worked on, it is way more important to have **validateable data types** and algorithmic correctness, than issues like having very „high precision“, „better performance“, or „no dependency on external libraries“. \r\n\r\nHaving additional datatypes that support higher precision is ok with me. But I would not invest the work in reinventing the wheel in cases where the JodaTime library works fine. It might make more sense to implement the high-precision time datatypes in the JodaTime library instead. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/416397205","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-416397205","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":416397205,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNjM5NzIwNQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2018-08-27T23:05:41Z","updated_at":"2018-08-27T23:06:10Z","author_association":"MEMBER","body":"@MovGP0 The joda time project encourages users to migrate to the the java time api. From a maintainability perspective, we are moving to java time to both eliminate an external dependency and ensure bugs are fixed.  From a format support perspective, joda time and java time are very similar. There are a only a handful of format specifiers that changed, and the year of century mentioned above is the only one that does not exist in java time. Do you have a use for it specifically, or are you generally concerned with needing to update your formats?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/417940789","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-417940789","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":417940789,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk0MDc4OQ==","user":{"login":"MovGP0","id":83339,"node_id":"MDQ6VXNlcjgzMzM5","avatar_url":"https://avatars3.githubusercontent.com/u/83339?v=4","gravatar_id":"","url":"https://api.github.com/users/MovGP0","html_url":"https://github.com/MovGP0","followers_url":"https://api.github.com/users/MovGP0/followers","following_url":"https://api.github.com/users/MovGP0/following{/other_user}","gists_url":"https://api.github.com/users/MovGP0/gists{/gist_id}","starred_url":"https://api.github.com/users/MovGP0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MovGP0/subscriptions","organizations_url":"https://api.github.com/users/MovGP0/orgs","repos_url":"https://api.github.com/users/MovGP0/repos","events_url":"https://api.github.com/users/MovGP0/events{/privacy}","received_events_url":"https://api.github.com/users/MovGP0/received_events","type":"User","site_admin":false},"created_at":"2018-09-02T16:00:28Z","updated_at":"2018-09-02T16:00:28Z","author_association":"NONE","body":"@rjernst I'm mostly concert about reinventing the wheel (aka. 'not invented here syndrome'). Usually it's better to just use and contribute to a library where possible, rather than developing something as complex as handling international time calculations yourself. \r\n\r\nNot sure how far the Java Time API has evolved to handle Joda Time's use cases.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/417942810","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-417942810","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":417942810,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNzk0MjgxMA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2018-09-02T16:33:06Z","updated_at":"2018-09-02T16:33:30Z","author_association":"MEMBER","body":"@MovGP0 As @rjernst mentioned, Joda is [deprecated](http://www.joda.org/joda-time/), no longer developed, and users are encouraged to move to `java.time`:\r\n\r\n> Note that from Java SE 8 onwards, users are asked to migrate to `java.time` (JSR-310) - a core part of the JDK which replaces this project.\r\n\r\n> Note that Joda-Time is considered to be a largely “finished” project. No major enhancements are planned. If using Java SE 8, please migrate to `java.time` (JSR-310).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/419288299","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-419288299","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":419288299,"node_id":"MDEyOklzc3VlQ29tbWVudDQxOTI4ODI5OQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2018-09-07T01:05:45Z","updated_at":"2018-09-07T01:05:45Z","author_association":"MEMBER","body":"We have been looking carefully at how to provide a migration path and deprecation warnings for those using joda time specific behavior. There are 2 types of places within Elasticsearch APIs the can be found: scripting and anywhere date formats are used.\r\n\r\nFor scripting, we previously attempted to provide migration through https://github.com/elastic/elasticsearch/pull/31441. However, that turned out to be problematic with rolling upgrades. The new approach agreed on is to change the scripting api for date fields to return a ZonedDateTime compatible object, but with augmentation methods for the missing joda time methods, which will trigger deprecation warnings when used. This is implemented in https://github.com/elastic/elasticsearch/pull/31441.\r\n\r\nFor date formats, the problem is a few characters for which the identifier has changed, or no longer exists in java time. For these the plan is to provide a special prefix that may be used for date formats that want to force the use of java time format specifiers (probably `8:`). For most users, formats are compatible between the two, so nothing will change. For those using specifiers that have changed meanings or no longer exist, a deprecation warning will be emitted when parsing the format. The special prefix to force the new formats will continue to exist through 7.x to provide time for users affected by this to switch back to a format string without the prefix.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/424334705","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-424334705","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":424334705,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNDMzNDcwNQ==","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2018-09-25T13:04:52Z","updated_at":"2018-09-25T13:04:52Z","author_association":"MEMBER","body":"Two more BWC things Dave mentioned to me:\r\n\r\n1. Java 8 and Java9/10 do have different timezone handling. When creating a parser with a time zone in Java 8, it will overwrite the timezone parsed in the text input. This is fixed in java 9/10, but may lead to different results in java8 when used in combination with formatters. We need to verify this for the ingest processors\r\n\r\n```java\r\npublic static void main(String[] argv) {\r\n    DateTimeFormatter formatter = new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd'T'HH:mm:ss,SSSXX\").toFormatter(Locale.ROOT);\r\n    String date = \"2018-05-15T16:14:56,374Z\";\r\n\r\n    System.out.println(formatter.withZone(ZoneId.of(\"Europe/Berlin\")).parse(date));\r\n    System.out.println(formatter.withZone(ZoneOffset.UTC).parse(date));\r\n    System.out.println(formatter.parse(date));\r\n\r\n    System.out.println(Instant.from(formatter.withZone(ZoneId.of(\"Europe/Berlin\")).parse(date)));\r\n    System.out.println(Instant.from(formatter.withZone(ZoneOffset.UTC).parse(date)));\r\n    System.out.println(Instant.from(formatter.parse(date)));\r\n  }\r\n```\r\n\r\nUnder java 10 this returns\r\n\r\n```\r\n{InstantSeconds=1526400896, OffsetSeconds=0},ISO,Europe/Berlin resolved to 2018-05-15T16:14:56.374\r\n{InstantSeconds=1526400896, OffsetSeconds=0},ISO,Z resolved to 2018-05-15T16:14:56.374\r\n{InstantSeconds=1526400896, OffsetSeconds=0},ISO resolved to 2018-05-15T16:14:56.374\r\n2018-05-15T16:14:56.374Z\r\n2018-05-15T16:14:56.374Z\r\n2018-05-15T16:14:56.374Z\r\n```\r\n\r\nUnder java 8 this returns\r\n\r\n```\r\n{OffsetSeconds=0, InstantSeconds=1526393696},ISO,Europe/Berlin resolved to 2018-05-15T16:14:56.374\r\n{OffsetSeconds=0, InstantSeconds=1526400896},ISO,Z resolved to 2018-05-15T16:14:56.374\r\n{OffsetSeconds=0, InstantSeconds=1526400896},ISO resolved to 2018-05-15T16:14:56.374\r\n2018-05-15T14:14:56.374Z\r\n2018-05-15T16:14:56.374Z\r\n2018-05-15T16:14:56.374Z\r\n```\r\n\r\nThe third last line is the important one. One time it is `14:14` and one time `16:14`\r\n\r\n2. Appending a fraction using `.appendFraction(MILLI_OF_SECOND, 3, 3, true)` used to work with either a dot or a localized decimal point symbol in joda time, but this requires an explicit configuration in java time. This might be an issue for ingest pipelines as well.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/428088669","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-428088669","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":428088669,"node_id":"MDEyOklzc3VlQ29tbWVudDQyODA4ODY2OQ==","user":{"login":"robertdumitrescu","id":10505774,"node_id":"MDQ6VXNlcjEwNTA1Nzc0","avatar_url":"https://avatars1.githubusercontent.com/u/10505774?v=4","gravatar_id":"","url":"https://api.github.com/users/robertdumitrescu","html_url":"https://github.com/robertdumitrescu","followers_url":"https://api.github.com/users/robertdumitrescu/followers","following_url":"https://api.github.com/users/robertdumitrescu/following{/other_user}","gists_url":"https://api.github.com/users/robertdumitrescu/gists{/gist_id}","starred_url":"https://api.github.com/users/robertdumitrescu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/robertdumitrescu/subscriptions","organizations_url":"https://api.github.com/users/robertdumitrescu/orgs","repos_url":"https://api.github.com/users/robertdumitrescu/repos","events_url":"https://api.github.com/users/robertdumitrescu/events{/privacy}","received_events_url":"https://api.github.com/users/robertdumitrescu/received_events","type":"User","site_admin":false},"created_at":"2018-10-09T07:26:24Z","updated_at":"2018-10-09T07:26:24Z","author_association":"NONE","body":"What's the plan for solving this issue in terms of releases timeline?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/538286236","html_url":"https://github.com/elastic/elasticsearch/issues/27330#issuecomment-538286236","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27330","id":538286236,"node_id":"MDEyOklzc3VlQ29tbWVudDUzODI4NjIzNg==","user":{"login":"pgomulka","id":11137008,"node_id":"MDQ6VXNlcjExMTM3MDA4","avatar_url":"https://avatars0.githubusercontent.com/u/11137008?v=4","gravatar_id":"","url":"https://api.github.com/users/pgomulka","html_url":"https://github.com/pgomulka","followers_url":"https://api.github.com/users/pgomulka/followers","following_url":"https://api.github.com/users/pgomulka/following{/other_user}","gists_url":"https://api.github.com/users/pgomulka/gists{/gist_id}","starred_url":"https://api.github.com/users/pgomulka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pgomulka/subscriptions","organizations_url":"https://api.github.com/users/pgomulka/orgs","repos_url":"https://api.github.com/users/pgomulka/repos","events_url":"https://api.github.com/users/pgomulka/events{/privacy}","received_events_url":"https://api.github.com/users/pgomulka/received_events","type":"User","site_admin":false},"created_at":"2019-10-04T07:48:24Z","updated_at":"2019-10-04T07:48:24Z","author_association":"CONTRIBUTOR","body":"@jasontedor I think we can close this as we are fully migrated. We only have bugfixes now.","performed_via_github_app":null}]