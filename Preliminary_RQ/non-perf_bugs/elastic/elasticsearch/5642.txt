{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/5642","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5642/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5642/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5642/events","html_url":"https://github.com/elastic/elasticsearch/issues/5642","id":30597428,"node_id":"MDU6SXNzdWUzMDU5NzQyOA==","number":5642,"title":"How to find maximum of minimal value of nested documents?","user":{"login":"Kamapcuc","id":3963805,"node_id":"MDQ6VXNlcjM5NjM4MDU=","avatar_url":"https://avatars2.githubusercontent.com/u/3963805?v=4","gravatar_id":"","url":"https://api.github.com/users/Kamapcuc","html_url":"https://github.com/Kamapcuc","followers_url":"https://api.github.com/users/Kamapcuc/followers","following_url":"https://api.github.com/users/Kamapcuc/following{/other_user}","gists_url":"https://api.github.com/users/Kamapcuc/gists{/gist_id}","starred_url":"https://api.github.com/users/Kamapcuc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Kamapcuc/subscriptions","organizations_url":"https://api.github.com/users/Kamapcuc/orgs","repos_url":"https://api.github.com/users/Kamapcuc/repos","events_url":"https://api.github.com/users/Kamapcuc/events{/privacy}","received_events_url":"https://api.github.com/users/Kamapcuc/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2014-04-01T13:15:50Z","updated_at":"2014-06-09T18:10:59Z","closed_at":"2014-06-09T18:10:59Z","author_association":"NONE","active_lock_reason":null,"body":"Here is mapping of product:\n\n``` json\n{\n    \"catalog_mar_31\" : {\n        \"mappings\" : {\n            \"PRODUCT\" : {\n                \"properties\" : {\n                    \"price\" : {\n                        \"type\" : \"nested\",\n                        \"include_in_parent\" : true,\n                        \"include_in_root\" : true,\n                        \"properties\" : {\n                            \"id\" : {\n                                \"type\" : \"string\"\n                            },\n                            \"en\" : {\n                                \"type\" : \"double\"\n                            },\n                            \"de\" : {\n                                \"type\" : \"double\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nprice.id is identifier of discounts.\n\nFor example, we have regular (full) price, price for regular customers (80% of full price) and a product of a day (price equals to full price except one product):\n\n|  | full price | regular customers | product of a day |\n| --- | --- | --- | --- |\n| product A | 100 | 80 | 100 |\n| product B (day) | 200 | 160 | 130 |\n| product C | 150 | 120 | 150 |\n\nAll prices are precalculated for fast sorting and filtering.\nUser see only the lowest price of product (full is strikethrough).\n\nSo here is my query for receiving documents from ice skating category with price filter and price sort for user that have two discounts \"full_price\" and \"regular_cusomer\":\n\n``` json\n{\n    \"query\" : {\n        \"bool\" : {\n            \"must\" : [{\n                    \"term\" : {\n                        \"category\" : \"ice_skating\"\n                    }\n                }, {\n                    \"nested\" : {\n                        \"filter\" : {\n                            \"bool\" : {\n                                \"must\" : [{\n                                        \"range\" : {\n                                            \"price.en\" : {\n                                                \"lte\" :  <price_to>\n                                            }\n                                        }\n                                    }, {\n                                        \"terms\" : {\n                                            \"price.id\" : [\"full_price\", \"regular_cusomer\"]\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"path\" : \"price\"\n                    }\n                }\n            ],\n            \"must_not\" : {\n                \"nested\" : {\n                    \"filter\" : {\n                        \"bool\" : {\n                            \"must\" : [{\n                                    \"range\" : {\n                                        \"price.en\" : {\n                                            \"lt\" :  <price_from>\n                                        }\n                                    }\n                                }, {\n                                    \"terms\" : {\n                                        \"price.id\" : [\"full_price\", \"regular_cusomer\"]\n                                    }\n                                }\n                            ]\n                        }\n                    },\n                    \"path\" : \"price\"\n                }\n            }\n        }\n    },\n    \"sort\" : [{\n            \"price.en\" : {\n                \"order\" : \"desc\",\n                \"missing\" : \"_last\",\n                \"mode\" : \"min\",\n                \"nested_filter\" : {\n                    \"terms\" : {\n                        \"price.id\" : [\"full_price\", \"regular_cusomer\"]\n                    }\n                }\n            }\n        }\n    ],\n    \"facets\" : {\n        \"price\" : {\n            \"statistical\" : {\n                \"field\" : \"price.en\"\n            },\n            \"facet_filter\" : {\n                \"terms\" : {\n                    \"price.id\" : [\"full_price\", \"regular_cusomer\"]\n                }\n            },\n            \"nested\" : \"price\"\n        }\n    }\n}\n```\n\n<price_from> and <price_to> is green arrows:\nhttp://forumbgz.ru/user/upload/file29943.png\n\nSo, the min and max result of statistical facet (red arrows) will be 80 - 200\nBut right answer is 80 - 160.\n\nMy question is how to find maximum of minimal value of nested documents?\nI'm little bit stuck - can you help me with advice how to make that?\n\nSorry for bad English - I'm not native speaker. :confused: \n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}