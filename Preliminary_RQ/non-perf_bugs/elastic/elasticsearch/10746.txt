{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10746/events","html_url":"https://github.com/elastic/elasticsearch/issues/10746","id":70299996,"node_id":"MDU6SXNzdWU3MDI5OTk5Ng==","number":10746,"title":"Completion Suggester V2","user":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"labels":[{"id":146833729,"node_id":"MDU6TGFiZWwxNDY4MzM3Mjk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Suggesters","name":":Search/Suggesters","color":"0e8a16","default":false,"description":"\"Did you mean\" and suggestions as you type"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":246685314,"node_id":"MDU6TGFiZWwyNDY2ODUzMTQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v5.0.0-alpha1","name":"v5.0.0-alpha1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"assignees":[{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false}],"milestone":null,"comments":33,"created_at":"2015-04-23T04:00:50Z","updated_at":"2017-12-21T17:43:52Z","closed_at":"2015-11-07T23:48:18Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# Completion Suggester V2\n\nThe completion suggester provides auto-complete/search-as-you-type functionality. \nThis is a navigational feature to guide users to relevant results as they are typing, improving search precision. It is not meant for spell correction or did-you-mean functionality like the term or phrase suggesters.\n\nThe completions are indexed as a weighted FST (finite state transducer) to provide fast Top N prefix-based\nsearches suitable for serving relevant results as a user types.\n\n**Notable Features**: \n- Document oriented suggestions:\n  - Near-real time.\n  - Deleted document filtering.\n  - Multiple Context support.\n  - Return document field values via `payload`. \n- Query Interface:\n  - Regular expression support via `regex`.\n  - Typo tolerance via `fuzzy`.\n  - Context boosting at query time.\n\nCompletion Suggester V2 is based on [LUCENE-6339](https://issues.apache.org/jira/browse/LUCENE-6339) and [LUCENE-6459](https://issues.apache.org/jira/browse/LUCENE-6459), the first iteration of Lucene's new _suggest_ API.\n## Mapping\n\nThe completion fields are indexed in a special way, hence a field mapping has to be defined.\nFollowing shows a field mapping for a completion field named _title_suggest_:\n\n``` bash\nPUT {INDEX_NAME}\n{\n \"mappings\": {\n  {TYPE_NAME}: {\n   \"properties\": {\n    \"title_suggest\": {\n     \"type\": \"completion\"\n   }\n  }\n }\n}\n```\n\nYou can choose index and search time analyzer for the completion field by adding `analyzer` \nand `search_analyzer` options. \n### Context Mappings\n\nAdding a `contexts` option in the field mapping defines a context-enabled completion field. You may want \na context-enabled completion field, if you require filtering or boosting suggestions by a criteria other than \njust its prefix. Note that adding high-cardinality context values will increase the size of the in-memory \nindex significantly.\n\nThere are two types of supported context types: `category` and `geo`.\n#### Category Context Mapping\n\nCategory contexts are indexed as prefixes to the completion field value.\n\nThe following adds a category context named _genre_:\n\n``` bash\n...\n\"contexts\": [\n {\n   \"name\": \"genre\",\n   \"type\": \"category\"\n }\n]\n```\n\nYou can also pull context values from another field in a document by using a `path` option specifying the field name.\n#### Geo Context Mapping\n\nGeo points are encoded as geohash strings and prefixed to the completion field value.\nThe following adds a geo context named _location_:\n\n``` bash\n...\n\"contexts\": [\n {\n   \"name\": \"location\",\n   \"type\": \"geo\"\n }\n]\n```\n\nYou can also set `precision` option to choose the geohash length and `path` to pull context values from another\nfield in the document.\n## Indexing\n\nJust like any other field, you can add multiple completion fields to a document. You can also index multiple completions \nfor a completion field per document. Each completion value is tied to its document and can be assigned an index-time\nweight, which determines its relative rank among other completion values which share a common prefix.\n\nThe following indexes a completion value and its weight for the _title_suggest_ completion field:\n\n``` bash\nPOST {INDEX_NAME}/{TYPE_NAME}\n{\n \"title_suggest\": {\n  \"input\": \"title1\",\n  \"weight\": 7\n }\n}\n```\n\nYou can use the short-form, if you prefer not to add `weight` to the completions:\n\n``` bash\nPOST {INDEX_NAME}/{TYPE_NAME}\n{\n \"title_suggest\": \"title1\",\n}\n```\n\nArrays are also supported to index multiple values,\n\nThe following indexes multiple completion entries (`input` and `weight`) for a single document:\n\n``` bash\nPOST {INDEX_NAME}/{TYPE_NAME}\n{\n \"title_suggest\": [\n  {\n   \"input\": \"title1\",\n   \"weight\": 14\n  },\n  {\n   \"input\": \"alternate_title\",\n   \"weight\": 7\n  }\n ]\n}\n```\n#### Indexing context-enabled fields\n\nYou can use the `path` option previously mentioned to pull context values from another field\nin the document or add `contexts` option to the completion entry while indexing.\n\nThe following explicitly indexes context values along with completions:\n\n``` bash\nPOST {INDEX_NAME}/{TYPE_NAME}\n{\n \"genre_title_suggest\": {\n  \"input\": \"title1\",\n  \"contexts\": {\n   \"genre\": [\"genre1\", \"genre2\"]\n  },\n  \"weight\": 7\n }\n}\n```\n\nYou can also configure the `path` option in the context mapping to pull values from another \nfield as follows (assuming `path` for the _genre_ context has been set to _genre_ field):\n\n``` bash\nPOST {INDEX_NAME}/{TYPE_NAME}\n{\n \"genre_title_suggest\": \"title1\",\n \"genre\": [\"genre1\", \"genre2\"]\n}\n```\n## Query Interface\n\nThe point of indexing values as completions is to be able to run fast prefix-based searches on them. \nYou can run **Prefix**, **Fuzzy** and **Regex** queries on all completion fields. In case of a context-\nenabled completion field, providing no context indicates  _all_ contexts will be considered. But you\ncan not run a **Context** query on a completion field with no contexts. When a query is run on a context-\nenabled field, the contexts for a completion is returned with the suggestion.\n#### Prefix Query\n\nThe following suggests completions from the field _title_suggest_ that start with _titl_:\n\n``` bash\nPOST {INDEX}/_suggest\n{\n \"suggest-namespace\" : {\n  \"prefix\" : \"titl\",\n  \"completion\" : {\n   \"field\" : \"title_suggest\"\n  }\n }\n}\n```\n\nThe suggestions are sorted by their index-time `weight`.\n#### Fuzzy Prefix Query\n\nA fuzzy prefix query can serve typo-tolerant suggestions. It scores suggestions _closer_ (based on its edit distance) \nto the provided _prefix_ higher, regardless of their _weight_.\n\n``` bash\nPOST {INDEX}/_suggest\n{\n \"suggest-namespace\" : {\n  \"prefix\" : \"sug\",\n  \"completion\" : {\n   \"field\" : \"suggest\",\n   \"fuzzy\" : {        (1)\n    \"fuzziness\" : 2\n   }\n  }\n }\n}\n```\n\nSpecify _fuzzy_ as shown in (1) to use typo-tolerant suggester. [Full options for fuzzy](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-completion.html#fuzzy)\n#### Regex Prefix Query\n\nA regex prefix query matches all the term prefixes that match a regular expression. Regex is anchored at the begining but not at the end. \nThe suggestions are sorted by their index-time `weight`.\n\n``` bash\nPOST {INDEX}/_suggest\n{\n \"suggest-namespace\" : {\n  \"regex\" : \"s[u|a]g\",    (1)\n  \"completion\" : {\n   \"field\" : \"suggest\"\n  }\n }\n}\n```\n\nSpecify _regex_ as shown in (1), instead of _prefix_ to use regular expressions. [Supported regular expression syntax](http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html#regexp-syntax)\n### Context Query\n\nAdding `contexts` (1) option to the query enables filtering and/or boosting suggestions based on their context values.\nThis query scores suggestions by multiplying the query-time _boost_ withe the suggestion _weight_. \n\n``` bash\nPOST {INDEX}/_suggest\n{\n \"suggest-namespace\" : {\n  \"prefix\" : \"sug\",\n  \"completion\" : {\n   \"field\" : \"genre_title_suggest\",\n   \"contexts\": {           (1)\n    \"genre\": [\n     {\n      \"value\" : \"rock\", \n      \"boost\" : 3\n     },\n     {\n      \"value\" : \"indie\",\n      \"boost\" : 2\n     }\n    ]\n   }\n  }\n }\n}\n```\n\nThe contexts can also be specified without any boost:\n\n``` bash\n  ...\n  \"contexts\": {\n    \"genre\" : [\"rock\", \"indie\"]\n  }\n```\n#### Geo Context Query:\n\nThe result will be scored such that the suggestions are first sorted by the distance between the corresponding geo context and the provided \ngeo location and then by the weight of the suggestions.\n\n``` bash\n  ...\n  \"contexts\" : {\n    \"location\" : {\n      \"context\" : {\n        \"lat\" : ..,\n        \"lon\" : ..\n      },\n      \"precision\" : ..\n    }\n  }\n```\n#### Example\n\nThe following performs a **Fuzzy Prefix Query** combined with a **Context Query** on a context-enabled completion field named _genre_song_suggest_.\n\n``` bash\nPOST {INDEX}/_suggest\n{\n \"suggest-namespace\" : {\n  \"prefix\" : \"like a roling st\",\n  \"completion\" : {\n   \"field\" : \"genre_song_suggest\",\n   \"fuzzy\" : {\n    \"fuzziness\" : 2\n   },\n   \"contexts\" : {\n    \"genre\": [\n     {\n      \"context\" : \"rock\", \n      \"boost\" : 3\n     },\n     {\n      \"context\" : \"indie\",\n      \"boost\" : 2\n     }\n    ]\n   }\n  }\n }\n}\n```\n\nThis query will return **all** song names for the genre _rock_ and _indie_ that are within an edit distance of _2_ from the prefix _like a roling st_.\nThe song names with genre of _rock_ will be boosted higher then that of _indie_.\nThe completion field values that share the longest prefix with _like a roling st_ will be additionally boosted higher.\n### Payload\n\nYou can retrieve any document field values along with its completions using the `payload` option.\nThe following returns the _url_ field with each suggestion entry:\n\n``` bash\nPOST {INDEX}/_suggest\n{\n \"suggest-namespace\" : {\n  \"prefix\" : \"titl\",\n  \"completion\" : {\n   \"field\" : \"title_suggest\",\n   \"payload\" : [\"url\"]\n  }\n }\n}\n```\n\nThe response format is as follows:\n\n``` bash\n{\n ...\n \"suggest-namespace\" : [ \n  {\n   \"prefix\" : \"sugg\",\n   \"offset\" : 0,\n   \"length\" : 4,\n   \"options\" : [ \n    {\n     \"text\" : \"suggestion\",\n     \"score\" : 34.0, \n     \"payload\": {\n       \"url\" : [ \"url_1\" ]\n     }\n    }\n   ]\n  } \n ]\n}\n```\n","closed_by":{"login":"areek","id":753679,"node_id":"MDQ6VXNlcjc1MzY3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/753679?v=4","gravatar_id":"","url":"https://api.github.com/users/areek","html_url":"https://github.com/areek","followers_url":"https://api.github.com/users/areek/followers","following_url":"https://api.github.com/users/areek/following{/other_user}","gists_url":"https://api.github.com/users/areek/gists{/gist_id}","starred_url":"https://api.github.com/users/areek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areek/subscriptions","organizations_url":"https://api.github.com/users/areek/orgs","repos_url":"https://api.github.com/users/areek/repos","events_url":"https://api.github.com/users/areek/events{/privacy}","received_events_url":"https://api.github.com/users/areek/received_events","type":"User","site_admin":false},"performed_via_github_app":null}