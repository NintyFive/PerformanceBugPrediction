{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/4133","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4133/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4133/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4133/events","html_url":"https://github.com/elastic/elasticsearch/issues/4133","id":22358581,"node_id":"MDU6SXNzdWUyMjM1ODU4MQ==","number":4133,"title":"Root field mappers duplicated in DocumentMapper and DocumentMapperParser","user":{"login":"karol-gwaj","id":1188157,"node_id":"MDQ6VXNlcjExODgxNTc=","avatar_url":"https://avatars3.githubusercontent.com/u/1188157?v=4","gravatar_id":"","url":"https://api.github.com/users/karol-gwaj","html_url":"https://github.com/karol-gwaj","followers_url":"https://api.github.com/users/karol-gwaj/followers","following_url":"https://api.github.com/users/karol-gwaj/following{/other_user}","gists_url":"https://api.github.com/users/karol-gwaj/gists{/gist_id}","starred_url":"https://api.github.com/users/karol-gwaj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/karol-gwaj/subscriptions","organizations_url":"https://api.github.com/users/karol-gwaj/orgs","repos_url":"https://api.github.com/users/karol-gwaj/repos","events_url":"https://api.github.com/users/karol-gwaj/events{/privacy}","received_events_url":"https://api.github.com/users/karol-gwaj/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2013-11-08T19:34:46Z","updated_at":"2013-11-08T19:36:28Z","closed_at":"2013-11-08T19:35:51Z","author_association":"NONE","active_lock_reason":null,"body":"Hi,\n\nlooks like `DocumentMapper` is creating its own list of root field mappers:\n\n``` java\n ...\n            // UID first so it will be the first stored field to load (so will benefit from \"fields: []\" early termination\n            this.rootMappers.put(UidFieldMapper.class, new UidFieldMapper());\n            this.rootMappers.put(IdFieldMapper.class, idFieldMapper);\n            this.rootMappers.put(RoutingFieldMapper.class, new RoutingFieldMapper());\n            // add default mappers, order is important (for example analyzer should come before the rest to set context.analyzer)\n            this.rootMappers.put(SizeFieldMapper.class, new SizeFieldMapper());\n            this.rootMappers.put(IndexFieldMapper.class, new IndexFieldMapper());\n            this.rootMappers.put(SourceFieldMapper.class, new SourceFieldMapper());\n            this.rootMappers.put(TypeFieldMapper.class, new TypeFieldMapper());\n            this.rootMappers.put(AnalyzerMapper.class, new AnalyzerMapper());\n            this.rootMappers.put(AllFieldMapper.class, new AllFieldMapper());\n            this.rootMappers.put(BoostFieldMapper.class, new BoostFieldMapper());\n            this.rootMappers.put(TimestampFieldMapper.class, new TimestampFieldMapper());\n            this.rootMappers.put(TTLFieldMapper.class, new TTLFieldMapper());\n            this.rootMappers.put(ParentFieldMapper.class, new ParentFieldMapper());\n ...\n```\n\nand `DocumentMapperParser` is creating its own:\n\n``` java\n...\n        rootTypeParsers = new MapBuilder<String, Mapper.TypeParser>()\n                .put(SizeFieldMapper.NAME, new SizeFieldMapper.TypeParser())\n                .put(IndexFieldMapper.NAME, new IndexFieldMapper.TypeParser())\n                .put(SourceFieldMapper.NAME, new SourceFieldMapper.TypeParser())\n                .put(TypeFieldMapper.NAME, new TypeFieldMapper.TypeParser())\n                .put(AllFieldMapper.NAME, new AllFieldMapper.TypeParser())\n                .put(AnalyzerMapper.NAME, new AnalyzerMapper.TypeParser())\n                .put(BoostFieldMapper.NAME, new BoostFieldMapper.TypeParser())\n                .put(ParentFieldMapper.NAME, new ParentFieldMapper.TypeParser())\n                .put(RoutingFieldMapper.NAME, new RoutingFieldMapper.TypeParser())\n                .put(TimestampFieldMapper.NAME, new TimestampFieldMapper.TypeParser())\n                .put(TTLFieldMapper.NAME, new TTLFieldMapper.TypeParser())\n                .put(UidFieldMapper.NAME, new UidFieldMapper.TypeParser())\n                .put(IdFieldMapper.NAME, new IdFieldMapper.TypeParser())\n                .immutableMap();\n...\n```\n\nFrom external plugin it is possible to modify only root type parsers from `DocumentMapperParser`, but it is the list from `DocumentMapper` that is used when creating `ParsedDocument` instance.\n\nBTW,\nim trying to create plugin that will add support for computed fields (based on script), i wanted to borrow some 'inspiration' from how '_all' field is implemented (as it is in a way computed field). Is implementing root field mapper the right way to do it ? I tried to use field mappers (not root), but looks like they are not used unless field value is present in indexed document (which is kinda problem for computed fields, as they are never present in source document)\n","closed_by":{"login":"karol-gwaj","id":1188157,"node_id":"MDQ6VXNlcjExODgxNTc=","avatar_url":"https://avatars3.githubusercontent.com/u/1188157?v=4","gravatar_id":"","url":"https://api.github.com/users/karol-gwaj","html_url":"https://github.com/karol-gwaj","followers_url":"https://api.github.com/users/karol-gwaj/followers","following_url":"https://api.github.com/users/karol-gwaj/following{/other_user}","gists_url":"https://api.github.com/users/karol-gwaj/gists{/gist_id}","starred_url":"https://api.github.com/users/karol-gwaj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/karol-gwaj/subscriptions","organizations_url":"https://api.github.com/users/karol-gwaj/orgs","repos_url":"https://api.github.com/users/karol-gwaj/repos","events_url":"https://api.github.com/users/karol-gwaj/events{/privacy}","received_events_url":"https://api.github.com/users/karol-gwaj/received_events","type":"User","site_admin":false},"performed_via_github_app":null}