[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/577593865","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-577593865","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":577593865,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NzU5Mzg2NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-01-23T09:16:57Z","updated_at":"2020-01-23T09:16:57Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/Mapping)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/578187041","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-578187041","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":578187041,"node_id":"MDEyOklzc3VlQ29tbWVudDU3ODE4NzA0MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-01-24T15:51:26Z","updated_at":"2020-01-24T15:51:26Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features (:Core/Features/Features)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/590835937","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-590835937","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":590835937,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDgzNTkzNw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-02-25T12:10:04Z","updated_at":"2020-02-25T12:10:04Z","author_association":"CONTRIBUTOR","body":"We discussed this issue and were a bit on the fence about the fact that it might accidentally map an object as a `histogram` if it happens to have two sub fields that are called `values` and `counts` even though it's not a histogram.\r\n\r\nFurthermore, my understanding is that the client that sends documents to Elasticsearch knows that these are histograms. If this is the case, why can't it also configure the mappings correctly when setting up the index or index template?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/590844617","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-590844617","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":590844617,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDg0NDYxNw==","user":{"login":"axw","id":843579,"node_id":"MDQ6VXNlcjg0MzU3OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/843579?v=4","gravatar_id":"","url":"https://api.github.com/users/axw","html_url":"https://github.com/axw","followers_url":"https://api.github.com/users/axw/followers","following_url":"https://api.github.com/users/axw/following{/other_user}","gists_url":"https://api.github.com/users/axw/gists{/gist_id}","starred_url":"https://api.github.com/users/axw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/axw/subscriptions","organizations_url":"https://api.github.com/users/axw/orgs","repos_url":"https://api.github.com/users/axw/repos","events_url":"https://api.github.com/users/axw/events{/privacy}","received_events_url":"https://api.github.com/users/axw/received_events","type":"User","site_admin":false},"created_at":"2020-02-25T12:34:15Z","updated_at":"2020-02-25T12:34:15Z","author_association":"CONTRIBUTOR","body":"The client (APM Server) knows that the field is a histogram, but the field name is not known up front - it is dynamically controlled by applications that send data to APM. To take care of this in a static mapping, APM users would have to know which metrics their applications will send, and then configure the index mapping accordingly.\r\n\r\nIn the case of APM we are in control of the object structure - it's just the field names we don't control. So misuse/accidental mapping will not be an issue in our case.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/590861348","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-590861348","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":590861348,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDg2MTM0OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-02-25T13:16:59Z","updated_at":"2020-02-25T13:16:59Z","author_association":"CONTRIBUTOR","body":"Would it be an option for you to send a mapping update alongside the bulk request?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/591225140","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-591225140","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":591225140,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MTIyNTE0MA==","user":{"login":"axw","id":843579,"node_id":"MDQ6VXNlcjg0MzU3OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/843579?v=4","gravatar_id":"","url":"https://api.github.com/users/axw","html_url":"https://github.com/axw","followers_url":"https://api.github.com/users/axw/followers","following_url":"https://api.github.com/users/axw/following{/other_user}","gists_url":"https://api.github.com/users/axw/gists{/gist_id}","starred_url":"https://api.github.com/users/axw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/axw/subscriptions","organizations_url":"https://api.github.com/users/axw/orgs","repos_url":"https://api.github.com/users/axw/repos","events_url":"https://api.github.com/users/axw/events{/privacy}","received_events_url":"https://api.github.com/users/axw/received_events","type":"User","site_admin":false},"created_at":"2020-02-26T03:51:03Z","updated_at":"2020-02-26T03:51:03Z","author_association":"CONTRIBUTOR","body":"I had a chat with @graphaelli about this. That could potentially work, and is attractive in that it would also enable us to record [per-field metadata](https://github.com/elastic/elasticsearch/issues/33267). We don't need that any time soon though.\r\n\r\nThere are some significant drawbacks:\r\n - We would have to send an update on _every_ bulk request to account for rollovers, doubling the number of requests we make.\r\n - Alternatively we could update the index template only upon seeing new fields, but this would cause the template to be ever-growing. This could be problematic if metric fields change over time.\r\n - Either way, APM Server (as with all Beats) supports sending data to targets other than Elasticsearch, such as Logstash. If we were sending to Logstash and from there to Elasticsearch, then we would have to manage a separate connection to ES to perform the mapping updates first -- adding configuration/deployment complexity for users.\r\n\r\nAnother option that @graphaelli thought of is extending Ingest Node, so that it could specify the field type of a field. I think this has the same outcome as the original proposal though.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/591664594","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-591664594","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":591664594,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MTY2NDU5NA==","user":{"login":"graphaelli","id":83483,"node_id":"MDQ6VXNlcjgzNDgz","avatar_url":"https://avatars3.githubusercontent.com/u/83483?v=4","gravatar_id":"","url":"https://api.github.com/users/graphaelli","html_url":"https://github.com/graphaelli","followers_url":"https://api.github.com/users/graphaelli/followers","following_url":"https://api.github.com/users/graphaelli/following{/other_user}","gists_url":"https://api.github.com/users/graphaelli/gists{/gist_id}","starred_url":"https://api.github.com/users/graphaelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/graphaelli/subscriptions","organizations_url":"https://api.github.com/users/graphaelli/orgs","repos_url":"https://api.github.com/users/graphaelli/repos","events_url":"https://api.github.com/users/graphaelli/events{/privacy}","received_events_url":"https://api.github.com/users/graphaelli/received_events","type":"User","site_admin":false},"created_at":"2020-02-26T21:55:59Z","updated_at":"2020-02-26T21:55:59Z","author_association":"MEMBER","body":"> extending Ingest Node, so that it could specify the field type of a field. I think this has the same outcome as the original proposal though.\r\n\r\nI think the outcome is different in that the field name could be controlled by the user.  Perhaps ingest node uses the original field name to set the type and then renames it before it is finally ingested.  This might look like:\r\n\r\nprocessor input:\r\n```\r\n      \"_source\": {\r\n        \"system\": {\r\n          \"disk\": {\r\n            \"free\": 9491243008,\r\n            \"total\": 12565708800,\r\n            \"iolat.histogram\": {\r\n              \"values\": [1,3,7,15,31,63],\r\n              \"counts\": [0,12,80,2,0,1]\r\n            }\r\n          }\r\n        }\r\n      }\r\n```\r\nprocessor output:\r\n```\r\n      \"_source\": {\r\n        \"system\": {\r\n          \"disk\": {\r\n            \"free\": 9491243008,\r\n            \"total\": 12565708800,\r\n            \"iolat\": {\r\n              \"_type\": \"histogram\",\r\n              \"values\": [1,3,7,15,31,63],\r\n              \"counts\": [0,12,80,2,0,1]\r\n            }\r\n          }\r\n        }\r\n      }\r\n```\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/603585148","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-603585148","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":603585148,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMzU4NTE0OA==","user":{"login":"graphaelli","id":83483,"node_id":"MDQ6VXNlcjgzNDgz","avatar_url":"https://avatars3.githubusercontent.com/u/83483?v=4","gravatar_id":"","url":"https://api.github.com/users/graphaelli","html_url":"https://github.com/graphaelli","followers_url":"https://api.github.com/users/graphaelli/followers","following_url":"https://api.github.com/users/graphaelli/following{/other_user}","gists_url":"https://api.github.com/users/graphaelli/gists{/gist_id}","starred_url":"https://api.github.com/users/graphaelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/graphaelli/subscriptions","organizations_url":"https://api.github.com/users/graphaelli/orgs","repos_url":"https://api.github.com/users/graphaelli/repos","events_url":"https://api.github.com/users/graphaelli/events{/privacy}","received_events_url":"https://api.github.com/users/graphaelli/received_events","type":"User","site_admin":false},"created_at":"2020-03-25T01:10:56Z","updated_at":"2020-03-25T01:10:56Z","author_association":"MEMBER","body":"Revisiting this and wanted to make it clear that the original proposal is also my preference, I fear I may have muddled things with the alternative proposal.\r\n\r\n> might accidentally map an object as a histogram if it happens to have two sub fields that are called `values` and `counts` even though it's not a histogram.\r\n\r\nIn this case the user (APM) is opting in to this functionality by setting up the dynamic mapping, I think that avoids the accident situation.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606045989","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-606045989","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":606045989,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjA0NTk4OQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-30T14:48:46Z","updated_at":"2020-03-30T15:12:02Z","author_association":"CONTRIBUTOR","body":"I think there's a broader issue here.\r\n#### JSON value types are a poor predictor of elasticsearch type\r\nThe proposal is reliant on the shape of the JSON value dictating the type of the new field. Adrien's concern that values+counts might be presented for values other than histograms may be an edge case but there is a much more common precedent for JSON values being a poor predictor of type - the humble numeric fields [are often mis-mapped](https://github.com/elastic/elasticsearch/issues/49538). Numerics can represent: \r\n* **Quantities** of something (time, bytes, clicks etc). Typically queried by _range_ queries and aggregated using histograms to display in bar charts.\r\n* **Identifiers** e.g. customerIDs or department codes. Typically queried for by exact-match queries and aggregated using aggs like `terms` or `adjacency_matrix`.\r\n\r\nOur templates (and many users) assume that a JSON `long` should be mapped as an elasticsearch `long` but this is optimised for Quantities not Identifiers. This type imposes a [4x speed slow-down](https://twitter.com/elasticmark/status/1199644279569833984?s=20) on exact-match lookups.\r\n\r\nThis is why I think it's generally problematic to trigger mapping decisions purely from value type.\r\n\r\n#### Field-naming conventions and ingest pre-processors\r\nJSON only has field names and values so if we don't want to use the value as the key for determining a new field's type we have to consider the name and using a naming convention.\r\n\r\nAs has been suggested - an ingest pipeline could more intelligently pre-process the names and offer new type guidance directly to elasticsearch without the worry of passing this through various intermediaries (the beats->logstash processing pipeline concerns raised above ).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/607563480","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-607563480","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":607563480,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNzU2MzQ4MA==","user":{"login":"axw","id":843579,"node_id":"MDQ6VXNlcjg0MzU3OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/843579?v=4","gravatar_id":"","url":"https://api.github.com/users/axw","html_url":"https://github.com/axw","followers_url":"https://api.github.com/users/axw/followers","following_url":"https://api.github.com/users/axw/following{/other_user}","gists_url":"https://api.github.com/users/axw/gists{/gist_id}","starred_url":"https://api.github.com/users/axw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/axw/subscriptions","organizations_url":"https://api.github.com/users/axw/orgs","repos_url":"https://api.github.com/users/axw/repos","events_url":"https://api.github.com/users/axw/events{/privacy}","received_events_url":"https://api.github.com/users/axw/received_events","type":"User","site_admin":false},"created_at":"2020-04-02T01:04:25Z","updated_at":"2020-04-02T01:04:25Z","author_association":"CONTRIBUTOR","body":"A bunch of us in the Elastic Observability team met yesterday and discussed this issue, and the broader issue we're setting out to address: to standardise how we index metrics across Metrics, APM, etc.\r\n\r\n@exekias put forward an alternative proposal, which would index metrics using a naming convention like:\r\n - `metric_name.value` (gauge/point-in-time value metric)\r\n - `metric_name.counter` (counter/monotonically-increasing value metric)\r\n - `metric_name.rate` (rate/delta value metric)\r\n - `metric_name.histogram` (histogram metric)\r\n\r\nThe metric type informs Elasticsearch how it should be stored, and informs the UI how it should be interpreted. Value/counter/rate metrics would have the same field type, but would be interpreted differently by the UI.\r\n\r\nWe would use a dynamic template with `match` to set the field type, and set metric type in field metadata. Using a naming convention like this is nice in that it works today, and is fairly straightforward, but has a couple of downsides:\r\n - it exposes internal details to users\r\n - it hard-codes the metric type, whereas we might want to be able to switch metric types dynamically, to fix up coding/configuration errors – for a subset of metric types with the same fundamental data type, i.e. counters and gauges\r\n\r\nAlternatively we could not suffix the fields, and only record the metric type in field metadata. We also want to be able to set other field metadata, such as the metric's unit: bytes, seconds, etc. This approach requires an alternative means of dynamically setting the field type.\r\n\r\nWe're thinking that it would be better to be more explicit about setting the field type and field metadata. Ideally, we would have some way of sending, along with a field value:\r\n - the Elasticsearch field type\r\n - field metadata to set, with an option of ignoring it if it's already set (so users can change field metadata and not have it overwritten)\r\n\r\ne.g. index a document like:\r\n\r\n```json\r\n{\r\n  \"latency\": {\r\n    \"type\": \"histogram\",\r\n    \"unit\": \"seconds\",\r\n    \"counts\": [1,2,3],\r\n    \"values\": [4,5,6]\r\n  }\r\n}\r\n```\r\n\r\nThen we would have a script ingest processor that would process all fields with the above structure, and:\r\n - remove the \"type\" field\r\n   - set the field type to \"histogram\"\r\n   - if it doesn't already exist in the mapping, add the field metadata `\"type\": \"histogram\"`\r\n - remove the \"unit\" field\r\n   - add the field metadata `\"unit\": \"seconds\"`\r\n\r\nIs this within the realms of possibility?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/620930584","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-620930584","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":620930584,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMDkzMDU4NA==","user":{"login":"graphaelli","id":83483,"node_id":"MDQ6VXNlcjgzNDgz","avatar_url":"https://avatars3.githubusercontent.com/u/83483?v=4","gravatar_id":"","url":"https://api.github.com/users/graphaelli","html_url":"https://github.com/graphaelli","followers_url":"https://api.github.com/users/graphaelli/followers","following_url":"https://api.github.com/users/graphaelli/following{/other_user}","gists_url":"https://api.github.com/users/graphaelli/gists{/gist_id}","starred_url":"https://api.github.com/users/graphaelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/graphaelli/subscriptions","organizations_url":"https://api.github.com/users/graphaelli/orgs","repos_url":"https://api.github.com/users/graphaelli/repos","events_url":"https://api.github.com/users/graphaelli/events{/privacy}","received_events_url":"https://api.github.com/users/graphaelli/received_events","type":"User","site_admin":false},"created_at":"2020-04-29T00:54:21Z","updated_at":"2020-04-29T00:54:21Z","author_association":"MEMBER","body":"@exekias @roncohen This is the issue we need to resolve to move forward with a comprehensive metrics strategy IMO.\r\n\r\n@markharwood are you the right assignee on this issue?  How can we move this forward?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/621246962","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-621246962","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":621246962,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMTI0Njk2Mg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-04-29T14:27:29Z","updated_at":"2020-04-29T14:27:29Z","author_association":"CONTRIBUTOR","body":"@graphaelli Sorry for not being more responsive on this one, please use me as a point of contact for this issue for now. I probably won't end up implementing it but I'll own moving it forward.\r\n\r\nSome more thoughts on this issue:\r\n\r\n> the original proposal is also my preference\r\n\r\nI understand it would work for histograms, but how would it works for other types? I understand from above comments that you also need this for values, counters and rates. How would this work if you needed a different field type from counters and rates, wouldn't you be stuck due to the fact that both are numbers in JSON documents?\r\n\r\n> we could update the index template only upon seeing new fields, but this would cause the template to be ever-growing. This could be problematic if metric fields change over time.\r\n\r\nThis might be worth digging. If the list of fields across all indices that match the pattern might grow indefinitely, we might have other problems too.\r\n\r\n> [ingest node idea]\r\n\r\nIngest is currently side-effect free, it only takes bulk requests and turns them into new bulk requests. So we'd likely need to add something to _bulk requests as well if we went that route.\r\n\r\nI'll set up a meeting to discuss it, I think it'll help us better undestand the problem we're trying to fix here.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/624035891","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-624035891","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":624035891,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDAzNTg5MQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-05-05T12:50:27Z","updated_at":"2020-05-05T12:50:27Z","author_association":"CONTRIBUTOR","body":"We discussed the challenge of creating dynamic mappings for histograms earlier today. This problem arises for histograms because there is no reliable way to distinguish a histogram from an object in a JSON document, but the general problem is actually not specific to histograms. More generally, configuring fields in an index template is challenging for APM and some Metricbeat modules such as Prometheus and Statsd.\r\n\r\nFor instance, for Prometheus metrics, Metricbeat polls metrics from Prometheus and then sends them to Elasticsearch. But new metrics could be added anytime, and there is no easy way for Metricbeat to keep state in order to know whether a metric is seen for the first time. It makes it hard to maintain an index template. So APM and Metricbeat have been relying on dynamic mappings until now, which can't easily work with histograms since histograms are JSON objects. By the way, dynamic mappings are not a fully satisfactory approach for numeric fields either, as relying on dynamic mappings prevents setting metadata on fields such as units.\r\n\r\nThe fact that fields are not under control might sound worrisome due to the fact that Elasticsearch doesn't perform well with thousands of fields, but systems that we pull metrics from such as Prometheus have similar constraints, so we feel that concerns around the number of fields in a given index can be safely ignored.\r\n\r\nOne workaround that would work would be to adopt naming conventions that make it easy to configure dynamic templates, such as mapping all fields suffixed by \".histogram\" as histograms. However this makes field names artificially long, and arguably a bit ugly. It will also likely prove too limited once we need to not only configure the type via a naming convention, but also units and metric type (gauge/counter). So we would like to look into other ways that this problem could be addressed.\r\n\r\nOne idea we discussed that would work too would be to introduce a way to provide dynamic templates along with bulk requests. This would allow atomicity, which is important because of time-based indices (soon, data streams) as we want to make sure that the mappings that get appended to are those of the index where documents get appended, and not a different one because a rollover happened after the mapping update but before documents got indexed. Dynamic templates are appealing because by nature they can only add new fields to mappings, unlike a generic mapping update which can also modify existing mappings. These dynamic templates would only apply to a specific bulk request, they wouldn't be added to the mappings.\r\n\r\nI'll soon close this issue in favor of a new issue that better reflects the problem that we are trying to solve.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/656183303","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-656183303","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":656183303,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NjE4MzMwMw==","user":{"login":"exekias","id":299804,"node_id":"MDQ6VXNlcjI5OTgwNA==","avatar_url":"https://avatars1.githubusercontent.com/u/299804?v=4","gravatar_id":"","url":"https://api.github.com/users/exekias","html_url":"https://github.com/exekias","followers_url":"https://api.github.com/users/exekias/followers","following_url":"https://api.github.com/users/exekias/following{/other_user}","gists_url":"https://api.github.com/users/exekias/gists{/gist_id}","starred_url":"https://api.github.com/users/exekias/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/exekias/subscriptions","organizations_url":"https://api.github.com/users/exekias/orgs","repos_url":"https://api.github.com/users/exekias/repos","events_url":"https://api.github.com/users/exekias/events{/privacy}","received_events_url":"https://api.github.com/users/exekias/received_events","type":"User","site_admin":false},"created_at":"2020-07-09T15:06:21Z","updated_at":"2020-07-09T15:06:21Z","author_association":"MEMBER","body":"ey @jpountz is there any update on this?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/657520862","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-657520862","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":657520862,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NzUyMDg2Mg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-07-13T12:05:13Z","updated_at":"2020-07-13T12:05:13Z","author_association":"CONTRIBUTOR","body":"@exekias No, it's been added to the list of things to look into next and hasn't been picked up yet. Cc @colings86 who I was discussing this with recently.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/686623650","html_url":"https://github.com/elastic/elasticsearch/issues/51341#issuecomment-686623650","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51341","id":686623650,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NjYyMzY1MA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-09-03T16:56:26Z","updated_at":"2020-09-03T16:56:26Z","author_association":"CONTRIBUTOR","body":"Closing in favor of #61939.","performed_via_github_app":null}]