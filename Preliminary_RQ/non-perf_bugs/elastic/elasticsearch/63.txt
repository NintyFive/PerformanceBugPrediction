{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/63","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/63/events","html_url":"https://github.com/elastic/elasticsearch/issues/63","id":152474,"node_id":"MDU6SXNzdWUxNTI0NzQ=","number":63,"title":"_all field","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":25452,"node_id":"MDU6TGFiZWwyNTQ1Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.06.0","name":"v0.06.0","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2010-03-16T21:03:08Z","updated_at":"2010-03-17T11:29:58Z","closed_at":"2010-03-16T21:04:30Z","author_association":"MEMBER","active_lock_reason":null,"body":"Support `_all` field. The idea of an `_all` field is a field that includes the text of one or more other fields within the document indexed. It can come very handy especially for search request, where we want to execute a search query against the content of a document, without knowing which fields to search on. This comes at the expense of CPU cycles and index size.\n\nThe all fields can be completely disabled. Explicit field mapping and object mapping can be excluded / included in the all field. By default, all field is enabled and all fields are included in it for ease of use.\n\nOne of the nice features of the all field is that it takes into account specific fields boost levels. Meaning that if a `title` field is boosted more than `content`, the `title` (part) in the `_all` field will mean more than the `content` part in the `all` field.\n\nWith the `_all` field, certain APIs that require fields to be set can be simplified. They include: \n- The `queryString` query `defaultField` now defaults to the `_all` field. \n- The `terms` API `fields` now default to the `_all` field and not required. \n- More Like This query fields now default to `_all` if not set.\n\nHere is a sample mapping:\n\n```\n{\n    person : {\n        allField : {enabled : true},\n        properties : {\n            name : {\n                type : \"object\",\n                dynamic : false,\n                properties : {\n                    first : {type : \"string\", store : \"yes\", includeInAll : false},\n                    last : {type : \"string\", index : \"not_analyzed\"}\n                }\n            },\n            address : {\n                type : \"object\",\n                includeInAll : false,\n                properties : {\n                    first : {\n                        properties : {\n                            location : {type : \"string\", store : \"yes\", indexName : \"firstLocation\"}\n                        }\n                    },\n                    last : {\n                        properties : {\n                            location : {type : \"string\"}\n                        }\n                    }\n                }\n            },\n            simple1 : {type : \"long\", includeInAll : true},\n            simple2 : {type : \"long\", includeInAll : false}\n        }\n    }\n}\n```\n\nThe `allField` mapping can also be associated with an analyzer (index/search), a `termVector`, and the ability to `store` it (the concatenated text).\n","closed_by":null,"performed_via_github_app":null}