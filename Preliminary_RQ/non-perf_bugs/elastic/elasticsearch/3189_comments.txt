[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/20687500","html_url":"https://github.com/elastic/elasticsearch/issues/3189#issuecomment-20687500","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3189","id":20687500,"node_id":"MDEyOklzc3VlQ29tbWVudDIwNjg3NTAw","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2013-07-09T16:38:43Z","updated_at":"2013-07-09T16:49:45Z","author_association":"CONTRIBUTOR","body":"I opened a pull request (#3306) which tries to fix this issue. In addition to that, it has some nice memory improvements. Here is the memory usage reported by `LongFieldDataBenchmark` for the whole field data instance (ordinals + data) without and with this commit (you can have a look at #3220 too to see how much memory usage was before we started using the PackedInts API to store values):\n\n<pre>\n                               Before      After\nSINGLE_VALUED_DENSE_ENUM     488.3 KB   488.3 KB\nSINGLE_VALUED_DENSE_DATE       4.3 MB     4.3 MB\nMULTI_VALUED_DATE             10.5 MB     5.9 MB\nMULTI_VALUED_ENUM              7.8 MB     1.2 MB \nSINGLE_VALUED_SPARSE_RANDOM    3.5 MB     1.5 MB\nMULTI_VALUED_SPARSE_RANDOM     7.7 MB     3.4 MB\nMULTI_VALUED_DENSE_RANDOM     23.7 MB    17.8 MB\n</pre>\n\nNothing changes for the single-valued case (as expected) but there are some nice savings for the multi-valued case, especially when the values don't require much space.\n\nI also ran `TermsFacetSearchBenchmark` to see how this impacts faceting, here are the results:\n\n<pre>\nBefore:\n                     name      took    millis\n                  terms_s      6.1s        30\n              terms_map_s     20.7s       103\n                  terms_l     13.8s        69\n              terms_map_l       14s        70\n                 terms_sm       22s       110\n             terms_map_sm      3.3m      1009\n                 terms_lm      1.3m       391\n             terms_map_lm      1.3m       390\n          terms_stats_s_l     31.9s       159\n         terms_stats_s_lm        1m       322\n         terms_stats_sm_l      4.3m      1319\nAfter:\n                  terms_s      5.4s        27\n              terms_map_s     20.7s       103\n                  terms_l     12.7s        63\n              terms_map_l     12.7s        63\n                 terms_sm     40.1s       200\n             terms_map_sm      3.3m      1015\n                 terms_lm      1.6m       486\n             terms_map_lm      1.6m       486\n          terms_stats_s_l     28.8s       144\n         terms_stats_s_lm      1.3m       415\n         terms_stats_sm_l      4.3m      1300\n</pre>\n\nIn some cases, faceting is slower. I ran the benchmark under a profiler and MonotonicAppendingLongBuffer and AppendingLongBuffer, which are used to store the ordinals, were among the most hot spots. Since they are also the reason why we have these memory savings, maybe it is not that bad?\n","performed_via_github_app":null}]