[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/153974910","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-153974910","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":153974910,"node_id":"MDEyOklzc3VlQ29tbWVudDE1Mzk3NDkxMA==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2015-11-05T07:10:58Z","updated_at":"2015-11-05T07:10:58Z","author_association":"MEMBER","body":"@talevy maybe we should name the param `continue_on_failure`?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/153975325","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-153975325","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":153975325,"node_id":"MDEyOklzc3VlQ29tbWVudDE1Mzk3NTMyNQ==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2015-11-05T07:14:25Z","updated_at":"2015-11-05T07:14:25Z","author_association":"CONTRIBUTOR","body":"deal! I'll update\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/154471283","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-154471283","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":154471283,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NDQ3MTI4Mw==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2015-11-06T16:55:52Z","updated_at":"2015-11-06T16:55:52Z","author_association":"MEMBER","body":"I think this flag is needed to decide whether to go on with following processors in the pipeline and still index the current document. It nicely applies to the index api, and the bulk api in the context of each single document.\n\nWhat currently happens when something fails while indexing using bulk though, is that we fail the whole request, which doesn't seem convenient. I think ideally we should be able to go ahead with the other documents and add the failure to the response for that specific document even when `continue_on_failure` is set to `false`. This might be a high hanging fruit though and might require a separate issue/discussion, as `continue_on_failure` requires some more thinking on how to apply it to the bulk api.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/154966619","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-154966619","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":154966619,"node_id":"MDEyOklzc3VlQ29tbWVudDE1NDk2NjYxOQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2015-11-09T06:49:27Z","updated_at":"2015-11-09T06:49:44Z","author_association":"MEMBER","body":"I think there is no doubt about whether we need this option.\n\nI agree that in the bulk api providing item level granularity control for this flag is trickier, because we we can't set the failure response item in the bulk response. We can only decide whether to delegate to the bulk api. To achieve this I think we also need to have logic in `IngestActionFilter#apply(String, ActionResponse, ActionListener, ActionFilterChain)` (which currently just delegates).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159403769","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-159403769","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":159403769,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTQwMzc2OQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2015-11-24T21:00:59Z","updated_at":"2015-11-24T21:00:59Z","author_association":"MEMBER","body":"We sorted out the bulk api aspect with #14888, meaning that whenever a processor fails for a document it won't affect the other documents within the same bulk request.\n\nIn this issue we want focus on the behaviour for each single document. Let's say one processor fails as part of the pipeline execution, we want to be able to control what happens with that single document. The main questions are: should we go ahead with the following processors in the pipeline and index the document? If so how do we keep track of the fact that something failed?\n\n**halt on failure**: if we don't continue, we return an error in the response (either the index api fails or that item will be marked as failed as part of the bulk response) and the client knows what went wrong. The document doesn't get indexed. I can't think of anything more that could be done in this case. This is how things currently work already.\n\n**continue on failure**: if we continue, the client will not be notified of the error, hence we have to at least tag the document so that we keep track of what went wrong. We may also want to index the document somewhere else (different index). This requires additional configuration (which index and which field keeps track of what failed) hence we need to decide how to make it configurable.\n\n**the error**:  easier things first, it seems clear that we want to be able to add a structured error to the document in a certain field (potentially configurable?), actually an array of errors given that more processors can fail at the same time if we continue on failure. Each item would be an object containing the pipeline id, the processor id and structured information about the error, similar to the structured errors that elasticsearch now returns from the rest layer.\n\nShould the possible actions be limited to the ones described (pick the index, eventually pick the error field), or should we allow to configure a specific pipeline to be executed on failure so that whatever can be done through processors can be done on failure as well? The latter seems very flexible, maybe too flexible? Also potentially dangerous in case that pipeline ends up failing (on failure). The former is simpler and might be limiting but I think it would be good to try and come up with more options that we would need before going for the whole pipeline.\n\nAnother question is whether this additional on failure configuration (either a pipeline or specific options) should be at the processor level (each processor could take different actions) or unified for a pipeline. I tend to think that the latter is simpler to configure and covers most of the cases, with the additional benefit that it unifies what happens on failure for every processor in the pipeline. Having potentially a different behaviour for each processor might get confusing. Like the previous point, we should come up with good reasons why each processor should have a different behaviour, otherwise keep this at the pipeline level.\n\n**on success**: in case everything works properly, do we need additional configuration for actions to be taken in case of success too? I don't think we do because in case of success the next processor in the chain will be executed, thus that next processor can be seen as the natural \"on_success\" processor.\n\nI am marking this for discussion, it would be great to gather other thoughts on it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159562646","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-159562646","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":159562646,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTU2MjY0Ng==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-11-25T10:19:02Z","updated_at":"2015-11-25T10:21:20Z","author_association":"CONTRIBUTOR","body":"wondering if it'd be sufficient to have the following logic:\n- by default, a failure in a processor fails the document processing in the pipeline.\n- it should be possible to set the following on every processor:\n  \n  ``` json\n  \"on_error\" : {\n    \"skip\" : true | false,\n    \"mark\" : true | false,\n    \"redirect\" : <another pipeline name>\n  }\n  ```\n- `skip` means the document continues to the next processor in the pipeline\n- `mark` means the document is marked as failed (in a special meta data field)\n- `redirect` will indicate that the document should be redirected to another pipeline. This will allow to have a \"failure\" pipeline that can potentially change the index name to a \"failures\" index and serve as a \"catch all failures\" strategy for multiple pipelines.\n- `skip` and `redirect` are mutually exclusive.\n\nalso, perhaps there should be an option to set the `redirect_on_error` at the pipeline level?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159566368","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-159566368","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":159566368,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTU2NjM2OA==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2015-11-25T10:36:30Z","updated_at":"2015-11-25T10:36:30Z","author_association":"MEMBER","body":"Could we unify skip and mark, meaning that whenever we continue, we always have to mark otherwise the failure is lost? Would it make sense to continue without marking?\n\nMy other concern is still whether a redirect pipeline is needed or we can trim down what can be done to a few specific options instead. What you propose should be enough, not sure if too much? What are the usecases for a pipeline? Do you have examples in mind?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/159571481","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-159571481","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":159571481,"node_id":"MDEyOklzc3VlQ29tbWVudDE1OTU3MTQ4MQ==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-11-25T10:57:39Z","updated_at":"2015-11-25T10:57:39Z","author_association":"CONTRIBUTOR","body":"> Could we unify skip and mark, meaning that whenever we continue, we always have to mark otherwise the failure is lost? Would it make sense to continue without marking?\n\nwe could have `mark` set to `true` by default... I don't think it hurts (don't know all use cases... but what if you have a processor that is \"a nice to have enrichment\" and don't care much for errors there.\n\n> My other concern is still whether a redirect pipeline is needed or we can trim down what can be done to a few specific options instead. What you propose should be enough, not sure if too much? What are the usecases for a pipeline? Do you have examples in mind?\n\ntbh, I don't know what's enough. @talevy  can probably provide more input on that from the field. The rationale with a redirect pipeline is that it's as flexible as you want it and utilizes the same infra that we already have (pipelines).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/160826868","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-160826868","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":160826868,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MDgyNjg2OA==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2015-12-01T02:20:05Z","updated_at":"2015-12-01T02:20:05Z","author_association":"CONTRIBUTOR","body":"After some discussion, a sort of consensus around an `on_failure` block for all processors to have was decided on, instead of a `continue_on_failure` flag described by this issue.\n\nAn example of this is as follows:\n\n```\n{\n  description: \"my pipeline with on_failure\",\n  processors: [\n    {\n      \"grok\" : {\n          ...\n          on_failure : [\n            { \"set\" : { \"grok.failed\" : true } },\n            { \"meta\": { \"_index\" : \"failed-index\" } }\n          ]\n      }\n    },\n    {\n       \"date\" : {\n         ...\n       }\n    }\n  ]\n}\n```\n\nan `on_failure` will also be added to a pipeline as a whole:\n\n```\n{\n   \"description\" : \"...\",\n   \"processors\" : [ ... ],\n   \"on_failure\" : [ ... ]\n}\n```\n\nprocessors without an `on_failure` parameter defined will throw an exception and exit the pipeline immediately. processors with `on_failure` defined will catch the exception and allow for further processors to run. Exceptions within the `on_failure` block will be treated the same as the top-level.\n\nIf a user wishes to handle a failure, and still exit the pipeline immediately, a `fail` processor will be introduced. This processor will do nothing but throw an exception so that the pipeline exits.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/161799133","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-161799133","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":161799133,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MTc5OTEzMw==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2015-12-03T22:03:29Z","updated_at":"2015-12-03T22:21:14Z","author_association":"CONTRIBUTOR","body":"Since processors could exit with an exception at any point of their run time. The state of the IngestDocument can be incomplete. Since all existing processors are being moved to operate on one field at a time, this is not too much of an issue, but that is not a required rule. For example, a processor may be interested in added two fields, but fail while attempting to add the second field. This leaves the IngestDocument in a partially updated state before it was to be passed along to the `on_failure` block of processors. Is this a concern? If so, I am not sure what the best way of handling this would be. I believe it would require some \"shadow\" change-list that gets bundled up into a single transaction upon successful execution of a processor, otherwise there would not be a simple way to revert partial changes within a processor.\n\n##### UPDATE: ignoring for now. partial updates will be allowed, initially.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/170620979","html_url":"https://github.com/elastic/elasticsearch/issues/14548#issuecomment-170620979","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/14548","id":170620979,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MDYyMDk3OQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2016-01-11T17:09:21Z","updated_at":"2016-01-11T17:09:21Z","author_association":"MEMBER","body":"This has been implemented, every processor can be associated with a list of processors to be executed on failure. Same for a pipeline. The processor one has the precedence.\n","performed_via_github_app":null}]