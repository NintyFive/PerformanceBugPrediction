{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30303","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30303/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30303/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30303/events","html_url":"https://github.com/elastic/elasticsearch/issues/30303","id":319195242,"node_id":"MDU6SXNzdWUzMTkxOTUyNDI=","number":30303,"title":"Add functions to the Script context for a new Script Score Query","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"labels":[{"id":146834791,"node_id":"MDU6TGFiZWwxNDY4MzQ3OTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Scripting","name":":Core/Infra/Scripting","color":"0e8a16","default":false,"description":"Scripting abstractions, Painless, and Mustache"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-05-01T13:18:25Z","updated_at":"2018-12-04T15:07:33Z","closed_at":"2018-11-20T21:48:49Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"We are designing a new Script Score Query (SSQ) to replace [Function Score Query  (FSQ)](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html).  The goal of SSQ is to have the same (and possibly more) functionalities as FSQ available only through  painless script.  For this, we would like to add the below functions to painless. They can be available either in the `SearchScript` or a specifically designed for scoring `ScoringScript`.\r\n\r\n### Random score\r\nSimilar to  [`random_score` in FSQ](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-random):\r\n- generates scores [0, 1]\r\n- by default, uses Lucene doc ids as a source of randomness (efficient, not reproducible). To make reproducible we need: seed, field (min value for this doc) and salt (function of index name and shard).\r\n\r\n```js\r\n\"script\" : {\r\n  \"source\" : \"random_score(params.seed, doc['field'])\",\r\n  \"params\": {\"seed\": 10}\r\n}\r\n```\r\nCurrently painless allows to generate random values in the way below, but it is bulky, and not the exact reproduction of `random score` in FSQ:\r\n\r\n```js\r\n\"script\" : {\r\n  \"source\" : \"Random rnd = new Random(); rnd.setSeed(doc['field'].value); rnd.nextFloat()\"\r\n}\r\n```\r\n\r\n### Math functions\r\nWe would like to introduce a shorter version of the following functions useful for score calculations:\r\n\r\n- [ ] **log**: `Math.log10(doc['f'].value)` -> `log(doc['f'].value)`\r\n- [ ] **log1p**: `Math.log10(doc['f'].value + 1)`  ->`log1p(doc['field'].value)` \r\n- [ ] **log2p**: `Math.log10(doc['f'].value + 2)`  -> `log2p(doc['f'].value)` \r\n- [ ] **ln**: `Math.log(doc['f'].value)`  ->  `ln(doc['f'].value)` \r\n- [ ] **ln1p**: `Math.log1p(doc['f'].value + 1)`  -> `ln1p(doc['f'].value)` \r\n- [ ] **ln2p**: `Math.log(doc['f'].value + 2)`  -> `ln2p(doc['f'].value)` \r\n- [ ] **square**: `Math.pow(doc['f'].value, 2)` -> `square(doc['f'].value)`   \r\n- [ ] **sqrt**:  `Math.sqrt(doc['f'].value)`  -> `sqrt(doc['f'].value)` \r\n- [ ] **reciprocal** 1/value :`1.0 / doc['f'].value` -> `reciprocal(doc['f'].value)` \r\n- [ ] **rational** value/(k + value) :`doc['f'].value / (k + doc['f'].value) ` -> `rational(doc['f'].value, k)` \r\n- [ ] **sigmoid** value<sup>a</sup>/ (k<sup>a</sup> + value<sup>a</sup>): `Math.pow(doc['f'].value,a) / (Math.pow(k,a) + Math.pow(doc['f'].value,a))` -> `sigmoid(doc['f'].value, k, a)`\r\n\r\n\r\n### Decay functions\r\nSimilar to [decay functions in FSQ](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay):\r\n- [ ] **decay_gauss**\r\n- [ ] **decay_exp**\r\n- [ ] **decay_linear**\r\n\r\nProposed API:\r\n```js\r\n\"script\" : {\r\n  \"source\" : \"decay_gauss(doc['date'], params.origin, params.scale, params.offset, params.decay)\",\r\n  \"params\": {\r\n    \"origin\": \"2013-09-17\", \r\n    \"scale\": \"10d\", \r\n    \"offset\": \"5d\",\r\n    \"decay\" : 0.5\r\n  }\r\n}\r\n```\r\n\r\n```js\r\n\"script\" : {\r\n  \"source\" : \"decay_linear(doc['geo'], params.origin, params.scale, params.offset, params.decay)\",\r\n  \"params\": {\r\n    \"origin\": \"11, 12\", \r\n    \"scale\": \"2km\", \r\n    \"offset\": \"0km\",\r\n    \"decay\" : 0.33\r\n  }\r\n}\r\n```\r\nInvestigate how to parse date and geo parameters only one per query, and don't do the parsing for every document (store in context?).\r\n\r\n\r\n### Normalization functions ???\r\n- `_max_score` in the  rescore context?\r\n-  Similar to ScaleFloatFunction in Lucene, SOLR’s scale function: scale(x, minTarget, maxTarget): scale the values of x, such that all values will be between minTarget and maxTarget ?\r\n\r\n### Other functions ???\r\n- _index lucene terms stats (doc count, doc frequency, tf, total term frequency), e.g. `_index[‘text’][‘word’].tf()`\r\n- Index wide statistics similar to DFS_QUERY_THEN_FETCH\r\n- payloads\r\n- matches (see IntervalQuery)\r\n\r\n\r\n","closed_by":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"performed_via_github_app":null}