[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/47850447","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-47850447","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":47850447,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODUwNDQ3","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2014-07-02T23:32:58Z","updated_at":"2014-07-02T23:32:58Z","author_association":"CONTRIBUTOR","body":"I understand how it would make simple things easier, but this syntax doesn't seem like it would allow for eg. building a boolean query whose individual clauses are `function_score` queries?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/47877811","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-47877811","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":47877811,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODc3ODEx","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2014-07-03T08:02:31Z","updated_at":"2014-07-03T08:02:31Z","author_association":"MEMBER","body":"btw, another interesting data point is @clintongormley work on simplified query DSL in the perl client (can't find the link now :) )\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/47885340","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-47885340","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":47885340,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODg1MzQw","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-07-03T09:29:53Z","updated_at":"2014-07-03T09:29:53Z","author_association":"CONTRIBUTOR","body":"Hi @andrewgross \n\nI read your post in the mailing list and ruminated on it a bit.  I think the approach that you outline above won't work, because it assumes a very simple query.  With this structure you lose the flexibility to combine multiple independent clauses with different rules and scoring.\n\nI've also been thinking about changes we could make to simplify the DSL. There are two things which I'd love to do:\n\n## Remove the distinction between queries and filters\n\nFilters are:\n- boolean, a doc either matches a filter or it doesn't\n- for exact term-level matches only (ie not full text)\n- fast (usually)\n- cacheable (usually)\n\nWhile a query is typically for:\n- full text search\n- anything to do with scoring\n\nIt annoys me that we have to separate queries and filters, and it is one of the things that adds verbosity to the DSL. I'd love to be able to pass a filter or a query in (eg) the same `bool` clause and have Elasticsearch just figure it out.\n\n## Simplify filter syntax\n\nFilters are usually pretty simple, and most SQL statements could be expressed with filters.  I'd love to be able to reduce the verbiage needed to express filter conditions, eg:\n\n```\n\"where\": [\n    { \"status\": \"active\" },\n    { \"star\": [ \"feature\", \"on_sale\" ] },\n    { \"price\": { \"gte\": 10, \"lt\": 20 }},\n    { \"not\": { \"flag\": \"spam\" }}\n]\n```\n\n(Queries on the other hand are often more complex and need more parameters. Their current syntax is probably about as simple as it gets.)\n\nThe above  `where` clause doesn't handle all cases unfortunately.  For instance, how would I look for \"foo\" in any of the fields \"one\", \"two\" or \"three\"?  What if I want some custom setting (eg using a named filter, or specifying _cache: false). Are those clauses combined with AND or OR? (I'd say AND).  How would you express an OR condition then? Possibly you could use `where_any` vs `where_all`...\n\nI tried to see how we could change the current DSL to support these two ideas in a backwards compatible way and I just couldn't figure out how to do it.  Something like this would require a new DSL. I haven't given up on this - would be interested in more ideas.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/47891124","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-47891124","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":47891124,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3ODkxMTI0","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-07-03T10:37:04Z","updated_at":"2014-07-03T10:37:04Z","author_association":"CONTRIBUTOR","body":"@kimchy the Perlish syntax I wrote is here: https://metacpan.org/pod/ElasticSearch::SearchBuilder\n\nIt makes some things very simple, much like the `where` clause I mentioned above.  However, I found that there were certain cases where the syntax became cryptic (as one might expect in Perl...) \n\nThe main thrust was changing the emphasis from:\n\n```\n\"clause_type\": { \"field_name\": ..... }\n```\n\neg:\n    {\"term\": { \"status\": \"active\" }}\n    {\"range\": { \"date\": { \"gt\": \"2000\" }}}\n\nto:\n\n```\n\"field_name\":  .....\n```\n\neg:\n\n```\n{\"status\": \"active\"}\n{\"date\": { \"gt\": \"2000\" }}\n```\n\nPlus clauses with boolean logic:\n\n```\n{  foo: \"bar\", \"bar\": \"baz\" }  # AND\n[  foo: \"bar\", \"bar\": \"baz\" ]  # OR\n```\n\nThis worked pretty well for filters, but seemed hackish for queries.   This is why I'm thinking that a `where` clause may be a useful shorthand.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/47925419","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-47925419","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":47925419,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3OTI1NDE5","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2014-07-03T12:53:56Z","updated_at":"2014-07-03T14:51:42Z","author_association":"MEMBER","body":"@clintongormley I think inverting the clause type and field name makes things more difficult, for example, I think this reads better:\n\n``` json\n{\n  \"where\": [\n    {\n      \"range\": {\"age\": {\"lt\": 82, \"gte\": 20}}\n    },\n    {\n      \"range\": {\n        \"date\": {\"from\": \"2014/07/02\", \"to\": \"now\"}}\n    },\n    {\n      \"match\": {\n        \"body\": \"quick fo\",\n        \"type\": \"phrase_prefix\"\n      }\n    },\n    {\n      \"term\": {\"color\": \"blue\"}\n    },\n    {\n      \"or\": [\n        {\"term\": {\"size\": \"small\" }},\n        {\"term\": {\"size\": \"medium\" }},\n        {\"term\": {\"size\": \"xlarge\" }}\n      ]\n    },\n    {\n      \"and\": [\n        {\"term\": {\"instock\": \"true\"}}\n        {\"term\": {\"available\": \"false\"}}\n      ]\n    }\n  ],\n  \"default_operator\": \"AND\"\n}\n```\n\nAnd I think `clause_type` first allows much simpler parsing logic since it can delegate to a separate class for parsing. It is also easier to make it pluggable (adding a new clause_type), and also makes boolean combining of queries feel more \"natural\".\n\nThe `default_operator` could be used for combining the `where` clauses.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/47941457","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-47941457","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":47941457,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3OTQxNDU3","user":{"login":"andrewgross","id":370118,"node_id":"MDQ6VXNlcjM3MDExOA==","avatar_url":"https://avatars1.githubusercontent.com/u/370118?v=4","gravatar_id":"","url":"https://api.github.com/users/andrewgross","html_url":"https://github.com/andrewgross","followers_url":"https://api.github.com/users/andrewgross/followers","following_url":"https://api.github.com/users/andrewgross/following{/other_user}","gists_url":"https://api.github.com/users/andrewgross/gists{/gist_id}","starred_url":"https://api.github.com/users/andrewgross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrewgross/subscriptions","organizations_url":"https://api.github.com/users/andrewgross/orgs","repos_url":"https://api.github.com/users/andrewgross/repos","events_url":"https://api.github.com/users/andrewgross/events{/privacy}","received_events_url":"https://api.github.com/users/andrewgross/received_events","type":"User","site_admin":false},"created_at":"2014-07-03T15:03:39Z","updated_at":"2014-07-03T15:25:28Z","author_association":"CONTRIBUTOR","body":"Thanks for the reply @clintongormley, exactly the response I was hoping for.  It certainly seems my proposed style excluded some features I don't have much experience with.  My other concern is to hopefully make it easier to isolate blocks of query JSON for re-use. \n\nAs an example I want to point to a library I created to make simple filtering and querying easier.  I have a bit of hairy logic to build the first few levels of the tree:\n\nhttps://github.com/Yipit/pyeqs/blob/master/pyeqs/query_builder.py#L95-L126\n\nIt would be helpful in this case to be able to guarantee that anything related a certain function would be contained below that function in the tree.  For example, `track_scores` and `min_score` relate to scoring, but need to sit at the same level as the root of the scoring section.  It makes it hard to give someone a block and say \"add this black box here and itll score things properly\".  Instead there is a fair but more work needed to be done to make sure everything fits together properly.\n\nJust my $0.02.  I appreciate all the work done so far and realize that the requests that seem reasonable to me may not seem reasonable to someone with more experience with the internals of ES.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/158652682","html_url":"https://github.com/elastic/elasticsearch/issues/6687#issuecomment-158652682","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/6687","id":158652682,"node_id":"MDEyOklzc3VlQ29tbWVudDE1ODY1MjY4Mg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-11-21T15:35:19Z","updated_at":"2015-11-21T15:35:19Z","author_association":"CONTRIBUTOR","body":"This issue hasn't garnered any more interest in the last year and a half. Closing\n","performed_via_github_app":null}]