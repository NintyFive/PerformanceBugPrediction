[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/73782279","html_url":"https://github.com/elastic/elasticsearch/issues/9638#issuecomment-73782279","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9638","id":73782279,"node_id":"MDEyOklzc3VlQ29tbWVudDczNzgyMjc5","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-02-10T20:58:51Z","updated_at":"2015-02-10T20:58:51Z","author_association":"MEMBER","body":"> If the optimize is for upgrade, or flush is requested, InternalEngine.optimize does submit a waitForMerges call back to the OPTIMIZE pool, but that's at the end, and so all 10 incoming requests will still run at once I think?\n\nI think that is correct, or rather whatever other optimize requests have already been queued will be run before the blocking wait for merges for the first request that ran.  So I think we need to somehow push the waiting thread to the front of the queue, and always have that regardless of the optimize settings (except for wait_for_completion, which of course just runs in the foreground and holds the single optimize thread).\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/73789559","html_url":"https://github.com/elastic/elasticsearch/issues/9638#issuecomment-73789559","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9638","id":73789559,"node_id":"MDEyOklzc3VlQ29tbWVudDczNzg5NTU5","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-02-10T21:39:43Z","updated_at":"2015-02-10T21:39:43Z","author_association":"MEMBER","body":"Ok, here is my proposal after speaking with Shay:\n- For 1.4.3: Change the default for `wait_for_completion` to `true`\n- For 1.5.0: Remove `wait_for_completion` (and `wait_for_merges` in the optimize api)\n- For 2.0: Once we have the task api, try to add back some of this async functionality as a long running task that can be managed.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/73790680","html_url":"https://github.com/elastic/elasticsearch/issues/9638#issuecomment-73790680","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9638","id":73790680,"node_id":"MDEyOklzc3VlQ29tbWVudDczNzkwNjgw","user":{"login":"mikemccand","id":796508,"node_id":"MDQ6VXNlcjc5NjUwOA==","avatar_url":"https://avatars0.githubusercontent.com/u/796508?v=4","gravatar_id":"","url":"https://api.github.com/users/mikemccand","html_url":"https://github.com/mikemccand","followers_url":"https://api.github.com/users/mikemccand/followers","following_url":"https://api.github.com/users/mikemccand/following{/other_user}","gists_url":"https://api.github.com/users/mikemccand/gists{/gist_id}","starred_url":"https://api.github.com/users/mikemccand/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikemccand/subscriptions","organizations_url":"https://api.github.com/users/mikemccand/orgs","repos_url":"https://api.github.com/users/mikemccand/repos","events_url":"https://api.github.com/users/mikemccand/events{/privacy}","received_events_url":"https://api.github.com/users/mikemccand/received_events","type":"User","site_admin":false},"created_at":"2015-02-10T21:46:04Z","updated_at":"2015-02-10T21:46:04Z","author_association":"CONTRIBUTOR","body":"+1 for this plan.\n\nSeparately, it would be nice if we could simply call IW.forceMerge(), which waits itself.  This would fix #8923 ... must we really hold the readLock when calling forceMerge?  Anyway, that can be done separately...\n","performed_via_github_app":null}]