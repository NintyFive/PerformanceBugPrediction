{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/62883","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62883/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62883/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62883/events","html_url":"https://github.com/elastic/elasticsearch/issues/62883","id":708219425,"node_id":"MDU6SXNzdWU3MDgyMTk0MjU=","number":62883,"title":"EQL: Special string-matching operator","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"labels":[{"id":1690690117,"node_id":"MDU6TGFiZWwxNjkwNjkwMTE3","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Query%20Languages/EQL","name":":Query Languages/EQL","color":"0e8a16","default":false,"description":"EQL querying"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":1967501040,"node_id":"MDU6TGFiZWwxOTY3NTAxMDQw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:QL","name":"Team:QL","color":"fef2c0","default":false,"description":"Meta label for query languages team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-09-24T14:26:05Z","updated_at":"2020-10-02T13:24:24Z","closed_at":"2020-10-02T13:24:24Z","author_association":"MEMBER","active_lock_reason":null,"body":"Related to #62651. And nearly equivalent to https://github.com/elastic/elasticsearch/issues/62651#issuecomment-698017348\r\n\r\nI think we reached a conclusion on that issue and out-of-band, and should remove the overloading for `==`. In addition, we should also make EQL case-_sensitive_ everywhere.\r\n\r\nHowever, the need to easily express case-insensitive, wildcard searching is still top priority. This issue is around adding a new operator (preferably `:`), to be used for case-insensitive string matching with wildcard expansion. For case-sensitive wildcards use `wildcard()` or use `==` for case-sensitive equality.\r\n\r\nHere are the ideal syntax and expected behavior:\r\n* `some.field : \"a literal string without wildcards\"`\r\n* `some.field : \"\"\"an unescaped string, where * is interpreted as a wildcard\"\"\"`\r\n* `some.field : \"a literal CaSe InSeNSiTiVe StrIng\"`\r\n* `some.field : \"CaSe-InsEnsitive WiLd*caRds\"`\r\n* `some.field : \"a literal \\* asterisk that's been escaped, and is not a wildcard\"`\r\n* `some.field : \"a string with a wild*card and a literal \\* asterisk\"`\r\n* `some.field : (\"pattern 1\", \"pattern 2\", ...)` a list of the above case-insensitive string patterns.\r\n    this is equivalent to:\r\n    ```\r\n    (some.field : \"pattern 1\") or (some.field : \"pattern 2\")\r\n                               ^^\r\n    ```\r\n* `(some arbitrary expression) : < RHS>`: I think we can extend this to arbitrary expressions, but \r\n\r\n**Outstanding questions**:\r\n* is the `\\*` syntax exclusive to the `:` string matching operator? Is this a new string literal regex, or can this be used in other parts of EQL? How does the `\\*` behave in other contexts?\r\n* is `!:` how you would negate it? I have the feeling that people will naturally reach for `!`, so it makes sense to add this as well\r\n\r\n**Implications**:\r\n* `in`, `wildcard`, `match`, `startswith`, `endswith`, `between`, etc. are all case-sensitive. We can add case-insensitivity to those in a future release, via a special syntax or case-folding function. I don't think we have immediate need in the first release, and can add the new syntax or function later. This could give us more time to think over options.\r\n* without a case-folding function or operator, there's no way to do a case-insensitive equals against a non-literal. for example `fieldA : fieldB` _should not be supported_ because, you should never expand wildcards on a dynamic expression. I understand that we have performance reasons for not wanting to do this in ES, but we can leave the door open for other EQL implementations. it has been leveraged already with `==`. example: `process.parent.executable != process.executable`","closed_by":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"performed_via_github_app":null}