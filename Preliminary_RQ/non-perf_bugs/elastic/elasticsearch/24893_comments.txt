[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/304418177","html_url":"https://github.com/elastic/elasticsearch/issues/24893#issuecomment-304418177","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24893","id":304418177,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNDQxODE3Nw==","user":{"login":"mpaduada","id":448739,"node_id":"MDQ6VXNlcjQ0ODczOQ==","avatar_url":"https://avatars1.githubusercontent.com/u/448739?v=4","gravatar_id":"","url":"https://api.github.com/users/mpaduada","html_url":"https://github.com/mpaduada","followers_url":"https://api.github.com/users/mpaduada/followers","following_url":"https://api.github.com/users/mpaduada/following{/other_user}","gists_url":"https://api.github.com/users/mpaduada/gists{/gist_id}","starred_url":"https://api.github.com/users/mpaduada/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mpaduada/subscriptions","organizations_url":"https://api.github.com/users/mpaduada/orgs","repos_url":"https://api.github.com/users/mpaduada/repos","events_url":"https://api.github.com/users/mpaduada/events{/privacy}","received_events_url":"https://api.github.com/users/mpaduada/received_events","type":"User","site_admin":false},"created_at":"2017-05-27T01:39:25Z","updated_at":"2017-05-27T01:39:25Z","author_association":"NONE","body":"Whoa, whoa! Hold on. While I agree that `insert_zeros` is generally a bad idea, I think a parameter to specify some kind of `gap_policy` is still needed.\r\n\r\nMissing/censored data is a perfectly normal occurrence when doing statistical analysis; accordingly statisticians employ different techniques to deal with missing data as dictated by the context. In financial time series analysis, it's quite common to be missing observations due to weekends and holidays; the missing data doesn't preclude calculating SMA, EMA, and other fun stats used in econometrics and technical analysis. The `skip` policy leaves you without a metric for a given bucket, which is essentially saying, \"I don't know how to deal with this, so I'll pretend there's nothing to do.\"\r\n\r\nInstead, I propose that options be added to `gap_policy`. Keep `skip`; it's perfectly reasonable in some cases. A `next_bucket` option could indicate that the next non-empty bucket be substituted; this is essentially the standard treatment for financial market data with missing values for weekends/holidays to calculate `serial_diff` and `moving_avg`. `next_bucket` would also be a nice option to have for `cumulative_sum`, which oddly doesn't accept a `gap_policy` parameter (even though the [documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html#gap-policy) indicates that all pipeline aggregations accept that parameter).  An `omit` bucket that calculates the metric using the available non-empty buckets (adjusting the denominator for `moving_avg`) would be a good replacement for the `insert_zeros` bucket. An `EM` option to use the [expectation-maximization algorithm](https://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm) would likely please statisticians. And I'm sure statisticians and others with more complicated logging metrics use cases can weigh in with other suggested options.\r\n\r\nAs an aside, I suspect the reason that there's not a lot of discussion on `gap_policy` at this time is because some of the more complicated logging metrics use cases are only just starting to come on board to Elasticsearch. (I had no idea what Elasticsearch was three months ago.) I can personally attest that obtaining the utilization and efficiency metrics we need requires some aggregation acrobatics (though I might have an easier time if the documentation for [Scripted Metric Aggregation](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-scripted-metric-aggregation.html) and [Painless](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-painless.html) were improved, or at least more numeric examples were included... but that's another rant).\r\n\r\nTL; DR: Keep the `gap_policy` parameter and consider the inclusion of additional options. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305289599","html_url":"https://github.com/elastic/elasticsearch/issues/24893#issuecomment-305289599","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24893","id":305289599,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTI4OTU5OQ==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2017-05-31T19:18:57Z","updated_at":"2017-05-31T19:18:57Z","author_association":"MEMBER","body":"Thanks for the feedback @mpaduada!  Really appreciate the input. :)\r\n\r\nI'm curious how any kind of gap policy can lead to proper analysis though.  After thinking about it, even `skip` is looking wrong to me right now.  It seems to me that the only really useful policy would be `insert_NaN`, e.g. treat all gaps as true gaps/null/NaN.  Then gaps can then be cleaned up at the end of the analysis.\r\n\r\nE.g considering financial data like you said, the weekends are usually missing.  If any kind of interpolating policy is used, a daily derivative will show a change from Friday to Saturday, which is just wrong.  Markets were closed, there was no change.  That seems to argue for some kind of `last_known_value` policy, but that's deceitful too.  It's not that there wasn't a change, it's that there was no collected data.  So even a derivative of `0` isn't true, the derivative is really `null/NaN`\r\n\r\nOf course, NaNs/gaps on a chart are gross, but that seems to be something that can be cleaned up at the end.  Run the analysis, fill in any gaps with your favorite interpolation.\r\n\r\nI dunno, I'm torn; if that's really how various fields perform analysis, I suppose we should support it... although it seems entirely wrong from a theoretical point of view.  But I'm certainly not an expert in this either :)\r\n\r\nRegardless, if this functionality is desired, it still seems better to be implemented as part of an `interpolation` or `fit` pipeline as suggested in #24747.  That way individual pipelines don't need to concern themselves with gaps, and we can centralize all the interpolating logic in one place.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305304301","html_url":"https://github.com/elastic/elasticsearch/issues/24893#issuecomment-305304301","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24893","id":305304301,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTMwNDMwMQ==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2017-05-31T20:17:33Z","updated_at":"2017-05-31T20:17:33Z","author_association":"MEMBER","body":"> If any kind of interpolating policy is used, a daily derivative will show a change from Friday to Saturday, which is just wrong\r\n\r\nI think the point was to skip Sat/Sun since the markets were closed, so a daily derivative would act as if Sat/Sun did not exist, and Fri->Mon is the diff?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/305333690","html_url":"https://github.com/elastic/elasticsearch/issues/24893#issuecomment-305333690","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24893","id":305333690,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNTMzMzY5MA==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2017-05-31T22:16:01Z","updated_at":"2017-05-31T22:16:01Z","author_association":"MEMBER","body":"Mmm, I see.  Yeah I misinterpreted, because I was thinking the proposal would \"fill in\" the empty buckets with the next good value.  So  `[1, 2, null, null, 5, 6]` would become `[1, 2, 5, 5, 5, 6]` which would produce all kinds of oddities. \r\n\r\nBut if the proposal is to skip any null/Nan bucket (like it does today), but when it encounters a real value it finds the last usable value (`2` in the above example) instead of just checking the last bucket, that seems reasonable.\r\n\r\nI'm not sure how that would work for other pipeline aggs though, such as movavg?  E.g. if your data looks like: `[1, 2, null, null, 5, 6]` and your window is size `3`, what do we do with a policy like that?  Our windows would be:\r\n\r\n- `[1,2,null]`\r\n- `[2,null, null]`\r\n- `[null, null, 5]`\r\n\r\nIn this case it isn't as simple as just finding the last usable value, since we are looking at windows of time.  We could fill in the nulls with the last usable value, but they we're duplicating data.  Or we can interpolate linearly (or whatever) but that's straying into territory of making up data.\r\n\r\nOk, I'm done thinking out loud now :)\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/306500370","html_url":"https://github.com/elastic/elasticsearch/issues/24893#issuecomment-306500370","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24893","id":306500370,"node_id":"MDEyOklzc3VlQ29tbWVudDMwNjUwMDM3MA==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2017-06-06T14:18:24Z","updated_at":"2017-06-06T14:18:24Z","author_association":"MEMBER","body":"So this was discussed in last week's FixitFriday.  The general consensus is that `insert_zero` isn't a great option, but there also isn't strong enough reason to remove it at the moment.  And we recognize that we don't know enough about potential use-cases to fully remove `gap_policy` at this time either.\r\n\r\nI'm going to put a pin in this issue and close it, although we'll remain on the lookout to see if `gap_policy` should be extended with more interpolation schemes (or add an interpolation agg).  It's a tricky issue since we don't want to recreate R inside of ES, but we also want to provide enough general-purpose tools for it to be useful.  So the plan is to do nothing at the moment and continue collecting more user-scenarios to see what we can/should do.\r\n\r\nThanks for everyone's input! :)","performed_via_github_app":null}]