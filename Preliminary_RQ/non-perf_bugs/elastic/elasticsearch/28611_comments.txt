[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/366247299","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-366247299","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":366247299,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NjI0NzI5OQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2018-02-16T14:19:12Z","updated_at":"2018-02-16T14:19:12Z","author_association":"MEMBER","body":"The limitation was added because the use case was not clear but it is possible as long as *all** sources in the composite are in the same nested context. I'll mark this issue with the feature label but as a low priority for now.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372640607","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-372640607","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":372640607,"node_id":"MDEyOklzc3VlQ29tbWVudDM3MjY0MDYwNw==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-03-13T11:56:32Z","updated_at":"2018-03-13T11:56:32Z","author_association":"MEMBER","body":"@elastic/es-search-aggs ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/385890684","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-385890684","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":385890684,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NTg5MDY4NA==","user":{"login":"tchiotludo","id":2064609,"node_id":"MDQ6VXNlcjIwNjQ2MDk=","avatar_url":"https://avatars1.githubusercontent.com/u/2064609?v=4","gravatar_id":"","url":"https://api.github.com/users/tchiotludo","html_url":"https://github.com/tchiotludo","followers_url":"https://api.github.com/users/tchiotludo/followers","following_url":"https://api.github.com/users/tchiotludo/following{/other_user}","gists_url":"https://api.github.com/users/tchiotludo/gists{/gist_id}","starred_url":"https://api.github.com/users/tchiotludo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tchiotludo/subscriptions","organizations_url":"https://api.github.com/users/tchiotludo/orgs","repos_url":"https://api.github.com/users/tchiotludo/repos","events_url":"https://api.github.com/users/tchiotludo/events{/privacy}","received_events_url":"https://api.github.com/users/tchiotludo/received_events","type":"User","site_admin":false},"created_at":"2018-05-02T07:38:22Z","updated_at":"2018-05-02T07:38:22Z","author_association":"NONE","body":"This feature is really useful, since nested is also not allow in sources of composite.\r\nWith out this features, we just can't use composite with nested document and must use deprecated terms aggregations with size = Infinity ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/393774159","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-393774159","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":393774159,"node_id":"MDEyOklzc3VlQ29tbWVudDM5Mzc3NDE1OQ==","user":{"login":"neelam28m","id":37451351,"node_id":"MDQ6VXNlcjM3NDUxMzUx","avatar_url":"https://avatars2.githubusercontent.com/u/37451351?v=4","gravatar_id":"","url":"https://api.github.com/users/neelam28m","html_url":"https://github.com/neelam28m","followers_url":"https://api.github.com/users/neelam28m/followers","following_url":"https://api.github.com/users/neelam28m/following{/other_user}","gists_url":"https://api.github.com/users/neelam28m/gists{/gist_id}","starred_url":"https://api.github.com/users/neelam28m/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neelam28m/subscriptions","organizations_url":"https://api.github.com/users/neelam28m/orgs","repos_url":"https://api.github.com/users/neelam28m/repos","events_url":"https://api.github.com/users/neelam28m/events{/privacy}","received_events_url":"https://api.github.com/users/neelam28m/received_events","type":"User","site_admin":false},"created_at":"2018-06-01T06:23:40Z","updated_at":"2018-06-01T06:23:40Z","author_association":"NONE","body":"I also feel this should be possible to have composite aggregation for nested object. I have come across a situation where sources with nested object is the only option and that too does not support nested types. I will have to look for other workaround, may be to use multiple queries to get the desired result. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/400649026","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-400649026","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":400649026,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMDY0OTAyNg==","user":{"login":"rooboo","id":2622095,"node_id":"MDQ6VXNlcjI2MjIwOTU=","avatar_url":"https://avatars2.githubusercontent.com/u/2622095?v=4","gravatar_id":"","url":"https://api.github.com/users/rooboo","html_url":"https://github.com/rooboo","followers_url":"https://api.github.com/users/rooboo/followers","following_url":"https://api.github.com/users/rooboo/following{/other_user}","gists_url":"https://api.github.com/users/rooboo/gists{/gist_id}","starred_url":"https://api.github.com/users/rooboo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rooboo/subscriptions","organizations_url":"https://api.github.com/users/rooboo/orgs","repos_url":"https://api.github.com/users/rooboo/repos","events_url":"https://api.github.com/users/rooboo/events{/privacy}","received_events_url":"https://api.github.com/users/rooboo/received_events","type":"User","site_admin":false},"created_at":"2018-06-27T12:08:59Z","updated_at":"2018-06-27T12:08:59Z","author_association":"NONE","body":"I find this feature also very helpful to get all values of a specific field in a nested object, grouped by an identifier.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/403892348","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-403892348","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":403892348,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMzg5MjM0OA==","user":{"login":"justinmcp88","id":41077228,"node_id":"MDQ6VXNlcjQxMDc3MjI4","avatar_url":"https://avatars0.githubusercontent.com/u/41077228?v=4","gravatar_id":"","url":"https://api.github.com/users/justinmcp88","html_url":"https://github.com/justinmcp88","followers_url":"https://api.github.com/users/justinmcp88/followers","following_url":"https://api.github.com/users/justinmcp88/following{/other_user}","gists_url":"https://api.github.com/users/justinmcp88/gists{/gist_id}","starred_url":"https://api.github.com/users/justinmcp88/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/justinmcp88/subscriptions","organizations_url":"https://api.github.com/users/justinmcp88/orgs","repos_url":"https://api.github.com/users/justinmcp88/repos","events_url":"https://api.github.com/users/justinmcp88/events{/privacy}","received_events_url":"https://api.github.com/users/justinmcp88/received_events","type":"User","site_admin":false},"created_at":"2018-07-10T16:52:29Z","updated_at":"2018-07-10T16:52:29Z","author_association":"NONE","body":"@jimczi Can you possibly provide an example of how to write the composite aggregation when \"all* sources in the composite are in the same nested context\"? I'm trying to do this, but so far have not been successful.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/404238679","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-404238679","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":404238679,"node_id":"MDEyOklzc3VlQ29tbWVudDQwNDIzODY3OQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2018-07-11T16:52:34Z","updated_at":"2018-07-11T16:52:34Z","author_association":"MEMBER","body":"@justinmcp88 this is not possible currently which is why this issue is still open. I mentioned the `all fields the composite must be in the same nested context` as a way to implement the feature described in this issue.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/457739950","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-457739950","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":457739950,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NzczOTk1MA==","user":{"login":"fredgalvao","id":616464,"node_id":"MDQ6VXNlcjYxNjQ2NA==","avatar_url":"https://avatars2.githubusercontent.com/u/616464?v=4","gravatar_id":"","url":"https://api.github.com/users/fredgalvao","html_url":"https://github.com/fredgalvao","followers_url":"https://api.github.com/users/fredgalvao/followers","following_url":"https://api.github.com/users/fredgalvao/following{/other_user}","gists_url":"https://api.github.com/users/fredgalvao/gists{/gist_id}","starred_url":"https://api.github.com/users/fredgalvao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fredgalvao/subscriptions","organizations_url":"https://api.github.com/users/fredgalvao/orgs","repos_url":"https://api.github.com/users/fredgalvao/repos","events_url":"https://api.github.com/users/fredgalvao/events{/privacy}","received_events_url":"https://api.github.com/users/fredgalvao/received_events","type":"User","site_admin":false},"created_at":"2019-01-25T21:43:31Z","updated_at":"2019-01-25T21:43:31Z","author_association":"NONE","body":"The nested aggregation is only *one* of the many bucket aggregations that have this limitation. Fixing the nested aggregation scenario (making it work with inner composite aggregations) only solves one fraction of the issue. Using a composite aggregation as a child of a filter aggregation is another very common scenario (for me, at least), and it's still forbidden after #37178.\r\n\r\nCan we reopen this? Are all of the other bucket aggregations gonna be considered a hard limitation and be left out of the game? Did I miss some other issue that is responsible for the general scenario?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/464900547","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-464900547","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":464900547,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NDkwMDU0Nw==","user":{"login":"nakulm95","id":7410988,"node_id":"MDQ6VXNlcjc0MTA5ODg=","avatar_url":"https://avatars2.githubusercontent.com/u/7410988?v=4","gravatar_id":"","url":"https://api.github.com/users/nakulm95","html_url":"https://github.com/nakulm95","followers_url":"https://api.github.com/users/nakulm95/followers","following_url":"https://api.github.com/users/nakulm95/following{/other_user}","gists_url":"https://api.github.com/users/nakulm95/gists{/gist_id}","starred_url":"https://api.github.com/users/nakulm95/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nakulm95/subscriptions","organizations_url":"https://api.github.com/users/nakulm95/orgs","repos_url":"https://api.github.com/users/nakulm95/repos","events_url":"https://api.github.com/users/nakulm95/events{/privacy}","received_events_url":"https://api.github.com/users/nakulm95/received_events","type":"User","site_admin":false},"created_at":"2019-02-18T22:13:51Z","updated_at":"2019-02-18T22:13:51Z","author_association":"NONE","body":"+1 for the request. Would be extremely helpful to have this capability ported to 6.3 as well so there's a way to paginate term bucket documents in an efficient manner","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/464908284","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-464908284","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":464908284,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NDkwODI4NA==","user":{"login":"fredgalvao","id":616464,"node_id":"MDQ6VXNlcjYxNjQ2NA==","avatar_url":"https://avatars2.githubusercontent.com/u/616464?v=4","gravatar_id":"","url":"https://api.github.com/users/fredgalvao","html_url":"https://github.com/fredgalvao","followers_url":"https://api.github.com/users/fredgalvao/followers","following_url":"https://api.github.com/users/fredgalvao/following{/other_user}","gists_url":"https://api.github.com/users/fredgalvao/gists{/gist_id}","starred_url":"https://api.github.com/users/fredgalvao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fredgalvao/subscriptions","organizations_url":"https://api.github.com/users/fredgalvao/orgs","repos_url":"https://api.github.com/users/fredgalvao/repos","events_url":"https://api.github.com/users/fredgalvao/events{/privacy}","received_events_url":"https://api.github.com/users/fredgalvao/received_events","type":"User","site_admin":false},"created_at":"2019-02-18T22:39:53Z","updated_at":"2019-02-18T22:39:53Z","author_association":"NONE","body":"@jimczi Sorry to ping you, but I fear this could go unnoticed for 7, which would be very sad.\r\n\r\nComposite aggregations have the incredible power to actually make Elasticsearch amazing at aggregation level analytics, which is something that people (me included) have to currently work around to be productive. Setting `\"size\": Long.MAX_VALUE` on `terms` aggregations to paginate on the application level is terrible, and building intermediate rollup/derived types/indexes don't have the same intuitive level of so many other Elasticsearch solutions, and more elaborate solutions are not maintenance-friendly.\r\n\r\nDo we still/{at least} have plans to support all bucket aggregations as parents of composite aggregations?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/464915666","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-464915666","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":464915666,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NDkxNTY2Ng==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2019-02-18T23:04:42Z","updated_at":"2019-02-18T23:04:42Z","author_association":"MEMBER","body":"> Do we still/{at least} have plans to support all bucket aggregations as parents of composite aggregations?\r\n\r\nNo and we never had such plan ;) We added the support for `nested` aggregations because otherwise it is impossible to paginate over `nested` fields but I don't see why bucket aggregations would be useful. The `composite`  aggregation must be the root aggregation to allow pagination, that's the design. Can you explain why you'd need to use the `composite` as a sub-aggregation (other than switching to a `nested` context) ?\r\n\r\n> Using a composite aggregation as a child of a filter aggregation is another very common scenario (for me, at least), and it's still forbidden after #37178.\r\n\r\nCan you move the filter aggregation to the query ? It should be equivalent. There is also a [pr](https://github.com/elastic/elasticsearch/pull/38863) open to support a `nested/filter` combo but for the main context the query should be preferred. \r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/464923179","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-464923179","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":464923179,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2NDkyMzE3OQ==","user":{"login":"fredgalvao","id":616464,"node_id":"MDQ6VXNlcjYxNjQ2NA==","avatar_url":"https://avatars2.githubusercontent.com/u/616464?v=4","gravatar_id":"","url":"https://api.github.com/users/fredgalvao","html_url":"https://github.com/fredgalvao","followers_url":"https://api.github.com/users/fredgalvao/followers","following_url":"https://api.github.com/users/fredgalvao/following{/other_user}","gists_url":"https://api.github.com/users/fredgalvao/gists{/gist_id}","starred_url":"https://api.github.com/users/fredgalvao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fredgalvao/subscriptions","organizations_url":"https://api.github.com/users/fredgalvao/orgs","repos_url":"https://api.github.com/users/fredgalvao/repos","events_url":"https://api.github.com/users/fredgalvao/events{/privacy}","received_events_url":"https://api.github.com/users/fredgalvao/received_events","type":"User","site_admin":false},"created_at":"2019-02-18T23:43:38Z","updated_at":"2019-02-18T23:43:38Z","author_association":"NONE","body":"I didn't mean to imply there was such plan, but the original topic seemed broad enough to cover them all, my bad. But I digress.\r\n\r\n> Can you explain why you'd need to use the `composite` as a sub-aggregation (other than switching to a `nested` context) ?\r\n\r\nSure, I'll try.\r\n\r\nMany of our queries here target many indexes at the same time, so that we can do \"joins\" in memory on the application side without requiring N>1 steps/queries (that would elevate complexity on our side a bunch).\r\n\r\nSo let's say I have indexes `iA` and `iB`, both already on the 7.0 mindset of index==type. Those indexes/types have many fields in common, for denormalization purposes. They relate to each other in some way (think fkeys), and we need extra data from one another when in a bigger context.\r\nIn a sample query, we could be doing something like:\r\n\r\n```json\r\nGET /iA,iB/_search\r\n{\r\n  \"size\": 0,\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"should\": [\r\n        {\r\n          \"bool\": {\r\n            \"filter\": [\r\n              { \"type\": { \"value\": \"iA\" } },\r\n              /* some filter on iA */\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"bool\": {\r\n            \"filter\": [\r\n              { \"type\": { \"value\": \"iB\" } },\r\n              /* some filter on iB */\r\n            ]\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    /* there is some application logic to apply common filters here to all indexes involved */\r\n  },\r\n  \"aggs\": {\r\n    \"filtered_iA\": {\r\n      \"filter\": { \"type\": { \"value\": \"iA\" } },\r\n      \"aggs\": {\r\n        \"and_then_grouped\": {\r\n          \"terms\": { /*========= this is the aggregation we wanted to paginate ==========*/\r\n            \"field\": \"ia_some_field\",\r\n            \"size\": 9999\r\n          },\r\n          \"aggs\": {\r\n            /* a bunch o metric aggregations, sometimes top_hits too */\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"filtered_iB\": {\r\n      \"filter\": { \"type\": { \"value\": \"iB\" } },\r\n      \"aggs\": {\r\n        \"raw\": {\r\n          \"terms\": {\r\n            \"field\": \"_id\",\r\n            /* sometimes this iB is small enough for us to not even try to paginate it */\r\n            /* so we bring it all, since we can't join easily on elasticsearch */\r\n            \"size\": 1000\r\n          },\r\n          \"aggs\": {\r\n            /* top_hit to project fields we need to augment iA */\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n> Can you move the filter aggregation to the query ? It should be equivalent.\r\n\r\nUsing the model/approach we currently do, we cannot. It would break the aggregation because there could be multiple indexes involved in the query, but \"this\" aggregation would want to deal with only a subset of them, hence the filtering on aggregation level.\r\n\r\n\r\nI was trying to \"defend\" the feature for all other bucket aggregations, but truth is I would be 99% happy if `Filter Aggregation` was added to the \"allowed parents\" list for composite aggregation.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/537429450","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-537429450","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":537429450,"node_id":"MDEyOklzc3VlQ29tbWVudDUzNzQyOTQ1MA==","user":{"login":"bernardmo","id":3929434,"node_id":"MDQ6VXNlcjM5Mjk0MzQ=","avatar_url":"https://avatars0.githubusercontent.com/u/3929434?v=4","gravatar_id":"","url":"https://api.github.com/users/bernardmo","html_url":"https://github.com/bernardmo","followers_url":"https://api.github.com/users/bernardmo/followers","following_url":"https://api.github.com/users/bernardmo/following{/other_user}","gists_url":"https://api.github.com/users/bernardmo/gists{/gist_id}","starred_url":"https://api.github.com/users/bernardmo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bernardmo/subscriptions","organizations_url":"https://api.github.com/users/bernardmo/orgs","repos_url":"https://api.github.com/users/bernardmo/repos","events_url":"https://api.github.com/users/bernardmo/events{/privacy}","received_events_url":"https://api.github.com/users/bernardmo/received_events","type":"User","site_admin":false},"created_at":"2019-10-02T10:15:38Z","updated_at":"2019-10-02T10:15:38Z","author_association":"NONE","body":"Another example where composite is also useful is sorting by string fields (terms aggregation only support sorting on numeric fields or single-bucket numeric subaggregation).\r\n\r\nExample data structure which describes `detection`: \r\n```\r\n{\r\n  \"id\": {\r\n    \"type\": \"long\"\r\n  },\r\n  \"time\": {\r\n    \"type\": \"date\"\r\n  },\r\n  \"objectId\": {\r\n    \"type\": \"long\"\r\n  },\r\n  \"objectName\": {\r\n    \"type\": \"text\",\r\n    \"fields\": {\r\n      \"key\": {\r\n        \"type\": \"keyword\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExample request: Create `auto_bucket_histogram` aggregation on detection `time`. For each bucket return 10 unique objects with included number of detections sorted by `objectName`.\r\n\r\nTranslated to composite sub-aggregation it would look something like this:\r\n```\r\n{\r\n  \"size\": 0,\r\n  \"aggs\": {\r\n    \"ranges\": {\r\n      \"auto_date_histogram\": {\r\n        \"field\": \"time\",\r\n        \"buckets\": 10\r\n      },\r\n      \"aggregations\": {\r\n        \"objects\": {\r\n          \"composite\": {\r\n            \"size\": 10,\r\n            \"sources\": [\r\n              {\r\n                \"_sortBy\": {\r\n                  \"terms\": {\r\n                    \"field\": \"objectName.key\",\r\n                    \"order\": \"desc\"\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                \"_groupBy\": {\r\n                  \"terms\": {\r\n                    \"field\": \"objectId\"\r\n                  }\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          \"aggregations\": {\r\n            \"count\": {\r\n              \"value_count\": {\r\n                \"field\": \"objectId\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/577714013","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-577714013","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":577714013,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NzcxNDAxMw==","user":{"login":"mynkow","id":183151,"node_id":"MDQ6VXNlcjE4MzE1MQ==","avatar_url":"https://avatars1.githubusercontent.com/u/183151?v=4","gravatar_id":"","url":"https://api.github.com/users/mynkow","html_url":"https://github.com/mynkow","followers_url":"https://api.github.com/users/mynkow/followers","following_url":"https://api.github.com/users/mynkow/following{/other_user}","gists_url":"https://api.github.com/users/mynkow/gists{/gist_id}","starred_url":"https://api.github.com/users/mynkow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mynkow/subscriptions","organizations_url":"https://api.github.com/users/mynkow/orgs","repos_url":"https://api.github.com/users/mynkow/repos","events_url":"https://api.github.com/users/mynkow/events{/privacy}","received_events_url":"https://api.github.com/users/mynkow/received_events","type":"User","site_admin":false},"created_at":"2020-01-23T14:50:00Z","updated_at":"2020-01-23T14:50:00Z","author_association":"NONE","body":"What is the reason this to be closed?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/585970397","html_url":"https://github.com/elastic/elasticsearch/issues/28611#issuecomment-585970397","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/28611","id":585970397,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NTk3MDM5Nw==","user":{"login":"champloo11","id":392717,"node_id":"MDQ6VXNlcjM5MjcxNw==","avatar_url":"https://avatars1.githubusercontent.com/u/392717?v=4","gravatar_id":"","url":"https://api.github.com/users/champloo11","html_url":"https://github.com/champloo11","followers_url":"https://api.github.com/users/champloo11/followers","following_url":"https://api.github.com/users/champloo11/following{/other_user}","gists_url":"https://api.github.com/users/champloo11/gists{/gist_id}","starred_url":"https://api.github.com/users/champloo11/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/champloo11/subscriptions","organizations_url":"https://api.github.com/users/champloo11/orgs","repos_url":"https://api.github.com/users/champloo11/repos","events_url":"https://api.github.com/users/champloo11/events{/privacy}","received_events_url":"https://api.github.com/users/champloo11/received_events","type":"User","site_admin":false},"created_at":"2020-02-13T21:03:17Z","updated_at":"2020-02-13T21:03:17Z","author_association":"NONE","body":"+1 for having composite aggregations be usable as a child aggregation of a filter aggregation. To understand a real world use-case where this would be helpful let me explain our use case:\r\n\r\nWe want to use composite aggregations as a method of creating hierarchical faceted searches. For a visual example of the final product that we want here is a screenshot:\r\n\r\n![image](https://user-images.githubusercontent.com/392717/74476169-a9728080-4e5d-11ea-984a-f0c3fac46fa6.png)\r\n\r\nEach document in our index has a parent \"category\" denoting a category i.e. \"Men's Shoes\", and several SKUs contained within each document that each have their own size \"12\", \"13\" etc... \r\n\r\nNow, we might be able to accomplish a similar effect by using multiple term subaggregations to simulate parent/child hierarchies. But we wanted to be able to have these heirarchies be extendable (i.e deeper than just a single parent-child), an example of this could be seen here:\r\n\r\n![image](https://user-images.githubusercontent.com/392717/74477107-8779fd80-4e5f-11ea-98be-74dc79dac53e.png)\r\n\r\nWhile recursive request/response generation to elasticsearch are fun, they make debugging a nightmare when you end up with a large list of configurable aggregations all of potentially varying depth. Composite aggregations gave us a way to very easily (and flatly) express the keys of our aggregation and get our hierarchy and flatly parse them out into a response that can be rendered by a UI by knowing where in the array of the hierarchy they are. \r\n\r\nWe built a quick proof of concept of rendering these hierarchies using composite aggregations and recently got down to working on the `faceted` part (where filters applied from an aggregation don't impact the aggregation itself). This is usually built using global aggregations, and then filtering on any filters that are not filtering on that aggregation's fields:\r\n\r\n```\r\n{\r\n    \"aggs\" : {\r\n        \"brand_global_and_filtered\" : {\r\n            \"global\": {},\r\n            \"filter\" : {  ...  },  // ... filters that DONT filter on the brand field \r\n            \"aggs\" : {\r\n                \"brand\" : { \"terms\" : { \"field\" : \"brand\" } }\r\n            }\r\n        }\r\n    }\r\n}\r\n``` \r\n\r\nHowever, you cannot have a composite aggregation be the child of a filter aggregation and we're now having to reconsider our approach. \r\n","performed_via_github_app":null}]