[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137539","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137539","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137539,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzUzOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T18:06:34Z","updated_at":"2018-04-25T02:02:19Z","author_association":"COLLABORATOR","body":"*Original comment by @MorrieAtElastic:*\n\nPlease make sure that the exception associated with mapping multiple indexes to a read-write alias  is clearly stated, because this is precisely the kind of error that is likely to be made. \r\n\r\nOther than that I can see no problems with implementing read-write aliases. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137541","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137541","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137541,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-10T18:42:04Z","updated_at":"2018-04-25T02:02:19Z","author_association":"COLLABORATOR","body":"*Original comment by @pickypg:*\n\n> We add a deprecation warning to say that the type will become mandatory in 7.0\r\n\r\nWhat happens for users that don't need to create / set any new aliases between now and then, thus they never see the deprecation? What happens in 7.0? They are automatically set to `read_write`?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137543","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137543","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137543,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-11T11:52:10Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @s1monw:*\n\n> When rollover is called on an index (instead of an alias), then all read_write aliases will be switched to the new index, but read_only aliases will not be changed.\r\n\r\nI don't understand that, you are switching all aliases or only the ones that point to this specific index? What if there are more than one write alias that point to it? \r\n\r\nAlso can you apply write ops to an alias with 1 index that is `read_only`? I think this is very very confusing if that is the case.\r\n\r\nI also wonder what the implications are that we are going from an `O(1)` pattern to a `O(n)` pattern. I don't think we should do such a change without considering the implications (I am not sure what they are). \r\n\r\n> In Index Lifecycle Management we have come across a problem with rollover which we hope to solve with a change to aliases.\r\n\r\nif we do this are we sure we won't need any specific parameters in the future and is that worth the trouble?\r\n\r\nFWIW I really like specifying the alias from the index via a setting wich can be a one-off this is less ambiguous IMO. The proposal here has too many `what-if` parts...","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137545","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137545","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137545,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T10:52:00Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\n> I don't understand that, you are switching all aliases or only the ones that point to this specific index? What if there are more than one write alias that point to it?\r\n\r\nYes, we'd switch all write aliases to the new index.  I agree that I'm not crazy about this.  I'd prefer to have a `rollover` alias type of which there can only be one.  The problem is that rollover is x-pack and so it seems weird to introduce such a concept into core.\r\n\r\n> Also can you apply write ops to an alias with 1 index that is read_only? I think this is very very confusing if that is the case.\r\n\r\nNo, we'd enforce that a `read_only` alias would not accept writes.\r\n\r\n> I also wonder what the implications are that we are going from an O(1) pattern to a O(n) pattern. I don't think we should do such a change without considering the implications (I am not sure what they are).\r\n\r\nAgreed.\r\n\r\n> FWIW I really like specifying the alias from the index via a setting wich can be a one-off this is less ambiguous IMO. The proposal here has too many what-if parts...\r\n\r\nThis was the original idea.  The reasons for not liking it:\r\n\r\n* you need to specify the settings AND add the alias, as opposed to doing both in a single place\r\n* it doesn't solve the need for atomic index+alias creation from beats\r\n\r\nFor the second point, beats could always try to create `{index}-0001` as opposed to `{index}-{YYYY.MM.dd}-0001`, which would reduce the race condition to \"highly unlikely\".\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137546","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137546","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137546,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0Ng==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T11:14:51Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @bleskes:*\n\n> For the second point, beats could always try to create {index}-0001 as opposed to {index}-{YYYY.MM.dd}-0001, which would reduce the race condition to \"highly unlikely\"\r\n\r\nHow does having read-write alias solve the race condition if multiple beats use a daily pattern and disagree on the date? one of them will try to create an index on it's date and fail because there's already another index which has that alias. That index has the wrong date from the perspective of that specific beat so at this point, we either get stuck or accept the existing index as a target. However, that index will then receive data from a beat with a different idea of what day it is. This mean an index named `2018-02-01` can have data with `2018-01-31`. At this point what's the added value of that date over a `{index}-001` naming scheme?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137547","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137547","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137547,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0Nw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-12T11:20:18Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\n> That index has the wrong date from the perspective of that specific beat so at this point, we either get stuck or accept the existing index as a target. However, that index will then receive data from a beat with a different idea of what day it is. This mean an index named 2018-02-01 can have data with 2018-01-31. At this point what's the added value of that date over a {index}-001 naming scheme?\r\n\r\nThe beat would use the existing alias.  The dates on the indices are a convenience, rather than a requirement.  It just makes it easy to see when they were created which is useful when it comes to eg snapshot management etc.  But as @colings86 said, we should rather expose the index creation date in more APIs.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137548","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137548","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137548,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0OA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T10:16:26Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @s1monw:*\n\n> This was the original idea. The reasons for not liking it:\r\n> \r\n> you need to specify the settings AND add the alias, as opposed to doing both in a single place\r\n> it doesn't solve the need for atomic index+alias creation from beats\r\n\r\nI mean we can make a write alias creation a side-effect of the index creation and skip it if the alias already exists. I wonder if we should do this by default at some point. If you create an index we give it some pattern name starting with `-00000` and just create an alias with the specified name. This index creation would then set the setting to associate the index with the alias. It's all part of the create index call or some template?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137549","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137549","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137549,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU0OQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T10:40:52Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\nI like the idea, but there are some issues with it, eg the alias may be `apache-logs-write`.  We would want to create the index `apache-logs-000001` rather than `apache-logs-write-000001`.\r\n\r\nThere have been requests to add the ability to infer the index name from an alias,\r\n eg LINK REDACTED\r\n\r\nWhat about something like this?\r\n\r\n```\r\nPUT _template/logs\r\n{\r\n  \"alias_patterns\": {\r\n    \"apache-logs-write\": \"apache-logs-000001\"\r\n  },\r\n  \"aliases\": {\r\n    \"apache-logs-read\": {}\r\n  }\r\n}\r\n```\r\n\r\nOr with a regex to match more widely:\r\n\r\n```\r\nPUT _template/logs\r\n{\r\n  \"alias_patterns\": {\r\n    \"/(.*-logs)-write/\": \"\\\\1-000001\"\r\n  },\r\n  \"aliases\": {\r\n    \"{index}-read\": {}\r\n  }\r\n}\r\n```\r\n\r\nor if the user wanted the date in there as well:\r\n\r\n```\r\nPUT _template/logs\r\n{\r\n  \"alias_patterns\": {\r\n    \"/(.*-logs)-write/\": \"<\\\\1-{now/d}-000001>\"\r\n  },\r\n  \"aliases\": {\r\n    \"{index}-read\": {}\r\n  }\r\n}\r\n```\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137550","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137550","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137550,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1MA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T10:50:50Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @s1monw:*\n\nI am ok with this proposal! (I still hate regexes)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137551","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137551","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137551,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1MQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T12:55:51Z","updated_at":"2018-04-25T02:02:20Z","author_association":"COLLABORATOR","body":"*Original comment by @bleskes:*\n\n@clintongormley I want to make sure I understand the entire flow:\r\n\r\n1) A user tries to create an index named `apache-logs-0001`. \r\n2) If the index exists, it fails. If it does we match template and you can add a new `alias_patterns` clause that adds aliases if the pattern matches. That section will add a `*-write` alias if the index name ends with `0001`. (PS - I don't understand how the alias name is derived from `\"/(.*-logs)-write/\"`).\r\n3) When a rollover is called, it creates a new index named `apache-logs-0002`. This one is configured by the template, but the `alias-patterns` is ignored and the alias isn't added.\r\n4) The rollover waits for the new index to be allocated and then transfer aliases. How does it know which one to move? I guess we configure another pattern on the lifecycle / API call?\r\n\r\nLast regarding your date example - I think that still has the issue of a race condition when beats are not aligned on dates? now we have two date indices ending with 0001 and both have an alias with a `-write` suffix? ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137552","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137552","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137552,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1Mg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T13:12:49Z","updated_at":"2018-04-25T02:02:21Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\n@bleskes No.\r\n\r\n* A user indexes into `apache-logs-write`.  The index doesn't exist.  The template matches the alias against `alias_patterns` and uses it to create index `apache-logs-000001` and adds the `apache-logs-write` alias to it.\r\n\r\n* When rollover is called, it create `apache-logs-000002` and uses the `index.lifecycle.rollover_alias` setting to choose which alias to rollover.\r\n\r\n> Last regarding your date example - I think that still has the issue of a race condition when beats are not aligned on dates? now we have two date indices ending with 0001 and both have an alias with a -write suffix?\r\n\r\nNo, because the beats never create the index.  They just index directly into the alias.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137553","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137553","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137553,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1Mw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T13:14:32Z","updated_at":"2018-04-25T02:02:21Z","author_association":"COLLABORATOR","body":"*Original comment by @colings86:*\n\n> When rollover is called, it create apache-logs-000002 and uses the index.lifecycle.rollover_alias setting to choose which alias to rollover.\r\n\r\nI'm confused, I thought one of the goals of doing this was to avoid us needed to have a `index.lifecycle.rollover_alias` setting?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137554","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137554","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137554,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-13T13:16:51Z","updated_at":"2018-04-25T02:02:21Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\nIt was, but see LINK REDACTED - I think it is not worth it given all the complications.\r\n\r\nThis solution still requires you to configure things in two places, but it solves both issues.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137556","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137556","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137556,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1Ng==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-02-23T17:23:27Z","updated_at":"2018-04-25T02:02:21Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\nAfter discussion with @talevy and @colings86, we've decided to simplify the `alias_patterns` proposal as follows:\r\n\r\n1. Initially, don't accept patterns, just literal 1-to-1 mappings, eg:\r\n\r\n```\r\nPUT _template/logs\r\n{\r\n  \"match_alias\": {\r\n    \"apache-logs-write\": \"apache-logs-000001\"\r\n  },\r\n  \"aliases\": {\r\n    \"apache-logs-read\": {}\r\n  }\r\n}\r\n```\r\n\r\n(we can always revisit patterns later on if we need to)\r\n\r\n2. `match_alias` takes preference over `index_patterns`\r\n3. Once we have resolved the real index name from the `match_alias`, all templates with matching `index_patterns` will be checked and applied in `order`\r\n4. A template which uses `match_alias` is not required to have an `index_patterns` section, but if it does, then the resolved index name must match one of the patterns.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137558","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137558","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137558,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU1OA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-25T14:57:24Z","updated_at":"2018-04-25T02:02:21Z","author_association":"COLLABORATOR","body":"*Original comment by @bleskes:*\n\nI spend some more days thinking about this and I'm still worried that the solution we came up with is too \"messy\":\r\n1. It adds complexity to a place which is already complex - i.e., templates. \r\n2. When an indexing requests comes and the string in the url doesn't resolve to an index or an alias,  we translate it internally to a create index request where the string is set in the index name. Based on the solution, the master will then resolve the incoming index name parameter first against `match_alias` sections in all template and then will try to resolve it as an index name. This is trappy, so we should an extra parameter to the `CreateIndexRequest` called `indexOrAlias` or some other name (all I can think of sucks). I don't think it's OK to hijack an explicit create index request in a way that will result in an index with another name being created.\r\n3. As stated, there is no guarantee that the index being created will actually end up having the alias that was used to create it. We can of course add that to the logic of \"alias matched\" templates - they should automatically add the alias to the create index.\r\n4. There are still annoying esoteric distributed  race conditions which can result in Bad Things. For example - an esoteric combination of indexing and rollover calls can cause a situation where a node which is behind on it's cluster state processing and didn't learn of the alias can translate an incoming indexing op to a create index request to the master. The master will go through the proposed flow and will create a new index named `apache-logs-00001` (as it doesn't exist due to the rollover) with the `apache-logs-write` added to it. This will cause all indexing to stop as we now have a write alias pointing at two indices. This is maybe fixable by requiring the `indexOrAlias` parameter to be also checked against existing aliases - but that's IMO another messiness in the API.\r\n\r\nI still believe that the \"read/write\" aliases is the cleanest solution we had so far but I agree it's a big change and we should all be comfortable with it if we go down that path.\r\n\r\nInstead, I would like to suggest another solution. This one is also \"messy\" but at least it is way more contained, enforced by the master, and we can easily remove it when it's not needed. We can add a parameter to the create index api called \"ensureNoExisitngAlias=apache-logs-write\" . The master will check, under the cluster state thread that there is no existing alias with that name before creating the index.  This will allow the beats to allows start by creating the `apache-logs-000001` index (which will succeed or fail with an `ResourceAlreadyExistsException` due to an existing index/alias) and then starting to index.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384137560","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384137560","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384137560,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDEzNzU2MA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-03-28T14:12:59Z","updated_at":"2018-04-25T02:02:21Z","author_association":"COLLABORATOR","body":"*Original comment by @clintongormley:*\n\n@bleskes and I had a discussion where we came up a proposal which seems better than what has been discussed previously, based on an idea that @s1monw mentioned previously:\r\n\r\nWhat if we move away from `logs-read` and `logs-write` and instead just have the `logs` alias, and one index pointed to by the `logs` alias can be marked as `is_write_index: true`?  If not specified, then the first index the alias is assigned to would default to `true`:\r\n\r\n```\r\nPUT foo1\r\n{\r\n  \"aliases\": {\r\n    \"bar\": {}\r\n  }\r\n}\r\n\r\nPUT foo2\r\n{\r\n  \"aliases\": {\r\n    \"bar\": {}\r\n  }\r\n}\r\n\r\nGET _alias/bar\r\n```\r\nwould return:\r\n```\r\n{\r\n  \"foo1\": {\r\n    \"aliases\": {\r\n      \"bar\": {\r\n        \"is_write_index\": true\r\n      }\r\n    }\r\n  },\r\n  \"foo2\": {\r\n    \"aliases\": {\r\n      \"bar\": {\r\n        \"is_write_index\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIndexing into `bar` would write to the `foo1` index.  Searching against `bar` would search both `foo1` and `foo2` indices.\r\n\r\nBeats can create the alias and assign a write index atomically with:\r\n\r\n```\r\nPUT logs-00001\r\n{\r\n  \"aliases\": {\r\n    \"logs\": {\r\n      \"is_write_index\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis would fail if either index `logs-00001` exists or if the `logs` alias exists and another index is marked as `is_write_index: true`.\r\n\r\nThe `logs` alias (or `logs-read`/`logs-write`) would no longer be mentioned in the index template (although other aliases could be specified).  The rollover API would create the new index and, once the index is green, would add the rollover alias to the new index, and mark the new index as `is_write_index: true`.\r\n\r\nBesides rollover, the other way to change which index is the write index would be with the update-aliases API:\r\n\r\n```\r\nPOST _aliases\r\n{\r\n  \"actions\": [\r\n    {\r\n      \"set_write_index\": {\r\n        \"index\": \"foo2\",\r\n        \"alias\": \"bar\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## ILM, Rollover, and Aliases\r\n\r\nILM still needs to look at the `index.lifecycle.rollover_alias` setting to know which alias to rollover.  We could move this out of the template and make it part of the create index call from Beats:\r\n\r\n```\r\nPUT logs-00001\r\n{\r\n  \"aliases\": {\r\n    \"logs\": {\r\n      \"is_write_index\": true\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"index.lifecycle.rollover_alias\": \"logs\"\r\n  }\r\n}\r\n```\r\n\r\nand the rollover API, when called by ILM, could transfer this setting too:\r\n\r\n```\r\nPOST /logs/_rollover\r\n{\r\n  \"conditions\": {\r\n    \"max_size\": \"50gb\"\r\n  },\r\n  \"settings\": {\r\n    \"index.lifecycle.rollover_alias\": \"logs\"\r\n  }\r\n}\r\n```\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384822478","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384822478","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384822478,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDgyMjQ3OA==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2018-04-26T23:52:19Z","updated_at":"2018-04-26T23:52:19Z","author_association":"CONTRIBUTOR","body":"@clintongormley I've opened https://github.com/elastic/elasticsearch/pull/30195\r\n\r\nI'd like to discuss it once more over before proceeding. For example, I do not see the immediate need for the `set_write_index` alias action. atomic swaps can be done with two `add` actions. Downside to this is that ordering matters, and one needs to know the previous write index. Rollover is fortunate in that it knows these two things, so it can swap with two `add` actions.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/384923030","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-384923030","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":384923030,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NDkyMzAzMA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2018-04-27T09:50:45Z","updated_at":"2018-04-27T09:50:45Z","author_association":"CONTRIBUTOR","body":"@talevy makes sense - I agree that we don't need it (at least for now)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/385342752","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-385342752","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":385342752,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NTM0Mjc1Mg==","user":{"login":"bleskes","id":1006375,"node_id":"MDQ6VXNlcjEwMDYzNzU=","avatar_url":"https://avatars1.githubusercontent.com/u/1006375?v=4","gravatar_id":"","url":"https://api.github.com/users/bleskes","html_url":"https://github.com/bleskes","followers_url":"https://api.github.com/users/bleskes/followers","following_url":"https://api.github.com/users/bleskes/following{/other_user}","gists_url":"https://api.github.com/users/bleskes/gists{/gist_id}","starred_url":"https://api.github.com/users/bleskes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bleskes/subscriptions","organizations_url":"https://api.github.com/users/bleskes/orgs","repos_url":"https://api.github.com/users/bleskes/repos","events_url":"https://api.github.com/users/bleskes/events{/privacy}","received_events_url":"https://api.github.com/users/bleskes/received_events","type":"User","site_admin":false},"created_at":"2018-04-30T08:51:25Z","updated_at":"2018-04-30T08:51:25Z","author_association":"MEMBER","body":"@talevy ++ , though it does depend on where we end up with the alias structures. If we end up going somewhere else than where things look to be heading now, we may need an atomic command (i.e., we need to dynamic visibility and/or late validation to make it work without a command)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/409023135","html_url":"https://github.com/elastic/elasticsearch/issues/30061#issuecomment-409023135","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30061","id":409023135,"node_id":"MDEyOklzc3VlQ29tbWVudDQwOTAyMzEzNQ==","user":{"login":"talevy","id":388837,"node_id":"MDQ6VXNlcjM4ODgzNw==","avatar_url":"https://avatars0.githubusercontent.com/u/388837?v=4","gravatar_id":"","url":"https://api.github.com/users/talevy","html_url":"https://github.com/talevy","followers_url":"https://api.github.com/users/talevy/followers","following_url":"https://api.github.com/users/talevy/following{/other_user}","gists_url":"https://api.github.com/users/talevy/gists{/gist_id}","starred_url":"https://api.github.com/users/talevy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talevy/subscriptions","organizations_url":"https://api.github.com/users/talevy/orgs","repos_url":"https://api.github.com/users/talevy/repos","events_url":"https://api.github.com/users/talevy/events{/privacy}","received_events_url":"https://api.github.com/users/talevy/received_events","type":"User","site_admin":false},"created_at":"2018-07-30T21:49:34Z","updated_at":"2018-07-30T21:49:34Z","author_association":"CONTRIBUTOR","body":"Closed by tasks in meta issue: https://github.com/elastic/elasticsearch/issues/31959","performed_via_github_app":null}]