{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30334/events","html_url":"https://github.com/elastic/elasticsearch/issues/30334","id":319533224,"node_id":"MDU6SXNzdWUzMTk1MzMyMjQ=","number":30334,"title":"RestHighLevelClient exception handling: IOException vs ElasticsearchException","user":{"login":"cdekker","id":1729963,"node_id":"MDQ6VXNlcjE3Mjk5NjM=","avatar_url":"https://avatars1.githubusercontent.com/u/1729963?v=4","gravatar_id":"","url":"https://api.github.com/users/cdekker","html_url":"https://github.com/cdekker","followers_url":"https://api.github.com/users/cdekker/followers","following_url":"https://api.github.com/users/cdekker/following{/other_user}","gists_url":"https://api.github.com/users/cdekker/gists{/gist_id}","starred_url":"https://api.github.com/users/cdekker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cdekker/subscriptions","organizations_url":"https://api.github.com/users/cdekker/orgs","repos_url":"https://api.github.com/users/cdekker/repos","events_url":"https://api.github.com/users/cdekker/events{/privacy}","received_events_url":"https://api.github.com/users/cdekker/received_events","type":"User","site_admin":false},"labels":[{"id":493198109,"node_id":"MDU6TGFiZWw0OTMxOTgxMDk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Java%20High%20Level%20REST%20Client","name":":Core/Features/Java High Level REST Client","color":"0e8a16","default":false,"description":"Expressive Java Client for Elasticsearch"},{"id":23715,"node_id":"MDU6TGFiZWwyMzcxNQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Edocs","name":">docs","color":"db755e","default":false,"description":"General docs changes"},{"id":110815527,"node_id":"MDU6TGFiZWwxMTA4MTU1Mjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/help%20wanted","name":"help wanted","color":"207de5","default":true,"description":"adoptme"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2018-05-02T12:32:13Z","updated_at":"2020-03-20T10:58:25Z","closed_at":"2018-12-04T23:31:52Z","author_association":"NONE","active_lock_reason":null,"body":"**Elasticsearch version** (`bin/elasticsearch --version`): 6.1.1\r\n\r\n**Plugins installed**: N/A\r\n\r\n**JVM version** (`java -version`): openjdk version \"1.8.0_151\"\r\n\r\n**OS version** (`uname -a` if on a Unix-like system): 4.13.16-100.fc25.x86_64\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nThe method `search` of the `RestHighLevelClient` throws a checked `IOException` which needs to be caught and handled by the caller. However, an invalid query or any problem along the way can also trigger a runtime exception `ElasticsearchException`.\r\n\r\nIs this intentional or a bug? What do the different exceptions mean and how should they be handled? Should I simply catch both and handle them both as a failure in my application? That seems rather ugly and arbitrary having to define 2 different exceptions around every call to the RestHighLevelClient.\r\n\r\nTo further complicate things, a `ResponseException` is a subclass of `IOException`. When caused by an invalid exception, this exception is caught somewhere deep inside the ES client code, and seemingly converted to an unchecked, runtime `ElasticsearchException` which is then raised up further.\r\n\r\nThe documentation, which is usually very clear about the RestHighLevelClient methods, makes no mention about proper exception handling. Could this be added at some point?\r\n\r\n**Steps to reproduce**:\r\n\r\nTake this snippet without the client creation boilerplate. `client` is a RestHighLevelClient. Make sure `index` is a pre-existing index with a numeric typed `field` name. (In my case 'example' and 'salary', respectively)\r\n\r\n```\r\nSearchSourceBuilder source = new SearchSourceBuilder();\r\n// Field is a numeric type, value is Long.MAX_VALUE + 1\r\nsource.query(QueryBuilders.rangeQuery(field).from(\"0\").to(\"9223372036854775808\"));\r\ntry {\r\n\tclient.search(new SearchRequest(new String[] { index }, source));\r\n} catch (IOException e) {\r\n\te.printStackTrace();\r\n}\r\n```\r\n\r\nThis throws an unchecked runtime `ElasticsearchException`. It feels like it is completely useless to catch the `IOException`, since that never triggers.\r\n\r\nConsider the following console log output:\r\n\r\n```\r\nException in thread \"main\" ElasticsearchStatusException[Elasticsearch exception [type=search_phase_execution_exception, reason=all shards failed]]\r\n\tat org.elasticsearch.rest.BytesRestResponse.errorFromXContent(BytesRestResponse.java:177)\r\n\tat org.elasticsearch.client.RestHighLevelClient.parseEntity(RestHighLevelClient.java:573)\r\n\tat org.elasticsearch.client.RestHighLevelClient.parseResponseException(RestHighLevelClient.java:549)\r\n\tat org.elasticsearch.client.RestHighLevelClient.performRequest(RestHighLevelClient.java:456)\r\n\tat org.elasticsearch.client.RestHighLevelClient.performRequestAndParseEntity(RestHighLevelClient.java:429)\r\n\tat org.elasticsearch.client.RestHighLevelClient.search(RestHighLevelClient.java:368)\r\n\tat ESException.main(ESException.java:21)\r\n\tSuppressed: org.elasticsearch.client.ResponseException: method [GET], host [http://localhost:9200], URI [/example/_search?typed_keys=true&ignore_unavailable=false&expand_wildcards=open&allow_no_indices=true&search_type=query_then_fetch&batched_reduce_size=512], status line [HTTP/1.1 400 Bad Request]\r\n{\"error\":{\"root_cause\":[{\"type\":\"query_shard_exception\",\"reason\":\"failed to create query: {\\n  \\\"range\\\" : {\\n    \\\"salary\\\" : {\\n      \\\"from\\\" : \\\"0\\\",\\n      \\\"to\\\" : \\\"9223372036854775808\\\",\\n      \\\"include_lower\\\" : true,\\n      \\\"include_upper\\\" : true,\\n      \\\"boost\\\" : 1.0\\n    }\\n  }\\n}\",\"index_uuid\":\"XgTO5t6OQNKmL_b4dnphyA\",\"index\":\"example\"}],\"type\":\"search_phase_execution_exception\",\"reason\":\"all shards failed\",\"phase\":\"query\",\"grouped\":true,\"failed_shards\":[{\"shard\":0,\"index\":\"example\",\"node\":\"nopt0UPpQWuew42N0ygbNg\",\"reason\":{\"type\":\"query_shard_exception\",\"reason\":\"failed to create query: {\\n  \\\"range\\\" : {\\n    \\\"salary\\\" : {\\n      \\\"from\\\" : \\\"0\\\",\\n      \\\"to\\\" : \\\"9223372036854775808\\\",\\n      \\\"include_lower\\\" : true,\\n      \\\"include_upper\\\" : true,\\n      \\\"boost\\\" : 1.0\\n    }\\n  }\\n}\",\"index_uuid\":\"XgTO5t6OQNKmL_b4dnphyA\",\"index\":\"example\",\"caused_by\":{\"type\":\"illegal_argument_exception\",\"reason\":\"Value [9223372036854775808] is out of range for a long\"}}}]},\"status\":400}\r\n\t\tat org.elasticsearch.client.RestClient$1.completed(RestClient.java:357)\r\n\t\tat org.elasticsearch.client.RestClient$1.completed(RestClient.java:346)\r\n\t\tat org.apache.http.concurrent.BasicFuture.completed(BasicFuture.java:119)\r\n\t\tat org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl.responseCompleted(DefaultClientExchangeHandlerImpl.java:177)\r\n\t\tat org.apache.http.nio.protocol.HttpAsyncRequestExecutor.processResponse(HttpAsyncRequestExecutor.java:436)\r\n\t\tat org.apache.http.nio.protocol.HttpAsyncRequestExecutor.inputReady(HttpAsyncRequestExecutor.java:326)\r\n\t\tat org.apache.http.impl.nio.DefaultNHttpClientConnection.consumeInput(DefaultNHttpClientConnection.java:265)\r\n\t\tat org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:81)\r\n\t\tat org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:39)\r\n\t\tat org.apache.http.impl.nio.reactor.AbstractIODispatch.inputReady(AbstractIODispatch.java:114)\r\n\t\tat org.apache.http.impl.nio.reactor.BaseIOReactor.readable(BaseIOReactor.java:162)\r\n\t\tat org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent(AbstractIOReactor.java:337)\r\n\t\tat org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents(AbstractIOReactor.java:315)\r\n\t\tat org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:276)\r\n\t\tat org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:104)\r\n\t\tat org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:588)\r\n\t\tat java.lang.Thread.run(Thread.java:748)\r\n\r\n```\r\n\r\nYou can see the actual checked subclass of `IOException`, `ResponseException` is surpressed and instead a runtime `ElasticsearchException` is thrown.\r\n\r\nRight now, it seems like the only way to handle exceptions properly, is very ugly, mixing both checked and unchecked exceptions together. Is there a better (intended?) way or is this a bug of the new client?\r\n\r\n```\r\ntry {\r\n\tclient.search(new SearchRequest(new String[] { index }, source));\r\n} catch (IOException | ElasticsearchException e) {\r\n\t// handle your exception\r\n}\r\n```","closed_by":{"login":"cbuescher","id":10398885,"node_id":"MDQ6VXNlcjEwMzk4ODg1","avatar_url":"https://avatars0.githubusercontent.com/u/10398885?v=4","gravatar_id":"","url":"https://api.github.com/users/cbuescher","html_url":"https://github.com/cbuescher","followers_url":"https://api.github.com/users/cbuescher/followers","following_url":"https://api.github.com/users/cbuescher/following{/other_user}","gists_url":"https://api.github.com/users/cbuescher/gists{/gist_id}","starred_url":"https://api.github.com/users/cbuescher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbuescher/subscriptions","organizations_url":"https://api.github.com/users/cbuescher/orgs","repos_url":"https://api.github.com/users/cbuescher/repos","events_url":"https://api.github.com/users/cbuescher/events{/privacy}","received_events_url":"https://api.github.com/users/cbuescher/received_events","type":"User","site_admin":false},"performed_via_github_app":null}