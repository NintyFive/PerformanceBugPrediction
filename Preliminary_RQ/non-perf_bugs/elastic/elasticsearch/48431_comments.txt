[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/545653016","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-545653016","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":545653016,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTY1MzAxNg==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T21:56:16Z","updated_at":"2019-10-23T21:56:16Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features (:Core/Features/ILM+SLM)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/545654321","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-545654321","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":545654321,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTY1NDMyMQ==","user":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T22:00:31Z","updated_at":"2019-10-23T22:00:31Z","author_association":"CONTRIBUTOR","body":"The discussion on https://github.com/elastic/elasticsearch/issues/46357 is highly related.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/545670827","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-545670827","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":545670827,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTY3MDgyNw==","user":{"login":"jordansissel","id":131818,"node_id":"MDQ6VXNlcjEzMTgxOA==","avatar_url":"https://avatars1.githubusercontent.com/u/131818?v=4","gravatar_id":"","url":"https://api.github.com/users/jordansissel","html_url":"https://github.com/jordansissel","followers_url":"https://api.github.com/users/jordansissel/followers","following_url":"https://api.github.com/users/jordansissel/following{/other_user}","gists_url":"https://api.github.com/users/jordansissel/gists{/gist_id}","starred_url":"https://api.github.com/users/jordansissel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordansissel/subscriptions","organizations_url":"https://api.github.com/users/jordansissel/orgs","repos_url":"https://api.github.com/users/jordansissel/repos","events_url":"https://api.github.com/users/jordansissel/events{/privacy}","received_events_url":"https://api.github.com/users/jordansissel/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T22:59:41Z","updated_at":"2019-10-23T22:59:41Z","author_association":"CONTRIBUTOR","body":"This comment is extremely relevant to my ILM experience: https://github.com/elastic/elasticsearch/issues/46357#issuecomment-528550620\r\n\r\nItâ€™s possible the design of ILM is incompatible with what I want to do: describe retention policy for my data.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/545733785","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-545733785","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":545733785,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTczMzc4NQ==","user":{"login":"jordansissel","id":131818,"node_id":"MDQ6VXNlcjEzMTgxOA==","avatar_url":"https://avatars1.githubusercontent.com/u/131818?v=4","gravatar_id":"","url":"https://api.github.com/users/jordansissel","html_url":"https://github.com/jordansissel","followers_url":"https://api.github.com/users/jordansissel/followers","following_url":"https://api.github.com/users/jordansissel/following{/other_user}","gists_url":"https://api.github.com/users/jordansissel/gists{/gist_id}","starred_url":"https://api.github.com/users/jordansissel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordansissel/subscriptions","organizations_url":"https://api.github.com/users/jordansissel/orgs","repos_url":"https://api.github.com/users/jordansissel/repos","events_url":"https://api.github.com/users/jordansissel/events{/privacy}","received_events_url":"https://api.github.com/users/jordansissel/received_events","type":"User","site_admin":false},"created_at":"2019-10-24T04:04:29Z","updated_at":"2019-10-24T04:04:29Z","author_association":"CONTRIBUTOR","body":"Maybe the broader question is this: Is ILM even for my use case?\r\n\r\nILM applies when the index is created, or osmething like that? Because we cannot \"update\" a policy, we are left with a very on-your-own \"change the policy\" scenario.\r\n\r\nFrom discussions today, we would need to:\r\n* Find all affected indices\r\n* Create a new policy with _just_ delete\r\n* Apply that policy to those affected indices.\r\n\r\n\"Find all affected indices\" is basically \"Query /*/_settings and select all indices with a specific lifecycle name\" -- Then apply  two steps (create a policy, apply to those indices). Now, if we look at what we're doing:\r\n\r\nFor each item in /*/_settings, If the `index.lifecycle.name` is the name of our policy needing updating, remove the policy and set the policy to the new \"delete only\" policy.\r\n\r\nBut looking at this specific scenario, \"Delete older than 30 days\". The resutl of /*/_settings gives us `index.creation_date` which we could use to select \"index.creation_date older than 30 days\" and then issue the delete call.\r\n\r\nIn these two scenarios, it's _fewer_ steps to just implement ILM myself with curl than it is to create a new policy and apply it to all affected indices, then wait for ILM to execute and hope I did it right.\r\n\r\nThis seems backwards.\r\n\r\nCompare this scenario to Curator:\r\n* We have a policy to manage properties of our indices\r\n* Curator enforces this policy every time it runs\r\n* If we change the retention period, Curator enforces this on its next run.\r\n\r\nWith Curator, the \"create a policy\" and \"change a policy\" are identical steps:\r\n* Write some config\r\n* Deploy it\r\n* Wait for Curator to run\r\n\r\nWith ILM, the \"create a policy\" and \"change a policy\" are very different steps.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/545995661","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-545995661","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":545995661,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTk5NTY2MQ==","user":{"login":"jordansissel","id":131818,"node_id":"MDQ6VXNlcjEzMTgxOA==","avatar_url":"https://avatars1.githubusercontent.com/u/131818?v=4","gravatar_id":"","url":"https://api.github.com/users/jordansissel","html_url":"https://github.com/jordansissel","followers_url":"https://api.github.com/users/jordansissel/followers","following_url":"https://api.github.com/users/jordansissel/following{/other_user}","gists_url":"https://api.github.com/users/jordansissel/gists{/gist_id}","starred_url":"https://api.github.com/users/jordansissel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordansissel/subscriptions","organizations_url":"https://api.github.com/users/jordansissel/orgs","repos_url":"https://api.github.com/users/jordansissel/repos","events_url":"https://api.github.com/users/jordansissel/events{/privacy}","received_events_url":"https://api.github.com/users/jordansissel/received_events","type":"User","site_admin":false},"created_at":"2019-10-24T16:22:43Z","updated_at":"2019-10-24T16:22:43Z","author_association":"CONTRIBUTOR","body":"This is a blocker for us using ILM beyond \"hot phase rollover\"","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/546035685","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-546035685","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":546035685,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NjAzNTY4NQ==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-10-24T18:06:13Z","updated_at":"2019-10-24T18:06:13Z","author_association":"MEMBER","body":"I believe the problem stems from a difference in execution style between Curator and ILM. I have an illustration that might help think about the problem.\r\n\r\nIn ILM. You can think of an ILM policy as a factory assembly line (pardon my poor ASCII art)\r\n\r\n```\r\n\r\n           ___       ___       ___\r\nStart --> | 1 | --> | 2 | --> | 3 | --> Completed\r\n           ---       ---       ---\r\n\r\n```\r\n\r\nWhen an index is first assigned a policy, it begins at the \"start\" and starts executing actions (numbered 1, 2, and 3 above). These actions may be quick, or they may block for a long time (such as waiting for the `min_age` to be met on and index before proceeding). When an index has gone through all of the actions, it moves to the \"completed\" terminal step.\r\n\r\nCurator on the other hand, can be thought of as a list of `if` statements that check the age of the index every time it's run. In some bad pseudo-code it would look something like:\r\n\r\n```js\r\nindex.rolloverIfNeeded()\r\n\r\n// 1\r\nif (index.age() > \"5d\" && index.needForceMerge()) {\r\n  index.forceMerge()\r\n}\r\n\r\n// 2\r\nif (index.age() > \"30d\" && index.isNotFrozen()) {\r\n  index.freeze()\r\n}\r\n\r\n// 3\r\nif (index.age() > \"60d\") {\r\n  index.moveToColdNodes()\r\n}\r\n```\r\n\r\nNow. Let's tackle the scenario where you want to add a fourth step, a \"delete\" step (but it could be any step). In Curator's case this looks like adding an additional `if` condition to the list of conditions to be checked *every time curator runs*:\r\n\r\n``` js\r\n// 4\r\nif (index.age() > \"90d\") {\r\n  index.delete()\r\n}\r\n```\r\n\r\nFor ILM however, it's a little different. If we change the policy to add the `delete` action. It's like updating a factory assemble line to add a new machineâ€”**all new indices are going to use the new pipeline, but all the previous indices already finished the pipeline**. So the indices already in the terminal/completed step won't be deleted.\r\n\r\nIn our industrial analogy, if we add a machine at the end of the car assembly line to paint the car yellow, all of the previously assembled cars don't immediately turn yellow.\r\n\r\nCurator, on the other hand, is going to all the cars ever created, checking whether they meet the criteria to be painted yellow, and painting them yellow, regardless of what other steps they have previously run or not run.\r\n\r\n--------------------------------------\r\n\r\nOkay, hopefully that clarifies the difference in execution model between the two. There are two main ways to tackle the cognitive mismatch this leads to.\r\n\r\n1. We can change ILM's execution model to match something like Curator. This would be a lot of work and a big breaking change, but it's always an option regardless of how good or bad we think it would be.\r\n\r\n2. Make policy execution idempotent. We already started this with #47324 where we skip rolling over indices that have already been rolled over. This would allow use to \"re-apply\" a policy to an index that was in the completed state, and have it re-run through the steps, skipping the ones that were already executed.\r\n\r\nThere are probably other ways to tackle this too, so feel free to leave ideas. This is just the start of a discussion to hopefully frame the mismatch in execution models that we've seen to cause some incorrect assumptions.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/546445585","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-546445585","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":546445585,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NjQ0NTU4NQ==","user":{"login":"jordansissel","id":131818,"node_id":"MDQ6VXNlcjEzMTgxOA==","avatar_url":"https://avatars1.githubusercontent.com/u/131818?v=4","gravatar_id":"","url":"https://api.github.com/users/jordansissel","html_url":"https://github.com/jordansissel","followers_url":"https://api.github.com/users/jordansissel/followers","following_url":"https://api.github.com/users/jordansissel/following{/other_user}","gists_url":"https://api.github.com/users/jordansissel/gists{/gist_id}","starred_url":"https://api.github.com/users/jordansissel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordansissel/subscriptions","organizations_url":"https://api.github.com/users/jordansissel/orgs","repos_url":"https://api.github.com/users/jordansissel/repos","events_url":"https://api.github.com/users/jordansissel/events{/privacy}","received_events_url":"https://api.github.com/users/jordansissel/received_events","type":"User","site_admin":false},"created_at":"2019-10-25T17:40:00Z","updated_at":"2019-10-25T17:40:00Z","author_association":"CONTRIBUTOR","body":"This factory/cars metaphor is a good one. I suppose in this model, we've \"finished\" making the cars, but there's a defect, and now we need to issue a recall to apply a correction of some kind.\r\n\r\nTo do a recall with ILM, we're on our own (Find all affected indices ourselves, carefully apply a new policy, etc).\r\n\r\nTo do a recall with Curator, we just update the curator config.\r\n\r\nThe way I'm thinking about this is that I am not particularly curious about the implementation details. I want a way to describe my retention policy, \"Delete data older than 30 days\" and implementing this with ILM is only possible if we never make mistakes or never change our minds.\r\n\r\nScenarios:\r\n\r\n* We forgot to set \"Delete after 30 days\". Our cluster is now full (all disks are rejecting allocation past the low disk watermark).  How do we correct this?\r\n  * With ILM: We have to do a bunch of work and discovery. We craft a _new_ policy that only mentions \"delete after 30 days\", custom-code some way to identify affected indices, delete the old policy on these indices and apply the new policy?\r\n  * With Curator: We tell curator to delete everything older than 30 days, and it does.\r\n\r\n* We change our minds and want to \"Delete after 60 days\". (was 30)\r\n  * With ILM: Same complex steps as previous scenario, otherwise our existing \"Marked for deletion after 30 days\" will be deleted after 30 days.\r\n  * With Curator: We tell curator to delete everything older than 60 days, and it does.\r\n\r\n* We change our minds and want to \"Delete after 15 days\" (was 30)\r\n  * With ILM: Same complex steps as previous scenario, because we need those indices older than 15 days now to be deleted.\r\n  * With Curator: We tell curator to delete everything older than 15 days, and it does.\r\n\r\nMy illustration is to highlight that Curator allows me to describe my objectives and it implements my objectives. With ILM, unless I am perfect in describing my objectives the first time, then I have to do a bunch of work that might break depending on the phase ILM is in.\r\n\r\nThe concept of \"phases\" a specific set of constants (hot, warm, delete, etc) is a state machine I must be completely aware of whenever changing ILM settings -- If I'm in the middle of the machine (between \"hot\" and \"completed\" ?), changing ILM settings will depend on the current state. If I'm updating a phase configuration _after_ ILM has executed that phase, I have to find-and-replace all instances of that ILM policy myself, based on what we've discussed so far, right?\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/546454516","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-546454516","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":546454516,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NjQ1NDUxNg==","user":{"login":"jordansissel","id":131818,"node_id":"MDQ6VXNlcjEzMTgxOA==","avatar_url":"https://avatars1.githubusercontent.com/u/131818?v=4","gravatar_id":"","url":"https://api.github.com/users/jordansissel","html_url":"https://github.com/jordansissel","followers_url":"https://api.github.com/users/jordansissel/followers","following_url":"https://api.github.com/users/jordansissel/following{/other_user}","gists_url":"https://api.github.com/users/jordansissel/gists{/gist_id}","starred_url":"https://api.github.com/users/jordansissel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordansissel/subscriptions","organizations_url":"https://api.github.com/users/jordansissel/orgs","repos_url":"https://api.github.com/users/jordansissel/repos","events_url":"https://api.github.com/users/jordansissel/events{/privacy}","received_events_url":"https://api.github.com/users/jordansissel/received_events","type":"User","site_admin":false},"created_at":"2019-10-25T18:05:42Z","updated_at":"2019-10-25T18:14:43Z","author_association":"CONTRIBUTOR","body":"> adding an additional if condition to the list of conditions to be checked every time curator runs:\r\n\r\nThe way this is italicized around \"every time curator runs\" makes me think there's some problem with that?\r\n\r\nBack to ILM and thinking out loud about how to make this repair, \"I forgot to implement 30 days retention\"\r\n\r\n```bash\r\n# Get a list of indices affected:\r\ncurl -s --cacert <(echo $cert) --resolve foo-es:9200:127.0.0.1 -u elastic:$pass https://foo-es:9200/*/_settings | jq -r '.[] | select(.settings.index.lifecycle.name == \"infosec-beats\") | .settings.index.provided_name'\r\n```\r\n\r\nWith this list, we need to update each index's lifecycle name, right?\r\n\r\nMy list of indices is too long for a single request:\r\n\r\n```\r\n% affected_indices=\"$(curl -s --cacert <(echo $cert) --resolve foo-es:9200:127.0.0.1 -u elastic:$pass https://foo-es:9200/*/_settings | jq -r '.[] | select(.settings.index.lifecycle.name == \"infosec-beats\") | .settings.index.provided_name' | tr '\\n' ',' | sed -e 's/,$//')\"\r\n\r\n# Let's try asking for /{index}/_ilm/explain for all indices found above:\r\n% curl -s --cacert <(echo $cert) --resolve foo-es:9200:127.0.0.1 -u elastic:$pass https://foo-es:9200/${affected_indices}/_ilm/explain\r\n{\"error\":{\"root_cause\":[{\"type\":\"too_long_frame_exception\",\"reason\":\"An HTTP line is larger than 4096 bytes.\"}],\"type\":\"too_long_frame_exception\",\"reason\":\"An HTTP line is larger than 4096 bytes.\"},\"status\":400}\r\n```\r\n\r\nOk, so we have to make request lines shorter. Let's make the index list 2000 chars long each.\r\n\r\n```\r\n% curl -s --cacert <(echo $cert) --resolve foo-es:9200:127.0.0.1 -u elastic:$pass https://foo-es:9200/*/_settings | jq -r '.[] | select(.settings.index.lifecycle.name == \"infosec-beats\") | .settings.index.provided_name' | fmt -w 2000 | tr ' ' ','\r\nauditbeat-6.5.4-2019.09.10-000127,auditbeat-6.5.4-2019.09.1...\r\nauditbeat-6.5.4-2019.09.10-000119,auditbeat-6.5.4-2019.09.10-000081,auditbea...\r\n```\r\n\r\nWith this, we replace the policy, right?\r\n\r\n```\r\n# Delete the current policy\r\ncurl -s --cacert <(echo $cert) --resolve foo-es:9200:127.0.0.1 -u elastic:$pass https://foo-es:9200/*/_settings | jq -r '.[] | select(.settings.index.lifecycle.name == \"infosec-beats\") | .settings.index.provided_name' | fmt -w 2000 | tr ' ' ',' | xargs sh -xc 'curl --whatever-flags-go-here -XDELETE https://foo-es:9200/$1/_settings -d \"{ \\\"settings\\\": { \\\"index.lifecycle.name\\\": null } }\"' -\r\n\r\n# Add our new policy that has only a \"delete\" phase to avoid other breakages\r\ncurl -s --cacert <(echo $cert) --resolve foo-es:9200:127.0.0.1 -u elastic:$pass https://foo-es:9200/*/_settings | jq -r '.[] | select(.settings.index.lifecycle.name == \"infosec-beats\") | .settings.index.provided_name' | fmt -w 2000 | tr ' ' ',' | xargs sh -xc 'curl --whatever-flags-go-here -XDELETE https://foo-es:9200/$1/_settings -d \"{ \\\"settings\\\": { \\\"index.lifecycle.name\\\": \"new-policy\" } }\"' -\r\n```\r\n\r\nI haven't tesetd the actual \"delete and apply new policy\" but the \"Find affected indices\" and \"split requests t stay within ES's max request length boundary\" parts work.\r\n\r\nIs this what you expect for the repair steps?\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/547259963","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-547259963","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":547259963,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NzI1OTk2Mw==","user":{"login":"jordansissel","id":131818,"node_id":"MDQ6VXNlcjEzMTgxOA==","avatar_url":"https://avatars1.githubusercontent.com/u/131818?v=4","gravatar_id":"","url":"https://api.github.com/users/jordansissel","html_url":"https://github.com/jordansissel","followers_url":"https://api.github.com/users/jordansissel/followers","following_url":"https://api.github.com/users/jordansissel/following{/other_user}","gists_url":"https://api.github.com/users/jordansissel/gists{/gist_id}","starred_url":"https://api.github.com/users/jordansissel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordansissel/subscriptions","organizations_url":"https://api.github.com/users/jordansissel/orgs","repos_url":"https://api.github.com/users/jordansissel/repos","events_url":"https://api.github.com/users/jordansissel/events{/privacy}","received_events_url":"https://api.github.com/users/jordansissel/received_events","type":"User","site_admin":false},"created_at":"2019-10-29T05:16:17Z","updated_at":"2019-10-29T05:16:17Z","author_association":"CONTRIBUTOR","body":"Any thoughts?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/547482929","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-547482929","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":547482929,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NzQ4MjkyOQ==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-10-29T15:34:58Z","updated_at":"2019-10-29T15:37:29Z","author_association":"MEMBER","body":"> We forgot to set \"Delete after 30 days\". Our cluster is now full (all disks are rejecting allocation past the low disk watermark). How do we correct this?\r\n\r\n> With ILM: We have to do a bunch of work and discovery. We craft a new policy that only mentions \"delete after 30 days\", custom-code some way to identify affected indices, delete the old policy on these indices and apply the new policy?\r\n\r\nNot necessarily, in your case, you delete indices that are older than 30 days and change the policy so future indices get automatically deleted after 30 days.\r\n\r\n> We change our minds and want to \"Delete after 60 days\". (was 30)\r\n> With ILM: Same complex steps as previous scenario, otherwise our existing \"Marked for deletion after 30 days\" will be deleted after 30 days.\r\n\r\nNo, for this you can change the policy, no need for manual discover or work.\r\n\r\n> We change our minds and want to \"Delete after 15 days\" (was 30)\r\n> With ILM: Same complex steps as previous scenario, because we need those indices older than 15 days now to be deleted.\r\n\r\nNo, for this you can change the policy from \"30d\" to \"15d\".\r\n\r\n> If I'm updating a phase configuration after ILM has executed that phase, I have to find-and-replace all instances of that ILM policy myself, based on what we've discussed so far, right?\r\n\r\nIf you want to perform an action after ILM has executed that phase, then you'll have to do those actions manually. In your previous examples, however, changing the `min_age` for deletion doesn't mean you need to take any manual action (other than changing the policy). It's only in the scenario that you previously had *no* deletion and you want to add deletion that you'd have to take manual action.\r\n\r\n>> adding an additional if condition to the list of conditions to be checked every time curator runs:\r\n\r\n> The way this is italicized around \"every time curator runs\" makes me think there's some problem with that?\r\n\r\nNone other than emphasizing the difference in execution models.\r\n\r\n> Back to ILM and thinking out loud about how to make this repair, \"I forgot to implement 30 days retention\"\r\n> ... lots of steps ...\r\n> Is this what you expect for the repair steps?\r\n\r\nThis is really complicating it I think. Here's how to get a list of indices to delete and delete them:\r\n\r\n``` sh\r\ncurl -u elastic:password -s \"localhost:9200/_cat/indices?h=i,cd&format=json\" | jq 'if 1572362742828 - (.[].cd|tonumber) >= 2592000000 then .[].i else \"\" end' | fgrep -v \"\\\"\\\"\"\r\n```\r\n\r\nReplace 1572362742828 above with the `System.currentTimeMillis()` equivalent (2592000000 is 30 days in milliseconds, so replace it with whatever age you want) of whenever you run it. That will spit out a list of indices to be deleted. You can pipe it to xargs or do a shell `for i in $(<that command>); do curl -XDELETE localhost:9200/$i; done` to delete those indices.\r\n\r\nOne quick side note (not related to ILM), don't use `index.provided_name` when gathering a list of indices, since this will include any `<` and `>` for date math indices that isn't actually part of the name of the index.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/547509016","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-547509016","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":547509016,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NzUwOTAxNg==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2019-10-29T16:24:31Z","updated_at":"2019-10-29T16:24:31Z","author_association":"MEMBER","body":"Okay, that got a little bit on a tangent focusing solely on deletions. There are other considerations we should address, specifically:\r\n\r\nHow do we address the disconnect between the execution model of ILM and the model that users expect?\r\n\r\nI've been thinking about this recently and have a few half-formed ideas to brainstorm around. One would be that we stored the previously executed steps somewhere in the index lifecycle state. This would allow us to \"re-apply\" a policy idempotently, skipping the steps that had already been executed. Then a user could update a policy to add a delete phase and have the other steps that had been performed be skipped.\r\n\r\nThere are some downsides to this, especially when it comes to policies without a delete, we wouldn't want to allocate a bunch of indices to a warm node, only to turn around and immediately move them to cold nodes just because a user happened to add both allocation steps to a policy that was already complete.\r\n\r\nAnother idea would be to execute the policy of an index in the \"complete\" phase backwards when changes to the policy happened, allowing us to immediately execute a 'delete' action if one were added to a policy where indices had already finished execution.\r\n\r\nNeither of these are fully fleshed out, just some ideas to get us started on brainstorming. Feel free to suggest other ideas for our discussion.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/584866260","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-584866260","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":584866260,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NDg2NjI2MA==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2020-02-11T21:39:28Z","updated_at":"2020-05-27T04:16:19Z","author_association":"MEMBER","body":"I believe this has been resolved by #50820 and #51631, so I'm going to close this for now. Let me know if I'm mistaken and we can re-open it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634414662","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-634414662","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":634414662,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDQxNDY2Mg==","user":{"login":"JacksonHacker","id":19247007,"node_id":"MDQ6VXNlcjE5MjQ3MDA3","avatar_url":"https://avatars2.githubusercontent.com/u/19247007?v=4","gravatar_id":"","url":"https://api.github.com/users/JacksonHacker","html_url":"https://github.com/JacksonHacker","followers_url":"https://api.github.com/users/JacksonHacker/followers","following_url":"https://api.github.com/users/JacksonHacker/following{/other_user}","gists_url":"https://api.github.com/users/JacksonHacker/gists{/gist_id}","starred_url":"https://api.github.com/users/JacksonHacker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JacksonHacker/subscriptions","organizations_url":"https://api.github.com/users/JacksonHacker/orgs","repos_url":"https://api.github.com/users/JacksonHacker/repos","events_url":"https://api.github.com/users/JacksonHacker/events{/privacy}","received_events_url":"https://api.github.com/users/JacksonHacker/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T04:03:05Z","updated_at":"2020-05-27T04:03:05Z","author_association":"NONE","body":"> I believe this has been resolved by #50280 and #51631, so I'm going to close this for now. Let me know if I'm mistaken and we can re-open it.\r\n\r\nNot [#50280](https://github.com/elastic/elasticsearch/pull/50280). It's [#50820](https://github.com/elastic/elasticsearch/pull/50820)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634417827","html_url":"https://github.com/elastic/elasticsearch/issues/48431#issuecomment-634417827","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/48431","id":634417827,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDQxNzgyNw==","user":{"login":"dakrone","id":19060,"node_id":"MDQ6VXNlcjE5MDYw","avatar_url":"https://avatars3.githubusercontent.com/u/19060?v=4","gravatar_id":"","url":"https://api.github.com/users/dakrone","html_url":"https://github.com/dakrone","followers_url":"https://api.github.com/users/dakrone/followers","following_url":"https://api.github.com/users/dakrone/following{/other_user}","gists_url":"https://api.github.com/users/dakrone/gists{/gist_id}","starred_url":"https://api.github.com/users/dakrone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dakrone/subscriptions","organizations_url":"https://api.github.com/users/dakrone/orgs","repos_url":"https://api.github.com/users/dakrone/repos","events_url":"https://api.github.com/users/dakrone/events{/privacy}","received_events_url":"https://api.github.com/users/dakrone/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T04:16:36Z","updated_at":"2020-05-27T04:16:36Z","author_association":"MEMBER","body":"@JacksonHacker whoops yep, thanks for pointing that out, I edited my comment.","performed_via_github_app":null}]