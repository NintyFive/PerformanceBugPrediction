{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/8248","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8248/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8248/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8248/events","html_url":"https://github.com/elastic/elasticsearch/issues/8248","id":47005239,"node_id":"MDU6SXNzdWU0NzAwNTIzOQ==","number":8248,"title":"Make ParseContext's IndexQueryParserService accessible","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"labels":[{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":132222001,"node_id":"MDU6TGFiZWwxMzIyMjIwMDE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.4.0","name":"v1.4.0","color":"dddddd","default":false,"description":null},{"id":127700367,"node_id":"MDU6TGFiZWwxMjc3MDAzNjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.5.0","name":"v1.5.0","color":"dddddd","default":false,"description":null},{"id":76184120,"node_id":"MDU6TGFiZWw3NjE4NDEyMA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v2.0.0-beta1","name":"v2.0.0-beta1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2014-10-28T09:34:58Z","updated_at":"2014-11-03T11:00:39Z","closed_at":"2014-10-28T12:33:40Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I have the following problem writing an own query parser from my own package:\n\nMy query parser has to internally create another Elasticsaearch query and parse it (which is actually a workaround: I need to create a MoreLikeThis query, but I dont want to replicate all code to generate the native Lucene Query). So I use MoreLikeThisQueryBuilder to create a BytesReference of the newly constructed query, so I can parse it to a Lucene Query.\n\nOf course I cannot do the parseContext.parseInnerQuery, because the newly constructed query is in a separate BytesReference. Instead I do the same trick like WrappedQuery:\n\n```\n    final BytesReference querySource = QueryBuilders.moreLikeThisQuery(FIELDNAME_MLT)\n      .ids(Integer.toString(id))\n      .include(true)\n      .percentTermsToMatch(.5f)\n      .minTermFreq(0)\n      .minDocFreq(5)\n      .maxQueryTerms(25)\n      .boostTerms(1.0f)\n      .buildAsBytes();\n    // hack for parsing this as inner query\n    try (XContentParser qSourceParser = XContentFactory.xContent(querySource).createParser(querySource)) {\n      final QueryParseContext context = cloneParseContext();\n      context.reset(qSourceParser);\n      return context.parseInnerQuery();\n    } catch (IOException ioe) {\n      throw new AssertionError(\"IOException cannot happen here.\", ioe);\n    }\n```\n\nThe problem is now: I need to clone the QueryParseContext. WrappedQueryParser just creates a new instance, but it needs the index name (easy to get) and IndexQueryParserService. Unfortunately, the latter is package private.\n\nI would be happy if this could be solved. As this above stuff is used quite often, I think the best solution would be to allow to clone ParseContext or add a method to create a new one from an existion one (copy constructor). The other way would be to make the field accessible.\n\nThe current workaround is to use reflection to get the field...\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}