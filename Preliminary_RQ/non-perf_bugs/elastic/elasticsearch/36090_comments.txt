[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/443064234","html_url":"https://github.com/elastic/elasticsearch/issues/36090#issuecomment-443064234","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36090","id":443064234,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MzA2NDIzNA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-11-30T02:04:50Z","updated_at":"2018-11-30T02:04:50Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-analytics-geo","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/443236707","html_url":"https://github.com/elastic/elasticsearch/issues/36090#issuecomment-443236707","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36090","id":443236707,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MzIzNjcwNw==","user":{"login":"centic9","id":548322,"node_id":"MDQ6VXNlcjU0ODMyMg==","avatar_url":"https://avatars0.githubusercontent.com/u/548322?v=4","gravatar_id":"","url":"https://api.github.com/users/centic9","html_url":"https://github.com/centic9","followers_url":"https://api.github.com/users/centic9/followers","following_url":"https://api.github.com/users/centic9/following{/other_user}","gists_url":"https://api.github.com/users/centic9/gists{/gist_id}","starred_url":"https://api.github.com/users/centic9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/centic9/subscriptions","organizations_url":"https://api.github.com/users/centic9/orgs","repos_url":"https://api.github.com/users/centic9/repos","events_url":"https://api.github.com/users/centic9/events{/privacy}","received_events_url":"https://api.github.com/users/centic9/received_events","type":"User","site_admin":false},"created_at":"2018-11-30T15:22:21Z","updated_at":"2018-11-30T15:22:21Z","author_association":"CONTRIBUTOR","body":"Some additional information:\r\n\r\n**GC during running the test**:\r\n\r\nBlue line is allocated memory, red bars is suspension time. \r\n\r\nThis indicates that a lot of memory is held:\r\n\r\n![image](https://user-images.githubusercontent.com/548322/49296107-a937d080-f4b7-11e8-9e83-5e6076165d53.png)\r\n\r\n**Allocated memory**:\r\n\r\nThese are the objects that hold onto most of the memory when the query is executed, some hold onto others, so the overall consumed memory is still somewhere between 500mb and 600mb:\r\n\r\n![image](https://user-images.githubusercontent.com/548322/49296281-19deed00-f4b8-11e8-9b90-cacc65388003.png)\r\n\r\n**Allocation location**:\r\n\r\nThe memory is actually held onto by DefaultSearchContext.clearables, where 9000 items are held with Lifetime PHASE, this seems to cause the large memory requirement:\r\n\r\n![image](https://user-images.githubusercontent.com/548322/49296526-cf11a500-f4b8-11e8-8e07-201c34fd8e93.png)\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/443253888","html_url":"https://github.com/elastic/elasticsearch/issues/36090#issuecomment-443253888","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36090","id":443253888,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MzI1Mzg4OA==","user":{"login":"centic9","id":548322,"node_id":"MDQ6VXNlcjU0ODMyMg==","avatar_url":"https://avatars0.githubusercontent.com/u/548322?v=4","gravatar_id":"","url":"https://api.github.com/users/centic9","html_url":"https://github.com/centic9","followers_url":"https://api.github.com/users/centic9/followers","following_url":"https://api.github.com/users/centic9/following{/other_user}","gists_url":"https://api.github.com/users/centic9/gists{/gist_id}","starred_url":"https://api.github.com/users/centic9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/centic9/subscriptions","organizations_url":"https://api.github.com/users/centic9/orgs","repos_url":"https://api.github.com/users/centic9/repos","events_url":"https://api.github.com/users/centic9/events{/privacy}","received_events_url":"https://api.github.com/users/centic9/received_events","type":"User","site_admin":false},"created_at":"2018-11-30T16:12:49Z","updated_at":"2018-11-30T16:12:49Z","author_association":"CONTRIBUTOR","body":"Running the aggregation with execution_hint: \"map\" makes it work in 6, however this would probably have a large performance impact.\r\n\r\nRunning with \"global_ordinals_low_cardinality\" (which is gone in newer versions), leads to a breaker kicking in: \r\n\r\n`CircuitBreakingException[[request] Data too large, data for [<reused_arrays>] would be [304338408/290.2mb], which is larger than the limit of [304113254/290mb]]`","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/445074259","html_url":"https://github.com/elastic/elasticsearch/issues/36090#issuecomment-445074259","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36090","id":445074259,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0NTA3NDI1OQ==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2018-12-06T23:58:50Z","updated_at":"2018-12-06T23:58:50Z","author_association":"MEMBER","body":"Just wanted to leave a note that I've replicated this locally.  Thanks for the detailed writeup and charts!  Definitely made it easier to verify :)\r\n\r\nI chatted briefly with @jpountz about the issue and he said it may be due to Lucene no longer caching doc-value readers.  Previously doc-value readers were stateless, which allowed Lucene to cache them on a per-thread basis.\r\n\r\nStarting in Lucene 7 (6.x+ in ES) the readers moved to an iterator model and are stateful, meaning Lucene no longer caches them.  With a deep aggregation like that we may be creating thousands or more iterators, leading to the memory issue.\r\n\r\nI'll wait to see if @jpountz has an opinion, but I think it makes sense to see if the situation can be improved (either in ES or Lucene).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/510956219","html_url":"https://github.com/elastic/elasticsearch/issues/36090#issuecomment-510956219","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36090","id":510956219,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMDk1NjIxOQ==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2019-07-12T16:49:48Z","updated_at":"2019-07-12T16:49:48Z","author_association":"MEMBER","body":"https://github.com/elastic/elasticsearch/pull/43091 and https://github.com/elastic/elasticsearch/pull/43339 recently merged, which should help address the memory regressions seen in this ticket.\r\n\r\nI'm going to close this as the underlying cause (deeply nested aggregations generating many iterators) is unlikely to get better past the optimizations that the two above PRs made.","performed_via_github_app":null}]