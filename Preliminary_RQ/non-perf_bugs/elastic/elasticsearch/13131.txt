{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/13131","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13131/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13131/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13131/events","html_url":"https://github.com/elastic/elasticsearch/issues/13131","id":103386474,"node_id":"MDU6SXNzdWUxMDMzODY0NzQ=","number":13131,"title":"Native (search) script parameters are being overwritten (scripted_metric agg)","user":{"login":"whitfin","id":5376378,"node_id":"MDQ6VXNlcjUzNzYzNzg=","avatar_url":"https://avatars0.githubusercontent.com/u/5376378?v=4","gravatar_id":"","url":"https://api.github.com/users/whitfin","html_url":"https://github.com/whitfin","followers_url":"https://api.github.com/users/whitfin/followers","following_url":"https://api.github.com/users/whitfin/following{/other_user}","gists_url":"https://api.github.com/users/whitfin/gists{/gist_id}","starred_url":"https://api.github.com/users/whitfin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/whitfin/subscriptions","organizations_url":"https://api.github.com/users/whitfin/orgs","repos_url":"https://api.github.com/users/whitfin/repos","events_url":"https://api.github.com/users/whitfin/events{/privacy}","received_events_url":"https://api.github.com/users/whitfin/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2015-08-26T23:27:22Z","updated_at":"2015-08-28T14:25:28Z","closed_at":"2015-08-28T12:16:01Z","author_association":"NONE","active_lock_reason":null,"body":"**Disclaimer**: apologies in advance if it turns out I just did something stupid, but I've been banging my head against it and it makes no sense to me.\n\nGot a weird one here. I'm writing a simple native script for the `scripted_metric` aggregation to group `DocLookup` objects by the `_parent` field of the documents being used. The problem is that the `_agg` object (part of my `params`) is being overwritten somewhere (i.e. not by myself). The fact I know there's a bug here is because if I look at the result set, it tells me that I have **4** `install` events... but I _only_ have **3** of them stored inside Elasticsearch. The keys seem to be arbitrarily re-assigned to random values.\n\nAs part of my investigation, I decided to log the state of a specific `_parent` key after each run of the script (the `debug_parent` field). Here's what came back:\n\n```\n/* 'install' is added to a list assigned to the parent */\n[2015-08-27 00:05:22,185][INFO ][mapper                   ] adding [install] to d04caf67-8f6b-49fc-a449-91f3192748c7\n/* so this is immediately after on the same run() call */\n[2015-08-27 00:05:22,187][INFO ][mapper                   ] [install]\n/* on subsequent calls, it's gone, other stuff is there */\n[2015-08-27 00:05:22,188][INFO ][mapper                   ] [node-stats-cpu]\n[2015-08-27 00:05:22,188][INFO ][mapper                   ] [node-stats-memory]\n[2015-08-27 00:05:22,189][INFO ][mapper                   ] [foreground]\n[2015-08-27 00:05:22,189][INFO ][mapper                   ] [background]\n```\n\nSo you can see that something is clearly overwriting my previously stored event names, but the Java should be appending to the previously stored list. \n\nHere is my native script (it's for a mapping phase).\n\n``` java\npublic class ParentContextProvider implements NativeScriptFactory {\n\n    @Override\n    public ExecutableScript newScript(@Nullable Map<String, Object> params) {\n\n        final HashMap<String, List<DocLookup>> _agg\n                = (HashMap<String, List<DocLookup>>) params.get(\"_agg\");\n\n        final String debug_parent = \"d04caf67-8f6b-49fc-a449-91f3192748c7\";\n\n        final Logger logger = Logger.getLogger(\"mapper\");\n\n        return new AbstractSearchScript() {\n\n            @Override\n            public Object run() {\n                DocLookup doc = doc();\n\n                // only interested in docs with parents\n                if (doc.containsKey(\"_parent\")) {\n\n                    // pull out the parent value of the DocLookup object\n                    String parent = getStringDocValue(doc, \"_parent\");\n\n                    // Retrieve either the previous list, or a new and empty list\n                    List<DocLookup> tuples = _agg.getOrDefault(parent, Lists.newArrayList());\n\n                    // add the doc to the list\n                    tuples.add(doc);\n\n                    // if it's the debug parent, log out what we added\n                    if(debug_parent.equals(parent)) {\n                        logger.info(\"adding \" + doc.get(\"event\") + \" to \" + parent);\n                    }\n\n                    // overwrite the list in the _agg param\n                    _agg.put(parent, tuples);\n                }\n\n                // if the _agg has our debug parent\n                if(_agg.get(debug_parent) != null) {\n\n                    // create a string joiner\n                    StringJoiner s = new StringJoiner(\",\");\n\n                    // add every 'event' to the string\n                    _agg.get(debug_parent).forEach(e -> s.add(e.get(\"event\").toString()));\n\n                     // log the string, this should be all events for that _parent\n                     logger.info(s.toString());\n                }\n\n                return _agg;\n            }\n\n            private String getStringDocValue(DocLookup doc, String key){\n                return ((ScriptDocValues.Strings) doc.get(key)).getValue();\n            }\n        };\n\n    }\n\n}\n```\n","closed_by":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"performed_via_github_app":null}