[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67812762","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67812762","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67812762,"node_id":"MDEyOklzc3VlQ29tbWVudDY3ODEyNzYy","user":{"login":"sweetest","id":6868049,"node_id":"MDQ6VXNlcjY4NjgwNDk=","avatar_url":"https://avatars0.githubusercontent.com/u/6868049?v=4","gravatar_id":"","url":"https://api.github.com/users/sweetest","html_url":"https://github.com/sweetest","followers_url":"https://api.github.com/users/sweetest/followers","following_url":"https://api.github.com/users/sweetest/following{/other_user}","gists_url":"https://api.github.com/users/sweetest/gists{/gist_id}","starred_url":"https://api.github.com/users/sweetest/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sweetest/subscriptions","organizations_url":"https://api.github.com/users/sweetest/orgs","repos_url":"https://api.github.com/users/sweetest/repos","events_url":"https://api.github.com/users/sweetest/events{/privacy}","received_events_url":"https://api.github.com/users/sweetest/received_events","type":"User","site_admin":false},"created_at":"2014-12-22T08:27:18Z","updated_at":"2014-12-22T08:27:18Z","author_association":"CONTRIBUTOR","body":"I've checkout the current master branch and found this in PercolatorQueriesRegistry.java\n\n```\nprivate Query parseQuery(String type, XContentParser parser) {\n    String[] previousTypes = null;\n    if (type != null) {\n        QueryParseContext.setTypesWithPrevious(new String[]{type});\n    }\n    QueryParseContext context = cache.get();\n    try {\n        context.reset(parser);\n        // This means that fields in the query need to exist in the mapping prior to registering this query\n        // The reason that this is required, is that if a field doesn't exist then the query assumes defaults, which may be undesired.\n        //\n        // Even worse when fields mentioned in percolator queries do go added to map after the queries have been registered\n        // then the percolator queries don't work as expected any more.\n        //\n        // Query parsing can't introduce new fields in mappings (which happens when registering a percolator query),\n        // because field type can't be inferred from queries (like document do) so the best option here is to disallow\n        // the usage of unmapped fields in percolator queries to avoid unexpected behaviour\n        context.setAllowUnmappedFields(false);\n        return queryParserService.parseInnerQuery(context);\n    } catch (IOException e) {\n        throw new QueryParsingException(queryParserService.index(), \"Failed to parse\", e);\n    } finally {\n        if (type != null) {\n            QueryParseContext.setTypes(previousTypes);\n        }\n        context.reset(null);\n    }\n}\n```\n\nwhich is very undeisrable for us since we're using _default_ mapping while percolation, because we cannot know what fields will be used for percolate queries in advance.\n\n```\n        context.setAllowUnmappedFields(false);\n```\n\nIn 1.4.2 this value is at least configurable but the current master, it is even not configurable but forced to have mapping in advance.\n\nI don't know the reason to break backward-compatibility for this, instead, can we make it configurable to force it? set default value for it to 'true'.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67833520","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67833520","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67833520,"node_id":"MDEyOklzc3VlQ29tbWVudDY3ODMzNTIw","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2014-12-22T12:50:02Z","updated_at":"2014-12-22T12:50:02Z","author_association":"MEMBER","body":"@sweetest The reason is that the percolator with the default mapping doesn't work as expected with most queries. A simple example is if a different analyser is used than the default one. When the percolator query is added then the standard analyzer is used to parse the query and when a document is indexed the analyzer configured at the time is used. This results in the fact that this query doesn't match with the document being percolated, which is unexpected at first glance. This boils down to the fact that ES can't automatically determine what field type should be used based on a field reference in a query. \n\nPreviously (before 1.4) there were many mapping related bug reports with the percolator and we felt that it is best that a field must exists before a percolator query is referencing to it. In your case if a percolating parsing fails because of this reason I suggest that you just add the missing fields to the mapping.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67921678","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67921678","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67921678,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTIxNjc4","user":{"login":"sweetest","id":6868049,"node_id":"MDQ6VXNlcjY4NjgwNDk=","avatar_url":"https://avatars0.githubusercontent.com/u/6868049?v=4","gravatar_id":"","url":"https://api.github.com/users/sweetest","html_url":"https://github.com/sweetest","followers_url":"https://api.github.com/users/sweetest/followers","following_url":"https://api.github.com/users/sweetest/following{/other_user}","gists_url":"https://api.github.com/users/sweetest/gists{/gist_id}","starred_url":"https://api.github.com/users/sweetest/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sweetest/subscriptions","organizations_url":"https://api.github.com/users/sweetest/orgs","repos_url":"https://api.github.com/users/sweetest/repos","events_url":"https://api.github.com/users/sweetest/events{/privacy}","received_events_url":"https://api.github.com/users/sweetest/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T04:45:38Z","updated_at":"2014-12-23T04:45:38Z","author_association":"CONTRIBUTOR","body":"@martijnvg In our use case, we cannot fully figure out what fields will be used in a query because our user can add their own specific fields(We're using StandardAnalyzer BTW and therefore we didn't face such a problem). As far as I know, one of the best things in ElasticSearch is that it's a schema less storage which is perfectly fine even if we don't know the data format beforehand. Considering this, I think making percolator exceptionally have a pre-defined schema is not the way we should persue. <br><br> If using a different analyzer from percolator index makes a problem, I think other workaround should be implemented for ElasticSearch to be able to provide configuration for percolator index to set up a different analyzer. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67922441","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67922441","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67922441,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTIyNDQx","user":{"login":"kadishmal","id":978004,"node_id":"MDQ6VXNlcjk3ODAwNA==","avatar_url":"https://avatars1.githubusercontent.com/u/978004?v=4","gravatar_id":"","url":"https://api.github.com/users/kadishmal","html_url":"https://github.com/kadishmal","followers_url":"https://api.github.com/users/kadishmal/followers","following_url":"https://api.github.com/users/kadishmal/following{/other_user}","gists_url":"https://api.github.com/users/kadishmal/gists{/gist_id}","starred_url":"https://api.github.com/users/kadishmal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kadishmal/subscriptions","organizations_url":"https://api.github.com/users/kadishmal/orgs","repos_url":"https://api.github.com/users/kadishmal/repos","events_url":"https://api.github.com/users/kadishmal/events{/privacy}","received_events_url":"https://api.github.com/users/kadishmal/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T05:06:06Z","updated_at":"2014-12-23T05:06:06Z","author_association":"NONE","body":"Forcing to predefine fields for percolation makes this API usable only for very narrow usage cases. The main usage of percolator is to register _any_ query and run _any_ document against it. Now at run time the indexer and analyzer should decide whether they match or not.\n\nIn our case we know nothing about the query nor about the incoming document. User registers a query, then a stream of documents are run against the set of registered queries. This stream contains not only the documents of this user, but the entire user base each of which has their own set of fields. We cannot guess or precompute them. Moreover, this set of fields may change as frequently as users want. One document can introduce a new field, the other can remove it.\n\nI consider the master branch no more usable if there is no way to allow unmapped fields.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67934027","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67934027","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67934027,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTM0MDI3","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T09:26:49Z","updated_at":"2014-12-23T09:26:49Z","author_association":"MEMBER","body":"@sweetest @kadishmal I get your points. However I think the default should remain to be protective, so that fields should exists in the mappings before registering percolator queries.\n\nIf PR #8439 would be reverted, should this be acceptable for your use cases?\n\n@sweetest With your work around, what analyzer should be picked by default? (standard?) This is the problem, because we don't know the percolators queries to be added upfront.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67936299","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67936299","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67936299,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTM2Mjk5","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T09:59:04Z","updated_at":"2014-12-23T09:59:04Z","author_association":"CONTRIBUTOR","body":"@sweetest \n\n> In our use case, we cannot fully figure out what fields will be used in a query because our user can add their own specific fields(We're using StandardAnalyzer BTW and therefore we didn't face such a problem). As far as I know, one of the best things in ElasticSearch is that it's a schema less storage which is perfectly fine even if we don't know the data format beforehand. Considering this, I think making percolator exceptionally have a pre-defined schema is not the way we should persue. \n\nPresumably your users can add date or numeric fields on the fly too? And query them? Without defining the field types up front, those queries will not work.  If you create a query/filter on field `foo`, it will try to lookup the field, find that it is missing, assume that it is a string, and create a string query.  If the user then proceeds to index a date into field `foo`, the query will never match that field.  (It will start matching if the filter is recreated, ie f the user re-puts the percolator query, or after a shard relocation or cluster restart)\n\nThere is no way around this. Unless we know how the field is mapped, we will be incorrect for any field except default string fields.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67937974","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67937974","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67937974,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTM3OTc0","user":{"login":"sweetest","id":6868049,"node_id":"MDQ6VXNlcjY4NjgwNDk=","avatar_url":"https://avatars0.githubusercontent.com/u/6868049?v=4","gravatar_id":"","url":"https://api.github.com/users/sweetest","html_url":"https://github.com/sweetest","followers_url":"https://api.github.com/users/sweetest/followers","following_url":"https://api.github.com/users/sweetest/following{/other_user}","gists_url":"https://api.github.com/users/sweetest/gists{/gist_id}","starred_url":"https://api.github.com/users/sweetest/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sweetest/subscriptions","organizations_url":"https://api.github.com/users/sweetest/orgs","repos_url":"https://api.github.com/users/sweetest/repos","events_url":"https://api.github.com/users/sweetest/events{/privacy}","received_events_url":"https://api.github.com/users/sweetest/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T10:22:54Z","updated_at":"2014-12-23T10:22:54Z","author_association":"CONTRIBUTOR","body":"@martijnvg Current master is not acceptable for us, if current master is released, we are not able to upgrade elasticsearch anymore. I saw there is a code for backward-compatibility that indices created under v1.4.0 will not be affected, however, it's not truly compatible if you consider development process, for example, during unit test, frequently we need to delete and create the index again as you do in ElasticSearch test code.<br><br>\nBack to the main focus, you said that using different analyzer in indexing time and percolation time causes the problem. Regarding that, if matching those two analyzer same solves the issue, than the only thing ElasticSearch should provide is adequate flexibility for devlopers to configure that, and then the developer should decide which analyzer they're gonna use to suffice their own needs. I still don't understand the point of make it required to have a 'schema' for using percolator API\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67939119","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67939119","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67939119,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTM5MTE5","user":{"login":"sweetest","id":6868049,"node_id":"MDQ6VXNlcjY4NjgwNDk=","avatar_url":"https://avatars0.githubusercontent.com/u/6868049?v=4","gravatar_id":"","url":"https://api.github.com/users/sweetest","html_url":"https://github.com/sweetest","followers_url":"https://api.github.com/users/sweetest/followers","following_url":"https://api.github.com/users/sweetest/following{/other_user}","gists_url":"https://api.github.com/users/sweetest/gists{/gist_id}","starred_url":"https://api.github.com/users/sweetest/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sweetest/subscriptions","organizations_url":"https://api.github.com/users/sweetest/orgs","repos_url":"https://api.github.com/users/sweetest/repos","events_url":"https://api.github.com/users/sweetest/events{/privacy}","received_events_url":"https://api.github.com/users/sweetest/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T10:39:02Z","updated_at":"2014-12-23T10:39:02Z","author_association":"CONTRIBUTOR","body":"@clintongormley <br>\nI don't exactly know how elasticsearch indexing works. Can we make it possible to reindex queries in percolator type with recent mappings if user request through certain URI, for example, /index/.percolator/_update.<br> Now I get the point of forcing percolator type to have mapping. But still, I think it should remain as an option for developers to choose. I think losing flexiblity is also critical disadvantage for ElasticSearch. Of course, it should be well documented about the defects when the field mapping does not exists up front.  \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67941825","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67941825","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67941825,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTQxODI1","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T11:18:10Z","updated_at":"2014-12-23T11:18:10Z","author_association":"CONTRIBUTOR","body":"> Back to the main focus, you said that using different analyzer in indexing time and percolation time causes the problem. Regarding that, if matching those two analyzer same solves the issue, than the only thing ElasticSearch should provide is adequate flexibility for devlopers to configure that, and then the developer should decide which analyzer they're gonna use to suffice their own needs. I still don't understand the point of make it required to have a 'schema' for using percolator API\n\n@sweetest Your current model relies on a bug.  Before this bug was fixed, Elasticsearch only did the \"right thing\" if the field that was later introduced happened to be a string field with the default mapping.  It was broken for any other field.  \n\nThe query is instantiated when the percolator is registered.  (It is reinstantiated if the shard moves, or if the index is closed and reopened).  It can only use the information that it has available at instantiation time.  So if the field doesn't exist, it assumes it is a default string.  That's the end of it.  No other options.  No dates, no numbers, no booleans, no strings with different analysis, not not_analyzed strings.  Just a default string.\n\nYou can't correctly query fields that you don't know about.\n\nWhat about registering a query like:\n\n```\n{ \"multi_match\": {\n    \"fields\": \"*\"\n    \"query\": \"foo\"\n}}\n```\n\nThis will simply look at the fields that exist at the time that query is instantiated,  and use those.  If there are no fields, nothing will match.  It doesn't matter if the user adds fields later on, they won't be taken into account. In fact this is still the behaviour in master as we have no way of detecting if the user intended fields that are not yet specified.\n\nSo the alternative solution is to reload and reparse every query every time the mapping changes.  Users can have millions of queries registered, all of which need to be read from disk and reinstantiated.  Mappings may change frequently.  This will be complex, a performance hog, and likely buggy.  \n\nAnd there is a very simple, foolproof workaround: specify your fields before you query them, either by updating the mapping, or by indexing a doc.\n\nSo, we're definitely not going to add back the `index.percolator.allow_unmapped_fields` setting, as it implies that things will just work, and they don't.  I would consider adding a setting like `index.percolator.map_unmapped_fields_as_string`, which more accurately explains what is happening behind the scenes.\n\nThat said, given that this will only ever work for string fields, my inclination is to not add it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67947999","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67947999","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67947999,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTQ3OTk5","user":{"login":"kadishmal","id":978004,"node_id":"MDQ6VXNlcjk3ODAwNA==","avatar_url":"https://avatars1.githubusercontent.com/u/978004?v=4","gravatar_id":"","url":"https://api.github.com/users/kadishmal","html_url":"https://github.com/kadishmal","followers_url":"https://api.github.com/users/kadishmal/followers","following_url":"https://api.github.com/users/kadishmal/following{/other_user}","gists_url":"https://api.github.com/users/kadishmal/gists{/gist_id}","starred_url":"https://api.github.com/users/kadishmal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kadishmal/subscriptions","organizations_url":"https://api.github.com/users/kadishmal/orgs","repos_url":"https://api.github.com/users/kadishmal/repos","events_url":"https://api.github.com/users/kadishmal/events{/privacy}","received_events_url":"https://api.github.com/users/kadishmal/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T12:52:23Z","updated_at":"2014-12-23T12:52:23Z","author_association":"NONE","body":"@martijnvg yes, reverting #8439 PR would solve. Basically, if you decided to force mapping, I'm fine with this as long as there is a way to turn this off because for our current architecture forcing mapping is impossible.\n\n@clintongormley all fields except the date fields are strings in our case. So we have no problem with this. We do not accept other data types. However, we are planning to accept integers soon.\n\nConsidering the current master code, if we would like to support different data types (`string` and `integer`) for the same field `foo` in different types `a` and `b`, how do we preset the mapping for this field so that when documents come for `a` type, it matches one set of queries, and when documents come for `b` type, it matches another set of queries?\n\nThe ideal solution that I see, which may be not feasible to implement, is for the Percolator to defer the data type of the field from the mapping based on some representative field. For instance, let's say a document has a field `project` which is used as a type when indexing such type of documents. In the index there is a mapping for this type which includes a list of mappings. The Percolator would use appropriate mapping depending on the type of the document when indexing the incoming documents.\n\nWould this logic be possible to implement?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/67950145","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-67950145","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":67950145,"node_id":"MDEyOklzc3VlQ29tbWVudDY3OTUwMTQ1","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-12-23T13:22:09Z","updated_at":"2014-12-23T13:22:09Z","author_association":"CONTRIBUTOR","body":"> @clintongormley all fields except the date fields are strings in our case. So we have no problem with this. We do not accept other data types. However, we are planning to accept integers soon.\n\nYour date fields and your integer fields won't work.  So there IS a problem.\n\n> Considering the current master code, if we would like to support different data types (string and integer) for the same field foo in different types a and b, how do we preset the mapping for this field so that when documents come for a type, it matches one set of queries, and when documents come for b type, it matches another set of queries?\n\nYou can't.  (Well, currently you can but it is bad practice and breaks things).  In fact, in #8870 we are going to enforce this:  fields with the same name in different types must have the same mapping.\n\n> The Percolator would use appropriate mapping depending on the type of the document when indexing the incoming documents.\n\nYou can't do this in a performant way.  The percolator is fast because all of the queries are already instantiated and held in memory.  If you want to do this then don't use the percolator.  Use multi-search and run all the queries individually - that way they will be parsed once the field already exists and will do the right thing.  Obviously it won't perform as well as the percolator, but that's the point.  These two requirements are mutually exclusive.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/68025593","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-68025593","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":68025593,"node_id":"MDEyOklzc3VlQ29tbWVudDY4MDI1NTkz","user":{"login":"sweetest","id":6868049,"node_id":"MDQ6VXNlcjY4NjgwNDk=","avatar_url":"https://avatars0.githubusercontent.com/u/6868049?v=4","gravatar_id":"","url":"https://api.github.com/users/sweetest","html_url":"https://github.com/sweetest","followers_url":"https://api.github.com/users/sweetest/followers","following_url":"https://api.github.com/users/sweetest/following{/other_user}","gists_url":"https://api.github.com/users/sweetest/gists{/gist_id}","starred_url":"https://api.github.com/users/sweetest/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sweetest/subscriptions","organizations_url":"https://api.github.com/users/sweetest/orgs","repos_url":"https://api.github.com/users/sweetest/repos","events_url":"https://api.github.com/users/sweetest/events{/privacy}","received_events_url":"https://api.github.com/users/sweetest/received_events","type":"User","site_admin":false},"created_at":"2014-12-24T04:38:23Z","updated_at":"2014-12-24T08:02:36Z","author_association":"CONTRIBUTOR","body":"> So, we're definitely not going to add back the index.percolator.allow_unmapped_fields setting, as it implies that things will just work, and they don't. I would consider adding a setting like index.percolator.map_unmapped_fields_as_string, which more accurately explains what is happening behind the scenes.\n\n@clintongormley \nConsidering this, I opened another issue #9053 and another pull request #9054.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/68045223","html_url":"https://github.com/elastic/elasticsearch/issues/9025#issuecomment-68045223","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/9025","id":68045223,"node_id":"MDEyOklzc3VlQ29tbWVudDY4MDQ1MjIz","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2014-12-24T11:04:09Z","updated_at":"2014-12-24T11:04:09Z","author_association":"CONTRIBUTOR","body":"thanks @sweetest \n\nI've put it up for review - likely to take a while given that it's christmas :)\n","performed_via_github_app":null}]