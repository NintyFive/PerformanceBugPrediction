{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/24980","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24980/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24980/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/24980/events","html_url":"https://github.com/elastic/elasticsearch/issues/24980","id":232546204,"node_id":"MDU6SXNzdWUyMzI1NDYyMDQ=","number":24980,"title":"Set operations for lists in painless","user":{"login":"gingerwizard","id":12695796,"node_id":"MDQ6VXNlcjEyNjk1Nzk2","avatar_url":"https://avatars0.githubusercontent.com/u/12695796?v=4","gravatar_id":"","url":"https://api.github.com/users/gingerwizard","html_url":"https://github.com/gingerwizard","followers_url":"https://api.github.com/users/gingerwizard/followers","following_url":"https://api.github.com/users/gingerwizard/following{/other_user}","gists_url":"https://api.github.com/users/gingerwizard/gists{/gist_id}","starred_url":"https://api.github.com/users/gingerwizard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gingerwizard/subscriptions","organizations_url":"https://api.github.com/users/gingerwizard/orgs","repos_url":"https://api.github.com/users/gingerwizard/repos","events_url":"https://api.github.com/users/gingerwizard/events{/privacy}","received_events_url":"https://api.github.com/users/gingerwizard/received_events","type":"User","site_admin":false},"labels":[{"id":146834791,"node_id":"MDU6TGFiZWwxNDY4MzQ3OTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Scripting","name":":Core/Infra/Scripting","color":"0e8a16","default":false,"description":"Scripting abstractions, Painless, and Mustache"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-05-31T12:03:15Z","updated_at":"2018-02-14T13:21:08Z","closed_at":"2017-06-05T18:43:02Z","author_association":"NONE","active_lock_reason":null,"body":"This is a low priority feature that i feel would make common painless tasks more succinct.\r\n\r\nThis requirement typically arises in watches where there is a need to compare sets of values produced by terms aggregations. Consider alerts such as:\r\n\r\n1. Alert me when a user logs onto a new server\r\n2. Alert me when a process starts on a server for the first time\r\n\r\nBoth of these require comparison of two term aggregations. More specifically, consider the steps required for (2).\r\n\r\n1. An aggregation to identify all of the servers and their respective processes that have been started in the last N minutes.  \r\n2. A second query which utilises the results of step 2.  This query would utilise a terms filter using the values of set A identified above, restricting to the period less than now-N minutes i.e. processes started prior to the last N minutes.  (1) and (2) use a chain query.\r\n3. A painless condition to determine whether the watch fires by checking if set A and set B are of equal size. If not, we return true indicating a new process has occurred.\r\n4. In our transform step we identify the specific difference between set A and set B using a painless script i.e. what is in A, not present in B. \r\n\r\n\r\nThe type of set operation in (4) is quite common. This leads to the painless:\r\n\r\n```\r\ndef history=ctx.payload.history_started_processes.aggregations.process_hosts.buckets.stream().map(p -> p.key).collect(Collectors.toList()); \r\n\r\nreturn ctx.payload.started_processes.aggregations.process_hosts.buckets.stream().map(e -> e.key).filter(p -> !history.contains(p)).map(p -> ['process_name':/_/.split(p)[0],'host_name':/_/.split(p)[1],'@timestamp':ctx.trigger.triggered_time]).collect(Collectors.toList());\r\n```\r\n Whilst quite succinct i'm not sure this is very accessible to new users.\r\n\r\nProposal is for some simple set operations to be made available for lists. If these could be exposed as operators e.g.\r\n\r\n1. union - s | t  - new set with elements from both s and t\r\n2. intersection - s & t - new set with elements common to s and t\r\n3. difference - s & t - new set with elements in s but not in t\r\n\r\nThe above is what python uses and is subject to discussion. Not particularly opinionated on this topic.\r\n\r\nThe above thus becomes\r\n\r\n```\r\nreturn ctx.payload.started_processes.aggregations.process_hosts |\r\nctx.payload.history_started_processes.aggregations.process_hosts.buckets;\r\n```\r\n\r\ncc @eskibars @clintongormley  @jdconrad @spinscale \r\n","closed_by":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"performed_via_github_app":null}