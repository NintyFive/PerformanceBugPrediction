{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/4454","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4454/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4454/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4454/events","html_url":"https://github.com/elastic/elasticsearch/issues/4454","id":24336798,"node_id":"MDU6SXNzdWUyNDMzNjc5OA==","number":4454,"title":"AllocationDeciders should be executed in order, starting at \"cheap execution\" and \"most likely to return no\"","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"labels":[{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":65649829,"node_id":"MDU6TGFiZWw2NTY0OTgyOQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.90.8","name":"v0.90.8","color":"DDDDDD","default":false,"description":null},{"id":63637703,"node_id":"MDU6TGFiZWw2MzYzNzcwMw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v1.0.0.RC1","name":"v1.0.0.RC1","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2013-12-16T09:02:54Z","updated_at":"2013-12-16T09:03:36Z","closed_at":"2013-12-16T09:03:36Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The different AllocationDeciders are more or less expensive processing wise. They are also more or less likely to return a Decision.NO or Decision.THROTTLE. For large clusters this can result in a 10-15% speedup in recalculating the cluster state (tested with https://github.com/geidies/elasticsearch/blob/optimize_RoutingNodes/src/test/java/org/elasticsearch/cluster/routing/allocation/MassiveClusterRebalanceRoutingTests.java - 3.7 seconds on my test machine compared to 4.2 seconds without the optimization).\n\nConcurrentRebalanceAllocationDecider - loops over all ShardRoutings, O(n), optimization to O(1) for that in separate PR\nDisableAllocationDecider - is O(1) \nClusterRebalanceAllocationDecider - is O( #shards_unassigned ) + O( #shards ) or O( 1 ) + O( #shards ) - optimization for that in separate PR, making it O( 2 )\nDiskThresholdDecider - O( 2 )\nSnapshotInProgressAllocationDecider - O( 1 )\nReplicaAfterPrimaryActiveAllocationDecider and RebalanceOnlyWhenActiveAllocationDecider - O( #shards ) with current implementation of RoutingNodes.getShardsRoutingFor( MutableShardRouting ) - optimization in separate PR, making it O( #shards in replica set )\nShardsLimitAllocationDecider is O( # shards on node ) + O( 1 ).\nAwarenessAllocationDecider is O( # shards in cluster ) \\* # awareness attributes, making it the most expensive, but least likely to be turned on.\nSameShardAllocationDecider is O( # shards on node ) \\* # nodes on host\nThrottlingAllocationDecider, which is O( #shards_per_node ) + O( #shards_per_node )\n\nIn addition to the re-ordering, instead of applying all AllocationDeciders, skip the rest of one return a Decision.NO. This logic is ported from the Decision.Multi class.\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}