{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/8612","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8612/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8612/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/8612/events","html_url":"https://github.com/elastic/elasticsearch/issues/8612","id":49811628,"node_id":"MDU6SXNzdWU0OTgxMTYyOA==","number":8612,"title":"Terms Aggregation: Handle a list of order options","user":{"login":"mtraynham","id":5741321,"node_id":"MDQ6VXNlcjU3NDEzMjE=","avatar_url":"https://avatars0.githubusercontent.com/u/5741321?v=4","gravatar_id":"","url":"https://api.github.com/users/mtraynham","html_url":"https://github.com/mtraynham","followers_url":"https://api.github.com/users/mtraynham/followers","following_url":"https://api.github.com/users/mtraynham/following{/other_user}","gists_url":"https://api.github.com/users/mtraynham/gists{/gist_id}","starred_url":"https://api.github.com/users/mtraynham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mtraynham/subscriptions","organizations_url":"https://api.github.com/users/mtraynham/orgs","repos_url":"https://api.github.com/users/mtraynham/repos","events_url":"https://api.github.com/users/mtraynham/events{/privacy}","received_events_url":"https://api.github.com/users/mtraynham/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2014-11-23T02:07:44Z","updated_at":"2014-11-23T03:04:32Z","closed_at":"2014-11-23T03:04:32Z","author_association":"NONE","active_lock_reason":null,"body":"It would be nice if you could use a list of ordering options instead of a single order.  This is useful for when you need a secondary sort because the first one is of low cardinality.\n\nDoesn't seem too hard to add after looking at the code.  `InternalOrder` could be extended with with a class called `InternalOrderChain` that can take a list of `InternalOrder` objects in it's constructor.  The `comparator` could use Guava's `Ordering.compound`:\n\n```\n    protected Comparator<Bucket> comparator(final Aggregator aggregator) {\n        return Ordering.compound(FluentIterable\n                .from(orders)\n                .transform(new Function<InternalOrder, Comparator<? super Bucket>>() {\n                    @Override public Comparator<? super Bucket> apply(InternalOrder input) {\n                        return input.comparator(aggregator);\n                    }\n                })\n                .toList()\n        );\n    }\n```\n\nThe only thing that's a bit strange is the `InternalOrder.Streams` handling and any check to see if the `InternalOrder` is an `Aggregation`...\n","closed_by":{"login":"mtraynham","id":5741321,"node_id":"MDQ6VXNlcjU3NDEzMjE=","avatar_url":"https://avatars0.githubusercontent.com/u/5741321?v=4","gravatar_id":"","url":"https://api.github.com/users/mtraynham","html_url":"https://github.com/mtraynham","followers_url":"https://api.github.com/users/mtraynham/followers","following_url":"https://api.github.com/users/mtraynham/following{/other_user}","gists_url":"https://api.github.com/users/mtraynham/gists{/gist_id}","starred_url":"https://api.github.com/users/mtraynham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mtraynham/subscriptions","organizations_url":"https://api.github.com/users/mtraynham/orgs","repos_url":"https://api.github.com/users/mtraynham/repos","events_url":"https://api.github.com/users/mtraynham/events{/privacy}","received_events_url":"https://api.github.com/users/mtraynham/received_events","type":"User","site_admin":false},"performed_via_github_app":null}