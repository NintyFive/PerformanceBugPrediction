{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/51995","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51995/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51995/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51995/events","html_url":"https://github.com/elastic/elasticsearch/issues/51995","id":560985171,"node_id":"MDU6SXNzdWU1NjA5ODUxNzE=","number":51995,"title":"Alias templates","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"labels":[{"id":163824881,"node_id":"MDU6TGFiZWwxNjM4MjQ4ODE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Indices%20APIs","name":":Core/Features/Indices APIs","color":"0e8a16","default":false,"description":"APIs to create and manage indices"},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null},{"id":1967500052,"node_id":"MDU6TGFiZWwxOTY3NTAwMDUy","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:UI","name":"Team:UI","color":"fef2c0","default":false,"description":"Meta label for UI team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-02-06T12:36:20Z","updated_at":"2020-06-09T20:47:46Z","closed_at":"2020-03-04T12:03:42Z","author_association":"MEMBER","active_lock_reason":null,"body":"The meta issue will track the development of a new experimental feature named alias templates.\r\n\r\nTasks:\r\n- [ ] TBD\r\n\r\n# Background\r\nMany usages of Elasticsearch write data into a [write alias](https://www.elastic.co/guide/en/elasticsearch/reference/7.5/indices-aliases.html#aliases-write-index) (an alias instance pointing to an index as write an index) and use rollover to create a new backing index if needed, which also updates the write alias. The creation of the write alias is crucial for these kinds of setups, otherwise data is being indexed into a concrete index and then rollover fails to do its job. Creating the write alias is a bit strange, because it also requires creating the first backing index as part of setting up a solution that requires a write alias. On top of this the write alias can easily be removed if the backing indices are removed via the delete index api.\r\n\r\n# Alias templates\r\nAlias templates create a write alias and a backing index when indexing into a namespace that is neither an index or an alias (unused namespace). Also index settings, mappings and other aliases that are associated with the alias template are applied to the index that get created.\r\n\r\nWhen indexing into a namespace that is neither an index nor an alias and matches with an alias template then a write alias is created using the provided index name and a concrete index is created using the provided index name as a prefix for the name of the index. The write alias points to this index. The settings and mappings in the alias template will be applied when creating the concrete index. The name of the new index will be ‘[prefix]-000000’. This will make the concrete index rollover compatible. \r\n\r\nThere are exceptions to the above described behaviour:\r\n* If the unused namespace name ends with a dash and 6 digits and has a prefix for which a write alias does exist then only a regular index is created and the settings, mappings and aliases are applied that match with the alias template. This is important in order for rollover to work correctly, otherwise a new write alias would be created, whereas instead the rollover api should update the existing write alias.\r\n* If concrete indices already exist for a write alias for an unused namespace then only a write alias is created. The write alias will refer to the concrete index with highest digits in its suffix.\r\n\r\nA non existing namespace can only match with a single alias template. Only the best matching template is applied. Best matching is defined by the template with the highest priority. If multiple alias templates match that have the same priority then that results into an error. Either at alias template creation time or when alias templates are evaluated as part of index creation. Preferably the put alias template api should fail in this case, but it can be tricky to figure whether multiple templates are going to match that have the same priority. We can also think about not allowing alias templates with the same priority regardless whether the patterns are overlapping. This is something that can easily be enforced.\r\n\r\nAdditional constraints:\r\n* A template does need to be valid on its own. Concretely this means that creating a new index with settings and mappings from a single alias template should be successful and not result in validation errors.\r\n* The write alias is always created last, this is in order to avoid that the write alias gets overwritten by a custom alias defined in the alias template.\r\n* Ingest should check alias templates in order determine whether a default or final pipeline needs to be executed. This should be similar to what ingest does today with index templates.\r\n* If an alias template matches then all index templates will be ignored. Even if index templates would match with the alias or index name. If alias templates are not used then setups using index templates remain to function as before. This does allow systems to experiment with alias templates or gradually move from index templates to alias templates.\r\n\r\n# Component templates\r\nMultiple alias templates should be able to reuse config. Despite the fact that only a single alias template can match with an unused namespace. This is what the purpose is of component templates. A component template only contains settings, mappings and aliases. Alias templates can be composed of one or more component templates.\r\n\r\nComponent templates never match at alias/index creation time directly and are only included via matching alias templates. Component templates can’t be composed of other component templates. Also component templates can only contain settings and mappings that are valid on their own.\r\n\r\nThe order in which the names of component templates are specified in an alias template determines the order in which the component templates are applied. The setting, mapping and aliases specified inside an alias template are applied last. \r\n\r\n# Config and APIs\r\nBoth alias and component templates are stored in the cluster state as separate resources.\r\n\r\n## Alias Templates Config\r\n\r\nConfig:\r\n```\r\n{\r\n    \"alias_patterns\": [...],\r\n    \"target_index_pattern\": \"...\",\r\n    \"priority\": 0-∞,\r\n    \"composed_of\": [...],\r\n    \"version\": 0-∞,\r\n    \"template\": {\r\n       \"settings\": {...},\r\n       \"mappings\": {...},\r\n       \"aliases\": {...}\r\n    }\r\n}\r\n```\r\n\r\nExplanation of the configuration fields:\r\n1. `alias_patterns` (required), a string array. Each string contains a wildcard pattern. \r\n2. `target_index_pattern` (optional), a json string. Allows to customize the name of the backing index. Defaults to ‘{name}-000000’. The name variable is the write alias being indexed into. This for example allows the use of date math: ‘{name}-{now/d}-000000’. The backing index name suffix should always be -000000 and if that is forgotten this will be appended.\r\n3. `priority` (optional), a numeric value indicating precedence over other alias templates. When indexing into a non existing index/alias, the name may match with patterns of multiple alias templates, the alias template with the highest order value will be selected. Other alias templates will be ignored. Defaults to 0.\r\n4. `composed_of` (optional), a string array with the names of components templates that will be applied on a new index together with the current template. The order in the string array determines the order in which the component templates are applied. If `composed_of` is specified then the alias template is applied last. This is to ensure that the settings/mappings for the alias template are never overwritten by component templates it references to. \r\n5. `version` (optional), a numeric value. External systems can use this version number to simplify template management. The version parameter is completely optional and not automatically generated by Elasticsearch. Defaults to null.\r\n6. `template` (required), a json object containing at least settings,  mappings or aliases. \r\n7. `settings` (optional), a json object representing index settings. \r\n8. `mappings` (optional), a json object representing mappings.\r\n9. `aliases` (optional), a json object representing aliases.\r\n\r\n## Alias Template APIs\r\nPut alias template api:\r\n\r\n```\r\nPUT /_alias_template/[name]\r\n{\r\n   ...\r\n}\r\n```\r\n\r\nGet alias template api:\r\n```\r\nGET /_alias_template/[name]\r\n```\r\n\r\nDelete alias template api:\r\n\r\n```\r\nDELETE /_alias_template/[name]\r\n```\r\n\r\nSimulate alias template api:\r\n\r\n```\r\nGET /_alias_template/[index_alias_name]/_simulate\r\n```\r\n\r\nThe simulate api provides insight which alias template would match with an index alias name that doesn’t exist yet and from which templates would be inherited.\r\n\r\n## Component Template Config\r\nConfig:\r\n\r\n```\r\n{\r\n    \"version\": 0-∞,\r\n    \"template\": {\r\n       \"settings\": {...},\r\n       \"mappings\": {...},\r\n       \"aliases\": {...}\r\n    }\r\n}\r\n```\r\n\r\nExplanation of the configuration fields:\r\n1. `version` (optional), a numeric value. External systems can use this version number to simplify template management. The version parameter is completely optional and not automatically generated by Elasticsearch. Defaults to `null`.\r\n2. `template` (required), a json object containing at least settings, mappings or aliases.\r\n3. `settings` (optional), a json object representing index settings. \r\n4. `mappings` (optional), a json object representing mappings.\r\n5. `aliases` (optional), a json object representing aliases.\r\n\r\n## Component Template APIs\r\nPut component template api:\r\n\r\n```\r\nPUT /_component_template/[name]\r\n{\r\n   ...\r\n}\r\n```\r\n\r\nGet component template api:\r\n\r\n```\r\nGET /_component_template/[name]\r\n```\r\n\r\nDelete component template api:\r\n\r\n```\r\nDELETE /_component_template/[name]\r\n```\r\n\r\n## The alias_required parameter\r\nThe `alias_required` flag ensures that when indexing into a namespace that is not an alias that a failure is returned instead of just indexing into a concrete index. This should prevent situations where it is expected that data is being indexed via an alias, but the alias hasn’t been created, because the alias template wasn’t set up. The bulk api should support the `alias_required` flag.\r\n\r\n# Example\r\nCreating an alias template for mysql error logs:\r\n\r\n```\r\nPUT /_alias_template/mysql_error_log\r\n{\r\n    \"alias_patterns\": [\"logs-*-mysql_error\"],\r\n    \"mapping\": { … },\r\n    \"settings\": { … }\r\n}\r\n```\r\n\r\nIndexing data:\r\n\r\n```\r\nPOST /logs-prod-mysql_error/_doc\r\n{ … }\r\n```\r\n\r\nThe ‘logs-mysql_error’ namespace matches. This results in the creation of a ‘logs-prod-mysql_error-000000’ index and ‘logs-prod-mysql_error’ alias that points to ‘logs-prod-mysql_error-000000’ as a write index. Settings and mappings from the ‘mysql_error_log’ alias template will be applied.\r\n\r\nRolling over:\r\n\r\n```\r\nPOST /logs-prod-mysql_error/_rollover/\r\n{ … }\r\n```\r\n\r\nThis results in the creation of ‘logs-mysql_access-000001’ index and the alias ‘logs-mysql_access’ pointing to this index as a write index. The settings and mappings from the ‘mysql_error_log’ template are applied.\r\n\r\nThis originates from the create index request that the rollover api triggers. The reason why not a new write alias is created is because the index name ends with a dash and a six digit number. The rest of the name matches with ‘logs-mysql_error’ write alias. This makes the alias template logic skip the creation of a new alias. Only settings and mappings of the matching alias template are applied.\r\n\r\nAll the logs mysql indices gets removed:\r\n\r\n```\r\nDELETE /logs-prod-mysql_error-*\r\n```\r\n\r\nNote that this also deletes the ‘logs-prod-mysql_error’ alias. \r\nData gets continuously indexed:\r\n\r\n```\r\nPOST /logs-prod-mysql_error/_doc\r\n{ … }\r\n```\r\n\r\nSince ‘logs-mysql_error’ is neither an index nor a write alias, the index creation logic kicks in. The alias template ‘mysql_access_log’ matches again. However this time only a write alias is created with the name ‘logs-mysql_access’ that points to the ‘logs-mysql_access-000000’ index.\r\n\r\nRelates to logstash-plugins/logstash-output-elasticsearch#858","closed_by":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"performed_via_github_app":null}