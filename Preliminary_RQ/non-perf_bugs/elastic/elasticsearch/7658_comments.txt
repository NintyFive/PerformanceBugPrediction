[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/56578663","html_url":"https://github.com/elastic/elasticsearch/issues/7658#issuecomment-56578663","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/7658","id":56578663,"node_id":"MDEyOklzc3VlQ29tbWVudDU2NTc4NjYz","user":{"login":"fizx","id":8024,"node_id":"MDQ6VXNlcjgwMjQ=","avatar_url":"https://avatars3.githubusercontent.com/u/8024?v=4","gravatar_id":"","url":"https://api.github.com/users/fizx","html_url":"https://github.com/fizx","followers_url":"https://api.github.com/users/fizx/followers","following_url":"https://api.github.com/users/fizx/following{/other_user}","gists_url":"https://api.github.com/users/fizx/gists{/gist_id}","starred_url":"https://api.github.com/users/fizx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fizx/subscriptions","organizations_url":"https://api.github.com/users/fizx/orgs","repos_url":"https://api.github.com/users/fizx/repos","events_url":"https://api.github.com/users/fizx/events{/privacy}","received_events_url":"https://api.github.com/users/fizx/received_events","type":"User","site_admin":false},"created_at":"2014-09-23T19:47:43Z","updated_at":"2014-09-23T19:47:43Z","author_association":"NONE","body":"This is because the GroovyClassLoader hangs on to every class ever created in its class cache.  In benchmarks, I can only load ~500 scripts into a Java7 vm with default permgen settings before OOM/permgen.  I can get a few thousand in with Java8.  \n\n```\n#!/bin/bash\ni=0\nwhile \\\ncurl -m 3 -X POST localhost:9200/_search\\?size=0 -d @- <<EOT\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": { \"match_all\": {} },\n      \"script_score\": {\n        \"script\": \"$(echo `date +%s`.$RANDOM)\",\n        \"lang\": \"groovy\"\n      }\n    }\n  }\n}\nEOT\ndo \n  i=$((i+1))\n  echo\ndone\n\necho failed after $i iterations\n```\n\nThe following patch works for me for dynamic scripts, and I believe it shouldn't have a downside, because (1) ES has it's own Guava class cache (that actually releases classes), and (2) I can't find a codepath in ES that even indirectly uses the GroovyClassLoader's class cache.\n\n```\n# GroovyScriptEngineService.java#113\n+ loader.clearCache();\nreturn loader.parseClass(script, generateScriptName());\n```\n","performed_via_github_app":null}]