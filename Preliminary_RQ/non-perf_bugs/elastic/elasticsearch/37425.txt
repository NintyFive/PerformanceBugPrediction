{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/37425","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37425/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37425/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/37425/events","html_url":"https://github.com/elastic/elasticsearch/issues/37425","id":398927174,"node_id":"MDU6SXNzdWUzOTg5MjcxNzQ=","number":37425,"title":"Bug in aggregation result when using shards","user":{"login":"physicalattraction","id":7287514,"node_id":"MDQ6VXNlcjcyODc1MTQ=","avatar_url":"https://avatars2.githubusercontent.com/u/7287514?v=4","gravatar_id":"","url":"https://api.github.com/users/physicalattraction","html_url":"https://github.com/physicalattraction","followers_url":"https://api.github.com/users/physicalattraction/followers","following_url":"https://api.github.com/users/physicalattraction/following{/other_user}","gists_url":"https://api.github.com/users/physicalattraction/gists{/gist_id}","starred_url":"https://api.github.com/users/physicalattraction/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/physicalattraction/subscriptions","organizations_url":"https://api.github.com/users/physicalattraction/orgs","repos_url":"https://api.github.com/users/physicalattraction/repos","events_url":"https://api.github.com/users/physicalattraction/events{/privacy}","received_events_url":"https://api.github.com/users/physicalattraction/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null},{"id":111624690,"node_id":"MDU6TGFiZWwxMTE2MjQ2OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/feedback_needed","name":"feedback_needed","color":"d4c5f9","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-01-14T15:01:25Z","updated_at":"2019-01-15T13:20:51Z","closed_at":"2019-01-15T13:06:00Z","author_association":"NONE","active_lock_reason":null,"body":"We have found a reproducible issue that an aggregation gives not the correct results when using sharding.\r\n\r\nReproduction (The Python script below can be used for steps 1 and 2):\r\n1) Create an index with 5 shards with the given the mappings from this JSON: https://s3.eu-central-1.amazonaws.com/nyon-shared-storage/sales-production-mappings.json\r\n2) Add the following 1,500 documents to it: https://s3.eu-central-1.amazonaws.com/nyon-shared-storage/sales-production-anonymized.json\r\n3) Run the following query: https://s3.eu-central-1.amazonaws.com/nyon-shared-storage/search_query.json\r\n4) Write down the results somewhere, in particular the combination of key and total quantity.\r\n5) Change the \"size\": 20 to \"size\" 200 in the search query and run it again\r\n6) Compare the outputs.\r\n\r\nThe outputs depend a little bit on which data is stored on which shard, and hence can differ (which is the actual problem!) For me, the results were:\r\n\r\nsize = 20:\r\n```\r\n    [(1, 'MDS_FES_brand_supplier_1||article_113||34-46||120', 19.0),\r\n     (2, 'MDS_FES_brand_supplier_1||article_115||34-46||120', 19.0),\r\n     (3, 'MDS_FES_brand_supplier_1||article_113||XS-XXL||990', 14.0),\r\n     (4, 'MDS_FES_brand_supplier_1||article_115||XS-XXL||990', 13.0),\r\n     (5, 'MDS_FES_brand_supplier_1||article_113||603', 12.0),\r\n     (6, 'MDS_FES_brand_supplier_1||article_113||34-46||990', 10.0),\r\n     (7, 'MDS_FES_brand_supplier_1||article_115||34-46||491', 10.0),\r\n     (8, 'MDS_FES_brand_supplier_1||article_113||990', 8.0),\r\n     (9, 'MDS_FES_brand_supplier_1||article_115||XS-XXL||650', 7.0),\r\n     (10, 'MDS_FES_brand_supplier_1||article_113||34-46||348', 6.0),\r\n     (11, 'MDS_FES_brand_supplier_1||article_113||XS-XXL||120', 6.0),\r\n     (12, 'MDS_FES_brand_supplier_1||article_113||XS-XXL||650', 6.0),\r\n     (13, 'MDS_FES_brand_supplier_1||article_115||34-46||348', 6.0),\r\n     (14, 'MDS_FES_brand_supplier_1||article_115||990', 6.0),\r\n     (15, 'MDS_FES_brand_supplier_1||article_115||XS-XL||348', 6.0),\r\n     (16, 'MDS_FES_brand_supplier_1||article_113||120', 5.0),\r\n     (17, 'MDS_FES_brand_supplier_1||article_113||34-46||320', 5.0),\r\n     (18, 'MDS_FES_brand_supplier_1||article_115||120', 5.0),\r\n     (19, 'MDS_FES_brand_supplier_1||article_115||603', 5.0),\r\n     (20, 'MDS_FES_brand_supplier_1||article_115||638', 5.0)]\r\n```\r\n\r\nsize = 200:\r\n```\r\n     [(1, 'MDS_FES_brand_supplier_1||article_113||34-46||120', 19.0),\r\n     (2, 'MDS_FES_brand_supplier_1||article_115||34-46||120', 19.0),\r\n     (3, 'MDS_FES_brand_supplier_1||article_113||XS-XXL||990', 14.0),\r\n     (4, 'MDS_FES_brand_supplier_1||article_115||XS-XXL||990', 13.0),\r\n     (5, 'MDS_FES_brand_supplier_1||article_113||603', 12.0),\r\n     (6, 'MDS_FES_brand_supplier_1||article_115||34-46||491', 10.0),\r\n     (7, 'MDS_FES_brand_supplier_1||article_113||34-46||990', 9.0),\r\n     (8, 'MDS_FES_brand_supplier_1||article_113||990', 8.0),\r\n     (9, 'MDS_FES_brand_supplier_1||article_115||XS-XXL||650', 7.0),\r\n     (10, 'MDS_FES_brand_supplier_1||article_113||34-46||348', 6.0),\r\n     (11, 'MDS_FES_brand_supplier_1||article_113||XS-XXL||120', 6.0),\r\n     (12, 'MDS_FES_brand_supplier_1||article_113||XS-XXL||650', 6.0),\r\n     (13, 'MDS_FES_brand_supplier_1||article_115||990', 6.0),\r\n     (14, 'MDS_FES_brand_supplier_1||article_115||XS-XL||348', 6.0),\r\n     (15, 'MDS_FES_brand_supplier_1||article_115||XS-XXL||491', 6.0),\r\n     (16, 'MDS_FES_brand_supplier_1||article_113||120', 5.0),\r\n     (17, 'MDS_FES_brand_supplier_1||article_115||120', 5.0),\r\n     (18, 'MDS_FES_brand_supplier_1||article_115||34-46||348', 5.0),\r\n     (19, 'MDS_FES_brand_supplier_1||article_115||603', 5.0),\r\n     (20, 'MDS_FES_brand_supplier_1||article_115||638', 5.0),\r\n```\r\n\r\nAs one can see, the bucket with key `MDS_FES_brand_supplier_1||article_113||34-46||990` contains a total quantity of 10 in the first case and of 9 in the latter case. It turns out that in the first case, not all data was taken into account (one document with quantity = -1 is not taken into account). One can verify this by adding a query `{'term': {'catalogs.full_submodel_grouping': 'MDS_FES_brand_supplier_1||article_113||34-46||990'}}` to the search query. In both cases, the result is now 9.\r\n\r\nI tested this on ElasticSearch 6.4.2 with two nodes. This problem disappears when executed on an index with only 1 shard.\r\n\r\nPython script for reproduction:\r\n\r\n```\r\ndef restore_snapshot():\r\n    index = 'sales-reproduction'\r\n    delete_index(index)\r\n    with open('sales-production-mappings.json', 'r') as f:\r\n        mappings = json.loads(f.read())\r\n    create_index(index, settings={'number_of_shards': 5}, mappings=mappings)\r\n    with open('sales-production-anonymized.json', 'r') as f:\r\n        result = json.loads(f.read())\r\n    for sale in result['hits']['hits']:\r\n        source = sale['_source']\r\n        post_to_index(index, source)\r\n```\r\n","closed_by":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"performed_via_github_app":null}