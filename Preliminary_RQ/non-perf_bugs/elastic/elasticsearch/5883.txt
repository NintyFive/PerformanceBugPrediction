{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/5883","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5883/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5883/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5883/events","html_url":"https://github.com/elastic/elasticsearch/issues/5883","id":31847139,"node_id":"MDU6SXNzdWUzMTg0NzEzOQ==","number":5883,"title":"Fuzzy query boosts misspellings ","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2014-04-19T13:53:30Z","updated_at":"2014-12-30T16:32:51Z","closed_at":"2014-12-30T16:32:51Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Fuzzy queries are mostly used to find terms in spite of misspellings.  However, the way they are currently implemented, they **favour** misspellings over the correct spelling, eg:\n\n```\nDELETE /t\n\nPUT /t\n{\n  \"settings\": {\n    \"number_of_shards\": 1\n  }\n}\n```\n\nIndex the correct spelling `abcde` three times:\n\n```\nPOST /t/t\n{\"foo\": \"abcde\"}\nPOST /t/t\n{\"foo\": \"abcde\"}\nPOST /t/t\n{\"foo\": \"abcde\"}\n```\n\nIndex the incorrect spelling `abcdf`once:\n\n```\nPOST /t/t\n{\"foo\": \"abcdf\"}\n```\n\nA `fuzzy` query for `abcde` ranks the less common `abcdf` over the correct spelling:\n\n```\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"foo\": {\n        \"query\": \"abcde\",\n        \"fuzziness\": 1\n      }\n    }\n  }\n}\n```\n\nResult:\n\n```\n  \"hits\": [\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"6YKZxTEKRM63cqmqkBMZQg\",\n        \"_score\": 1.3621485,\n        \"_source\": {\n           \"foo\": \"abcdf\"\n        }\n     },\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"fFQJd4W8Sfiifqm58gdiiQ\",\n        \"_score\": 0.59394336,\n        \"_source\": {\n           \"foo\": \"abcde\"\n        }\n     },\n```\n\nThis is clearly wrong. The `fuzzy_like_this` query, however, incorporates the edit distance into the score:\n\n```\nGET /_search\n{\n  \"query\": {\n    \"fuzzy_like_this\": {\n      \"fields\": [\n        \"foo\"\n      ],\n      \"like_text\": \"abcde\"\n    }\n  }\n}\n```\n\nThus scoring `abcde` over `abcdf`:\n\n```\n  \"hits\": [\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"fFQJd4W8Sfiifqm58gdiiQ\",\n        \"_score\": 1.4260894,\n        \"_source\": {\n           \"foo\": \"abcde\"\n        }\n     },\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"i6nBukT8TdesYXTQzodBZw\",\n        \"_score\": 1.4260894,\n        \"_source\": {\n           \"foo\": \"abcde\"\n        }\n     },\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"gafV0v6ETq2-FA3qQnpIQg\",\n        \"_score\": 1.4260894,\n        \"_source\": {\n           \"foo\": \"abcde\"\n        }\n     },\n     {\n        \"_index\": \"t\",\n        \"_type\": \"t\",\n        \"_id\": \"6YKZxTEKRM63cqmqkBMZQg\",\n        \"_score\": 0.9126973,\n        \"_source\": {\n           \"foo\": \"abcdf\"\n        }\n     }\n  ]\n```\n\nI'm not sure quite what the right scoring algorithm here is. Should it take into account only the edit distance from the query term (so a query for `abcde` prefers `abcde`, while a query for `abcdf` prefers `abcdf`), or should we also invert the IDF to prefer more common terms (eg a fuzzy query for `abcdf` would prefer `abcde`)?\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}