{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/4131","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4131/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4131/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4131/events","html_url":"https://github.com/elastic/elasticsearch/issues/4131","id":22353062,"node_id":"MDU6SXNzdWUyMjM1MzA2Mg==","number":4131,"title":"Path, index_name, multi_fields and pooled fields","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2013-11-08T17:59:00Z","updated_at":"2014-01-13T11:36:13Z","closed_at":"2013-12-19T16:46:37Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"This issue tries to summarise a number of other open issues:\n\nThe `{path: \"just_name\"|\"full\"}` and `index_name` parameters cause a lot of confusion, eg see #4123 and #3457\n\nFor instance, consider this mapping:\n\n```\n{\n   \"mappings\": {\n      \"t\": {\n         \"properties\": {\n            \"one\": {\n               \"properties\": {\n                  \"foo\": {\n                     \"type\": \"multi_field\",\n                     \"path\": \"just_name\",\n                     \"fields\": {\n                        \"foo\": {\n                           \"type\": \"string\"\n                        },\n                        \"shared\": {\n                           \"type\": \"string\",\n                           \"index_name\": \"shared\"\n                        }\n                     }\n                  }\n               }\n            },\n            \"two\": {\n               \"properties\": {\n                  \"foo\": {\n                     \"type\": \"multi_field\",\n                     \"path\": \"just_name\",\n                     \"fields\": {\n                        \"foo\": {\n                           \"type\": \"string\",\n                           \"index_name\": \"two.foo\"\n                        },\n                        \"shared\": {\n                           \"type\": \"string\",\n                           \"index_name\": \"shared\"\n                        }\n                     }\n                  }\n               }\n            }\n         }\n      }\n   }\n}\n```\n\nThe `just_name` setting can only be applied to all sub-fields and pushes all of this fields up to the top-level, so the above mapping ends up indexing fields `one.foo` and `two.foo` into the single field `foo`.  This can be worked around by setting the `index_name` for each of these fields to `one.foo` and `two.foo` respectively, but it is confusing and verbose. \n\nOne possibility is to support `index_name` as above, and `index_path` to specify an absolute path name, which can include `.`'s.  I'd deprecate `path` altogether - it just adds confusion.\n## What are the use cases for `index_name` and `path`?\n\nWhile you may for some reason use `index_name` to provide a field alias, the most common use case by far is with multi-fields, to create a custom `all` field, like the example above. Also see #3093.\n\nThe current syntax implies that the mapping from each `shared` sub-field is applied to the values from `one.foo` and `two.foo` before being indexed into the `shared` field.  See #4108. This is not the case - one of the mappings get chosen and applied.\n\nIt would be great to support the application of each mapping at index time, and then make searching on `{ fields: [\"one.foo.shared\", \"two.foo.shared\"]}` do the right thing, but I'm not sure how feasible this is. (See #1169)\n\nIf it isn't feasible, then we should change the syntax to make that obvious.\n\nOne suggestion was made here: https://github.com/elasticsearch/elasticsearch/issues/4099#issuecomment-27981537\nie:\n\n```\n{\n    \"my_type\": {\n        \"properties\": {\n            \"name\": {\n                \"properties\": {\n                    \"first\": {\"type\":\"string\", \"copy_to\":[\"name.full\"]},\n                    \"last\": {\"type\":\"string\", \"index_name\": \"surname\", \"copy_to\":[\"name.full\"]},\n                    \"full\": {\"type\": \"string\"}\n                }\n            }\n        }\n    }\n}\n```\n\nThis has its own issues: `copy_to` would end up indexing the values from `first` under both `first` and `full`, although you could use `index: no` on the `first` field to only index under `full`.  \n\nAlso, the mapping for `full` may not have been seen while parsing the mapping for `first`.  I don't know if this is an issue or not - no data will be added until index time, and if `full` hasn't been defined, then dynamic mapping should be able to auto-add that field?\n\nI know @imotov has some ideas of alternate ways to specify the same thing. See #2035.\n## Multi-fields are verbose\n\nWhile we're talking about multi-fields, the syntax is verbose, eg it's a big change from:\n\n```\n{ title: { type: \"string\"}\n```\n\nto:\n\n```\n{\n    title: {\n        type: \"multi_field\",\n        fields: {\n           title: { type: \"string\"},\n           raw: { type: \"string\", index: \"not_analyzed\"}\n        }\n    }\n}\n```\n\nCould we not simplify this, by supporting `\"fields\"`  under all core field types, eg:\n\n```\n{\n    title: {\n        type: \"string\",\n        fields: {\n           raw: { index: \"not_analyzed\"}\n        }\n    }\n}\n```\n\nThe sub-fields could inherit the mappings of the main field, so you only need to specify the changes.\n## Shared fields and index time boost\n\nIf we can support the application of different mappings on shared fields (ie values in `one.foo` get tokenised according to the mapping in `one.foo.shared` before being indexed into `shared`, and similar thing at search time)  then we should also look at the possibility of supporting field-level index-time boosting.\n\nThis is supported in the `_all` field, using payloads.  Each term stores the `boost` setting of the field where that value originated.  I realise that this makes queries slower, but it is a useful feature (and about the only use case for field-level boosting at index time).\n\nWould it be possible to only enable payloads on shared fields where at least one of the fields specifies a `boost`? See #4108 \n## Recommendations\n1. Deprecate `index_name` and `path`\n2. Support `index_path` if we really see the need to rename the field\n3. Add simpler, more obvious syntax for indexing values into a shared field\n4. Make multi_field mappings less verbose\n5. Look at the possibility of supporting the application of independent mappings at index/search time, and possibly index time boost.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}