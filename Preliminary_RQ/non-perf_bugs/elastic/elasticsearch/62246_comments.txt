[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/690707929","html_url":"https://github.com/elastic/elasticsearch/issues/62246#issuecomment-690707929","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62246","id":690707929,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MDcwNzkyOQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-09-10T20:27:40Z","updated_at":"2020-09-10T20:27:40Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-analytics-geo (:Analytics/Aggregations)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/692313694","html_url":"https://github.com/elastic/elasticsearch/issues/62246#issuecomment-692313694","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62246","id":692313694,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MjMxMzY5NA==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2020-09-14T21:04:47Z","updated_at":"2020-09-14T21:04:47Z","author_association":"MEMBER","body":"Hiya @hchargois, thanks for raising this issue!  I'm going to mark this with a discuss label so that the analytics team can chat about it later this week, will get back to you after we've discussed it.\r\n\r\nI think the constraint is largely to simplify the code, and for some performance reasons (for most of the specializations, it's easy to check include/exclude at the same time).  Splitting include and exclude out into separate checks/specializations should work in theory and probably won't be more expensive, but we might want to work up some benchmarks to verify.\r\n\r\nThere are also some oddities in there, like iirc `num_partitions` is only used by the `include` side.\r\n\r\nIn any case, it seems like a reasonable request to me... will see what the rest of the team thinks!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/693570538","html_url":"https://github.com/elastic/elasticsearch/issues/62246#issuecomment-693570538","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62246","id":693570538,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MzU3MDUzOA==","user":{"login":"hchargois","id":535234,"node_id":"MDQ6VXNlcjUzNTIzNA==","avatar_url":"https://avatars1.githubusercontent.com/u/535234?v=4","gravatar_id":"","url":"https://api.github.com/users/hchargois","html_url":"https://github.com/hchargois","followers_url":"https://api.github.com/users/hchargois/followers","following_url":"https://api.github.com/users/hchargois/following{/other_user}","gists_url":"https://api.github.com/users/hchargois/gists{/gist_id}","starred_url":"https://api.github.com/users/hchargois/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hchargois/subscriptions","organizations_url":"https://api.github.com/users/hchargois/orgs","repos_url":"https://api.github.com/users/hchargois/repos","events_url":"https://api.github.com/users/hchargois/events{/privacy}","received_events_url":"https://api.github.com/users/hchargois/received_events","type":"User","site_admin":false},"created_at":"2020-09-16T18:05:56Z","updated_at":"2020-09-16T18:05:56Z","author_association":"CONTRIBUTOR","body":"Thanks for your reply!\r\n\r\nFor reference, here is the patch of my proof of concept: https://github.com/hchargois/elasticsearch/commit/3d125637cc15f5d1cce648a81c261293abfdb1de\r\n\r\nI'm not sure what you mean by \"splitting include and exclude out into separate checks/specializations\". My idea behind the POC was on the contrary to unify the `TermListBacked` and `AutomatonBacked` filters. It was easy enough after realizing that all that's needed to correctly retain the include/exclude precedence is to run the set includes, then the automaton, then the set excludes, in that specific order. All in all, the 2 resulting `accept` methods are arguably a little bit more complex than the 4 specialized ones but they can handle any combination of include/exclude and overall there's less lines of code and fewer classes.\r\n\r\nI didn't try merging the partitions-based filter but I think it shouldn't be too hard either, if desired (I personally don't need it but I guess it may make sense to unify it too).\r\n\r\nFor the previously supported cases, it does the same computations as before so the performance should be the same. Of course it's just a POC that needs to be refined but I think the general idea is nevertheless correct. And obviously I'm not too attached to this or any particular solution, as long as it solves our performance issue, that would be fine by me.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/693671297","html_url":"https://github.com/elastic/elasticsearch/issues/62246#issuecomment-693671297","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62246","id":693671297,"node_id":"MDEyOklzc3VlQ29tbWVudDY5MzY3MTI5Nw==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2020-09-16T21:19:23Z","updated_at":"2020-09-16T21:19:23Z","author_association":"MEMBER","body":"Ah, I see.  Yeah approach would probably work fine as well :)\r\n\r\nWe just discussed this a little earlier today in our team meeting, and the consensus is that it seems like a very reasonable enhancement.  If you'd like to polish up the POC and send a PR we'd be happy to review, and we can help work up a Rally benchmark on our end if it seems necessary (it might not though depending on the diff, I agree that if it's largely just moving bits around it's probably not necessary).\r\n\r\nThanks for taking this on! :)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/725654375","html_url":"https://github.com/elastic/elasticsearch/issues/62246#issuecomment-725654375","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62246","id":725654375,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNTY1NDM3NQ==","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2020-11-11T20:50:33Z","updated_at":"2020-11-11T20:50:33Z","author_association":"MEMBER","body":"I think this can close, now that https://github.com/elastic/elasticsearch/pull/63325 has merged! :)","performed_via_github_app":null}]