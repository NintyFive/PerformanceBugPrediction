[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/395963354","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-395963354","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":395963354,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NTk2MzM1NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-06-09T11:54:27Z","updated_at":"2018-06-09T11:54:27Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396064438","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-396064438","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":396064438,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjA2NDQzOA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-06-10T17:01:47Z","updated_at":"2018-06-10T17:01:47Z","author_association":"CONTRIBUTOR","body":"Indeed, PerFieldMappingPostingFormatCodec has access to mappings to use a different postings format for completion fields (it seems like you want to do the same for doc-values), but we do not offer ways to do the same thing from plugins.\r\n\r\nWe used to have ways to configure postings formats and doc-value formats from mappings, but it was very expert and we ended up removing this feature.\r\n\r\nI'm not sure I would like to add such a feature back, but it shouldn't be too hard to do it with a custom build.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396107906","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-396107906","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":396107906,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjEwNzkwNg==","user":{"login":"ybtsdst","id":3139535,"node_id":"MDQ6VXNlcjMxMzk1MzU=","avatar_url":"https://avatars3.githubusercontent.com/u/3139535?v=4","gravatar_id":"","url":"https://api.github.com/users/ybtsdst","html_url":"https://github.com/ybtsdst","followers_url":"https://api.github.com/users/ybtsdst/followers","following_url":"https://api.github.com/users/ybtsdst/following{/other_user}","gists_url":"https://api.github.com/users/ybtsdst/gists{/gist_id}","starred_url":"https://api.github.com/users/ybtsdst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ybtsdst/subscriptions","organizations_url":"https://api.github.com/users/ybtsdst/orgs","repos_url":"https://api.github.com/users/ybtsdst/repos","events_url":"https://api.github.com/users/ybtsdst/events{/privacy}","received_events_url":"https://api.github.com/users/ybtsdst/received_events","type":"User","site_admin":false},"created_at":"2018-06-11T02:46:11Z","updated_at":"2018-06-11T02:54:04Z","author_association":"NONE","body":"Thanks @jpountz \r\n\r\nI find that in es old versions, each field mapping had a 'doc_values_format' settings and later was removed. Is there any traps about why removing this feature?\r\n\r\nBesides, the SPI mechanism allows loading codec simply from classpath, but es seems not supporting this feature. Current the customized codec/doc-value/posting format is hard coded in PerFieldMappingPostingFormatCodec class. I really don't want to add my format into core module(may import some third-party dependencies)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396148802","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-396148802","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":396148802,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjE0ODgwMg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-06-11T07:31:05Z","updated_at":"2018-06-11T07:31:05Z","author_association":"CONTRIBUTOR","body":"Trapiness was not the concern, it was more backward compatibility: Lucene only guarantees backward compatibility for the default codec. If you start using a custom codecs or custom index formats, then either it's your own and you need to maintain it (I suspect there was at most a handful of users in that case), or you are using one of Lucene's experimental formats and then you need to be ready to reindex for each upgrade (even for a minor). In either case, this is something that very few users would choose to do so this feature was not worth maintaining.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396173495","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-396173495","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":396173495,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjE3MzQ5NQ==","user":{"login":"ybtsdst","id":3139535,"node_id":"MDQ6VXNlcjMxMzk1MzU=","avatar_url":"https://avatars3.githubusercontent.com/u/3139535?v=4","gravatar_id":"","url":"https://api.github.com/users/ybtsdst","html_url":"https://github.com/ybtsdst","followers_url":"https://api.github.com/users/ybtsdst/followers","following_url":"https://api.github.com/users/ybtsdst/following{/other_user}","gists_url":"https://api.github.com/users/ybtsdst/gists{/gist_id}","starred_url":"https://api.github.com/users/ybtsdst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ybtsdst/subscriptions","organizations_url":"https://api.github.com/users/ybtsdst/orgs","repos_url":"https://api.github.com/users/ybtsdst/repos","events_url":"https://api.github.com/users/ybtsdst/events{/privacy}","received_events_url":"https://api.github.com/users/ybtsdst/received_events","type":"User","site_admin":false},"created_at":"2018-06-11T09:03:04Z","updated_at":"2018-06-11T09:03:04Z","author_association":"NONE","body":"Thanks @jpountz \r\n\r\nIf backward compatibility is the only concern, will customizing codec be provided as an expert usage? May be some undocumented settings; the option is off by default.\r\n\r\nIn my scenario, I will maintain and upgrade the codec as needed. So I'm hoping there is a way which users can add their own formats in plugins.\r\n\r\nAnother questions is about passing configurations on field(or index settings) to lower formats. I find that default codec has some params which can be tuned in a more fine-grained way(e.g. chunkSize/maxDocsPerChunk/blockSize versus BEST_SPEED/BEST_COMPRESSION). In Lucene, it seems unable to change these low-level params. Why don't expose these low-level params to user? It might help for some optimizing cases. \r\n\r\nMay be I got a wrong direction for optimizing es performance :) ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/396179306","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-396179306","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":396179306,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NjE3OTMwNg==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-06-11T09:23:03Z","updated_at":"2018-06-11T09:23:03Z","author_association":"CONTRIBUTOR","body":"Lucene doesn't expose these settings on purpose because it wants to make sure that all values that an option may take are tested. This is why the only supported option for now is the BEST_SPEED vs BEST_COMPRESSION option, which for now only applies to stored fields.\r\n\r\nWhy do you need a custom codec? What happened in the past is that when a different codec or format proved useful, we tried to think about whether its benefits could be brought to the default codec. For instance there initially was a postings format that was specialized for primary keys, which we replaced in favor of better support for primary keys in the custom codec by inlining postings into the terms dictionary when docFreq==1 and indexOptions==DOCS to save one seek.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/397619758","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-397619758","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":397619758,"node_id":"MDEyOklzc3VlQ29tbWVudDM5NzYxOTc1OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-06-15T13:27:52Z","updated_at":"2018-06-15T13:27:52Z","author_association":"CONTRIBUTOR","body":"Discussed in FixitFriday: it's unlikely we will add this level of configuration again, but we would like to learn more about the use-case, maybe there are other ways that we could support it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/402138529","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-402138529","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":402138529,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMjEzODUyOQ==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2018-07-03T12:28:51Z","updated_at":"2018-07-03T12:28:51Z","author_association":"MEMBER","body":"hi @ybtsdst could you add some info on your usecase like Adrien asked above?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/404385905","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-404385905","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":404385905,"node_id":"MDEyOklzc3VlQ29tbWVudDQwNDM4NTkwNQ==","user":{"login":"ybtsdst","id":3139535,"node_id":"MDQ6VXNlcjMxMzk1MzU=","avatar_url":"https://avatars3.githubusercontent.com/u/3139535?v=4","gravatar_id":"","url":"https://api.github.com/users/ybtsdst","html_url":"https://github.com/ybtsdst","followers_url":"https://api.github.com/users/ybtsdst/followers","following_url":"https://api.github.com/users/ybtsdst/following{/other_user}","gists_url":"https://api.github.com/users/ybtsdst/gists{/gist_id}","starred_url":"https://api.github.com/users/ybtsdst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ybtsdst/subscriptions","organizations_url":"https://api.github.com/users/ybtsdst/orgs","repos_url":"https://api.github.com/users/ybtsdst/repos","events_url":"https://api.github.com/users/ybtsdst/events{/privacy}","received_events_url":"https://api.github.com/users/ybtsdst/received_events","type":"User","site_admin":false},"created_at":"2018-07-12T04:29:55Z","updated_at":"2018-07-12T04:29:55Z","author_association":"NONE","body":"Thanks @jpountz \r\n\r\nSorry for delaying to reply this issue, I have some other things to handle.\r\n\r\nFor current spatial index structure(geohash/quadtree), if the Geometry is complex such as linestrings and polygons, indexing speed is really slow.\r\nI have some spatial data, and I want to have a trial on some other index structures. I store the spatial Geometry object as doc-value, and try to implement a specific codec based on current doc-value format.\r\n\r\nCurrent I find the PerFieldMappingPostingFormatCodec class is able to support my scenario by overiding the getDocValuesFormatForField() method.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/407297077","html_url":"https://github.com/elastic/elasticsearch/issues/31225#issuecomment-407297077","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/31225","id":407297077,"node_id":"MDEyOklzc3VlQ29tbWVudDQwNzI5NzA3Nw==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2018-07-24T06:34:32Z","updated_at":"2018-07-24T06:34:32Z","author_association":"CONTRIBUTOR","body":"@ybtsdst Thanks for the details. I don't think we will want to introduce more complexity in our codebase for such an expert use-case, so I am going to close this issue. Sorry about that. We would be open to discuss it again however if your experiments prove to provide significant gains for geo indexing and search.\r\n\r\nYou might be interested to follow some geo developments in Lucene that are moving the indexing of geo-shape from geohashes or quadtrees in an inverted index to a triangular mesh indexed in an R-tree-like structure: https://issues.apache.org/jira/browse/LUCENE-8396. We haven't performed comprehensive benchmarking yet but we are hopeful that it will help indexing and search speed.","performed_via_github_app":null}]