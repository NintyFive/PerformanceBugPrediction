[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/599535744","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-599535744","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":599535744,"node_id":"MDEyOklzc3VlQ29tbWVudDU5OTUzNTc0NA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-03-16T13:27:47Z","updated_at":"2020-03-16T13:27:47Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/Mapping)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/600780570","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-600780570","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":600780570,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDc4MDU3MA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-18T18:03:47Z","updated_at":"2020-03-18T18:03:47Z","author_association":"CONTRIBUTOR","body":"Maybe there's a third solution.\r\nSolution 1 indexes content twice.\r\nSolution 2 changes the query syntax.\r\nMaybe a wildcard field can automatically have a pseudo multi-field which is defined as being case insensitive. As an example - a field called `foo` can be assumed by users to have a `foo._nocase` field which isn't anything physical -it's really just used as a signal that the verification query should make the pattern-matching it does case insensitive. There's no extra storage costs or extra flags required on query clauses with this approach.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601278639","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-601278639","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":601278639,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTI3ODYzOQ==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T16:29:22Z","updated_at":"2020-03-19T16:43:10Z","author_association":"CONTRIBUTOR","body":"I opened a PR for this third option. https://github.com/elastic/elasticsearch/pull/53814","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601341900","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-601341900","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":601341900,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTM0MTkwMA==","user":{"login":"webmat","id":2300,"node_id":"MDQ6VXNlcjIzMDA=","avatar_url":"https://avatars1.githubusercontent.com/u/2300?v=4","gravatar_id":"","url":"https://api.github.com/users/webmat","html_url":"https://github.com/webmat","followers_url":"https://api.github.com/users/webmat/followers","following_url":"https://api.github.com/users/webmat/following{/other_user}","gists_url":"https://api.github.com/users/webmat/gists{/gist_id}","starred_url":"https://api.github.com/users/webmat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/webmat/subscriptions","organizations_url":"https://api.github.com/users/webmat/orgs","repos_url":"https://api.github.com/users/webmat/repos","events_url":"https://api.github.com/users/webmat/events{/privacy}","received_events_url":"https://api.github.com/users/webmat/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T18:25:55Z","updated_at":"2020-03-19T18:26:11Z","author_association":"NONE","body":"From ECS' POV it's important to preserve the ability to query case sensitively, as well as offer the ability to query case insensitively. Both are important, but my understanding is that _case insensitivity is the most important one of the two_, especially on a fuzzy kind of search like wildcard.\r\n\r\nCurrently in ECS, most fields are `keyword` only. Some fields that require flexibility in how users search, whether because their content is messy (e.g. user agent) or because they're places where users do threat hunting (e.g. file paths & names, command lines) now also have a `text` multi-field. So the canonical string fields (e.g. `myfield`) are always `keyword`, and in some places we have `myfield.text` for full text search.\r\n\r\nI think in most cases, the same fields that have `text` multi-fields will be candidates for `wildcard` as well.\r\n\r\nIf we add wildcard fields to the mix, they would likely be as another multi-field (e.g. `myfield.wildcard`). Here I'm making the assumption that `wildcard` could **not** replace `keyword` as the canonical type, since `keyword` and `wildcard` are not similar enough. Is this assumption correct?\r\n\r\nIf the above is correct, then when adding `wildcard` as a multi-field at `myfield.wildcard`, my understanding of your example would be that we also have `myfield.wildcard._nocase` as a way to query case insensitively?\r\n\r\nIf this is the case, I would like to suggest we flip the behaviours around instead. By default, I think most people would want case insensitive search on a wildcard field. Wildcards are already a fuzzy  search. Then only when case sensitivity is needed (and `keyword` doesn't solve the need), they would resort to a virtual subfield to get wildcard + case sensitivity.\r\n\r\nIn other words, can we do:\r\n\r\n* `myfield.wildcard`: supports wildcards case insensitively\r\n* `myfield.wildcard._cs`: supports wildcards case sensitively (suggestions welcome on the `._cs` naming 🙂)\r\n\r\n@rw-access was telling me Endgame only supports case insensitive search, and then additional filtering or analysis is done, if case is important.\r\n\r\nAnd actually, based on what Ross was telling me, perhaps we could even consider having `wildcard` only do case insensitive, and not even have a virtual sub-field?\r\n\r\n@neu5ron ping","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601408720","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-601408720","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":601408720,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTQwODcyMA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T20:46:29Z","updated_at":"2020-03-25T10:56:48Z","author_association":"CONTRIBUTOR","body":">Here I'm making the assumption that wildcard could not replace keyword as the canonical type, since keyword and wildcard are not similar enough. Is this assumption correct?\r\n\r\nI think the differences come down to:\r\nFeature | keyword | wildcard\r\n--|--|--\r\nSort by speeds| Fast | Not quite as fast (*caveat 1)\r\nAggregate speeds | Fast | Not quite as fast (*caveat 1)\r\nPrefix query speeds (foo*)| Fast | Not quite as fast (*caveat 2)\r\nLeading wildcard query speeds on high-cardinality fields (*foo)| Terrible| Much faster\r\nTerm query. full value match (foo) | Fast  | Not quite as fast (*caveat 2)\r\nFuzzy query. | Y  (if allow expensive queries enabled)| N\r\nRegex query. | Y (if allow expensive queries enabled)  | N\r\nRange query. | Y (if allow expensive queries enabled)  | N\r\nDisk costs for mostly unique values | high | lower\r\nDisk costs for mostly identical values | low | medium\r\nMax character size for a field value|256 for default JSON string mappings, 32,766 Lucene max|unlimited\r\n\r\nCaveat 1: somewhat slower as doc values retrieved from compressed blocks of 32\r\nCaveat 2: somewhat slower because approximate matches with ngrams need verification\r\n\r\n> perhaps we could even consider having wildcard only do case insensitive, and not even have a virtual sub-field?\r\n\r\nThat would be faster to search. There's an overhead in my option 3 converting stored mixed-case values to lower-case at query-time. While it minimises disk storage costs required to support CS and non-CS the better trade-off might be to just make the field fast for the primary use case (non-CS).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601412378","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-601412378","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":601412378,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTQxMjM3OA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2020-03-19T20:55:31Z","updated_at":"2020-03-19T20:55:31Z","author_association":"MEMBER","body":"> And actually, based on what Ross was telling me, perhaps we could even consider having wildcard only do case insensitive, and not even have a virtual sub-field?\r\n\r\nI like the fact that the `wildcard` is just a `keyword` field optimized for wildcard queries. For this reason I think it would be easier to simply allow a `normalizer` like we have for the `keyword` field. This would force users to choose whether they want to normalize upfront but I don't think we should eagerly normalize or create a virtual sub-field.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/601644934","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-601644934","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":601644934,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMTY0NDkzNA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-20T11:07:56Z","updated_at":"2020-03-20T14:13:30Z","author_association":"CONTRIBUTOR","body":"I opened https://github.com/elastic/elasticsearch/pull/53851 to add the normalizer support.\r\n\r\nThere's no normalisation by default but I would like to make it easier for the simple case of users wanting case-insensitive.  Having to declare an `analysis` section just to define and register lower-case token filters is a pain. Can we ship elasticsearch with a named normalizer e.g. `lowercase`? That would make adding case insensitivity for a field a single-liner rather than complex JSON to define the analysis settings for lowercasing. I opened https://github.com/elastic/elasticsearch/issues/53872 to discuss adding a pre-declared named normalizer.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/602091641","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-602091641","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":602091641,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMjA5MTY0MQ==","user":{"login":"neu5ron","id":6351842,"node_id":"MDQ6VXNlcjYzNTE4NDI=","avatar_url":"https://avatars3.githubusercontent.com/u/6351842?v=4","gravatar_id":"","url":"https://api.github.com/users/neu5ron","html_url":"https://github.com/neu5ron","followers_url":"https://api.github.com/users/neu5ron/followers","following_url":"https://api.github.com/users/neu5ron/following{/other_user}","gists_url":"https://api.github.com/users/neu5ron/gists{/gist_id}","starred_url":"https://api.github.com/users/neu5ron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neu5ron/subscriptions","organizations_url":"https://api.github.com/users/neu5ron/orgs","repos_url":"https://api.github.com/users/neu5ron/repos","events_url":"https://api.github.com/users/neu5ron/events{/privacy}","received_events_url":"https://api.github.com/users/neu5ron/received_events","type":"User","site_admin":false},"created_at":"2020-03-21T19:28:04Z","updated_at":"2020-03-21T19:30:24Z","author_association":"NONE","body":"Hey all, co-author of the ugly regex blog here 🙃\nGreat discussion!\n\nI like the proposed solution of keyword and wildcard case insensitive.\nI want to stress however, that if its made a choice then the community will run into similar issues that are occurring elsewhere - which one entity having something different than another. This is not something that certain people need - this is something that all security/logging use cases need.\n\nRegarding storage - I believe solving a visibility gap is critical and the side affect of increasing storage is an acceptable con/negative. Also:\n- For all of elasticsearch history (until recently) everything was a multi field\n- People can and should use roll ups\n- People can and should use enhanced compressions after certain amount of days.\n\n\nThere should still be a good analyzed field similar to the text analyzer - maybe even an improved one for security use case. Because if we dont have an analyzed field then we miss out on a lot of the additional powers of lucene like fuzzy query and the newer terms query. \nHowever, I can live without an analyzed field if we have a case insensitive ability. Because not many were using those advanced queries of lucene - and for those who were they can add it if need be.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/602651953","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-602651953","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":602651953,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMjY1MTk1Mw==","user":{"login":"webmat","id":2300,"node_id":"MDQ6VXNlcjIzMDA=","avatar_url":"https://avatars1.githubusercontent.com/u/2300?v=4","gravatar_id":"","url":"https://api.github.com/users/webmat","html_url":"https://github.com/webmat","followers_url":"https://api.github.com/users/webmat/followers","following_url":"https://api.github.com/users/webmat/following{/other_user}","gists_url":"https://api.github.com/users/webmat/gists{/gist_id}","starred_url":"https://api.github.com/users/webmat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/webmat/subscriptions","organizations_url":"https://api.github.com/users/webmat/orgs","repos_url":"https://api.github.com/users/webmat/repos","events_url":"https://api.github.com/users/webmat/events{/privacy}","received_events_url":"https://api.github.com/users/webmat/received_events","type":"User","site_admin":false},"created_at":"2020-03-23T14:57:16Z","updated_at":"2020-03-23T14:58:13Z","author_association":"NONE","body":"> Here I'm making the assumption that wildcard could not replace keyword as the canonical type, since keyword and wildcard are not similar enough. Is this assumption correct?\r\n\r\nLet me phrase that as a more direct question :-)\r\n\r\nIf `index-1` has field `myfield` as `keyword` and `index-2` has the same field as `wildcard`, would a query across `myfield-*` raise an error such as \"aggregation_execution_exception\"?\r\n\r\nAlso, can we do aggregations on `wildcard` fields?\r\n\r\nUnderstanding whether we can replace `keyword` fields transparently with the `wildcard` data type where appropriate will inform our strategy here.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/602655088","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-602655088","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":602655088,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMjY1NTA4OA==","user":{"login":"neu5ron","id":6351842,"node_id":"MDQ6VXNlcjYzNTE4NDI=","avatar_url":"https://avatars3.githubusercontent.com/u/6351842?v=4","gravatar_id":"","url":"https://api.github.com/users/neu5ron","html_url":"https://github.com/neu5ron","followers_url":"https://api.github.com/users/neu5ron/followers","following_url":"https://api.github.com/users/neu5ron/following{/other_user}","gists_url":"https://api.github.com/users/neu5ron/gists{/gist_id}","starred_url":"https://api.github.com/users/neu5ron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neu5ron/subscriptions","organizations_url":"https://api.github.com/users/neu5ron/orgs","repos_url":"https://api.github.com/users/neu5ron/repos","events_url":"https://api.github.com/users/neu5ron/events{/privacy}","received_events_url":"https://api.github.com/users/neu5ron/received_events","type":"User","site_admin":false},"created_at":"2020-03-23T15:02:42Z","updated_at":"2020-03-23T15:02:42Z","author_association":"NONE","body":"i think the gist is we need to have keyword and have to wildcard lowercase. if the standard is set, implemented in beats or what not, and communicated then we should not have to worry about such overlap of fields - right @webmat","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/603152713","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-603152713","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":603152713,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMzE1MjcxMw==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-24T10:20:23Z","updated_at":"2020-03-24T10:22:22Z","author_association":"CONTRIBUTOR","body":">Understanding whether we can replace keyword fields transparently with the wildcard data type where appropriate will inform our strategy here.\r\n\r\nAll field types are expected to respond to requests for the same set of query types prefix/term/wildcard/range/fuzzy etc.\r\nSome field types outright reject some query types (eg wildcard currently doesn't do fuzzy) while others will attempt to perform a query type but not nearly as fast as other field types because their data structures aren't optimised for that case. For this reason it's not always a yes/no supported-features matrix for field types - there are variable performance characteristics. Perhaps the main reason for creating the wildcard field is not that `keyword` fields couldn't run wildcard queries but because they did so very slowly.\r\n\r\nSee my feature comparison table [here](https://github.com/elastic/elasticsearch/issues/53603#issuecomment-601408720)\r\n\r\nI'm also working on a blog for the 7.7 release to help expand on choosing between field types now that we have wildcard in the mix.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/603164586","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-603164586","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":603164586,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMzE2NDU4Ng==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2020-03-24T10:43:39Z","updated_at":"2020-03-24T10:43:39Z","author_association":"CONTRIBUTOR","body":"@markharwood Actually I like your solution 2. It is simple, does not increase storage requirements, and I agree with you that false positives shouldn't increase dramatically. I wouldn't mind adding a `case_sensitive: true/false` option to wildcard and regex queries, we could rewrite the automaton for text/keyword fields and lowercase values dynamically for `wildcard` fields.\r\n\r\nI agree with you that case-insensitive search is important. Among all the ways that content may be normalized, I believe that case folding is a bit special, for instance `grep` has an option for case-insensitive search, which I seem to use more often than not given my shell history, while it doesn't have any option for accent removal or other forms of normalization: users are expected to tweak their regex in such cases. I think it makes sense for us to follow a similar model, by introducing an `ignore_case` or `case_sensitive` option to the `wildcard` and `regex` queries.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/603176918","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-603176918","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":603176918,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMzE3NjkxOA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-24T11:10:02Z","updated_at":"2020-03-24T11:15:16Z","author_association":"CONTRIBUTOR","body":"> I believe that case folding is a bit special\r\n\r\nYes, my assumption is that it should be optimising for string equivalence as determined by machines rather than any sloppier equivalence that might be acceptable to humans. In other words the stricter set of normalization rules that are permitted by the OS when referring to files (so I doubt accent removal is required). ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/605510095","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-605510095","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":605510095,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNTUxMDA5NQ==","user":{"login":"defensivedepth","id":954732,"node_id":"MDQ6VXNlcjk1NDczMg==","avatar_url":"https://avatars0.githubusercontent.com/u/954732?v=4","gravatar_id":"","url":"https://api.github.com/users/defensivedepth","html_url":"https://github.com/defensivedepth","followers_url":"https://api.github.com/users/defensivedepth/followers","following_url":"https://api.github.com/users/defensivedepth/following{/other_user}","gists_url":"https://api.github.com/users/defensivedepth/gists{/gist_id}","starred_url":"https://api.github.com/users/defensivedepth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/defensivedepth/subscriptions","organizations_url":"https://api.github.com/users/defensivedepth/orgs","repos_url":"https://api.github.com/users/defensivedepth/repos","events_url":"https://api.github.com/users/defensivedepth/events{/privacy}","received_events_url":"https://api.github.com/users/defensivedepth/received_events","type":"User","site_admin":false},"created_at":"2020-03-28T19:48:23Z","updated_at":"2020-03-28T19:48:23Z","author_association":"NONE","body":"Greetings All - \r\n\r\nI have been following this thread closely, as it directly impacts the project I work on (@security-onion-solutions).\r\n\r\nAt this point, have any final decisions been made about how this should be handled?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606007818","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606007818","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606007818,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjAwNzgxOA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-30T13:44:10Z","updated_at":"2020-03-30T13:56:20Z","author_association":"CONTRIBUTOR","body":">At this point, have any final decisions been made about how this should be handled?\r\n\r\nWe're still deciding. The options and their pros/cons here.\r\n\r\nOption | implementation detail  | pros | cons\r\n---|-----|---|----\r\n1 index-time treatment | Wildcard field has the option of a normalizer (like `keyword` field) | Fast search, works with multiple query types | requires more disk space if both case sensitive and insensitive search required\r\n2 query-time (via flags) |  Add case-sensitive flags to `regex` and `wildcard` query types| Lower disk costs | inconsistent query logic (flags won't work on some fields eg `text` and only accepted on selected query types), [slower search speeds ](https://github.com/elastic/elasticsearch/pull/53814#issuecomment-601282855)\r\n3 query-time (via virtual field) |  A[ virtual sub-field ](https://github.com/elastic/elasticsearch/pull/53814) is created for denoting case insensitive searches| Lower disk costs, works with multiple query types | [slower search speeds](https://github.com/elastic/elasticsearch/pull/53814#issuecomment-601282855)\r\n\r\n\r\nIt's also possible that option 1 could co-exist with options 2 or 3 but it would become confusing if any index-time choices contradict the query-time choices e.g a case-sensitive mixed-case query is targeting a field which has opted to use a lower-case normalizer.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606163759","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606163759","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606163759,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjE2Mzc1OQ==","user":{"login":"defensivedepth","id":954732,"node_id":"MDQ6VXNlcjk1NDczMg==","avatar_url":"https://avatars0.githubusercontent.com/u/954732?v=4","gravatar_id":"","url":"https://api.github.com/users/defensivedepth","html_url":"https://github.com/defensivedepth","followers_url":"https://api.github.com/users/defensivedepth/followers","following_url":"https://api.github.com/users/defensivedepth/following{/other_user}","gists_url":"https://api.github.com/users/defensivedepth/gists{/gist_id}","starred_url":"https://api.github.com/users/defensivedepth/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/defensivedepth/subscriptions","organizations_url":"https://api.github.com/users/defensivedepth/orgs","repos_url":"https://api.github.com/users/defensivedepth/repos","events_url":"https://api.github.com/users/defensivedepth/events{/privacy}","received_events_url":"https://api.github.com/users/defensivedepth/received_events","type":"User","site_admin":false},"created_at":"2020-03-30T18:24:32Z","updated_at":"2020-03-30T18:24:32Z","author_association":"NONE","body":"Thanks @markharwood \r\n\r\nI think that increased storage is an acceptable trade-off in this particular situation - my vote would be option 1).\r\n\r\nThere are two parts to solving this issue: 1) Development of the solution 2) Getting people to use the solution. If the solution is optional, it will become yet another esoteric setting that users will need to figure out.\r\n\r\nTL;DR: It needs to be non-optional, or at least, default to the proposed solution, with a way to disable it if need be.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606530236","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606530236","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606530236,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjUzMDIzNg==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-31T10:12:28Z","updated_at":"2020-03-31T10:13:04Z","author_association":"CONTRIBUTOR","body":"> If the solution is optional, it will become yet another esoteric setting that users will need to figure out.\r\n\r\nThat's the dilemma. We could up-front automatically optimise search for every conceivable query type (wildcard, exact-value-match, word-based matches, case sensitive, case-insensitive) but that would require multiple data structures which means more disk space. If users only want to pay for what they need they must opt in to these specialised field configurations or live with the limitations of an unoptimised field for some queries (eg wildcard searches on a keyword field).\r\n\r\nAll of the above is a statement on elasticsearch's general policy to handling string fields. \r\nWhen it comes to a more targeted domain like [ECS](https://www.elastic.co/blog/introducing-the-elastic-common-schema) the query types  we want to support for particular fields are know-able in advance. Picking the right elasticsearch configuration for each field defined in ECS is where wildcard field will see the adoption and those choices should be debated in ECS github issues rather than here. \r\nIn core elasticsearch we just need to make it possible for ECS to configure solutions that are appropriate rather than automatically prescribing wildcard support for all elasticsearch users.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606548769","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606548769","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606548769,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjU0ODc2OQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-03-31T10:48:14Z","updated_at":"2020-03-31T10:48:14Z","author_association":"MEMBER","body":">  When it comes to a more targeted domain like ECS the query types we want to support for particular fields are know-able in advance.\n\nI think this has been _understated_ in this thread. There's been some back and forth largely about what the _defaults_ are, but in my opinion this will largely come down to the mappings provided with ECS. Personally, I would lean towards conservative defaults within Elasticsearch and communicating well what those are and how to change them. It isn't necessarily fair to all users to be affected by a bias towards common SIEM use cases.\n\nECS is where it seems most appropriate to define both wildcard and case sensitivity on a per-field basis.\n\n> I wouldn't mind adding a case_sensitive: true/false option to wildcard and regex queries, we could rewrite the automaton for text/keyword fields and lowercase values dynamically for wildcard fields.\n\n++ for this query-time transformation. It also has the nice property of backwards compatibility. We've been talking about case-sensitivity with EQL as well and I was considering something like this when we want a case-insensitive search on a field indexed with its original case. Being able to do this on the fly and automagically, without the hoops @neu5ron mentions in his post is a big win.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606557142","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606557142","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606557142,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjU1NzE0Mg==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-31T11:04:07Z","updated_at":"2020-03-31T11:11:57Z","author_association":"CONTRIBUTOR","body":">We've been talking about case-sensitivity with EQL as well and I was considering something like this when we want a case-insensitive search on a field indexed with its original case. \r\n\r\nWorth noting that while this is a win for avoiding reindexing it's a lose for the user attempting a case-sensitive search on a field indexed with lower-case. It's a break with the long-held principle of case-sensitivity being determined by choice of field names, not query flags. That's why I proposed option 3.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606573701","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606573701","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606573701,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjU3MzcwMQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-03-31T11:37:52Z","updated_at":"2020-03-31T11:37:52Z","author_association":"MEMBER","body":"Yes support for 1 and 3 is perfect IMO. \n\nWith 2 and 3, it looks like its still the same transformation, but just a difference in whether it's applied to one field or all fields in the query.\n\nWould the proposed `.lower`/`.nocase` virtual subfield be supported with both keyword _and_ wildcard? Both have independent value and many rules will not need wildcards, but still need case-insensitivity.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/606590537","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-606590537","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":606590537,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNjU5MDUzNw==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-03-31T12:17:17Z","updated_at":"2020-03-31T12:44:25Z","author_association":"CONTRIBUTOR","body":">Would the proposed .lower/.nocase virtual subfield be supported with both keyword and wildcard? \r\n\r\nThat's possible but I'm concerned how other query types (term, terms, prefix) would be expected to behave on a keyword virtual field. With a wildcard field, all supported query types (wildcard/term/prefix etc) have a quick approximation ngram match which must be verified by retrieving the docvalue which is where we get the opportunity to lowercase on the fly if required. Some slowness is a built-in expectation for all query types so the cost of lowercasing on the fly in a wildcard's virtual subfield is comparatively small. \r\n\r\nHowever with a `keyword` field the non-wildcard queries like `term` query are expected to be fast because they look up a single term directly in the index. Having a virtual `.nocase` field on a keyword would not be a cheap operation for `term` queries because they'd have to scan all the mixed case terms in the index (much like a leading wildcard query does today). There's no ngram approximation index to accelerate. That feels potentially trappy.\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/629280978","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-629280978","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":629280978,"node_id":"MDEyOklzc3VlQ29tbWVudDYyOTI4MDk3OA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-05-15T14:57:06Z","updated_at":"2020-05-15T14:57:06Z","author_association":"CONTRIBUTOR","body":"After further discussion we concluded it would be useful to offer query-time case insensitive search options with the assumption they could be used on both wildcard and keyword fields.\r\n\r\nThere are a number of open questions still at this stage:\r\n1) What query types will offer a parameter for case sensitive/insensitive matching? We assume the RegExp query would but not sure what other types would (wildcard? term? prefix?)\r\n2) What do we do if a user supplies a case sensitivity preference at query-time and the targeted keyword field has used some form of normalizer at index time?\r\n\r\nUnlike the wildcard field, we can't always guarantee a keyword field will have the original un-normalised strings easily accessible from doc values.  If the content was normalised to lowercase and the query is a mixed case string with a case sensitive parameter we should probably error loudly rather than fail to match silently. Errors can be worked around but silent failures go unnoticed and can mislead users.\r\n\r\nWe agreed that a query with a case-sensitivity parameter set should fail when used on a `text` field because these nearly always perform some kind of normalisation at index time. Users should continue to think of text matching as something that has to have normalisation logic applied at index time.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634547390","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-634547390","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":634547390,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDU0NzM5MA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T09:37:45Z","updated_at":"2020-05-27T09:38:32Z","author_association":"CONTRIBUTOR","body":"In terms of implementing case insensitive regex query on keyword fields - which of these 2 approaches would we use?\r\nA) Use a new query implementation which does a linear scan of all doc values, lowercasing the regex query and each of the doc values read from disk on the fly or\r\nB) Use the existing RegExpQuery but pre-process the regular expression used by expanding the permutations to all case variations (e.g. a search for \"foo\" is expanded to \"[Ff][Oo][Oo]\")\r\n\r\nA is simple to implement but slow.\r\nB is more complex to implement and perhaps not necessarily faster.\r\nDid you already have an idea on how this would work @jimczi ?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/634593279","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-634593279","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":634593279,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDU5MzI3OQ==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T11:15:53Z","updated_at":"2020-05-27T11:15:53Z","author_association":"MEMBER","body":"I prefer option B, the automaton is intersected with the terms dictionary so the expansion is limited to matching terms. In the worst case, all permutations exist in the dictionary, but the multi-term query handles it smoothly with the `CONSTANT_SCORE_REWRITE` method.\r\n\r\n> What query types will offer a parameter for case sensitive/insensitive matching? We assume the RegExp query would but not sure what other types would (wildcard? term? prefix?)\r\n\r\nI have a slight preference for a new `exact_match` query as described in this [issue](https://github.com/elastic/elasticsearch/issues/53181). We need a query with a clear intent (matches the entire input) but term-based queries adapt their behavior based on the type of the field.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/636036890","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-636036890","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":636036890,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNjAzNjg5MA==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-05-29T15:30:12Z","updated_at":"2020-05-29T15:30:12Z","author_association":"CONTRIBUTOR","body":"Update - a PR for case insensitive Regex searches is happening in[ Lucene](https://github.com/apache/lucene-solr/pull/1541)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/636897676","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-636897676","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":636897676,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNjg5NzY3Ng==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-06-01T14:39:06Z","updated_at":"2020-06-01T15:38:15Z","author_association":"CONTRIBUTOR","body":"Following some discussion we concluded that `term`, `prefix` and `wildcard` queries should also have a case insensitivity option.  \r\nSadly this can't be a simple boolean flag - for these queries we assume if you do nothing the matching is case sensitive. Unfortunately that it is [not true for all fields](https://github.com/elastic/elasticsearch/issues/25487) - normalized keyword fields monkey with the search terms in term, wildcard and prefix queries whereas other fields do not.\r\nGiven the BWC issues this brings up we probably need a tri-state parameter rather than a boolean. Something like:\r\n\r\n    \"match_mode\" :  \"case_sensitive\" / \"case_insensitive\" / \"legacy\"\r\n\r\nThe \"legacy\" mode would be the default, preserving the current (inconsistent) matching behaviour. The 2 other modes would do exactly as you would expect in relation to matching the search input with the indexed tokens (which can differ from the JSON source)\r\n\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/637003120","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-637003120","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":637003120,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNzAwMzEyMA==","user":{"login":"webmat","id":2300,"node_id":"MDQ6VXNlcjIzMDA=","avatar_url":"https://avatars1.githubusercontent.com/u/2300?v=4","gravatar_id":"","url":"https://api.github.com/users/webmat","html_url":"https://github.com/webmat","followers_url":"https://api.github.com/users/webmat/followers","following_url":"https://api.github.com/users/webmat/following{/other_user}","gists_url":"https://api.github.com/users/webmat/gists{/gist_id}","starred_url":"https://api.github.com/users/webmat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/webmat/subscriptions","organizations_url":"https://api.github.com/users/webmat/orgs","repos_url":"https://api.github.com/users/webmat/repos","events_url":"https://api.github.com/users/webmat/events{/privacy}","received_events_url":"https://api.github.com/users/webmat/received_events","type":"User","site_admin":false},"created_at":"2020-06-01T17:31:39Z","updated_at":"2020-06-01T17:31:39Z","author_association":"NONE","body":"A tricky situation, but I like this proposal 👍 ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/637727996","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-637727996","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":637727996,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNzcyNzk5Ng==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2020-06-02T18:28:30Z","updated_at":"2020-06-02T18:28:30Z","author_association":"CONTRIBUTOR","body":"@markharwood  Is the plan first to correct term queries to [remove normalization](https://github.com/elastic/elasticsearch/issues/25487) from them?\r\nOtherwise, if term queries still do normalization,  will it `case_sensitive` option work at all?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/638723287","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-638723287","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":638723287,"node_id":"MDEyOklzc3VlQ29tbWVudDYzODcyMzI4Nw==","user":{"login":"markharwood","id":170925,"node_id":"MDQ6VXNlcjE3MDkyNQ==","avatar_url":"https://avatars0.githubusercontent.com/u/170925?v=4","gravatar_id":"","url":"https://api.github.com/users/markharwood","html_url":"https://github.com/markharwood","followers_url":"https://api.github.com/users/markharwood/followers","following_url":"https://api.github.com/users/markharwood/following{/other_user}","gists_url":"https://api.github.com/users/markharwood/gists{/gist_id}","starred_url":"https://api.github.com/users/markharwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markharwood/subscriptions","organizations_url":"https://api.github.com/users/markharwood/orgs","repos_url":"https://api.github.com/users/markharwood/repos","events_url":"https://api.github.com/users/markharwood/events{/privacy}","received_events_url":"https://api.github.com/users/markharwood/received_events","type":"User","site_admin":false},"created_at":"2020-06-04T09:10:18Z","updated_at":"2020-06-04T10:10:47Z","author_association":"CONTRIBUTOR","body":">Is the plan first to correct term queries to remove normalization from them?\r\n\r\n@mayya-sharipova that's not clear to me - it will need thrashing out on https://github.com/elastic/elasticsearch/issues/25487 \r\n\r\nFor the moment I'm assuming we're not relying on getting that fix because it's a breaking change that will need to wait for 8.0 and we want case insensitive search out in 7x \r\n\r\n>will it case_sensitive option work at all?\r\n\r\nNo - we could choose to keep the provided query string's case if case-sensitive explicitly set in the query's param, but the problem is `text` fields and normalized `keyword` fields are likely to have erased case differences in the index making the setting pointless in those cases.\r\nI think our policy on policing pointless queries was to just allow them given @jimczi said this:\r\n\r\n> The scope of the case insensitive option is the query terms, not the indexed terms so I don’t think it should be considered that matching  a text field with case insensitive have silent failures\r\n\r\nI'm not sure if the last \"case insensitive\" in the above statement should have read \"case sensitive\". Either way, I took that to mean we are not going to try warn or error if a user picks an inappropriate combination of query and index settings eg a case sensitive search on a `text` field that indexes as lower case. The \"query plausibility\" test I proposed was an attempt to detect useless query/field combinations and throw errors but it wasn't a foolproof test for all query types so I think we are relying on users knowing what they are doing in relation to their choice of indexed terms.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/638883036","html_url":"https://github.com/elastic/elasticsearch/issues/53603#issuecomment-638883036","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/53603","id":638883036,"node_id":"MDEyOklzc3VlQ29tbWVudDYzODg4MzAzNg==","user":{"login":"mayya-sharipova","id":5738841,"node_id":"MDQ6VXNlcjU3Mzg4NDE=","avatar_url":"https://avatars1.githubusercontent.com/u/5738841?v=4","gravatar_id":"","url":"https://api.github.com/users/mayya-sharipova","html_url":"https://github.com/mayya-sharipova","followers_url":"https://api.github.com/users/mayya-sharipova/followers","following_url":"https://api.github.com/users/mayya-sharipova/following{/other_user}","gists_url":"https://api.github.com/users/mayya-sharipova/gists{/gist_id}","starred_url":"https://api.github.com/users/mayya-sharipova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mayya-sharipova/subscriptions","organizations_url":"https://api.github.com/users/mayya-sharipova/orgs","repos_url":"https://api.github.com/users/mayya-sharipova/repos","events_url":"https://api.github.com/users/mayya-sharipova/events{/privacy}","received_events_url":"https://api.github.com/users/mayya-sharipova/received_events","type":"User","site_admin":false},"created_at":"2020-06-04T14:25:18Z","updated_at":"2020-06-04T14:25:18Z","author_association":"CONTRIBUTOR","body":"@markharwood Thanks for the clarification, makes sense.\r\n\r\n>  we could choose to keep the provided query string's case if case-sensitive explicitly set in the query's param\r\n\r\nThis makes sense to me:  when `case_sensitive` search is requested, we will never run the query through a normalizer.","performed_via_github_app":null}]