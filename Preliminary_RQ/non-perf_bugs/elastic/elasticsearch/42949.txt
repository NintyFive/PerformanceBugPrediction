{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/42949/events","html_url":"https://github.com/elastic/elasticsearch/issues/42949","id":453092369,"node_id":"MDU6SXNzdWU0NTMwOTIzNjk=","number":42949,"title":"Refactor ValuesSource and related classes","user":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":416200220,"node_id":"MDU6TGFiZWw0MTYyMDAyMjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebreaking-java","name":">breaking-java","color":"d93f0b","default":false,"description":null},{"id":837440720,"node_id":"MDU6TGFiZWw4Mzc0NDA3MjA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Erefactoring","name":">refactoring","color":"dddddd","default":false,"description":null},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null},{"id":1967499105,"node_id":"MDU6TGFiZWwxOTY3NDk5MTA1","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Analytics","name":"Team:Analytics","color":"fef2c0","default":false,"description":"Meta label for analytics/geo team"}],"state":"closed","locked":false,"assignee":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"assignees":[{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2019-06-06T15:19:50Z","updated_at":"2020-06-15T20:37:01Z","closed_at":"2020-06-15T20:33:40Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The aggregations framework defines several similar but subtly different classes & enums to represent what type of data an aggregation operates on.  Their correct usage and interaction is not obvious, especially to new developers.  This refactoring aims to make input type specification for aggregations easier to understand.\r\n## Plan\r\nTo replace the assorted hard coded `ValuesSource` references, we want to build a dynamic registry which will map Field types to Values Sources and specific aggregator implementations.\r\n\r\n### TODO - ~before~ Fast follow after merging to master\r\n- [x] Get hard coded `ValuesSources` out of `ValuesSourceConfig`\r\n    - [x] `toValuesSource` (#48320)\r\n    - [x] `resolve` - This will get done with the registry prototype\r\n- [x] Registry Prototype (#48758)\r\n    - [x] Look up aggregators by `ValueSourceType` (working in prototype for simple case)\r\n    - [x] Resolve `ValuesSourceType` dynamically\r\n- [x] Formalize registration process\r\n    - [x] Finalize where registration happens for core aggregations\r\n    - [x] Finalize where registration happens for plugin aggregations & aggregators\r\n    - [x] Replace prototype singleton with production-ready implemetation #51710\r\n    - [x] Demonstrate that we can correctly register a new type from a plugin. #53298 \r\n- [ ] Convert Aggregations\r\n    - [ ] Core\r\n        - [x] Geo Centroid (@talevy) #53040 \r\n        - [x] Geo Hash Grid (@talevy) #53037\r\n        - [x] Geo Tile Grid (@talevy) #53037\r\n        - [x] Auto Date Histogram (Tozzi) #55687\r\n        - [x] Date Histogram (Tozzi) #53484\r\n        - [x] Histogram\r\n        - [x] Missing #53511\r\n        - [x] Date Range #52918\r\n        - [x] Geo Distance (@talevy) (depends on RangeAggregator)\r\n        - [x] IP Range #55831\r\n        - [x] Range #52918\r\n        - [x] Diversified\r\n        - [x] Significant Terms #52590\r\n        - ~[ ] Significant Text (@polyfractal  WIP)~ not VSAB\r\n        - [x] Rare Terms #52166\r\n        - [x] Terms -  #51182 \r\n        - [x] Average - #52752\r\n        - [x] Cardinality - #51337 \r\n        - [x] Extended Stats - #53227\r\n        - [x] Geo Bounds (@talevy) #53033 #53034\r\n        - [x] Max - #52219 \r\n        - [x] Median - #52945\r\n        - [x] Min - #52219 \r\n        - [x] Percentile Rank - #51693 \r\n        - [x] Percentiles - #51639\r\n        - [x] Histo field / percentiles @polyfractal #53298\r\n        - [x] Stats - #52891\r\n        - [x] Sum - #52571\r\n        - [x] Value Count - #52225 \r\n    - [ ] Analytics Package\r\n        - [x] String Stats - #52875\r\n        - [x] Boxplot - #53132\r\n    - [x] Parent Join Package\r\n        - [x] Children (Tozzi)\r\n        - [x] Parent (Tozzi)\r\n- [x] Remove the EquivalenceType/isA logic in `ValueType`.  This will involve changing how we do type checking of userValueTypeHints in the parser. #53198\r\n- [ ] Additional Testing\r\n    - [ ] Numeric metric aggs (e.g. Max) formatting for date values\r\n    - [ ] Mock-script unit tests for `ValuesSource` based aggs\r\n    - [ ] Unmapped & missing tests for Auto Date Histogram\r\n    - [ ] Unmapped & Missing tests for Geo aggs\r\n    - [ ] Add the supported type tests to the remaining aggs\r\n    - [ ] Plugin support for automated field test\r\n- [x] Remove (or at least dramatically decrease the surface area of) `ValueType`\r\n    - Non-VSAB aggregations still use `ValueType`, but refactoring those is out of scope for the initial merge.\r\n    - VSAB still uses `ValueType` for parsing user value hints.  There's a post-merge PR for removing that.\r\n- [x] Remove `ValuesSourceType` info from `ValuesSourceAggregationBuilder` (#48638)\r\n- [x] Remove generic from `ValuesSourceConfig` (and probably other places)\r\n- [x] Remove remaining special behavior around `ValuesSourceType.ANY` & and remove ANY #51539\r\n- [x] Don't rely on serializing `CoreValuesSourceType` #51276\r\n- [ ] Remove any remaining hard coded `ValuesSource` references\r\n- [x] Make `ValuesSourceConfig` immutable #52729\r\n- [x] Package Docs for `o.e.s.aggregations.support` (Tozzi) #53427\r\n- [ ] Ask Kibana QA to run their tests as a real-world integration/smoke test for missed or accidentally altered semantics - We'll get this for \"free\" once we merge to master\r\n- [ ] CCS Testing with 7.x\r\n\r\n### TODO - backport\r\n- [x] Remove `List.of()` usage\r\n- [ ] CCS Testing with 6.x\r\n- [ ] Extra-careful review of exception types to make sure we don't have breaking changes\r\n- [ ] PRs to cherry pick from master:\r\n    - [x] Tests for agg missing values #51068 (Tozzi)\r\n    - [x] Refactor Percentiles/Ranks aggregation builders and factories #51887 (PR: https://github.com/elastic/elasticsearch/pull/54537)\r\n    - [x] Unit tests for Range and DateRange aggs #52380 (Tozzi)\r\n    - [x] Comprehensively test supported/unsupported field type:agg combinations #52493 (PR: https://github.com/elastic/elasticsearch/pull/54451)\r\n    - [x] Add supported type tests for Percentiles/Ranks #52597\r\n    - [x] Use newIndexSearcher() to avoid incompatible readers in AggregatorTestCase#testSupportedFieldTypes #52723 (PR: https://github.com/elastic/elasticsearch/pull/54451)\r\n    - [ ] Tests introduced in https://github.com/elastic/elasticsearch/issues/53431\r\n\r\n### TODO - Post merge\r\n\r\n- [x] After all VSAB aggregations are converted, remove the legacy shim from VSRegistry\r\n- [x] Stop returning null ValuesSource from VSConfig for unmapped case - see #53238\r\n- [ ] Deprecation plan for `serializeTargetValueType` (doesn't strictly need to be part of this refactor).  The following classes override this method:\r\n    - `CardinalityAggregationBuilder`\r\n    - `MissingAggregationBuilder`\r\n    - `ValueCountAggregationBuilder`\r\n    - `RareTermsAggregationBuilder`\r\n    - `SignificantTermsAggregationBuilder`\r\n    - `TermsAggregationBuilder`\r\n- [x] Unify constructor signature (and thus `AggregatorSupplier`) between Min&Max and other metrics.\r\n- [ ] Clean up user value hint parsing - see #53424\r\n- [ ] ValuesSourceRegistry for `MultiValuesSourceAggregationBuilder` subclasses\r\n- [ ] ValuesSourceRegistry for `ArrayValuesSourceAggregationBuilder` subclasses\r\n- [ ] Remove remaining uses of `ValueType`\r\n- [ ] Rename everything.\r\n\r\n## Out of Scope:\r\nAfter considerable discussion, we've decided to deal with the multivalued aggregations at a later point.  The current abstractions there aren't working as well as we'd like, so investing more in them right now doesn't seem like a good use of time.  \r\n\r\n## Background\r\n### Involved Classes\r\n\r\n#### ValuesSource & its subclasses\r\nThese are thin wrappers which provide a unified interface to different ways of getting input data (e.g. DocValues from Lucene, or script output).  A class hierarchy defines the type of values returned by the source.\r\n\r\n#### ValueSourceType\r\nA small enum who's values roughly correspond to the first level subclasses of `ValuesSource`.  This gets passed as a constructor argument to `ValuesSourceConifg` as a hint for what type of values source it should later construct. \r\n\r\n#### ValueType\r\nA more robust enum specifying a wider range of types than `ValuesSourceType`.  The instances of this enum provide a mapping back to a `ValuesSourceType`.  This is used when users supply type hints, e.g. as part of a missing value specification.\r\n\r\n#### ValuesSourceConfig\r\nThis class resolves the actual `ValuesSource` to use on a given shard for the aggregation.  It considers script values, missing values, and mapped fields.\r\n\r\n#### ValuesSourceAggregationBuilder\r\nThis is the base class for all aggregations using the value source model, and it ties together usage of all of the above classes.  It is generic over a `ValuesSource` class, and accepts a `ValuesSourceType` and two `ValueType` parameters.  How those different value classes interact is not at all obvious; a good first step at this refactoring would be just documenting those relationships.  \r\n\r\n### Next Steps\r\nI'm open to discussion as to what the best way to clean this up should be.  In the interest of seeding that discussion, the following are my first-pass suggestions.\r\n\r\n#### Clarify ValuesSourceAggregationBuilder\r\nThis would consist of descriptive field names & comments around the intended use of the various type parameters `ValuesSourceAggregationBuilder` accepts.  Some javadoc on the intended roles of `ValueSourceType` and `ValueType` would help too.\r\n\r\n#### Formalize relationship between `ValuesSourceType` and `ValuesSource`\r\nCurrently, these are related via some cascading `if` statements in `ValuesSourceConfig`, but this misses out on many of the benefits of having an enum in the first place.  Notably, nothing enforces that all enum values are accounted for, and developers wishing to understand the relationship between two classes must look to a third class for that information.\r\n\r\n#### ValueSourceType.ANY\r\n`ValuesSourceType.ANY` creates a few edge cases.  It's the only `ValuesSourceType` that doesn't map cleanly back to a `ValuesSource` subclass.  `ValuesSourceConfig` interprets it as a bytes source, except in the case of a script, which allows `BYTES` but not `ANY`.  Aggregations that can operate on multiple input types (e.g. TermsAggregation, which can operate on strings or numbers) use `ValuesSourceType.ANY` to indicate this, which is deceptive since later in the process they are restricted to more specific source types.\r\n\r\n#### ValuesSourceType Ordinal Serialization Issue\r\nIn addition to any other refactoring work being done here, `ValuesSourceType` is an enum being serialized by ordinal value, which is prone to error.  If we keep this enum, we should adopt a pattern of serializing based on an ID we control, to allow for deletes & reorderings later.  See `ValueType`, which does this correctly.\r\n\r\n#### `ValueType.NUMBER` and `ValueType.NUMERIC`\r\n`ValueType` specifies both `NUMBER` and `NUMERIC`, which are apparently identical as far as the enum is concerned.  There's a five year old TODO asking about the difference between these two.  We should either merge them, or clarify why we need both.\r\n\r\n#### Rename `ValuesSource`\r\n`ValuesSource` is very close to `ValueSource`, which is an interface in `org.elasticsearch.ingest`.  It's easy to pull up the wrong class in Intellij, especially if you've only heard the name not seen it.","closed_by":{"login":"not-napoleon","id":979663,"node_id":"MDQ6VXNlcjk3OTY2Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/979663?v=4","gravatar_id":"","url":"https://api.github.com/users/not-napoleon","html_url":"https://github.com/not-napoleon","followers_url":"https://api.github.com/users/not-napoleon/followers","following_url":"https://api.github.com/users/not-napoleon/following{/other_user}","gists_url":"https://api.github.com/users/not-napoleon/gists{/gist_id}","starred_url":"https://api.github.com/users/not-napoleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-napoleon/subscriptions","organizations_url":"https://api.github.com/users/not-napoleon/orgs","repos_url":"https://api.github.com/users/not-napoleon/repos","events_url":"https://api.github.com/users/not-napoleon/events{/privacy}","received_events_url":"https://api.github.com/users/not-napoleon/received_events","type":"User","site_admin":false},"performed_via_github_app":null}