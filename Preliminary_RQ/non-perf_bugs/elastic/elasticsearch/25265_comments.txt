[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/308855700","html_url":"https://github.com/elastic/elasticsearch/issues/25265#issuecomment-308855700","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/25265","id":308855700,"node_id":"MDEyOklzc3VlQ29tbWVudDMwODg1NTcwMA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2017-06-15T20:24:00Z","updated_at":"2017-06-15T20:24:00Z","author_association":"MEMBER","body":"Well, I can see why you think that although I have some clarifying explanations here. You see, there was a nasty bug introduced in 5.3.0 which caused data to be sprayed into `default.path.data` even if the user did not intend to (because they had set `path.data`). Starting in 5.3.1, we want to check if a user ended up in this awful situation. To do this, we need to grant read permission (from a security manager perspective) on the directory (you need read permissions after the security manager is installed to even check if the directory exists!). When we add permissions for a directory, we ensure the directory exists so that we do not later run into an access control exception (filesystem permissions issue; fail early, fail often). So you see, we could unconditionally grant the read permission here without checking existence but then there's the problem that `Files#exists` will return false if we do not have filesystem permissions to read the directory and we would rather fail in this case then have the filesystems permissions be messed up preventing us from being able to detect whether or not the user ended up in a bad situation as a result of the `path.data/default.path.data` bug. Since we create the directory on package installation, it's unlikely that most users are going to run into a problem here. Another point is that `default.path.data` is going to be removed in 6.0.0. Given all this together, I lean towards leaving this as is.","performed_via_github_app":null}]