{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/4418","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4418/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4418/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/4418/events","html_url":"https://github.com/elastic/elasticsearch/issues/4418","id":24131647,"node_id":"MDU6SXNzdWUyNDEzMTY0Nw==","number":4418,"title":"searching across multiple types returns doesn't find all documents matching","user":{"login":"billumina","id":3442016,"node_id":"MDQ6VXNlcjM0NDIwMTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3442016?v=4","gravatar_id":"","url":"https://api.github.com/users/billumina","html_url":"https://github.com/billumina","followers_url":"https://api.github.com/users/billumina/followers","following_url":"https://api.github.com/users/billumina/following{/other_user}","gists_url":"https://api.github.com/users/billumina/gists{/gist_id}","starred_url":"https://api.github.com/users/billumina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/billumina/subscriptions","organizations_url":"https://api.github.com/users/billumina/orgs","repos_url":"https://api.github.com/users/billumina/repos","events_url":"https://api.github.com/users/billumina/events{/privacy}","received_events_url":"https://api.github.com/users/billumina/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2013-12-11T19:36:28Z","updated_at":"2014-09-11T15:59:34Z","closed_at":"2014-09-11T15:59:34Z","author_association":"NONE","active_lock_reason":null,"body":"I include a bash script that recreates the situation.\n\n```\n#!/bin/sh\n\ncurl -XDELETE \"http://localhost:9200/test\"\ncurl -XPUT \"http://localhost:9200/test\"\n\necho\n\ncurl -XPUT \"http://localhost:9200/test/foo/_mapping\" -d '{\n    \"foo\" : { \n        \"properties\" : {\n            \"id\": {\n                \"type\" : \"multi_field\",\n                \"path\": \"full\",\n                \"fields\" : {\n                    \"foo_id_in_another_field\" : {\"type\" : \"long\", include_in_all:false },\n                \"id\" : {\"type\" : \"long\"}\n                   }\n        }\n    }\n    }\n}'\n\necho\n\n#foo is a basically a duplicate of the foo document to support search use cases\ncurl -XPUT \"http://localhost:9200/test/bar/_mapping\" -d '{\n    \"bar\" : {\n        \"properties\" : {\n            \"id\": {\n                \"type\" : \"multi_field\",\n                \"path\": \"full\",\n                \"fields\" : {\n                    \"bar_id_in_another_field\" : {\"type\" : \"long\", include_in_all:false },\n                    \"id\" : {\"type\" : \"long\"}\n                   }\n                },\n        \"foo\": {\n            \"properties\": {\n                \"id\": {\n                    \"type\" : \"multi_field\",\n                    \"path\": \"full\",\n                    \"fields\" : {\n                        \"foo_id_in_another_field\" : {\"type\" : \"long\", include_in_all:false },\n                        \"id\" : {\"type\" : \"long\"}\n                    }\n                }\n            }\n        }\n        }\n    }\n}'\n\necho\n\ncurl -XPUT \"http://localhost:9200/test/foo/1?refresh=true\" -d '{\n    \"foo\": {\n                \"id\": 1\n    }\n}'\n\necho\n\n#failure case appears even when not including the following JSON\n# \"bar\": {\n#   \"id\": 2,\n#   \"foo\": {\n#     \"id\": 3\n#   }\n# }\ncurl -XPUT \"http://localhost:9200/test/bar/2?refresh=true\" -d '{\n    \"bar\": {\n        \"id\": 2\n    }\n}'\n\necho\n\n#expect two results, get one (FAIL)\ncurl -XPOST \"http://localhost:9200/test/foo,bar/_search?pretty=true\" -d '{\n  \"size\": 10,\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"foo.id:1 OR bar.id:2\"\n    }\n  }\n}'\n\necho\n\n#except one result, get one (PASS)\ncurl -XPOST \"http://localhost:9200/test/bar/_search?pretty=true\" -d '{\n  \"size\": 10,\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"foo.id:1 OR bar.id:2\"\n    }\n  }\n}'\n\necho\n\n#expect one result, get one result (PASS)\ncurl -XPOST \"http://localhost:9200/test/foo/_search?pretty=true\" -d '{\n  \"size\": 10,\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"foo.id:1 OR bar.id:2\"\n    }\n  }\n}'\n\necho\n\n#expect two results, get tow results (PASS)\ncurl -XPOST \"http://localhost:9200/test/_search?pretty=true\" -d '{\n  \"size\": 10,\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"foo.id:1 OR bar.id:2\"\n    }\n  }\n}'\n```\n","closed_by":{"login":"billumina","id":3442016,"node_id":"MDQ6VXNlcjM0NDIwMTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3442016?v=4","gravatar_id":"","url":"https://api.github.com/users/billumina","html_url":"https://github.com/billumina","followers_url":"https://api.github.com/users/billumina/followers","following_url":"https://api.github.com/users/billumina/following{/other_user}","gists_url":"https://api.github.com/users/billumina/gists{/gist_id}","starred_url":"https://api.github.com/users/billumina/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/billumina/subscriptions","organizations_url":"https://api.github.com/users/billumina/orgs","repos_url":"https://api.github.com/users/billumina/repos","events_url":"https://api.github.com/users/billumina/events{/privacy}","received_events_url":"https://api.github.com/users/billumina/received_events","type":"User","site_admin":false},"performed_via_github_app":null}