{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/26211","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26211/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26211/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26211/events","html_url":"https://github.com/elastic/elasticsearch/issues/26211","id":250218489,"node_id":"MDU6SXNzdWUyNTAyMTg0ODk=","number":26211,"title":"post count compare between 1.7.1, 2.4.2, .5.5.1","user":{"login":"LiveAlone","id":20422416,"node_id":"MDQ6VXNlcjIwNDIyNDE2","avatar_url":"https://avatars0.githubusercontent.com/u/20422416?v=4","gravatar_id":"","url":"https://api.github.com/users/LiveAlone","html_url":"https://github.com/LiveAlone","followers_url":"https://api.github.com/users/LiveAlone/followers","following_url":"https://api.github.com/users/LiveAlone/following{/other_user}","gists_url":"https://api.github.com/users/LiveAlone/gists{/gist_id}","starred_url":"https://api.github.com/users/LiveAlone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LiveAlone/subscriptions","organizations_url":"https://api.github.com/users/LiveAlone/orgs","repos_url":"https://api.github.com/users/LiveAlone/repos","events_url":"https://api.github.com/users/LiveAlone/events{/privacy}","received_events_url":"https://api.github.com/users/LiveAlone/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-08-15T04:22:25Z","updated_at":"2017-08-15T04:42:46Z","closed_at":"2017-08-15T04:42:46Z","author_association":"NONE","active_lock_reason":null,"body":"i want upgrade Es from 1.7.1 version ,  \r\ni read document, \r\ni know about  the configuration about  bulk, index thread poll default  processors cores + 1\r\n\r\ni write java code test post, user different java client version,  demo \r\n```java\r\npackage org.yqj.es.demo.doc.v551;\r\n\r\nimport org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\r\nimport org.elasticsearch.action.bulk.BulkItemResponse;\r\nimport org.elasticsearch.action.bulk.BulkRequestBuilder;\r\nimport org.elasticsearch.action.bulk.BulkResponse;\r\nimport org.elasticsearch.action.index.IndexResponse;\r\nimport org.elasticsearch.action.update.UpdateRequestBuilder;\r\nimport org.elasticsearch.action.update.UpdateResponse;\r\nimport org.elasticsearch.client.Client;\r\nimport org.elasticsearch.client.IndicesAdminClient;\r\nimport org.elasticsearch.common.settings.Settings;\r\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\r\nimport org.elasticsearch.common.unit.TimeValue;\r\nimport org.elasticsearch.common.xcontent.XContentBuilder;\r\nimport org.elasticsearch.transport.client.PreBuiltTransportClient;\r\nimport org.yqj.es.demo.doc.v171.ContentConstant;\r\n\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n/**\r\n * Created by yaoqijun on 2017/8/12.\r\n */\r\npublic class EsClient551Test {\r\n    private static Client client = null;\r\n\r\n    private static Long totalPostCount = 0L;\r\n\r\n    public static void main(String[] args) throws UnknownHostException{\r\n        System.out.println(\"start to test 551\");\r\n        buildClient();\r\n        cleanIndex(ContentConstant.INDEX_NAME);\r\n\r\n        // add execute thread\r\n        final SinglePostJob singlePostJob = new SinglePostJob();\r\n        final ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n        executorService.submit(singlePostJob);\r\n\r\n        final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\r\n        scheduledExecutorService.schedule(new Runnable() {\r\n            public void run() {\r\n                System.out.println(\"current post count \" + totalPostCount);\r\n                singlePostJob.stop();\r\n                executorService.shutdownNow();\r\n                scheduledExecutorService.shutdown();\r\n                close();\r\n            }\r\n        }, 60, TimeUnit.SECONDS);\r\n        System.out.println(\"start in protected\");\r\n    }\r\n\r\n    public static class SinglePostJob implements Runnable{\r\n\r\n        private boolean isRunning = true;\r\n\r\n        public void run() {\r\n            while (isRunning){\r\n                try {\r\n//                    postSingleBulkData();\r\n\r\n//                    indexSingleData();\r\n\r\n                    upsertDocument();\r\n                }catch (Exception e){\r\n                    System.out.println(\"!! ERROR post content\");\r\n                    continue;\r\n                }\r\n\r\n                totalPostCount ++ ;\r\n            }\r\n        }\r\n\r\n        public void stop(){\r\n            isRunning = false;\r\n        }\r\n    }\r\n\r\n    private static boolean upsertDocument(){\r\n        ContentConstant.addId();\r\n        XContentBuilder xContentBuilder = ContentConstant.buildPostDataWithRandom();\r\n        UpdateRequestBuilder builder = client.prepareUpdate(ContentConstant.INDEX_NAME, ContentConstant.TYPE, ContentConstant.id.toString()).setDoc(xContentBuilder)\r\n                .setDocAsUpsert(true);\r\n        UpdateResponse updateResponse = builder.get();\r\n        return true;\r\n    }\r\n\r\n    // index single data\r\n    private static boolean indexSingleData(){\r\n        ContentConstant.addId();\r\n        XContentBuilder xContentBuilder =  ContentConstant.buildPostDataWithRandom();\r\n        IndexResponse indexResponse = client.prepareIndex(ContentConstant.INDEX_NAME, ContentConstant.TYPE, ContentConstant.id.toString())\r\n                .setSource(xContentBuilder)\r\n                .get();\r\n        return true;\r\n    }\r\n\r\n    private static boolean postSingleBulkData(){\r\n        BulkRequestBuilder bulkRequestBuilder = client.prepareBulk();\r\n\r\n        ContentConstant.addId();\r\n        XContentBuilder xContentBuilder =  ContentConstant.buildPostDataWithRandom();\r\n\r\n        bulkRequestBuilder.add(client\r\n                .prepareIndex(ContentConstant.INDEX_NAME, ContentConstant.TYPE, ContentConstant.id.toString())\r\n                .setSource(xContentBuilder));\r\n\r\n        BulkResponse bulkResponse = bulkRequestBuilder.execute().actionGet();\r\n        if (bulkResponse.hasFailures()){\r\n            for (BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {\r\n                System.out.println(bulkItemResponse.getFailureMessage());\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static void cleanIndex(String indexName){\r\n        // delete index\r\n        IndicesAdminClient indicesAdminClient = client.admin().indices();\r\n        Boolean isExitIndex = indicesAdminClient.prepareExists(indexName).execute().actionGet().isExists();\r\n        if (isExitIndex){\r\n            indicesAdminClient.delete(new DeleteIndexRequest(indexName)).actionGet();\r\n        }\r\n\r\n        // create index\r\n        client.admin().indices()\r\n                .prepareCreate(indexName)\r\n                .addMapping(ContentConstant.TYPE, ContentConstant.buildXContent())\r\n                .get(TimeValue.timeValueSeconds(10));\r\n    }\r\n\r\n    private static void buildClient() throws UnknownHostException{\r\n        Settings settings = Settings.builder()\r\n                .put(\"cluster.name\", \"elasticsearch\")\r\n                .put(\"client.transport.sniff\",true)\r\n                .build();\r\n        client = new PreBuiltTransportClient(settings)\r\n                .addTransportAddress(\r\n                        new InetSocketTransportAddress(InetAddress.getByName(\"localhost\"), 9300));\r\n    }\r\n\r\n    private static void close(){\r\n        if (client != null){\r\n            client.close();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\nthis result make me confuse:\r\n```\r\n1.7.1\r\nbulkIndex request count 149714\r\nsingleIndex request count 166450\r\nupsert request count 160237\r\n\r\n2.4.2\r\nbulkIndex request count 6680\r\nsingleIndex request count 7136\r\nupsert request count 7038\r\n\r\n5.5.1\r\nbulkIndex request count 6827\r\nsingleIndex request count 7020\r\nupsert request count 7052\r\n```\r\nit seems that, 1.x  more index effectiveï¼Œ why,  any configuration should config upper 2.x? \r\ndocument has no found configuration about this ,\r\n\r\n\r\n","closed_by":{"login":"tvernum","id":2244393,"node_id":"MDQ6VXNlcjIyNDQzOTM=","avatar_url":"https://avatars0.githubusercontent.com/u/2244393?v=4","gravatar_id":"","url":"https://api.github.com/users/tvernum","html_url":"https://github.com/tvernum","followers_url":"https://api.github.com/users/tvernum/followers","following_url":"https://api.github.com/users/tvernum/following{/other_user}","gists_url":"https://api.github.com/users/tvernum/gists{/gist_id}","starred_url":"https://api.github.com/users/tvernum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tvernum/subscriptions","organizations_url":"https://api.github.com/users/tvernum/orgs","repos_url":"https://api.github.com/users/tvernum/repos","events_url":"https://api.github.com/users/tvernum/events{/privacy}","received_events_url":"https://api.github.com/users/tvernum/received_events","type":"User","site_admin":false},"performed_via_github_app":null}