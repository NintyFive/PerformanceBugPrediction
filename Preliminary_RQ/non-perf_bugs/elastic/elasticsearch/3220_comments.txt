[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/20077869","html_url":"https://github.com/elastic/elasticsearch/issues/3220#issuecomment-20077869","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3220","id":20077869,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMDc3ODY5","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2013-06-26T20:33:40Z","updated_at":"2013-06-26T20:33:40Z","author_association":"CONTRIBUTOR","body":"With the help of @martijnvg , I ran a few benchmarks to compare the new implementation against the old ones. Loading time are similar, memory usage is between 1x and 2x smaller and faceting runs at similar speeds (there are little differences based on the dataset due to CPU caching effects). For example, here are the results of HistogramFacetSearchBenchmark on a 20m documents index for fields of type byte (b_value), short (s_value), int (i_value) and long (l_value):\n\n```\nWithout this commit:\n--> Histogram Facet (b_value) 599ms\n--> Histogram Facet (b_value/b_value) 819ms\n--> Histogram Facet (s_value) 681ms\n--> Histogram Facet (s_value/s_value) 813ms\n--> Histogram Facet (i_value) 668ms\n--> Histogram Facet (i_value/i_value) 804ms\n--> Histogram Facet (l_value) 670ms\n--> Histogram Facet (l_value/l_value) 815ms\nWith this commit:\n--> Histogram Facet (b_value) 604ms\n--> Histogram Facet (b_value/b_value) 752ms\n--> Histogram Facet (s_value) 637ms\n--> Histogram Facet (s_value/s_value) 738ms\n--> Histogram Facet (i_value) 637ms\n--> Histogram Facet (i_value/i_value) 737ms\n--> Histogram Facet (l_value) 640ms\n--> Histogram Facet (l_value/l_value) 743ms\n```\n\nAnd here are the results on a 5m index:\n\n```\nWithout this commit:\n--> Histogram Facet (b_value) 150ms\n--> Histogram Facet (b_value/b_value) 166ms\n--> Histogram Facet (i_value) 141ms\n--> Histogram Facet (i_value/i_value) 164ms\n--> Histogram Facet (i_value) 140ms\n--> Histogram Facet (i_value/i_value) 164ms\n--> Histogram Facet (l_value) 140ms\n--> Histogram Facet (l_value/l_value) 164ms\nWith this commit:\n--> Histogram Facet (b_value) 152ms\n--> Histogram Facet (b_value/b_value) 195ms\n--> Histogram Facet (i_value) 147ms\n--> Histogram Facet (i_value/i_value) 169ms\n--> Histogram Facet (i_value) 146ms\n--> Histogram Facet (i_value/i_value) 169ms\n--> Histogram Facet (l_value) 145ms\n--> Histogram Facet (l_value/l_value) 169ms\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/20102850","html_url":"https://github.com/elastic/elasticsearch/issues/3220#issuecomment-20102850","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/3220","id":20102850,"node_id":"MDEyOklzc3VlQ29tbWVudDIwMTAyODUw","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2013-06-27T08:02:40Z","updated_at":"2013-06-27T08:02:40Z","author_association":"CONTRIBUTOR","body":"About memory and loading time, here are reports from LongFieldDataBenchmark on 1M documents.\n\n```\nWithout this commit\nData    Loading time    Implementation  Actual size     Expected size\nSINGLE_VALUES_DENSE_ENUM    65  Single  976.6 KB    976.6 KB\nSINGLE_VALUED_DENSE_DATE    200 Single  7.6 MB  7.6 MB\nMULTI_VALUED_DATE   233 WithOrdinals    15.4 MB 15.4 MB\nMULTI_VALUED_ENUM   48  WithOrdinals    7.8 MB  7.8 MB\nSINGLE_VALUED_SPARSE_RANDOM 30  WithOrdinals    3.6 MB  3.6 MB\nMULTI_VALUED_SPARSE_RANDOM  71  WithOrdinals    8.1 MB  8.1 MB\nMULTI_VALUED_DENSE_RANDOM   428 WithOrdinals    27.1 MB 27.1 MB\n\nWith this commit\nData    Loading time    Implementation  Actual size     Expected size\nSINGLE_VALUES_DENSE_ENUM        86      Single  488.4 KB        488.3 KB\nSINGLE_VALUED_DENSE_DATE        191     Single  4.3 MB  4.3 MB\nMULTI_VALUED_DATE       224     WithOrdinals    10.5 MB 10.5 MB\nMULTI_VALUED_ENUM       46      WithOrdinals    7.8 MB  7.8 MB\nSINGLE_VALUED_SPARSE_RANDOM     30      WithOrdinals    3.5 MB  3.5 MB\nMULTI_VALUED_SPARSE_RANDOM      76      WithOrdinals    7.7 MB  7.7 MB\nMULTI_VALUED_DENSE_RANDOM       448     WithOrdinals    23.7 MB 23.7 MB\n```\n\nMore information about the data sets:\n- SINGLE_VALUES_DENSE_ENUM assigns a single long between 0 and 15 to each document\n- SINGLE_VALUED_DENSE_DATE assigns a single date between 2010 and 2012 to each document\n- MULTI_VALUED_DATE assigns 0, 1 or 2 dates between 2010 and 2012 to every document\n- MULTI_VALUED_ENUM assigns 0, 1 or 2 longs between 3 and 10 to every document\n- SINGLE_VALUED_SPARSE_RANDOM assigns 1 random long to 10% of documents\n- MULTI_VALUED_SPARSE_RANDOM assigns between 1 and 5 random longs to 10% of documents\n- MULTI_VALUED_DENSE_RANDOM assigns between 1 and 3 random longs to all documents\n\nMore information about the columns:\n- Loading time is the time to load field data from the directory into memory.\n- Implementation is the class name of the AtomicFieldData instance class which has been loaded\n- Actual size is the memory usage reported by RamUsageEstimator\n- Expected size is the memory usage reported by AtomicFieldData.getMemorySizeInBytes\n\nExplanation of the memory reduction:\n- On single-valued fields, the new implementation performs better when the number of required bits per value is not right below 8, 16, 32 or 64, for example for small enums or dates.\n- On multi-valued fields with low cardinality, most of the memory usage is taken by the ordinals map, so memory usage doesn't change much.\n- On multi-valued fields with high cardinality, the fact that we use MonotonicAppendingLongBuffer to encode values (this class compresses efficiently sequences of monotonically increasing longs) gives a memory reduction again (for example 13% on MULTI_VALUED_DENSE_RANDOM even though values have been chosen completely randomly).\n","performed_via_github_app":null}]