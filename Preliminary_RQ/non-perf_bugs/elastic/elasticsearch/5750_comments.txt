[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/40183654","html_url":"https://github.com/elastic/elasticsearch/issues/5750#issuecomment-40183654","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5750","id":40183654,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMTgzNjU0","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2014-04-11T08:56:32Z","updated_at":"2014-04-11T08:56:32Z","author_association":"MEMBER","body":"I think this doesn't has to do with dynamic templates, but how queries resolve field name that are not an exact match.\n\nAt query parse time the field is resolved in the mapping of an index. However if the field can't be found in the mapping under its exact name, the smart name resolving kicks in and tries to find the best field with the same suffix and uses that concrete field. However at the time when the percolator query is added the query parsing kicks in as well, but there field configured yet, so it fallbacks to using the name `color`. The document being percolated doesn't have this field and therefor doesn't match. However it does update the mapping, by adding the `custom.color` field and that is why when you update the mapping and reindexing the queries the queries do match with that document.\n\nI think this is expected behaviour, since that just how the percolator works, the fields of the queries are resolved at query registration time. So one of the workarounds you mentioned should be used in order for fields to get resolved correctly. (use of full names, reindex queries, or have the mapping configured before indexing queries (either via indexing a percolator doc or adding a mapping))\n\nActually just registering the percolator queries should have been enough in order for the queries to match with the document being percolated. The mapping does get modified, but not properly propagated into the cluster state. This is an issue that needs to be addressed.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/40187542","html_url":"https://github.com/elastic/elasticsearch/issues/5750#issuecomment-40187542","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5750","id":40187542,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMTg3NTQy","user":{"login":"egueidan","id":1777027,"node_id":"MDQ6VXNlcjE3NzcwMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/1777027?v=4","gravatar_id":"","url":"https://api.github.com/users/egueidan","html_url":"https://github.com/egueidan","followers_url":"https://api.github.com/users/egueidan/followers","following_url":"https://api.github.com/users/egueidan/following{/other_user}","gists_url":"https://api.github.com/users/egueidan/gists{/gist_id}","starred_url":"https://api.github.com/users/egueidan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/egueidan/subscriptions","organizations_url":"https://api.github.com/users/egueidan/orgs","repos_url":"https://api.github.com/users/egueidan/repos","events_url":"https://api.github.com/users/egueidan/events{/privacy}","received_events_url":"https://api.github.com/users/egueidan/received_events","type":"User","site_admin":false},"created_at":"2014-04-11T09:49:05Z","updated_at":"2014-04-11T09:49:05Z","author_association":"NONE","body":"Hi Martijn, thanks for taking the time!\nYour analysis makes a lot of sense. I wasn't aware the percolator queries would not react to mapping changes. Two points:\n1. Do you want me to create a separate (more precise) issue concerning the mapping propagation issue?\n2. Don't you think that making the percolator queries react to mapping changes would be useful? It seems to me that it would rather be aligned with the dynamic nature of ES. It would basically mean that you can register your interest in something you haven't seen yet and pick it up as soon as it appears while using dynamic mappings. In some cases, as a developper, you don't know exactly what'll be in the data (hence you use dynamic mappings/dynamic templates) and you don't know exactly what'll be in the query (user input). To support those cases, we would need to re-register the queries but we are left with the question: when? How can I pick up that the mapping has changed and queries should be re-registered. If that makes sense, then shall I create an enhancement request?\nCheers,\nEmmanuel\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/40201945","html_url":"https://github.com/elastic/elasticsearch/issues/5750#issuecomment-40201945","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5750","id":40201945,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMjAxOTQ1","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2014-04-11T13:17:10Z","updated_at":"2014-04-11T13:17:36Z","author_association":"MEMBER","body":"Hi Emmanuel,\n1. The mapping propagation issue should be fixed soon: https://github.com/elasticsearch/elasticsearch/issues/5750\n2. That idea makes absolutely sense. However I see other way than reindexing the percolator query (or al least reloading it). What happens when a query gets added is that the `query` part of the document gets parsed in a Lucene query and there isn't an easy way to just a change a field in the Lucene query because of a mapping update. Also if there is such a mechanism it can be confusing too? Maybe there're mapping updates that don't make sense for your percolator queries? \n\nI think it is better to approach this problem from a different perspective. You can configure `copy_to` fields (http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html#copy-to) in your mapping, which copies the values of fields with a specific expression into a field you know about. This field can then use in your percolator queries, since you can rely on the fact that it exists. Also the `_all` field can help here, but `copy_to` gives you more control.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/40220003","html_url":"https://github.com/elastic/elasticsearch/issues/5750#issuecomment-40220003","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/5750","id":40220003,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMjIwMDAz","user":{"login":"egueidan","id":1777027,"node_id":"MDQ6VXNlcjE3NzcwMjc=","avatar_url":"https://avatars1.githubusercontent.com/u/1777027?v=4","gravatar_id":"","url":"https://api.github.com/users/egueidan","html_url":"https://github.com/egueidan","followers_url":"https://api.github.com/users/egueidan/followers","following_url":"https://api.github.com/users/egueidan/following{/other_user}","gists_url":"https://api.github.com/users/egueidan/gists{/gist_id}","starred_url":"https://api.github.com/users/egueidan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/egueidan/subscriptions","organizations_url":"https://api.github.com/users/egueidan/orgs","repos_url":"https://api.github.com/users/egueidan/repos","events_url":"https://api.github.com/users/egueidan/events{/privacy}","received_events_url":"https://api.github.com/users/egueidan/received_events","type":"User","site_admin":false},"created_at":"2014-04-11T16:00:37Z","updated_at":"2014-04-11T16:00:37Z","author_association":"NONE","body":"Martijn, thanks a lot for the quick fix on #5776. As for the automatic reloading of the percolator query on mapping updates, I understand that it's not trivial to do. As far as we are concerned we can live with using the fully qualified names.Using the `copy_to` field to dynamically alias unknown fields to known ones is also an interesting idea.\nThanks a lot for your help!\n","performed_via_github_app":null}]