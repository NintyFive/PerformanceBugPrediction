[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/350284698","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-350284698","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":350284698,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MDI4NDY5OA==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2017-12-08T15:02:59Z","updated_at":"2017-12-08T15:02:59Z","author_association":"MEMBER","body":"@joshfix could you elaborate a bit more on what you mean by this feature? \r\n\r\nSince a search aims to return the top N hits (and/or aggregated information about all the hits) I'm not sure how a streaming API would work in practice because we would need to do all of the work before we can return any of the search response. \r\n\r\nIs your use-case only concerned with the scroll API where you are iterating through all the documents matching the query? If so, is the advantage of a streaming API mainly due to convenience or do you see other advantages over using the Scroll API as it is today?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/351700328","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-351700328","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":351700328,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MTcwMDMyOA==","user":{"login":"joshfix","id":18398387,"node_id":"MDQ6VXNlcjE4Mzk4Mzg3","avatar_url":"https://avatars3.githubusercontent.com/u/18398387?v=4","gravatar_id":"","url":"https://api.github.com/users/joshfix","html_url":"https://github.com/joshfix","followers_url":"https://api.github.com/users/joshfix/followers","following_url":"https://api.github.com/users/joshfix/following{/other_user}","gists_url":"https://api.github.com/users/joshfix/gists{/gist_id}","starred_url":"https://api.github.com/users/joshfix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joshfix/subscriptions","organizations_url":"https://api.github.com/users/joshfix/orgs","repos_url":"https://api.github.com/users/joshfix/repos","events_url":"https://api.github.com/users/joshfix/events{/privacy}","received_events_url":"https://api.github.com/users/joshfix/received_events","type":"User","site_admin":false},"created_at":"2017-12-14T12:41:40Z","updated_at":"2017-12-14T13:11:18Z","author_association":"NONE","body":"Hi @colings86 and thank you for your response and follow up questions.  It sounds like maybe you're thinking about my question in terms of the Elasticsearch server itself and not the client.  My request is simply for a reactive client, however what you bring up is interesting and a reactive client may benefit by utilizing the scroll API under the hood.\r\n\r\nSo if you're not already familiar with reactive programming and the differences between reactive and async, there are several resources available.  Here is one:\r\n\r\nhttp://projectreactor.io/docs/core/release/reference/#intro-reactive\r\n\r\nReactive calls to a remote service do not block while waiting for a response, but they don't use callbacks either.  Observables (or Mono/Fluxes in Reactor) basically act as futures and provide streams of data.  You write code against how you handle data when it is published, and nothing ever happens unless your Observable subscribes to the stream.\r\n\r\nFor comparison, the Lettuce client for Redis provides a synchronous, asynchronous, and reactive client capability.  Here is the documentation on their reactive client:\r\n\r\nhttps://github.com/lettuce-io/lettuce-core/wiki/Reactive-API-(5.0)\r\n\r\nBack to the scroll api... if very large responses are returned from ES (let's go with the 10k limit) and the service that requested the large document is under heavy load, there is no way to slow things down if the service can't keep up with the incoming response.  A reactive client could break the request up into pieces and only request the next piece when it's ready for it, all the while publishing each available chunk of the response to the stream.  I don't know much about what the responses from the scroll api look like, but one potential issue is how ES wraps response documents with metadata about the request/response.  Is it possible to only request a list of results vs a single wrapped document?  Does that make sense?\r\n\r\nTo wrap things up, I'll include a full example of one of my methods to query ES in my Spring Boot 2 application that uses WebFlux and is otherwise fully reactive.\r\n\r\n```\r\n    public Mono<ItemCollection> search(\r\n            List<String> indices, String type, QueryBuilder queryBuilder, int limit, int offset) {\r\n        SearchSourceBuilder searchSourceBuilder =\r\n                new SearchSourceBuilder().query(queryBuilder).size(limit).from(offset * limit);\r\n        SearchRequest searchRequest = new SearchRequest().source(searchSourceBuilder)\r\n                .indices(indices.toArray(new String[indices.size()])).types(type);\r\n\r\n        log.debug(\"Searching ES with the following request: \\n\" + searchRequest.source().toString());\r\n        String nextOffset = String.valueOf(++offset);\r\n\r\n        return Mono\r\n                // use fromCallable to make the blocking request to ES\r\n                .fromCallable(() -> submitSearch(searchRequest))\r\n                // switch to managed thread pool for blocking process\r\n                .subscribeOn(scheduler)\r\n                // switch back to regular thread for the rest of the processes\r\n                .publishOn(Schedulers.single())\r\n                // build a flux from the hits\r\n                .flatMapIterable(response -> Arrays.asList(response.getHits().getHits()))\r\n                // map each hit to it's source string\r\n                .map(SearchHit::getSourceAsString)\r\n                // deserialize each string\r\n                .map(this::deserializeItem)\r\n                // if deserializer threw an exception for an item and Optional is empty, exclude it\r\n                .filter(Optional::isPresent)\r\n                // get a flux of the action Item objects\r\n                .map(Optional::get)\r\n                // build the \"self\" link for each item\r\n                .map(this::buildSelfLink)\r\n                // collect all the items to a list\r\n                .collectList()\r\n                // take the items list create an item collection from it\r\n                .map(itemList -> new ItemCollection().features(itemList).type(ItemCollection.TypeEnum.FEATURECOLLECTION).nextPageToken(nextOffset));\r\n    }\r\n```\r\n\r\nA lot of care is taken in the previous example to handle which thread the call to ES is made in.  I have to manage my own thread pool (which is the \"scheduler\" object) for the blocking requests to ES, then switch back to the default threading system.\r\n\r\nI'm also currently considering dropping the ES REST client altogether and just using the JSON produced by the QueryBuilder along with the reactive WebClient provided by Spring 5 to avoid needing to manage the threading stuff:\r\n\r\nhttp://www.baeldung.com/spring-5-webclient","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/352030185","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-352030185","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":352030185,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MjAzMDE4NQ==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2017-12-15T15:14:44Z","updated_at":"2017-12-15T15:14:44Z","author_association":"MEMBER","body":"@joshfix Thanks for the additional explanation. We currently don't have any plans to implement this type of client since the current High Level REST client still has a lot of work to go for it to be where we would like. If you are interested in building this type of client we would welcome a contribution but its not something we would be looking to do at this time.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/356560845","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-356560845","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":356560845,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NjU2MDg0NQ==","user":{"login":"DaveCTurner","id":5058284,"node_id":"MDQ6VXNlcjUwNTgyODQ=","avatar_url":"https://avatars3.githubusercontent.com/u/5058284?v=4","gravatar_id":"","url":"https://api.github.com/users/DaveCTurner","html_url":"https://github.com/DaveCTurner","followers_url":"https://api.github.com/users/DaveCTurner/followers","following_url":"https://api.github.com/users/DaveCTurner/following{/other_user}","gists_url":"https://api.github.com/users/DaveCTurner/gists{/gist_id}","starred_url":"https://api.github.com/users/DaveCTurner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DaveCTurner/subscriptions","organizations_url":"https://api.github.com/users/DaveCTurner/orgs","repos_url":"https://api.github.com/users/DaveCTurner/repos","events_url":"https://api.github.com/users/DaveCTurner/events{/privacy}","received_events_url":"https://api.github.com/users/DaveCTurner/received_events","type":"User","site_admin":false},"created_at":"2018-01-10T10:25:51Z","updated_at":"2018-01-10T10:25:51Z","author_association":"CONTRIBUTOR","body":"If it helps, here is a blog post that talks about building an adapter in order to use the existing client in a reactive setting:\r\n\r\nhttp://www.nurkiewicz.com/2018/01/spring-reactor-and-elasticsearch-from.html","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/356612374","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-356612374","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":356612374,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NjYxMjM3NA==","user":{"login":"joshfix","id":18398387,"node_id":"MDQ6VXNlcjE4Mzk4Mzg3","avatar_url":"https://avatars3.githubusercontent.com/u/18398387?v=4","gravatar_id":"","url":"https://api.github.com/users/joshfix","html_url":"https://github.com/joshfix","followers_url":"https://api.github.com/users/joshfix/followers","following_url":"https://api.github.com/users/joshfix/following{/other_user}","gists_url":"https://api.github.com/users/joshfix/gists{/gist_id}","starred_url":"https://api.github.com/users/joshfix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joshfix/subscriptions","organizations_url":"https://api.github.com/users/joshfix/orgs","repos_url":"https://api.github.com/users/joshfix/repos","events_url":"https://api.github.com/users/joshfix/events{/privacy}","received_events_url":"https://api.github.com/users/joshfix/received_events","type":"User","site_admin":false},"created_at":"2018-01-10T14:09:03Z","updated_at":"2018-01-10T14:09:03Z","author_association":"NONE","body":"Thanks for the link!  I ended up using the Spring reactive WebClient to submit my requests to Elasticsearch.  It's pretty straight forward...\r\n\r\n```\r\n    private Mono<SearchResponse> searchInternal(String body, String uri) {\r\n        return client\r\n                .post()\r\n                .uri(uri)\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .body(Mono.just(body), String.class)\r\n                .retrieve()\r\n                .onStatus(status -> !status.is2xxSuccessful(),\r\n                        response -> Mono.error(new RuntimeException(SEARCH_EXCEPTION)))\r\n                .bodyToMono(String.class)\r\n                .map(this::deserializeSearchResponse)\r\n                .filter(Optional::isPresent)\r\n                .map(Optional::get);\r\n    }\r\n\r\n    private Optional<SearchResponse> deserializeSearchResponse(String bodyString) {\r\n        try {\r\n            XContentParser parser = XContentFactory\r\n                    .xContent(XContentType.JSON)\r\n                    .createParser(NamedXContentRegistry.EMPTY, bodyString);\r\n            return Optional.of(SearchResponse.fromXContent(parser));\r\n        } catch (IOException ioe) {\r\n            log.error(\"Error deserializing Elasticsearch response.\", ioe);\r\n        }\r\n        return Optional.empty();\r\n    }\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/368022687","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-368022687","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":368022687,"node_id":"MDEyOklzc3VlQ29tbWVudDM2ODAyMjY4Nw==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2018-02-23T14:25:10Z","updated_at":"2018-02-23T14:25:10Z","author_association":"MEMBER","body":"Looks like there is a good workaround for this and we are not planning to implement this kind of client at this stage so I'm going to close this issue for now","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/373359153","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-373359153","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":373359153,"node_id":"MDEyOklzc3VlQ29tbWVudDM3MzM1OTE1Mw==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2018-03-15T12:27:58Z","updated_at":"2018-03-15T12:27:58Z","author_association":"MEMBER","body":"Closing, we are not going to address this for the time being, we can always reopen once we are ready and want to get back to this. It is unfortunate that people end up not using our client due to this, as we have retries in case of failure, support for sniffing etc.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/456207305","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-456207305","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":456207305,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NjIwNzMwNQ==","user":{"login":"gonciarz","id":5956679,"node_id":"MDQ6VXNlcjU5NTY2Nzk=","avatar_url":"https://avatars0.githubusercontent.com/u/5956679?v=4","gravatar_id":"","url":"https://api.github.com/users/gonciarz","html_url":"https://github.com/gonciarz","followers_url":"https://api.github.com/users/gonciarz/followers","following_url":"https://api.github.com/users/gonciarz/following{/other_user}","gists_url":"https://api.github.com/users/gonciarz/gists{/gist_id}","starred_url":"https://api.github.com/users/gonciarz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gonciarz/subscriptions","organizations_url":"https://api.github.com/users/gonciarz/orgs","repos_url":"https://api.github.com/users/gonciarz/repos","events_url":"https://api.github.com/users/gonciarz/events{/privacy}","received_events_url":"https://api.github.com/users/gonciarz/received_events","type":"User","site_admin":false},"created_at":"2019-01-21T21:48:07Z","updated_at":"2019-01-21T21:48:07Z","author_association":"NONE","body":"Major databases expose reactive API. Spring Data already supports reactive Redis, MongoDB, Cassandra, Couchbase. I know that ES is a distributed search engine, but in some sort of things it's another type of database. But anyway reactiveness does not only mean asynchronous. It's not just a callback. It offers non-blocking operations by changing concurrent model from thread pool to event loop. Whenever you have a partial result, you expose it to a client. \r\nPlease let us know if current architecture allows to introduce reactiveness and what is required in order to    achieve it? As I understand folks from Pivotal don't want to support reactive ES unless it's driver becomes reactive.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/456366698","html_url":"https://github.com/elastic/elasticsearch/issues/27679#issuecomment-456366698","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27679","id":456366698,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NjM2NjY5OA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2019-01-22T11:28:58Z","updated_at":"2019-01-22T11:28:58Z","author_association":"MEMBER","body":"@gonciarz You might be interested in this: https://github.com/reactiverse/elasticsearch-client ?","performed_via_github_app":null}]