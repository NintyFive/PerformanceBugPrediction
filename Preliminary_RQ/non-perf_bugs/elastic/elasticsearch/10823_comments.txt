[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/98765043","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-98765043","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":98765043,"node_id":"MDEyOklzc3VlQ29tbWVudDk4NzY1MDQz","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T15:57:41Z","updated_at":"2015-05-04T15:57:41Z","author_association":"MEMBER","body":"I like it!  I can definitely see this being used with plug-n-play tools like WEKA or scikit-learn.  Some questions / thoughts:\n- Does everything just throw an exception if term vectors are not enabled?  Is this a hard requirement or just a way to improve speed?\n- Why is `_source` required?\n- How are missing values handled?  Is `null` or `NaN` encoded in the matrix if the document is missing a particular field?  I know some ML packages are particular about how they handle missing fields, perhaps there could be an optional `missing_value` parameter that inserts a default if the field is missing?  Same for spans + numerics.  E.g. if you request `span: 5`, but a field only has 3 values ... the extra two will likely need to be filled with `NaN` or `null` or something?\n- With `_mvectorize`, is there an option to \"unstack\" the matrices?  E.g. you may just want to request multiple matrices in one request, but not combine them.\n- The slice syntax seems clunky, and only sorta flexible.  E.g what if you want uneven combinations such as `0-5, 7, 9, 10-12` ?  Perhaps some kind of array syntax:  `[0..5, 7, 9, 10..12]` ?\n- Perhaps show the resulting \"shape\" after `slice`ing a matrix to make it clear it is different from the underlying vectorizer?\n- Would it be useful to also add the vectorizer name to the output?  Not sure if that is something people would want.\n- Not necessarily a problem, just something to think about, but `step` and `sample` could get strange if a routing scheme is used.  E.g. `sample: 10%` may exhaust some shards faster than others, because certain shards are \"hot\" due to routing.  This could unbalance the sampling and skew it towards the particular routed values.  Might just be a documentation issue so that users are aware sampling doesn't necessarily mean truly random sample depending on circumstances.\n- I wonder if there should be a \"csv\" or \"tab\" format option, so you can get a flat matrix rather than JSON?  Might make it easier to interface with other packages?  Not sure...it's very un-ES to emit non-JSON :)\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/98777028","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-98777028","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":98777028,"node_id":"MDEyOklzc3VlQ29tbWVudDk4Nzc3MDI4","user":{"login":"alexksikes","id":43475,"node_id":"MDQ6VXNlcjQzNDc1","avatar_url":"https://avatars2.githubusercontent.com/u/43475?v=4","gravatar_id":"","url":"https://api.github.com/users/alexksikes","html_url":"https://github.com/alexksikes","followers_url":"https://api.github.com/users/alexksikes/followers","following_url":"https://api.github.com/users/alexksikes/following{/other_user}","gists_url":"https://api.github.com/users/alexksikes/gists{/gist_id}","starred_url":"https://api.github.com/users/alexksikes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexksikes/subscriptions","organizations_url":"https://api.github.com/users/alexksikes/orgs","repos_url":"https://api.github.com/users/alexksikes/repos","events_url":"https://api.github.com/users/alexksikes/events{/privacy}","received_events_url":"https://api.github.com/users/alexksikes/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T16:51:30Z","updated_at":"2015-05-04T17:14:42Z","author_association":"CONTRIBUTOR","body":"Thank you for reading through this. \n\n> Does everything just throw an exception if term vectors are not enabled? Is this a hard requirement or just a way to improve speed?\n\nTerm vectors are generated on the fly if they are not stored in the index, so this should not be an issue, only that vectorizing term vectors would be slower in this case.\n\n> Why is _source required?\n\nThis is in order to retrieve numerical values which the TVs API does not return. But we don't necessarily need _source to be enabled, as long as the values are stored.\n\n> How are missing values handled? Is null or NaN encoded in the matrix if the document is missing a particular field? I know some ML packages are particular about how they handle missing fields, perhaps there could be an optional missing_value parameter that inserts a default if the field is missing? Same for spans + numerics. E.g. if you request span: 5, but a field only has 3 values ... the extra two will likely need to be filled with NaN or null or something?\n\nIf the document is missing a particular field then it means that it has none of these terms, so this part of the vector would zero, meaning not shown in the sparse vector format representation. The same behavior would apply if the some value could not be fetched. We could also fill up with a default missing values, but in this case the vector would no longer be sparse, leading to potentially huge outputs.\n\n> With _mvectorize, is there an option to \"unstack\" the matrices? E.g. you may just want to request multiple matrices in one request, but not combine them.\n\nIf the vectorizer is the same for every request then this would not be an issue. A vectorizer defines the desired outputted matrix. It is true that stacking these vectors is arbitrary, but all these (say m) vectors retrieved would have the same shape (say of length n), naturally leading to a matrix of shape m by n. If the vectorizers are not the same, then we should only stack the matrices according to the vectorizer that they share. Thanks for noting that.\n\n> The slice syntax seems clunky, and only sorta flexible. E.g what if you want uneven combinations such as 0-5, 7, 9, 10-12 ? Perhaps some kind of array syntax: [0..5, 7, 9, 10..12] ?\n\nYes that could be an option, definitely more flexible. Something which could be worth exploring is returning multiple matrices under different array syntax combinations. This in combination with `from`, `step` and `sample` would then return multiple matrices. So we would not have to go through different runs just in order to generate say a training and test set.\n\n> Perhaps show the resulting \"shape\" after sliceing a matrix to make it clear it is different from the underlying vectorizer?\n\nThanks for catching that, indeed if we are slicing the matrix then the resulting shape should be different as well.\n\n> Would it be useful to also add the vectorizer name to the output? Not sure if that is something people would want.\n\nYes that makes sense, but if the vectorizer is \"inlined\", meaning as part of the request, then that could mean returning potentially a lot of terms.\n\n> Not necessarily a problem, just something to think about, but step and sample could get strange if a routing scheme is used. E.g. sample: 10% may exhaust some shards faster than others, because certain shards are \"hot\" due to routing. This could unbalance the sampling and skew it towards the particular routed values. Might just be a documentation issue so that users are aware sampling doesn't necessarily mean truly random sample depending on circumstances.\n\nYes it should definitely be documented, sampling would be true to the shard, not to the index.\n\n> I wonder if there should be a \"csv\" or \"tab\" format option, so you can get a flat matrix rather than JSON? Might make it easier to interface with other packages? Not sure...it's very un-ES to emit non-JSON :)\n\nWe have plans to make this into a plugin, and yes in this case it would make a lot of sense to support different output formats.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/98781594","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-98781594","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":98781594,"node_id":"MDEyOklzc3VlQ29tbWVudDk4NzgxNTk0","user":{"login":"polyfractal","id":1224228,"node_id":"MDQ6VXNlcjEyMjQyMjg=","avatar_url":"https://avatars1.githubusercontent.com/u/1224228?v=4","gravatar_id":"","url":"https://api.github.com/users/polyfractal","html_url":"https://github.com/polyfractal","followers_url":"https://api.github.com/users/polyfractal/followers","following_url":"https://api.github.com/users/polyfractal/following{/other_user}","gists_url":"https://api.github.com/users/polyfractal/gists{/gist_id}","starred_url":"https://api.github.com/users/polyfractal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/polyfractal/subscriptions","organizations_url":"https://api.github.com/users/polyfractal/orgs","repos_url":"https://api.github.com/users/polyfractal/repos","events_url":"https://api.github.com/users/polyfractal/events{/privacy}","received_events_url":"https://api.github.com/users/polyfractal/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T17:07:52Z","updated_at":"2015-05-04T17:07:52Z","author_association":"MEMBER","body":"> If the document is missing a particular field then it means that it has none of these terms, so this part of the vector would zero, meaning not shown in the sparse vector format representation. \n\nOh, I see... the key in the vector is numbered to represent the column...missed that on the first pass.  Gotcha :)\n\n> A vectorizer defines the desired outputted matrix. It is true that stacking these vectors is arbitrary, but all these (say m) vectors retrieved would have the same shape (say of length n), naturally leading to a matrix of shape m by n.\n\nWell, my question was more if you wanted to `_mvectorize` two different vectorizers:  \"my_vectorizer\" with length `n`, and \"my_other_vectorizer\" with length `j`.  Basically like all the other multi-APIs, like _mget or _mpercolate, where you are just batching stuff together.\n\nSomething like this:\n\n```\nGET /index/type/_mvectorize\n{\n    \"docs\": [\n    {\n        \"vectorizer\": \"my_vectorizer\"\n    },\n    {\n        \"vectorizer\": \"my_other_vectorizer\"\n    }\n   ]\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/98782665","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-98782665","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":98782665,"node_id":"MDEyOklzc3VlQ29tbWVudDk4NzgyNjY1","user":{"login":"alexksikes","id":43475,"node_id":"MDQ6VXNlcjQzNDc1","avatar_url":"https://avatars2.githubusercontent.com/u/43475?v=4","gravatar_id":"","url":"https://api.github.com/users/alexksikes","html_url":"https://github.com/alexksikes","followers_url":"https://api.github.com/users/alexksikes/followers","following_url":"https://api.github.com/users/alexksikes/following{/other_user}","gists_url":"https://api.github.com/users/alexksikes/gists{/gist_id}","starred_url":"https://api.github.com/users/alexksikes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexksikes/subscriptions","organizations_url":"https://api.github.com/users/alexksikes/orgs","repos_url":"https://api.github.com/users/alexksikes/repos","events_url":"https://api.github.com/users/alexksikes/events{/privacy}","received_events_url":"https://api.github.com/users/alexksikes/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T17:10:18Z","updated_at":"2015-05-04T17:10:18Z","author_association":"CONTRIBUTOR","body":"> Well, my question was more if you wanted to _mvectorize two different vectorizers: \"my_vectorizer\" with length n, and \"my_other_vectorizer\" with length j. Basically like all the other multi-APIs, like _mget or _mpercolate, where you are just batching stuff together.\n\nI had just updated the comment as you were writing this :) Yes basically it would make sense to only stack matrices according to the vectorizer that they have in common.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/98978376","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-98978376","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":98978376,"node_id":"MDEyOklzc3VlQ29tbWVudDk4OTc4Mzc2","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-05-05T07:11:23Z","updated_at":"2015-05-05T07:11:33Z","author_association":"CONTRIBUTOR","body":"> Well, my question was more if you wanted to _mvectorize two different vectorizers: \"my_vectorizer\" with length n, and \"my_other_vectorizer\" with length j. Basically like all the other multi-APIs, like _mget or _mpercolate, where you are just batching stuff together.\n\n+1 to named vectors, just like we do with aggs, suggesters, etc\n\n> `from`, `step` and `sample`\n\nThe `from` parameter really has no meaning when scanning is used.  `step` and `sample` are probably best implemented using the `function_score` query, with a random function or a modulus on the ID or something, instead of adding new top level parameters.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/117843304","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-117843304","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":117843304,"node_id":"MDEyOklzc3VlQ29tbWVudDExNzg0MzMwNA==","user":{"login":"alexksikes","id":43475,"node_id":"MDQ6VXNlcjQzNDc1","avatar_url":"https://avatars2.githubusercontent.com/u/43475?v=4","gravatar_id":"","url":"https://api.github.com/users/alexksikes","html_url":"https://github.com/alexksikes","followers_url":"https://api.github.com/users/alexksikes/followers","following_url":"https://api.github.com/users/alexksikes/following{/other_user}","gists_url":"https://api.github.com/users/alexksikes/gists{/gist_id}","starred_url":"https://api.github.com/users/alexksikes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexksikes/subscriptions","organizations_url":"https://api.github.com/users/alexksikes/orgs","repos_url":"https://api.github.com/users/alexksikes/repos","events_url":"https://api.github.com/users/alexksikes/events{/privacy}","received_events_url":"https://api.github.com/users/alexksikes/received_events","type":"User","site_admin":false},"created_at":"2015-07-01T22:41:12Z","updated_at":"2015-07-02T00:47:44Z","author_association":"CONTRIBUTOR","body":"I rebased the vectorizer branch on master and added some tests. I'll create a new repo for the actual plugin but let's have this at least for reference.\n\nhttps://github.com/alexksikes/elasticsearch/commits/feature/tvs-vectorize\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/128347015","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-128347015","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":128347015,"node_id":"MDEyOklzc3VlQ29tbWVudDEyODM0NzAxNQ==","user":{"login":"alexksikes","id":43475,"node_id":"MDQ6VXNlcjQzNDc1","avatar_url":"https://avatars2.githubusercontent.com/u/43475?v=4","gravatar_id":"","url":"https://api.github.com/users/alexksikes","html_url":"https://github.com/alexksikes","followers_url":"https://api.github.com/users/alexksikes/followers","following_url":"https://api.github.com/users/alexksikes/following{/other_user}","gists_url":"https://api.github.com/users/alexksikes/gists{/gist_id}","starred_url":"https://api.github.com/users/alexksikes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexksikes/subscriptions","organizations_url":"https://api.github.com/users/alexksikes/orgs","repos_url":"https://api.github.com/users/alexksikes/repos","events_url":"https://api.github.com/users/alexksikes/events{/privacy}","received_events_url":"https://api.github.com/users/alexksikes/received_events","type":"User","site_admin":false},"created_at":"2015-08-06T12:23:11Z","updated_at":"2015-08-06T12:23:11Z","author_association":"CONTRIBUTOR","body":"For reference, this is now a plugin. Please keep in mind this is still very alpha.\n\nhttps://github.com/alexksikes/elasticsearch-vectorize/\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/256276738","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-256276738","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":256276738,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NjI3NjczOA==","user":{"login":"diugalde","id":5900828,"node_id":"MDQ6VXNlcjU5MDA4Mjg=","avatar_url":"https://avatars2.githubusercontent.com/u/5900828?v=4","gravatar_id":"","url":"https://api.github.com/users/diugalde","html_url":"https://github.com/diugalde","followers_url":"https://api.github.com/users/diugalde/followers","following_url":"https://api.github.com/users/diugalde/following{/other_user}","gists_url":"https://api.github.com/users/diugalde/gists{/gist_id}","starred_url":"https://api.github.com/users/diugalde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/diugalde/subscriptions","organizations_url":"https://api.github.com/users/diugalde/orgs","repos_url":"https://api.github.com/users/diugalde/repos","events_url":"https://api.github.com/users/diugalde/events{/privacy}","received_events_url":"https://api.github.com/users/diugalde/received_events","type":"User","site_admin":false},"created_at":"2016-10-26T08:01:18Z","updated_at":"2016-10-26T08:01:18Z","author_association":"NONE","body":"Hello, Is there any current work on this feature?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/256280576","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-256280576","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":256280576,"node_id":"MDEyOklzc3VlQ29tbWVudDI1NjI4MDU3Ng==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2016-10-26T08:20:11Z","updated_at":"2016-10-26T08:20:11Z","author_association":"CONTRIBUTOR","body":"no this is not being worked on and won't happen any time soon... closing for now\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/260912701","html_url":"https://github.com/elastic/elasticsearch/issues/10823#issuecomment-260912701","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/10823","id":260912701,"node_id":"MDEyOklzc3VlQ29tbWVudDI2MDkxMjcwMQ==","user":{"login":"pkphlam","id":573309,"node_id":"MDQ6VXNlcjU3MzMwOQ==","avatar_url":"https://avatars1.githubusercontent.com/u/573309?v=4","gravatar_id":"","url":"https://api.github.com/users/pkphlam","html_url":"https://github.com/pkphlam","followers_url":"https://api.github.com/users/pkphlam/followers","following_url":"https://api.github.com/users/pkphlam/following{/other_user}","gists_url":"https://api.github.com/users/pkphlam/gists{/gist_id}","starred_url":"https://api.github.com/users/pkphlam/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pkphlam/subscriptions","organizations_url":"https://api.github.com/users/pkphlam/orgs","repos_url":"https://api.github.com/users/pkphlam/repos","events_url":"https://api.github.com/users/pkphlam/events{/privacy}","received_events_url":"https://api.github.com/users/pkphlam/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T10:39:44Z","updated_at":"2016-11-16T10:39:44Z","author_association":"NONE","body":"Is there a reason why there is no work planned on this any time soon? Given the focus and rage about Machine Learning, this seems like an excellent feature that could potentially make ES the de facto datastore for a lot of machine learning/statistical work, especially with respect to text analytics. Currently, trying to replicate something like this requires a ton of work on both client and ingest sides with very little efficiency. There is really very little other software stacks out there that can combine ES's great query capabilities with a machine learning pipeline in an efficient way and this could be a gamechanger. Definitely a +1 for this feature.\n","performed_via_github_app":null}]