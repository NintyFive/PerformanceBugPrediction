[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422048700","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422048700","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422048700,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjA0ODcwMA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-09-17T14:52:40Z","updated_at":"2018-09-17T14:52:40Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422267224","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422267224","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422267224,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjI2NzIyNA==","user":{"login":"alpar-t","id":2565652,"node_id":"MDQ6VXNlcjI1NjU2NTI=","avatar_url":"https://avatars1.githubusercontent.com/u/2565652?v=4","gravatar_id":"","url":"https://api.github.com/users/alpar-t","html_url":"https://github.com/alpar-t","followers_url":"https://api.github.com/users/alpar-t/followers","following_url":"https://api.github.com/users/alpar-t/following{/other_user}","gists_url":"https://api.github.com/users/alpar-t/gists{/gist_id}","starred_url":"https://api.github.com/users/alpar-t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alpar-t/subscriptions","organizations_url":"https://api.github.com/users/alpar-t/orgs","repos_url":"https://api.github.com/users/alpar-t/repos","events_url":"https://api.github.com/users/alpar-t/events{/privacy}","received_events_url":"https://api.github.com/users/alpar-t/received_events","type":"User","site_admin":false},"created_at":"2018-09-18T06:09:54Z","updated_at":"2018-09-18T06:09:54Z","author_association":"CONTRIBUTOR","body":"@uschindler thanks for letting us know! We are running with the CLI so that we can do it with a different JVM than the one Gradle is running with to be able to better handle multi release jars, and was planning to open an issue about and discuss to see if we can incorporate this into the plugin, but it did not seem straight forward.  We want to move Gradle to run on Java 10 but still run forbiddenapi checks with Java 8 without calling this out specifically in CI. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422277879","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422277879","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422277879,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjI3Nzg3OQ==","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"created_at":"2018-09-18T06:59:55Z","updated_at":"2018-09-18T07:04:39Z","author_association":"CONTRIBUTOR","body":"Hi Alpar,\r\nI have seen the issue, but still the idea to run forbiddenapis is unclear and not needed. The arguments are all not really explain it:\r\n- To better release Multi-Release JARs: Fobiddenapis in the current version perfectly supports multirelease JARs, as it can scan newer code also with older VMs and vice versa (the class file format has nothing to do with the running VM, as forbiddenapis parses it on its own). If you have a multi-release JAR, you hjave 2 sourcesets (one for base java and one for java 9). Since the last update, forbiddenapis automatically runs on both (there was a bug that sourcesets added after JavaPlugin load were not evaluated, see https://github.com/policeman-tools/forbidden-apis/issues/138 - the same you had in your own plugin: `sourcesets.all{}` should be used instead of `sourcesets.foreach{}`). The base one works with targetVersion=8, the java9 one with targetVersion=9 - plain simple\r\n- The problem of deprecated APIs completely removed in later Java versions (`Thread.stop`): You should not add those into your own signatures files, as there is already a `jdk-deprecated`. E.g. you add `jdk-deprecated`(targetVersion8) to your base sourceset (that's also compiled against java 8). If you run this in Java 8, forbiddenapis will complain about the deprecated API and fail build (no extra signature needed in your own sigantures, it's obsolete). If you run this in Java 10, the compile will fail anyways. But even if it it would pass, forbiddenapis has a special marker in `jdk-deprecated` (as its machine-generated signature file) and will not complain about missing signatures.\r\n\r\nTo correctly use forbiddenapis in any JVM, you just need to:\r\n- set the target version correctly for the source set both on compiler (forked or not, doesn't matter) and on forbiddenapis. In your case, set target to 8 for main sourceset; for the MR JAR use Java 9 or 10 or 11. For build reprocuibility, explicitey setting the targetVersion is important, as this makes it independent from runtime. Forbiddenapis will parse the signatures and class files according to that version. It is by the way planned to use Java 9+'s feature to compile run against older runtime version (`javac -release`) in the same way like javac (it resolves signatures against this older version)\r\n- run forbiddenapis for every sourceset (Java, Groovy, Kotlin,...). The updated version fixes the bug with lazy evaluation of sourcesets.\r\n\r\nBTW, neither Checkstyle nor PMD are able to fork (for the same reason), they use the Ant task internally to execute.\r\n\r\nUnless there are any other reasons (please explain details), I see no reason to add an option to the upstream forbiddenapis task to support forking. The only thing would be to use the `-release 8` feature of later javac also with forbiddenapis (still under investigation), but that's not needed for `jdk-deprecated`.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422279657","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422279657","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422279657,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjI3OTY1Nw==","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"created_at":"2018-09-18T07:07:21Z","updated_at":"2018-09-18T07:07:21Z","author_association":"CONTRIBUTOR","body":"Maybe bring @rjernst in here...","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422280812","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422280812","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422280812,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjI4MDgxMg==","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"created_at":"2018-09-18T07:12:01Z","updated_at":"2018-09-18T07:12:01Z","author_association":"CONTRIBUTOR","body":"Here is the magic in `jdk-deprecated` for targetVersion 1.8: https://github.com/policeman-tools/forbidden-apis/blob/2.6/src/main/resources/de/thetaphi/forbiddenapis/signatures/jdk-deprecated-1.8.txt#L7\r\n\r\nHere you see the \"bad\" thread methods, as declared \"deprecated in Java 8\": https://github.com/policeman-tools/forbidden-apis/blob/2.6/src/main/resources/de/thetaphi/forbiddenapis/signatures/jdk-deprecated-1.8.txt#L176-L180\r\n\r\nOn Java 11, this still allows forbiddenapis to work correctly, as those files are not hand-maintained, they were generated by machine, so ignoring signatures not available at runtime is safe, as a typos / human errors cannot happen.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422365526","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422365526","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422365526,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjM2NTUyNg==","user":{"login":"alpar-t","id":2565652,"node_id":"MDQ6VXNlcjI1NjU2NTI=","avatar_url":"https://avatars1.githubusercontent.com/u/2565652?v=4","gravatar_id":"","url":"https://api.github.com/users/alpar-t","html_url":"https://github.com/alpar-t","followers_url":"https://api.github.com/users/alpar-t/followers","following_url":"https://api.github.com/users/alpar-t/following{/other_user}","gists_url":"https://api.github.com/users/alpar-t/gists{/gist_id}","starred_url":"https://api.github.com/users/alpar-t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alpar-t/subscriptions","organizations_url":"https://api.github.com/users/alpar-t/orgs","repos_url":"https://api.github.com/users/alpar-t/repos","events_url":"https://api.github.com/users/alpar-t/events{/privacy}","received_events_url":"https://api.github.com/users/alpar-t/received_events","type":"User","site_admin":false},"created_at":"2018-09-18T12:03:19Z","updated_at":"2018-09-18T12:03:19Z","author_association":"CONTRIBUTOR","body":"Multi release jars were a problem with 3rd party multi release jars for sure in the third party audit for sure, as different classes would be loaded and scanned depending on the running jvm, and would thus produce different results. We should have produced and example with @rjernst when we discussed this instead of relying on memory. We might also have been confused that during the third party audit task some classes meant for java 9 were being scanned when running on 8 as well due to how the jars were being extracted.   ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/422386867","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-422386867","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":422386867,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMjM4Njg2Nw==","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"created_at":"2018-09-18T13:10:31Z","updated_at":"2018-09-18T13:10:31Z","author_association":"CONTRIBUTOR","body":"The third party audit was indeed a problem in the previous setup: It just extracted all JAR files and therefor it also extracted the META-INF/versions folder. So Thirdparty-Audit should have applied an exclusion rule on META-INF/**\r\n\r\nUwe","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/423023697","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-423023697","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":423023697,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMzAyMzY5Nw==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2018-09-20T02:56:06Z","updated_at":"2018-09-20T02:56:06Z","author_association":"MEMBER","body":"Thanks @uschindler. This all makes more sense now.\r\n\r\n@atorok Let's switch back to using the forbiddenapis plugin and change third party audit to exclude META-INF as suggested. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/423063796","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-423063796","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":423063796,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMzA2Mzc5Ng==","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"created_at":"2018-09-20T07:00:36Z","updated_at":"2018-09-20T07:03:44Z","author_association":"CONTRIBUTOR","body":"Hi @rjernst ,\r\n\r\nI think the main forbiddenapis scan (of Elasticsearch Source code) is perfectly fine with the official plugin, there are no changes needed. I'd only remove the duplicate signatures (jdk-deprecated and elasttic's own have both Thread deprecated method, that's unneeded). Of course with the new plugin version, the Elasticsearch Java 9 sourceSet can now also be scanned (see the code I added, but commented out in my PR of March 2018).\r\n\r\nThe third party audit has some special cases, which are also not solvable with running forked (the problem stays):\r\n\r\nThe JAR files are extracted and then the ANT task is started to scan the extracted class files. When doing this, there is no classloader involved, so it's reproducible with different JVMs. The problem is another one: META-INF/versions contains duplicate class files, which are also scanned. Due to same class name, this leads to non-reproducibility, because it depends on scanning order which class file is then looked up internally in forbiddenapis, when other classes are scanned that refer to those duplicated ones. The only way to solve this is to only extract class files from the main folder and exclude META-INF/ folder while extracting the JAR file. Of course this would not scan the java9/10/11 versions in third party audits. But due to the module system, it's very unlikely that a 3rd party JAR uses internal APIs in the Java 9+ versions of class files. If you still want to scan those classes, it needs more work in 3rd party audit (it needs to extract and scan the 3rd party jar multiple times and for each run, extract java9/java10/... class files separately and overwrite the main class files (so replace original files with versioned ones, and then scan again with targetVersion=...). I'd not do this!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/425946438","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-425946438","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":425946438,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNTk0NjQzOA==","user":{"login":"alpar-t","id":2565652,"node_id":"MDQ6VXNlcjI1NjU2NTI=","avatar_url":"https://avatars1.githubusercontent.com/u/2565652?v=4","gravatar_id":"","url":"https://api.github.com/users/alpar-t","html_url":"https://github.com/alpar-t","followers_url":"https://api.github.com/users/alpar-t/followers","following_url":"https://api.github.com/users/alpar-t/following{/other_user}","gists_url":"https://api.github.com/users/alpar-t/gists{/gist_id}","starred_url":"https://api.github.com/users/alpar-t/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alpar-t/subscriptions","organizations_url":"https://api.github.com/users/alpar-t/orgs","repos_url":"https://api.github.com/users/alpar-t/repos","events_url":"https://api.github.com/users/alpar-t/events{/privacy}","received_events_url":"https://api.github.com/users/alpar-t/received_events","type":"User","site_admin":false},"created_at":"2018-10-01T15:17:29Z","updated_at":"2018-10-01T15:17:29Z","author_association":"CONTRIBUTOR","body":"@uschindler  This is what we do for third party audit now:\r\n```\r\ngetProject().copy(spec -> {\r\n                spec.from(getProject().zipTree(jar));\r\n                spec.into(jarExpandDir);\r\n                // Exclude classes for multi release jars above target\r\n                for (int i = Integer.parseInt(targetCompatibility.getMajorVersion()) + 1;\r\n                     i <= Integer.parseInt(JavaVersion.VERSION_HIGHER.getMajorVersion());\r\n                     i++\r\n                ) {\r\n                  spec.exclude(\"META-INF/versions/\" + i + \"/**\");\r\n                }\r\n            })\r\n```\r\n\r\nSo when we are scanning with an older JVM, we don't run into the class files meant for the newer versions and unknown class format or missing class errors.\r\nFor example, when we are running on java 8, we will exclude files mean for java 9. \r\nI assumed this was fine as the jars are on the classpath and we only scan the extracted jars to get a list of all the classes, so when loading them we will load the right one.  Can you confirm that ?\r\n\r\nThere are different jobs in CI that set the target compatibility from 8 to 11 so that assures us that we do eventually scan all the classes, even those meant for java 9. \r\n\r\n@rjernst  I reverted to using the plugin in #33809 ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/426003005","html_url":"https://github.com/elastic/elasticsearch/issues/33759#issuecomment-426003005","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/33759","id":426003005,"node_id":"MDEyOklzc3VlQ29tbWVudDQyNjAwMzAwNQ==","user":{"login":"uschindler","id":1005388,"node_id":"MDQ6VXNlcjEwMDUzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1005388?v=4","gravatar_id":"","url":"https://api.github.com/users/uschindler","html_url":"https://github.com/uschindler","followers_url":"https://api.github.com/users/uschindler/followers","following_url":"https://api.github.com/users/uschindler/following{/other_user}","gists_url":"https://api.github.com/users/uschindler/gists{/gist_id}","starred_url":"https://api.github.com/users/uschindler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uschindler/subscriptions","organizations_url":"https://api.github.com/users/uschindler/orgs","repos_url":"https://api.github.com/users/uschindler/repos","events_url":"https://api.github.com/users/uschindler/events{/privacy}","received_events_url":"https://api.github.com/users/uschindler/received_events","type":"User","site_admin":false},"created_at":"2018-10-01T17:58:11Z","updated_at":"2018-10-01T17:58:11Z","author_association":"CONTRIBUTOR","body":"Hi,\r\nit looks fine to just exclude the higher versions. But nevertheless there is the problem that forbiddenapis internally keeps a map of class files keyed on class name for looking up purposes (it's own \"classloader\"-like mechanism just looks for references between classes that are part of the scanned set by looking up via the classname key). This approach would add the same class multiple times to the map.\r\nThe correct way to implement this would to unzip the JAR file multiple times, each overwriting files that are already there). It would start with the base classes. And then it would iterate up to target versions and extracting the `META-INFO/versions/MAJOR` over the existing tree (without the versions prefix). This wuld overwrite the older versions with newer ones.\r\nThe current CLI based approach was also wrong in that regard.","performed_via_github_app":null}]