{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61883/events","html_url":"https://github.com/elastic/elasticsearch/issues/61883","id":691426644,"node_id":"MDU6SXNzdWU2OTE0MjY2NDQ=","number":61883,"title":"EQL: Revisit case insensitivity","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"labels":[{"id":1690690117,"node_id":"MDU6TGFiZWwxNjkwNjkwMTE3","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Query%20Languages/EQL","name":":Query Languages/EQL","color":"0e8a16","default":false,"description":"EQL querying"},{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null},{"id":1967501040,"node_id":"MDU6TGFiZWwxOTY3NTAxMDQw","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:QL","name":"Team:QL","color":"fef2c0","default":false,"description":"Meta label for query languages team"},{"id":929267538,"node_id":"MDU6TGFiZWw5MjkyNjc1Mzg=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/team-discuss","name":"team-discuss","color":"fbca04","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2020-09-02T21:16:00Z","updated_at":"2020-09-22T07:24:05Z","closed_at":"2020-09-22T07:23:28Z","author_association":"MEMBER","active_lock_reason":null,"body":"Elasticsearch is by default case sensitive. EQL on the other hand strives to be case insensitive since matching strings against different OSs is not straight-forward (some are insensitive, some aren't).\r\nHence why string equality / non-equality are by default case-insensitive.\r\n\r\nThe current approach requires usage of scripting for functions that are case sensitive and is not fully supported for equality/non-equality. We could expand this to the rest of the operators (like `>`, `>=`, etc..) but considering this is a rare occurrence for strings, for the time being the scope is on `==` and `!=`.\r\n\r\n#### Using operators\r\n\r\nExtending the `==` operator to be case aware is convenient but also quite impactful. That's because in all languages `==` is an exact equality, `John` == `john` is false.\r\nThat is everything is case sensitive and insensitivity needs to be added on top.\r\n\r\nEither default (sensitive or insensitive) has pros and cons and having a flag that can change the behavior is the ideal way. Currently there is a default through the `case_sensitive` parameter which can be kept though it would have to be renamed since it's only the equality that we're after so\r\n`case_sensitive` --> `case_sensitive_equality`.\r\n\r\nThe issue with this type of parameter is that all string comparisons have the same sensitivity. Potentially we can introduce dedicated operator such as `~=` or `~==` to indicate a case insensitive comparison.\r\n\r\nThe pro of this approach is that there are defined scopes, the downside is that it might be too subtle for folks to pick it up.\r\n\r\n#### Wrapping functions\r\n \r\nAnother option would be to use some kind of function say `insensitive(foo == bar)` or `sensitive(foo == bar)` which is a more verbose way of supporting `==` and `~=` and offering both sensitivities regardless of the global setting.\r\n\r\n## Impact on functions\r\nAs described in #61162, case insensitivity will be an option on a limited number of queries. Currently this translates to:\r\n- string equality (`term` and `terms`)\r\n- `startsWith` (`prefix` query)\r\n- pattern matching, `match`, `wildcard` (`wildcard` query)\r\n\r\nIt's worth revising the semantics of insensitivity over all the functions in particular:\r\n- `between`, `indexOf`\r\n- `endsWith`- might be rewritten to a wildcard query\r\n- `stringContains` - wildcard again\r\n\r\nAs last note, a global setting will affect both the operator and the functions. Meaning if we need scoping - have functions with both types of sensitivity as well as operators, we need to introduce either dedicated switches/wrapping functions.\r\n\r\nMy proposal is to look at the case insensitive usage of functions in existing queries and where needed, try to retrofit them onto the existing queries. While we might not cover all possible options, the vast majority of cases / rules might be covered.\r\n\r\n\r\n\r\n\r\n","closed_by":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"performed_via_github_app":null}