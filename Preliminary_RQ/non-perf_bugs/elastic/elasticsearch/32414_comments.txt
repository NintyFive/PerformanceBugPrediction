[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/408336125","html_url":"https://github.com/elastic/elasticsearch/issues/32414#issuecomment-408336125","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32414","id":408336125,"node_id":"MDEyOklzc3VlQ29tbWVudDQwODMzNjEyNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-07-27T07:27:49Z","updated_at":"2018-07-27T07:27:49Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/408337717","html_url":"https://github.com/elastic/elasticsearch/issues/32414#issuecomment-408337717","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/32414","id":408337717,"node_id":"MDEyOklzc3VlQ29tbWVudDQwODMzNzcxNw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2018-07-27T07:35:02Z","updated_at":"2018-07-27T07:35:02Z","author_association":"MEMBER","body":"> Use keyed request if order does not matter (order can be either implicit by key or explicit by specifying order key at the top level) or a list of anonymous objects?\r\n\r\nThe order always matters in the `composite` aggregation but we've decided to return a map for each bucket rather than a simple list of values because it is easier to read. Each value in the composite bucket has a name associated to it and the value can be retrieved from the returned map with a simple get.\r\n\r\n> Could we perhaps do the same as with filters for consistency? Use keyed request if order does not matter (order can be either implicit by key or explicit by specifying order key at the top level) or a list of anonymous objects? If not, it would still be great to have protection against duplicate keys - the above example should raise an exception to alert the user they are doing something unsupported.\r\n\r\nThat would break the current response format which always return the bucket key as a map. \r\nThe duplicate key in the source is a bug though, we should detect this discrepancy and throw an exception in this case. I'll work on a fix.\r\n\r\n","performed_via_github_app":null}]