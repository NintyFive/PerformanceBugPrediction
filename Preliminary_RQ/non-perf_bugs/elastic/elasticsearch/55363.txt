{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55363/events","html_url":"https://github.com/elastic/elasticsearch/issues/55363","id":601557403,"node_id":"MDU6SXNzdWU2MDE1NTc0MDM=","number":55363,"title":"Search 'fields' option design + implementation","user":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":158399402,"node_id":"MDU6TGFiZWwxNTgzOTk0MDI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Meta","name":"Meta","color":"e11d21","default":false,"description":null},{"id":1967498216,"node_id":"MDU6TGFiZWwxOTY3NDk4MjE2","url":"https://api.github.com/repos/elastic/elasticsearch/labels/Team:Search","name":"Team:Search","color":"fef2c0","default":false,"description":"Meta label for search team"}],"state":"closed","locked":false,"assignee":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"assignees":[{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false}],"milestone":null,"comments":12,"created_at":"2020-04-16T22:40:40Z","updated_at":"2020-08-27T23:45:34Z","closed_at":"2020-07-28T20:58:13Z","author_association":"MEMBER","active_lock_reason":null,"body":"Original issue: https://github.com/elastic/elasticsearch/issues/49028\r\nFeature branch: [field-retrieval](https://github.com/elastic/elasticsearch/tree/field-retrieval)\r\nDocs: https://www.elastic.co/guide/en/elasticsearch/reference/7.x/search-fields.html\r\n\r\n### Motivation\r\nOften a user wants to retrieve a particular set of fields during a search. Currently, we don't support this usage pattern in a good way. In short, given a list of fields, there is no easy way to load all of their values:\r\n* We can’t load all of them from doc values. Some fields like text fields may not have doc values at all, or we may exceed the limit for a reasonable number of doc value fields to load.\r\n* It’s not easy to load all of them through source. For example, if the field is a field alias, it’s difficult to determine where to find its value in the source.\r\n\r\nBetter field retrieval support is becoming even more important now that we're introducing more field types that don’t fit the typical pattern like `constant_keyword` and the proposed runtime fields (https://github.com/elastic/elasticsearch/issues/48063).\r\n\r\n### Feature Summary\r\nWe plan to add a new `fields` section to the search request, which users would specify instead of using source filtering to load fields from source:\r\n\r\n```\r\nPOST logs-*/_search\r\n{\r\n  \"query\": { \"match_all\": {} },\r\n  \"fields\": [\r\n    \"file.*\",\r\n    {\r\n      \"field\": \"event.timestamp\",\r\n      \"format\": \"epoch_millis\"\r\n    },\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\nBoth full field names and wildcard patterns are accepted. Only leaf fields are returned, the API will not allow for fetching object values. The fields are returned as a flat list in the `fields` section in each hit, the same as we do for `docvalue_fields` and `script_fields`.\r\n\r\nOverall, the API gives a friendly way to load fields from source:\r\n* If a non-standard field like a field alias, multi-field, or constant_keyword is specified in `fields`, then we’ll consult the mappings to find and return the right value.\r\n* The fields are returned in a flat list, as opposed to structured JSON.\r\n* For date and numeric field types, we would support the same `format` parameter as we do for `docvalue_fields` to allow for adjusting the format of the results.\r\n* Each value would be returned in a 'canonical' format -- for example if a field is mapped as an integer, it will be returned as an integer even if it was specified as a string in the _source.\r\n\r\nSome clarifications:\r\n* In this first pass, the API will not attempt to load from stored fields or doc values.\r\n* For simplicity of parsing, values will always be returned in an array, even if there is only one value present.\r\n\r\n### Implementation Plan\r\n- [x] Introduce a `fields` section in the search request that fetches values from source. (#55639)\r\n- [x] Correctly resolve field aliases, multi-fields, and copy_to. (#55889)\r\n- [x] Consult field mappings to parse and correctly format each value. Also handle constant_keyword. (#56928)\r\n- [x] Handle `ignore_malformed`. (#56928)\r\n- [x] Support `ignore_above`. (#57385) \r\n- [x] Support setting a format through the `format` parameter. (#57893) \r\n- [x] Measure performance and look into improvements. (#58196)\r\n- [x] Support `null_value`. (#58623)\r\n- [x] Improve documentation around field loading. (#57500, #58787)\r\n- [x] Handle geo values. (#59821)\r\n\r\nFuture improvements:\r\n* Move `FieldMapper#lookupValues` to `MappedFieldType`. (?)\r\n* Handle meta fields like `_size`.\r\n* Make use of more efficient source parsing: https://github.com/elastic/elasticsearch/issues/52591.\r\n* Support the API in `inner_hits`.\r\n\r\n### Open Questions\r\n* If a wildcard pattern matches both a parent field and one of its multi-fields, should we just return the parent to avoid returning the same value twice? A similar question holds for field aliases and their target fields.\r\n* Should the API return fields in `_source` that have been disabled in the mappings (`enabled: false`)?\r\n* For `keyword` fields, should we apply the `normalizer` or return the original value?","closed_by":{"login":"jtibshirani","id":7461306,"node_id":"MDQ6VXNlcjc0NjEzMDY=","avatar_url":"https://avatars3.githubusercontent.com/u/7461306?v=4","gravatar_id":"","url":"https://api.github.com/users/jtibshirani","html_url":"https://github.com/jtibshirani","followers_url":"https://api.github.com/users/jtibshirani/followers","following_url":"https://api.github.com/users/jtibshirani/following{/other_user}","gists_url":"https://api.github.com/users/jtibshirani/gists{/gist_id}","starred_url":"https://api.github.com/users/jtibshirani/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtibshirani/subscriptions","organizations_url":"https://api.github.com/users/jtibshirani/orgs","repos_url":"https://api.github.com/users/jtibshirani/repos","events_url":"https://api.github.com/users/jtibshirani/events{/privacy}","received_events_url":"https://api.github.com/users/jtibshirani/received_events","type":"User","site_admin":false},"performed_via_github_app":null}