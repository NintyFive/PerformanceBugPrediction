[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386580625","html_url":"https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386580625","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386","id":386580625,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjU4MDYyNQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-05-04T12:04:40Z","updated_at":"2018-05-04T12:04:40Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search-aggs","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/386807288","html_url":"https://github.com/elastic/elasticsearch/issues/30386#issuecomment-386807288","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386","id":386807288,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NjgwNzI4OA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2018-05-05T13:54:16Z","updated_at":"2018-05-05T20:51:45Z","author_association":"MEMBER","body":"1. It might be a mistake in the JDBC spec but according to the javadocs, the [column names](https://docs.oracle.com/javase/8/docs/api/java/sql/DatabaseMetaData.html#getTableTypes--) are important.\r\nThe same page lists at the top that:\r\n\r\n> Additional columns beyond the columns defined to be returned by the ResultSet object for a given method can be defined by the JDBC driver vendor and must be accessed by their column label. \r\n\r\nWhich further indicates that naming (as oppose to indexing) is important. As such, I propose to leave this as is.\r\n\r\n2. my understand of the spec is the type name should be that of the type inside the storage while the value that of the SQL spec.\r\nIn ES, the data type is called [date](https://www.elastic.co/guide/en/elasticsearch/reference/current/date.html) which can be confusing since it's really date time but regardless, that's its name and that's what's being returned. And the mapping to the SQL code seems correct (namely timestamp).\r\n\r\n3. confirmed the PRECISION (JDBC) /COLUMN_SIZE (ODBC) bug\r\nFor `date` different values are returned since a date has a 19 precision (the timezone is always UTC) while a size of 19+1(the trailing `Z`). However the JDBC spec indicates that:\r\n\r\n>The PRECISION column represents the maximum column size that the server supports for the given datatype. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component).\r\n\r\n<a href=\"#date-precision\"></a>In `SYS COLUMNS` the `COLUMN_SIZE` is returned not the `PRECISION` hence why 20 is returned.\r\nIt seems that for `Date`, the precision needs to be the column size so to avoid special handling, I've made both the precision and column size 20.\r\n\r\n4. Fixed `SQL_DATA_TYPE` values (please confirm in the PR that the values are correct). Do note that these values are returned as int - I think this is another mistake in the JDBC spec (as oppose to ODBC); however it is consistent - even internally the DATA_TYPE appears as a integer instead of a `smallint`/`short` so it's likely JDBC users expect this as such despite the value being a `smallint`/`short`.\r\nPlease handle this in the driver.\r\n\r\n5. `SQL_DATETIME_SUB`\r\nFixed this value as well (see the note above). To confirm, ODBC considers `NULL` as `0` correct? \r\n\r\n6. `AUTO_INCREMENT` and `IS_AUTOINCREMENT` are different\r\n\r\nThis is another example of JDBC vs ODBC. The first is declared by `getTableTypes` while the latter by [`getColumns`](https://docs.oracle.com/javase/8/docs/api/java/sql/DatabaseMetaData.html#getColumns-java.lang.String-java.lang.String-java.lang.String-java.lang.String-).\r\nFrom what I can tell, columns 19+ are JDBC specific and do not appear in ODBC. Further more, the JDBC spec indicates that `NO` should be used as oppose to empty string (which means no idea).\r\n\r\n7. `PRECISION`\r\nI've fixed the precision for `double` (I was rounding instead of flooring the number).\r\nRegarding `HALF`/`SCALED` floats I wonder whether we should treat them as `DECIMAL`S or `NUMERIC` types . This might better differentiate them from ODBC `FLOAT`/`REAL`.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/387048287","html_url":"https://github.com/elastic/elasticsearch/issues/30386#issuecomment-387048287","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386","id":387048287,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NzA0ODI4Nw==","user":{"login":"bpintea","id":1562801,"node_id":"MDQ6VXNlcjE1NjI4MDE=","avatar_url":"https://avatars3.githubusercontent.com/u/1562801?v=4","gravatar_id":"","url":"https://api.github.com/users/bpintea","html_url":"https://github.com/bpintea","followers_url":"https://api.github.com/users/bpintea/followers","following_url":"https://api.github.com/users/bpintea/following{/other_user}","gists_url":"https://api.github.com/users/bpintea/gists{/gist_id}","starred_url":"https://api.github.com/users/bpintea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bpintea/subscriptions","organizations_url":"https://api.github.com/users/bpintea/orgs","repos_url":"https://api.github.com/users/bpintea/repos","events_url":"https://api.github.com/users/bpintea/events{/privacy}","received_events_url":"https://api.github.com/users/bpintea/received_events","type":"User","site_admin":false},"created_at":"2018-05-07T12:24:28Z","updated_at":"2018-05-07T12:24:28Z","author_association":"CONTRIBUTOR","body":"> 5. To confirm, ODBC considers NULL as 0 correct?\r\n\r\nNot as a general rule. Split answer:\r\n- for columns type support, yes, the driver will convert a `null` to **0**/`false`; so wherever there's a `null` value for an `int` column in `SYS TYPES` answers (eg. `AUTO_INCREMENT`), the driver will return **0**/`false` when the client app inquires about a column data type (ex. if column is auto-increment'able).\r\n- `null` has an equivalence to empty string for catalog ODBC functions (where not otherwise specified).\r\n\r\nBut generally, `null` has the usual significance, _no value available_, and this is conveyed to the client app through interface specific means (the app can specify a buffer where the driver will write if a cell is `null`, which is different from the buffer that would hold the actual value).\r\n\r\n> 6. AUTO_INCREMENT and IS_AUTOINCREMENT are different\r\n> \r\n> This is another example of JDBC vs ODBC. The first is declared by getTableTypes while the latter by getColumns.\r\n> From what I can tell, columns 19+ are JDBC specific and do not appear in ODBC. Further more, the JDBC spec indicates that NO should be used as oppose to empty string (which means no idea).\r\n\r\nSure, that's clear. The suggestion I was trying to make: if `getColumns()`/`IS_AUTOINCREMENT` returns non-empty - i.e. it has an idea -, then `getTypeInfo()`/`AUTO_INCREMENT` should probably also have an idea (and thus return non-null, i.e. `false`).\r\nOnly so that the answers are consistent. The end result, AFA the driver is concerned, is going to be the same.\r\n\r\n> 7. Regarding HALF/SCALED floats I wonder whether we should treat them as DECIMALS or NUMERIC types .\r\n\r\nThe `DECIMAL` and `NUMERIC` are [exact types](https://docs.microsoft.com/en-us/sql/odbc/reference/appendixes/sql-data-types). \r\nI think the current mapping should be correct.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/387053037","html_url":"https://github.com/elastic/elasticsearch/issues/30386#issuecomment-387053037","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30386","id":387053037,"node_id":"MDEyOklzc3VlQ29tbWVudDM4NzA1MzAzNw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2018-05-07T12:45:25Z","updated_at":"2018-05-07T12:48:42Z","author_association":"MEMBER","body":"> Not as a general rule.\r\n\r\nHmm  - so it depends. It means I'll keep pester you about it :)\r\n\r\n> Sure, that's clear. The suggestion I was trying to make: if getColumns()/IS_AUTOINCREMENT returns non-empty - i.e. it has an idea -, then getTypeInfo()/AUTO_INCREMENT should probably also have an idea (and thus return non-null, i.e. false).\r\nOnly so that the answers are consistent. The end result, AFA the driver is concerned, is going to be the same.\r\n\r\nAh, I see. I've updated `AUTO_INCREMENT` to return false (which is also consistent with the JDBC API).\r\n\r\n> The DECIMAL and NUMERIC are exact types.\r\n\r\nHmmm, This means it can be applied to `SCALED` float but not sure about the `HALF` one.\r\n\r\nThis note might be relevant:\r\n> [4] SQL_DECIMAL and SQL_NUMERIC data types differ only in their precision. The precision of a DECIMAL(p,s) is an implementation-defined decimal precision that is no less than p, whereas the precision of a NUMERIC(p,s) is exactly equal to p. \r\nGot it - I've changed this to `false` (which is actually correct as the spec indicates a primitive should be returned).","performed_via_github_app":null}]