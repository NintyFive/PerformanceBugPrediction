[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/581836455","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-581836455","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":581836455,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTgzNjQ1NQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-02-04T10:13:40Z","updated_at":"2020-02-04T10:13:40Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-search (:Search/EQL)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/581943278","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-581943278","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":581943278,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTk0MzI3OA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-02-04T14:45:52Z","updated_at":"2020-02-04T14:45:52Z","author_association":"MEMBER","body":"This looks correct to me, since `42` isn't a valid identifier. I think this requires escaping, unless you think we should add more explicit handling for it. What's your ideal expected behavior?\r\n```\r\n`42` where true\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/582328673","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-582328673","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":582328673,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MjMyODY3Mw==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-02-05T09:56:30Z","updated_at":"2020-02-05T11:01:39Z","author_association":"MEMBER","body":"Usability wise:\r\nThe event field is customizable meaning it can keyword or numeric. Even if we restrict it to being a keyword:\r\n`event where condition` is queryDSL is essentially:\r\n`event_field == \"event\" and ...`\r\nevent is a value, we just happen to escape it automatically.\r\nSo whether it's only letter or numbers should not matter since both are valid values.\r\n\r\n``` `42` where true```\r\nis problematic since it means `42` is a field not a value. Which is not the case.\r\n\r\nImplementation wise:\r\nI think reusing identifiers is problematic and having a dedicated token for eventType (essentially an unescaped string) would work better.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/583483550","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-583483550","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":583483550,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MzQ4MzU1MA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-02-07T16:27:26Z","updated_at":"2020-02-07T16:27:26Z","author_association":"MEMBER","body":"Agreed. Since the eventType type depends on the index, I think this needs its own parser rule, accepting identifiers, strings and numbers. I think it's reasonable to support only those and not other types. boolean, etc doesn't make much sense to me.\r\n\r\nOn a related note (I can make this a separate issue, if it's scope creep), I think it also makes sense to make `(eventType \"where\")` optional. The EQL grammar was like this https://github.com/endgameinc/eql/blob/master/eql/etc/eql.g#L13 but that functionality wasn't exposed to the end user. One advantage of this is that we gain more flexibility with data formats.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/584147376","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-584147376","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":584147376,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NDE0NzM3Ng==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-02-10T14:26:06Z","updated_at":"2020-02-10T14:26:16Z","author_association":"MEMBER","body":"> I think it's reasonable to support only those and not other types. boolean, etc doesn't make much sense to me.\r\n\r\nBy virtue of being non-escaped, even a boolean can be passed in - a rare case but a valid one since `true` and `false` are a valid string just like `42`: `true where ...` \r\n\r\n> On a related note (I can make this a separate issue, if it's scope creep), I think it also makes sense to make `(eventType \"where\")` optional. The EQL grammar was like this https://github.com/endgameinc/eql/blob/master/eql/etc/eql.g#L13 but that functionality wasn't exposed to the end user. One advantage of this is that we gain more flexibility with data formats.\r\n\r\nPlease do create another issue. I'm +1 on it since `where true` for such cases is simply noise.\r\nNot sure what you mean by data format - can you give an example?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/584162844","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-584162844","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":584162844,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NDE2Mjg0NA==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-02-10T14:58:07Z","updated_at":"2020-02-10T14:58:07Z","author_association":"MEMBER","body":"Btw since there's agreement on the issue, I'll remove the discuss label.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/585841843","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-585841843","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":585841843,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NTg0MTg0Mw==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-02-13T16:21:00Z","updated_at":"2020-02-20T14:00:31Z","author_association":"MEMBER","body":"Update from 2020/02/13 meeting. We can always move the check to the right of `where` and use the `any` type. I think we can indirectly close this, once we add parser rules for `any`.\r\n\r\nUpdate/clarification: Instead of accepting `42 where true`, we'll accept `any where event.category == \"42\"`","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/590311111","html_url":"https://github.com/elastic/elasticsearch/issues/51853#issuecomment-590311111","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/51853","id":590311111,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MDMxMTExMQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-02-24T13:07:08Z","updated_at":"2020-02-24T13:07:08Z","author_association":"MEMBER","body":"How about the case where `where` is not optional?\r\n`42 where foo == value` - it can be rewritten as `any where foo == value and event.category ==\"42\"` but I don't recall  why do we require the workaround and not extend the parsing?\r\n","performed_via_github_app":null}]