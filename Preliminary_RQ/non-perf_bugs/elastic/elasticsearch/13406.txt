{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/13406","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13406/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13406/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13406/events","html_url":"https://github.com/elastic/elasticsearch/issues/13406","id":105456869,"node_id":"MDU6SXNzdWUxMDU0NTY4Njk=","number":13406,"title":"[Feature Request] Add NoMatchQuery to support better templating experience","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","site_admin":false},"labels":[{"id":23174,"node_id":"MDU6TGFiZWwyMzE3NA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Eenhancement","name":">enhancement","color":"4a4ea8","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2015-09-08T19:52:19Z","updated_at":"2015-09-19T12:55:03Z","closed_at":"2015-09-19T12:55:02Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Consider the following query, which is constructed using Mustache on the client side:\n\n```\n                            {\n                                \"bool\": {\n                                    \"minimum_should_match\":1,\n                                    \"should\":[\n                                        {{#someCondition}}\n                                        {\"terms\": {\n                                            \"field1\": {{vals1}}\n                                        }},\n                                        {{/someCondition}}\n                                        {{#hasIp}}\n                                        { \"terms\": {\n                                            \"ips\": {{ips}}\n                                        }}\n                                        {{/hasIp}}\n                                    ]\n                                }\n                            }\n```\n\nWhen hasIp && someCondition or !hasIp && !someCondition everything works as expected (because `minimum_number_should_match` causes empty should clause to effectively be a NoMatchQuery). For the case where !hasIp && someCondition, this Mustache template is going to render invalid JSON (trailing comma right before a closing bracket).\n\nA possible solution works something like this:\n\n```\n                            {\n                                \"bool\": {\n                                    \"minimum_should_match\":1,\n                                    \"should\":[\n                                        {{#someCondition}}\n                                        {\"terms\": {\n                                            \"field1\": {{vals1}}\n                                        }},\n                                        {{/someCondition}}\n                                        {{#hasIp}}\n                                        { \"terms\": {\n                                            \"ips\": {{ips}}\n                                        }},\n                                        {{/hasIp}}\n                                        {\"term\": {\n                                            \"emails\": \"no-such-email:a-match-none-query\"\n                                        }}\n                                    ]\n                                }\n                            }\n```\n\nAdding a query that translates to definitive no-match. It can be domain specific (e.g. looking for inexistent email) or an empty boolean clause that translates to no results.\n\nIt will be really useful to have a NoMatchQuery type to complement MatchAllQuery, this will allow writing templates like the one above much easier, and without resorting to query types that actually cost in index lookups.\n\nAs always, I'll be happy to provide a PR once all required details have been agreed upon.\n","closed_by":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"performed_via_github_app":null}