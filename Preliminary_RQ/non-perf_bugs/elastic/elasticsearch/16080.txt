{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/16080","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16080/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16080/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/16080/events","html_url":"https://github.com/elastic/elasticsearch/issues/16080","id":127412585,"node_id":"MDU6SXNzdWUxMjc0MTI1ODU=","number":16080,"title":"ability to have init script for scripted fields or scripted filters","user":{"login":"yehosef","id":149253,"node_id":"MDQ6VXNlcjE0OTI1Mw==","avatar_url":"https://avatars0.githubusercontent.com/u/149253?v=4","gravatar_id":"","url":"https://api.github.com/users/yehosef","html_url":"https://github.com/yehosef","followers_url":"https://api.github.com/users/yehosef/followers","following_url":"https://api.github.com/users/yehosef/following{/other_user}","gists_url":"https://api.github.com/users/yehosef/gists{/gist_id}","starred_url":"https://api.github.com/users/yehosef/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yehosef/subscriptions","organizations_url":"https://api.github.com/users/yehosef/orgs","repos_url":"https://api.github.com/users/yehosef/repos","events_url":"https://api.github.com/users/yehosef/events{/privacy}","received_events_url":"https://api.github.com/users/yehosef/received_events","type":"User","site_admin":false},"labels":[{"id":146834791,"node_id":"MDU6TGFiZWwxNDY4MzQ3OTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Scripting","name":":Core/Infra/Scripting","color":"0e8a16","default":false,"description":"Scripting abstractions, Painless, and Mustache"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2016-01-19T10:19:14Z","updated_at":"2016-02-12T11:18:49Z","closed_at":"2016-02-12T11:18:49Z","author_association":"NONE","active_lock_reason":null,"body":"I have have a set of documents which have a field of dates when a user did an action.  I want to look through and count the number of dates they have in a specified range. I was  make the requests with string dates like \"2015-12-01\" and using a `SimpleDateFormat` to convert the string to a Long for conversion.  The groovy script is:\n\n```\nsdf = new java.text.SimpleDateFormat('yyyy-MM-dd');\nsdf.setTimeZone(TimeZone.getTimeZone('GMT+0')); \nstart = sdf.parse(start_date).getTime();\nend = sdf.parse(end_date).getTime();\ndates = doc['dates'].values.findAll { it>=start && it<=end  }; \nreturn dates.size()>limit\n```\n\nThe performance is actually pretty good - this runs on around 3 seconds for 1.5M documents on a 3 machine cluster.\n\nBut really on each document I'm creating a new SimpleDateFormat and parsing the string dates, even though it's the same for each document.\n\nIf I instead convert this to a timestamp before, the script becomes\n\n```\ndates = doc['dates'].values.findAll { it>=start_ts && it<=end_ts}}  }; \nreturn dates.size()>limit ;\n```\n\nand it runs in less than half the time.  This works and is fine, but it loses the convenience of having an easy to read date like `2015-12-01` and instead uses `1448928000000`.  It also would be nice to be able to specify the range with single date and number of days before - if I had a script that could run first and then setup the variables, this would be easy and fast.\n\nMy particular case is using templated queries, so perhaps it could even been added as a script to modify the variables before the template (I need to run this type of query with other permutations so the time savings add up.)  But even for simple scripted fields queries this can be valuable when I need have a common setup.  \n\nI currently feel this most with dates - but it could have implications for other queries where I want need to build a common situation for comparison.  \n","closed_by":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"performed_via_github_app":null}