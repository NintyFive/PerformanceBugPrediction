[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/13977925","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-13977925","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":13977925,"node_id":"MDEyOklzc3VlQ29tbWVudDEzOTc3OTI1","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2013-02-22T22:55:43Z","updated_at":"2013-02-22T23:06:04Z","author_association":"MEMBER","body":"HTTP 1.1 and HTTP pipeline are two different things, don't confuse them :). Yea, there will be problems today with using HTTP pipeline feature. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/16279550","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-16279550","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":16279550,"node_id":"MDEyOklzc3VlQ29tbWVudDE2Mjc5NTUw","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2013-04-12T07:34:13Z","updated_at":"2013-04-12T07:34:13Z","author_association":"MEMBER","body":"maybe worth a look in this regard: https://github.com/typesafehub/netty-http-pipelining\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/17060293","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-17060293","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":17060293,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MDYwMjkz","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2013-04-26T08:05:14Z","updated_at":"2013-04-26T08:05:14Z","author_association":"MEMBER","body":"@nkvoll Are you trying to make use of the HTTP pipelining feature in production? I actually was not really able to find a Java library supporting this from the client side in order to conduct some tests. Just trying to understand, what you are trying to archive.\n\nWhat you can do as a different solution at the moment (which is also returning the responses when they are finished instead of creating the responses in a queue and ensuring their order on server side), is to use the \"X-Opaque-Id\" header of elasticsearch in order to map back the request/response pairs on the client instead of the server side (which might not be what you want depending on your use-case). You will obviously have a hard time with this inside of a browser (not all of them is supporting pipelining anyway)\n\n```\nprintf \"GET /_nodes HTTP/1.1\\r\\nX-Opaque-Id: 2\\r\\n\\r\\nGET / HTTP/1.1\\r\\nX-Opaque-Id: 1\\r\\n\\r\\n\" | nc -i 1 127.0.0.1 9200\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/19050554","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-19050554","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":19050554,"node_id":"MDEyOklzc3VlQ29tbWVudDE5MDUwNTU0","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2013-06-06T14:53:15Z","updated_at":"2013-06-06T14:53:15Z","author_association":"MEMBER","body":"@nkvoll could you solve your issue by using the `X-Opaque-Id` header or do you think there needs more to be done in elasticsearch in order to support your use-case? \n\nI am not sure if we can 'not advertise' pipelining support (as you wrote in the initial ticket), but still have this functionality. Would like to hear your opinions on that!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/35401212","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-35401212","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":35401212,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NDAxMjEy","user":{"login":"tkurki","id":1049678,"node_id":"MDQ6VXNlcjEwNDk2Nzg=","avatar_url":"https://avatars3.githubusercontent.com/u/1049678?v=4","gravatar_id":"","url":"https://api.github.com/users/tkurki","html_url":"https://github.com/tkurki","followers_url":"https://api.github.com/users/tkurki/followers","following_url":"https://api.github.com/users/tkurki/following{/other_user}","gists_url":"https://api.github.com/users/tkurki/gists{/gist_id}","starred_url":"https://api.github.com/users/tkurki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tkurki/subscriptions","organizations_url":"https://api.github.com/users/tkurki/orgs","repos_url":"https://api.github.com/users/tkurki/repos","events_url":"https://api.github.com/users/tkurki/events{/privacy}","received_events_url":"https://api.github.com/users/tkurki/received_events","type":"User","site_admin":false},"created_at":"2014-02-18T16:20:04Z","updated_at":"2014-02-18T16:20:33Z","author_association":"NONE","body":"Not that I need pipelining with ES for anything, but http 1.1 spec at http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.2.2 says \"A server MUST send its responses to those requests in the same order that the requests were received\"\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50198506","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50198506","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50198506,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMTk4NTA2","user":{"login":"kevin-montrose","id":1219467,"node_id":"MDQ6VXNlcjEyMTk0Njc=","avatar_url":"https://avatars0.githubusercontent.com/u/1219467?v=4","gravatar_id":"","url":"https://api.github.com/users/kevin-montrose","html_url":"https://github.com/kevin-montrose","followers_url":"https://api.github.com/users/kevin-montrose/followers","following_url":"https://api.github.com/users/kevin-montrose/following{/other_user}","gists_url":"https://api.github.com/users/kevin-montrose/gists{/gist_id}","starred_url":"https://api.github.com/users/kevin-montrose/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevin-montrose/subscriptions","organizations_url":"https://api.github.com/users/kevin-montrose/orgs","repos_url":"https://api.github.com/users/kevin-montrose/repos","events_url":"https://api.github.com/users/kevin-montrose/events{/privacy}","received_events_url":"https://api.github.com/users/kevin-montrose/received_events","type":"User","site_admin":false},"created_at":"2014-07-25T20:12:33Z","updated_at":"2014-07-25T20:12:33Z","author_association":"NONE","body":"We just got bit **really badly** by this issue over at Stack Overflow.\n\nWe've got an app over here that does an awful lot of (highly parallel) reads and writes by id over a small number of types.  Because the _types_ matched most of the time, we'd normally be able to deserialize and proceed normally; oftentimes even updating the wrong document at the end.\n\nThis is exacerbated by [.NET's default behavior being to pipeline all web requests](http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.pipelined%28v=vs.110%29.aspx).\n\nIt took the better part of a week to isolate and debug this issue.  It's particularly insidious since capturing requests at a proxy can easily strip out pipelining (as Fiddler does, for example).\n\nWe have a workaround (just setting `myHttpWebRequest.Pipelined = false`), pipelined really should fail if they're not going to be honored to spec.\n\nThere's a non-trivial performance penalty to disabling pipeling, at least in .NET.  I threw together a [quick gist in LinqPad](https://gist.github.com/kevin-montrose/cc614baa67e066696352) against our production cluster.  In my testing it's about 3 times faster to pipeline requests on our infrastructure.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50209796","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50209796","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50209796,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjA5Nzk2","user":{"login":"jprante","id":635745,"node_id":"MDQ6VXNlcjYzNTc0NQ==","avatar_url":"https://avatars1.githubusercontent.com/u/635745?v=4","gravatar_id":"","url":"https://api.github.com/users/jprante","html_url":"https://github.com/jprante","followers_url":"https://api.github.com/users/jprante/followers","following_url":"https://api.github.com/users/jprante/following{/other_user}","gists_url":"https://api.github.com/users/jprante/gists{/gist_id}","starred_url":"https://api.github.com/users/jprante/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jprante/subscriptions","organizations_url":"https://api.github.com/users/jprante/orgs","repos_url":"https://api.github.com/users/jprante/repos","events_url":"https://api.github.com/users/jprante/events{/privacy}","received_events_url":"https://api.github.com/users/jprante/received_events","type":"User","site_admin":false},"created_at":"2014-07-25T22:01:03Z","updated_at":"2014-07-25T22:01:03Z","author_association":"CONTRIBUTOR","body":"Maybe a priority queue like in https://github.com/typesafehub/netty-http-pipelining could be integrated into ES netty http transport, and enabled by an option, e.g. `http.netty.pipelining: true|false`.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50210669","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50210669","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50210669,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjEwNjY5","user":{"login":"gmarz","id":1594777,"node_id":"MDQ6VXNlcjE1OTQ3Nzc=","avatar_url":"https://avatars0.githubusercontent.com/u/1594777?v=4","gravatar_id":"","url":"https://api.github.com/users/gmarz","html_url":"https://github.com/gmarz","followers_url":"https://api.github.com/users/gmarz/followers","following_url":"https://api.github.com/users/gmarz/following{/other_user}","gists_url":"https://api.github.com/users/gmarz/gists{/gist_id}","starred_url":"https://api.github.com/users/gmarz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gmarz/subscriptions","organizations_url":"https://api.github.com/users/gmarz/orgs","repos_url":"https://api.github.com/users/gmarz/repos","events_url":"https://api.github.com/users/gmarz/events{/privacy}","received_events_url":"https://api.github.com/users/gmarz/received_events","type":"User","site_admin":false},"created_at":"2014-07-25T22:12:39Z","updated_at":"2014-07-25T22:12:39Z","author_association":"MEMBER","body":"@kevin-montrose , we've never run into that issue, but it sounds a bit scary.  We're considering making a change to the .NET client to disable pipelining by default (exposed as a connection setting) until this is addressed with elasticsearch.  However, I'm a bit hesitant after hearing your claim about performance.\n\nFor what it's worth though, I ran your gist on my machine to see if there would be a notable difference, and there wasn't.  In fact, pipelined was a bit slower more times than non.  Maybe totally environment related.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50212205","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50212205","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50212205,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjEyMjA1","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2014-07-25T22:35:06Z","updated_at":"2014-07-25T22:35:06Z","author_association":"MEMBER","body":"@jprante looking that the code, I don't think its enough what is done there in the context of ES. The implementation supports returning the results in the same order, while in ES, we need to make sure that we execute it in the same order. For example, if an index request and then a get request for the same id are in the same inflight requests, yet serialized on the client side, they need to be serialized on the request side to be executed one after the other, not just return the _results_ of them in order, since in that case, they might still execute out of order.\n\nI still need to think about this more, but effectively, in order to implement ordered pipeline support, it means it needs to be ordered when handling the upstream events, and progressing with one at all before the the previous one is sent downstream as a response.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50212744","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50212744","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50212744,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjEyNzQ0","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2014-07-25T22:43:39Z","updated_at":"2014-07-25T22:43:39Z","author_association":"MEMBER","body":"btw, to make things more interesting..., assume you only execute search requests, then HTTP pipelining with just ordering the responses is great, since it allow for concurrent execution of them on the server side. Tricky.... . \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50228976","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50228976","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50228976,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjI4OTc2","user":{"login":"jprante","id":635745,"node_id":"MDQ6VXNlcjYzNTc0NQ==","avatar_url":"https://avatars1.githubusercontent.com/u/635745?v=4","gravatar_id":"","url":"https://api.github.com/users/jprante","html_url":"https://github.com/jprante","followers_url":"https://api.github.com/users/jprante/followers","following_url":"https://api.github.com/users/jprante/following{/other_user}","gists_url":"https://api.github.com/users/jprante/gists{/gist_id}","starred_url":"https://api.github.com/users/jprante/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jprante/subscriptions","organizations_url":"https://api.github.com/users/jprante/orgs","repos_url":"https://api.github.com/users/jprante/repos","events_url":"https://api.github.com/users/jprante/events{/privacy}","received_events_url":"https://api.github.com/users/jprante/received_events","type":"User","site_admin":false},"created_at":"2014-07-26T09:07:10Z","updated_at":"2014-07-26T09:07:10Z","author_association":"CONTRIBUTOR","body":"@kimchy maybe it is possible just to timestamp the incoming HTTP request in NettyHttpServerTransport, with a channels handler especially for HTTP pipelining, so the responses can be ordered downstream in a priority queue by timestamp? Queueing up a certain number of responses in a queue in this special HTTP pipeline channels handler would be the downside.\n\nI think executions can be still unordered, even with HTTP pipelining, because these are separate things. If e.g. set/get on the same id fails, there might be other obscure reasons. But it will just become reliably visible, by eliminating Netty's weakness in HTTP pipelining.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50265156","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50265156","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50265156,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjY1MTU2","user":{"login":"NickCraver","id":454813,"node_id":"MDQ6VXNlcjQ1NDgxMw==","avatar_url":"https://avatars2.githubusercontent.com/u/454813?v=4","gravatar_id":"","url":"https://api.github.com/users/NickCraver","html_url":"https://github.com/NickCraver","followers_url":"https://api.github.com/users/NickCraver/followers","following_url":"https://api.github.com/users/NickCraver/following{/other_user}","gists_url":"https://api.github.com/users/NickCraver/gists{/gist_id}","starred_url":"https://api.github.com/users/NickCraver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NickCraver/subscriptions","organizations_url":"https://api.github.com/users/NickCraver/orgs","repos_url":"https://api.github.com/users/NickCraver/repos","events_url":"https://api.github.com/users/NickCraver/events{/privacy}","received_events_url":"https://api.github.com/users/NickCraver/received_events","type":"User","site_admin":false},"created_at":"2014-07-27T14:04:30Z","updated_at":"2014-07-27T14:04:30Z","author_association":"NONE","body":"@gmarz Pipelining's main gains are in any environment with non-0 latency: the higher the ratio of network latency vs. time spent inside elastic, the higher the impact. It's definitely going to vary by environment, but there are many cases where this is a huge impact...in others like link-local or on-box it may have little difference. It's important to test the performance impact of pipelining over _not_ on your local machine as well.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50270898","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50270898","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50270898,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjcwODk4","user":{"login":"gmarz","id":1594777,"node_id":"MDQ6VXNlcjE1OTQ3Nzc=","avatar_url":"https://avatars0.githubusercontent.com/u/1594777?v=4","gravatar_id":"","url":"https://api.github.com/users/gmarz","html_url":"https://github.com/gmarz","followers_url":"https://api.github.com/users/gmarz/followers","following_url":"https://api.github.com/users/gmarz/following{/other_user}","gists_url":"https://api.github.com/users/gmarz/gists{/gist_id}","starred_url":"https://api.github.com/users/gmarz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gmarz/subscriptions","organizations_url":"https://api.github.com/users/gmarz/orgs","repos_url":"https://api.github.com/users/gmarz/repos","events_url":"https://api.github.com/users/gmarz/events{/privacy}","received_events_url":"https://api.github.com/users/gmarz/received_events","type":"User","site_admin":false},"created_at":"2014-07-27T15:36:46Z","updated_at":"2014-07-27T15:36:46Z","author_association":"MEMBER","body":"@NickCraver thanks a lot for the info, I figured as such.  Definitely plan on doing more testing before making any changes to the .NET client.  I just opened #830 for this, suggestions/input very much welcomed.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/50447087","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-50447087","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":50447087,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDQ3MDg3","user":{"login":"hamiltop","id":354848,"node_id":"MDQ6VXNlcjM1NDg0OA==","avatar_url":"https://avatars1.githubusercontent.com/u/354848?v=4","gravatar_id":"","url":"https://api.github.com/users/hamiltop","html_url":"https://github.com/hamiltop","followers_url":"https://api.github.com/users/hamiltop/followers","following_url":"https://api.github.com/users/hamiltop/following{/other_user}","gists_url":"https://api.github.com/users/hamiltop/gists{/gist_id}","starred_url":"https://api.github.com/users/hamiltop/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hamiltop/subscriptions","organizations_url":"https://api.github.com/users/hamiltop/orgs","repos_url":"https://api.github.com/users/hamiltop/repos","events_url":"https://api.github.com/users/hamiltop/events{/privacy}","received_events_url":"https://api.github.com/users/hamiltop/received_events","type":"User","site_admin":false},"created_at":"2014-07-29T08:08:15Z","updated_at":"2014-07-29T08:08:15Z","author_association":"NONE","body":"We're getting bit by it as well. Using erlang ibrowse client, which uses pipelining by default.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/59273987","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-59273987","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":59273987,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjczOTg3","user":{"login":"NickCraver","id":454813,"node_id":"MDQ6VXNlcjQ1NDgxMw==","avatar_url":"https://avatars2.githubusercontent.com/u/454813?v=4","gravatar_id":"","url":"https://api.github.com/users/NickCraver","html_url":"https://github.com/NickCraver","followers_url":"https://api.github.com/users/NickCraver/followers","following_url":"https://api.github.com/users/NickCraver/following{/other_user}","gists_url":"https://api.github.com/users/NickCraver/gists{/gist_id}","starred_url":"https://api.github.com/users/NickCraver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NickCraver/subscriptions","organizations_url":"https://api.github.com/users/NickCraver/orgs","repos_url":"https://api.github.com/users/NickCraver/repos","events_url":"https://api.github.com/users/NickCraver/events{/privacy}","received_events_url":"https://api.github.com/users/NickCraver/received_events","type":"User","site_admin":false},"created_at":"2014-10-15T20:51:57Z","updated_at":"2014-10-15T20:51:57Z","author_association":"NONE","body":"Has there been any update on this? It was a deciding factor in us dropping ElasticSearch as a viable option for projects at Stack Overflow, but we'd love to see this fixed for other potential uses.\n\nThis is a serious bug, and it doesn't seem (at least to our developers) to be treated as serious as the impact it has.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/59277785","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-59277785","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":59277785,"node_id":"MDEyOklzc3VlQ29tbWVudDU5Mjc3Nzg1","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2014-10-15T21:16:34Z","updated_at":"2014-10-15T21:16:34Z","author_association":"MEMBER","body":"@NickCraver thanks for giving context into this, I have personally been thinking about how to solve this, I think that potentially we can start with baby steps and make sure that at the very least the response are returned in order, and iterate from there. Will keep you posted.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/60936550","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-60936550","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":60936550,"node_id":"MDEyOklzc3VlQ29tbWVudDYwOTM2NTUw","user":{"login":"asnare","id":401970,"node_id":"MDQ6VXNlcjQwMTk3MA==","avatar_url":"https://avatars0.githubusercontent.com/u/401970?v=4","gravatar_id":"","url":"https://api.github.com/users/asnare","html_url":"https://github.com/asnare","followers_url":"https://api.github.com/users/asnare/followers","following_url":"https://api.github.com/users/asnare/following{/other_user}","gists_url":"https://api.github.com/users/asnare/gists{/gist_id}","starred_url":"https://api.github.com/users/asnare/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asnare/subscriptions","organizations_url":"https://api.github.com/users/asnare/orgs","repos_url":"https://api.github.com/users/asnare/repos","events_url":"https://api.github.com/users/asnare/events{/privacy}","received_events_url":"https://api.github.com/users/asnare/received_events","type":"User","site_admin":false},"created_at":"2014-10-29T14:48:01Z","updated_at":"2014-10-29T14:48:01Z","author_association":"NONE","body":"@kimchy I'm not sure that execution order is a problem for pipelined requests, mainly because pipelining is a transport optimisation. Pipelined requests are semantically equivalent to the same requests being issued on separate connections. If client applications care about ordering, they should not issue requests that depend on requests whose response status is still pending.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/61076572","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-61076572","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":61076572,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDc2NTcy","user":{"login":"NickCraver","id":454813,"node_id":"MDQ6VXNlcjQ1NDgxMw==","avatar_url":"https://avatars2.githubusercontent.com/u/454813?v=4","gravatar_id":"","url":"https://api.github.com/users/NickCraver","html_url":"https://github.com/NickCraver","followers_url":"https://api.github.com/users/NickCraver/followers","following_url":"https://api.github.com/users/NickCraver/following{/other_user}","gists_url":"https://api.github.com/users/NickCraver/gists{/gist_id}","starred_url":"https://api.github.com/users/NickCraver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NickCraver/subscriptions","organizations_url":"https://api.github.com/users/NickCraver/orgs","repos_url":"https://api.github.com/users/NickCraver/repos","events_url":"https://api.github.com/users/NickCraver/events{/privacy}","received_events_url":"https://api.github.com/users/NickCraver/received_events","type":"User","site_admin":false},"created_at":"2014-10-30T11:15:35Z","updated_at":"2014-10-30T11:15:35Z","author_association":"NONE","body":"To better illustrate for people the impact here, let's compare a real world example. Let's say for example I'm querying our elasticsearch cluster in Oregon from New York. I have 10 requests to make. The trip from NY to OR takes about 40ms, and elasticsearch only takes 10ms to fulfill each request. Let's compare performance with and without pipelining:\n\nPipelining:\n\n```\n10 requests issued in order immediately\n40ms travel time\n10 requests processed (any order), responded to (in order) (10+ms, elasticsearch processing)\n40ms travel time\n10 responses received in order\n```\n\nWe're talking about 90+ ms (the + depends on how well elasticsearch handles the concurrent queries). Let's say it's not even concurrent (worst case), then we're talking 100ms for elastic, so 190ms total.\n\nNow let's turn pipelining off:\n\n```\n1 request issued\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nSingle request received, next request sent\n40ms travel time\n10ms 1 request processed, 1 response sent\n40ms travel time\nLast request received\n```\n\nThat took 90ms **per request**, so at best it's 900ms. Hopefully that better illustrates the performance problem that not having HTTP pipelining working introduces. The same happens at < 1ms latency which adds up for millions of requests per day. We hit some systems like this (redis for example) with 4 billion+ hits a day...without pipelining Stack Overflow would be hosed.\n\nCurrently, if one for 10 indexing operations fails (especially on the indexing side) we can get an \"okay, indexed!\" when in fact it failed...and we don't even know _which one_ failed. So not only is this a major problem (which is why I feel this makes easily the resiliency list), it's a problem a user is incapable of solving. You currently just have to turn off pipelining and take a _huge_ performance hit for high traffic applications.\n\nAs for execution order, yes it _does_ matter. If a Stack Overflow post changes, we may issue an index request as soon as that happens - edits can happen rapidly and 2 indexing requests for the same document (with a new post body, title, tags, last activity date, etc. in our case) can easily be in the pipeline. If the last index command doesn't execute last, then an invalid document has been indexed which is out of date.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/61077257","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-61077257","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":61077257,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDc3MjU3","user":{"login":"nkvoll","id":391931,"node_id":"MDQ6VXNlcjM5MTkzMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/391931?v=4","gravatar_id":"","url":"https://api.github.com/users/nkvoll","html_url":"https://github.com/nkvoll","followers_url":"https://api.github.com/users/nkvoll/followers","following_url":"https://api.github.com/users/nkvoll/following{/other_user}","gists_url":"https://api.github.com/users/nkvoll/gists{/gist_id}","starred_url":"https://api.github.com/users/nkvoll/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nkvoll/subscriptions","organizations_url":"https://api.github.com/users/nkvoll/orgs","repos_url":"https://api.github.com/users/nkvoll/repos","events_url":"https://api.github.com/users/nkvoll/events{/privacy}","received_events_url":"https://api.github.com/users/nkvoll/received_events","type":"User","site_admin":false},"created_at":"2014-10-30T11:22:26Z","updated_at":"2014-10-30T11:22:26Z","author_association":"MEMBER","body":"@NickCraver regarding the execution order -- wouldn't using the `external` version type for example with the source timestamp work for you? (http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs-index_.html#_version_types) I'm assuming that you have an explicit document identifier and explicitly versioning documents makes a lot of sense when working with a distributed system. This way, it wouldn't even matter which server you send the request to and the actual operation speed of that particular server -- much less the exact execution order for requests coming from a given HTTP pipeline -- the latest version would be the one that sticks in any case.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/61082695","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-61082695","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":61082695,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDgyNjk1","user":{"login":"NickCraver","id":454813,"node_id":"MDQ6VXNlcjQ1NDgxMw==","avatar_url":"https://avatars2.githubusercontent.com/u/454813?v=4","gravatar_id":"","url":"https://api.github.com/users/NickCraver","html_url":"https://github.com/NickCraver","followers_url":"https://api.github.com/users/NickCraver/followers","following_url":"https://api.github.com/users/NickCraver/following{/other_user}","gists_url":"https://api.github.com/users/NickCraver/gists{/gist_id}","starred_url":"https://api.github.com/users/NickCraver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NickCraver/subscriptions","organizations_url":"https://api.github.com/users/NickCraver/orgs","repos_url":"https://api.github.com/users/NickCraver/repos","events_url":"https://api.github.com/users/NickCraver/events{/privacy}","received_events_url":"https://api.github.com/users/NickCraver/received_events","type":"User","site_admin":false},"created_at":"2014-10-30T12:18:27Z","updated_at":"2014-10-30T12:18:27Z","author_association":"NONE","body":"@nkvoll for that exact case, we could version the documents yes (though we have no other reason to was we only care about the current one). But we'd be explicitly doing so just to work around this bug.\n\nLet's take another example we hit that causes Elasticsearch to be dropped from the project:\n1. Index a document.\n2. Do a GET for that document, by Id.\n\nSince 2 can execute and return before 1, _on the same node_, even a getting a document you just stored isn't guaranteed, and bit us several times.\n\nNot related to (regardless of) the execution order, let me address transport impact:\n\nThe transport switch (even if executed in order) is still a compounding issue. We were doing batch index operations for documents, GETting documents as well (all at high volume/speed) and checking cluster status along every so often as well to check index queue limits and such.  We'd get cluster status responses to the document GET by Id requests. I don't think I have to impress just how bad that behavior is - and it's exactly what we hit many times that led us to this Github issue.\n\nFor all the documents that where the correct type and didn't throw deserialization errors as a result, we then had no confidence they were the right documents returned to the right requests. We know at least a decent portion of them weren't. As a result we had to throw away all of the data and start over. That's when the decision was made to redesign the data layout and abandon Elasticsearch for the project.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/61083672","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-61083672","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":61083672,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDgzNjcy","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2014-10-30T12:28:31Z","updated_at":"2014-10-30T12:29:33Z","author_association":"MEMBER","body":"@NickCraver I read pipelining wrong and actually part of the spec is not to allow to pipeline non-idempotent methods, and its the responsibility of the client not to do so (http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html). This heavily simplifies the implementation on our side, so I hope it happens quicker (@spinscale is on it, we are aiming for 1.4). So the question around order is not relevant.\n\nRegarding the example you gave, of course pipelining will help on a single connection, I don't think there was any denying it.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/61083719","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-61083719","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":61083719,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDgzNzE5","user":{"login":"nkvoll","id":391931,"node_id":"MDQ6VXNlcjM5MTkzMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/391931?v=4","gravatar_id":"","url":"https://api.github.com/users/nkvoll","html_url":"https://github.com/nkvoll","followers_url":"https://api.github.com/users/nkvoll/followers","following_url":"https://api.github.com/users/nkvoll/following{/other_user}","gists_url":"https://api.github.com/users/nkvoll/gists{/gist_id}","starred_url":"https://api.github.com/users/nkvoll/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nkvoll/subscriptions","organizations_url":"https://api.github.com/users/nkvoll/orgs","repos_url":"https://api.github.com/users/nkvoll/repos","events_url":"https://api.github.com/users/nkvoll/events{/privacy}","received_events_url":"https://api.github.com/users/nkvoll/received_events","type":"User","site_admin":false},"created_at":"2014-10-30T12:28:58Z","updated_at":"2014-10-30T12:28:58Z","author_association":"MEMBER","body":"@NickCraver true, the document will not be available before the Lucene segment is written, which is after the default `refresh_interval` of 1 second (configurable, of course). You could do a an explicit call to `_refresh` (http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-refresh.html#indices-refresh), but I'm not sure I'd recommend trying to work _around_ the Near Real Time-properties of Elasticsearch/Lucene as much as work _with_ it. I'm unaware of any planned changes to this part, as it's pretty central to achieving good indexing performance and coordinating shards across nodes, but then again, I'm not an Elasticsearch employee.\n\nRegarding the transport level mix-up, I certainly feel you (which is why I created this issue in the first place). I think the worst part is that pipelining is advertised according to the HTTP 1.1 specification, but the actual results are wrong -- and that this might not be evident when doing small-scale development/testing runs. It can certainly catch unwary developers out quickly.\n\nWhile maybe not optimal for your case, it's possible to work around this as well running a small proxy on the same server as your Elasticsearch instance that supports pipelining proper on the server side, but is possible to configure to _not_ pipeline when forwarding requests to Elasticsearch. Whether this is a feasible approach depends on how you do operations and what systems you're comfortable with using. It's not at all optimal, but will get you closer to the goal until it's supported properly.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/61269770","html_url":"https://github.com/elastic/elasticsearch/issues/2665#issuecomment-61269770","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2665","id":61269770,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMjY5Nzcw","user":{"login":"Mpdreamz","id":245275,"node_id":"MDQ6VXNlcjI0NTI3NQ==","avatar_url":"https://avatars3.githubusercontent.com/u/245275?v=4","gravatar_id":"","url":"https://api.github.com/users/Mpdreamz","html_url":"https://github.com/Mpdreamz","followers_url":"https://api.github.com/users/Mpdreamz/followers","following_url":"https://api.github.com/users/Mpdreamz/following{/other_user}","gists_url":"https://api.github.com/users/Mpdreamz/gists{/gist_id}","starred_url":"https://api.github.com/users/Mpdreamz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mpdreamz/subscriptions","organizations_url":"https://api.github.com/users/Mpdreamz/orgs","repos_url":"https://api.github.com/users/Mpdreamz/repos","events_url":"https://api.github.com/users/Mpdreamz/events{/privacy}","received_events_url":"https://api.github.com/users/Mpdreamz/received_events","type":"User","site_admin":false},"created_at":"2014-10-31T14:40:22Z","updated_at":"2014-10-31T14:40:46Z","author_association":"MEMBER","body":"@NickCraver  out of interest what are you using to issue a:\n\n```\nPOST [index doc]\nGET [doc]\n```\n\nOn a pipelined http connection ?\n\nTo the best of my understanding `HttpWebRequest` (which the new `HttpClient` class still uses under cover by default)  adheres to the RFC and won't pipeline any request that has a body:\n\nhttp://referencesource.microsoft.com/#System/net/System/Net/_Connection.cs#800\n\nand force it to wait on a new/free connection of it sees a request with a body on a pipelined connection:\nhttp://referencesource.microsoft.com/#System/net/System/Net/_Connection.cs#614\n\nAs @kimchy pointed out The RFC disallows this:\n\n`Clients SHOULD NOT pipeline requests using non-idempotent methods or non-idempotent sequences of methods (see section 9.1.2). Otherwise, a premature termination of the transport connection could lead to indeterminate results. A client wishing to send a non-idempotent request SHOULD wait to send that request until it has received the response status for the previous request.`\n\nOf course the ordering issue still exists when doing 10 GETS sequentially on a pipelined connection and if they return out of order your application might end up updating the wrong documents (which should be fixed with the new pipelining support)\n\nPlease nudge me If my understanding of the `HttpWebRequest` in this regard is flawed!\n\n@nkvoll elasticsearch should be realtime when indexing a single doc and then doing a single doc get provided the client waits for an ack on the client for the index and they are executed in the right order.\n","performed_via_github_app":null}]