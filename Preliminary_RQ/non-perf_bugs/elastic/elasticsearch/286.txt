{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/286","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/286/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/286/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/286/events","html_url":"https://github.com/elastic/elasticsearch/issues/286","id":265693,"node_id":"MDU6SXNzdWUyNjU2OTM=","number":286,"title":"Geo: `geo_distance` facet","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":41149,"node_id":"MDU6TGFiZWw0MTE0OQ==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.10.0","name":"v0.10.0","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2010-08-01T10:30:40Z","updated_at":"2020-07-01T03:32:16Z","closed_at":"2010-08-01T17:08:37Z","author_association":"MEMBER","active_lock_reason":null,"body":"The `geo_distance` facet is a facet providing information for ranges of distances from a provided `geo_point` including count of the number of hits that fall within each range, and aggregation information (like total). Assuming the following sample doc:\n\n```\n{\n    \"pin\" : {\n        \"location\" : {\n            \"lat\" : 40.12,\n            \"lon\" : -71.34\n        }\n    }\n}\n```\n\nHere is an example that create a `geo_distance` facet from a `pin.location` of `40,-70`, and a set of ranges.\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : {\n                    \"lat\" : 40,\n                    \"lon\" : -70\n                },\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n## Accepted Formats\n\nIn much the same way the geo_point type can accept different representation of the geo point, the filter can accept it as well:\n\n_Lat Lon As Properties_\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : {\n                    \"lat\" : 40,\n                    \"lon\" : -70\n                },\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n\n_Lat Lon As Array_\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : [40, -70],\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n\n_Lat Lon As String_\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : \"40, -70\",\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n\n_Geohash_\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : \"drm3btev3e86\",\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n## Ranges\n\nWhen a `to` or `from` are not set, they are assumed to be unbounded. Ranges are allowed to overlap, basically, each range is treated by itself.\n## Options\n- `unit`: The unit the ranges are provided in. Defaults to `km`. Can also be `mi` or `miles`.\n- `distance_type`: How to compute the distance. Can either be `arc` (better precision) or `plane` (faster). Defaults to `arc`.\n## Value Options\n\nOn top of the count of hits falling within each range, aggregated data can be provided (total) as well. By default, the aggregated data will simply use the distance calculated, but the value can be extracted either using a different numeric field, or a script. Here is an example of using a different numeric field:\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : \"drm3btev3e86\",\n                \"value_field\" : \"num1\",\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n\nAnd here is an example of using a script:\n\n```\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"facets\" : {\n        \"geo1\" : {\n            \"geo_distance\" : {\n                \"pin.location\" : \"drm3btev3e86\",\n                \"value_script\" : \"doc['num1'].value * factor\",\n                \"params\" : {\n                    \"factor\" : 5\n                }\n                \"ranges\" : [\n                    { \"to\" : 10 },\n                    { \"from\" : 10, \"to\" : 20 },\n                    { \"from\" : 20, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}\n```\n\nNote the params option, allowing to pass parameters to the script (resulting in faster script execution instead of providing the values within the script each time).\n## `geo_point` Type\n\nThe facet does not require the `geo_point` type to be set. It assumes that the location object indexed includes a lat and lon numeric values. The `geo_poin`t type follows these rules and allows for more flexible indexing options / structure, but is not required.\n## Multi Location Per Document\n\nThe facet can work with multiple locations per document.\n","closed_by":null,"performed_via_github_app":null}