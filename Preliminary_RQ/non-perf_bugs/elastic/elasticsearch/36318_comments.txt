[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/444929678","html_url":"https://github.com/elastic/elasticsearch/issues/36318#issuecomment-444929678","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36318","id":444929678,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0NDkyOTY3OA==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2018-12-06T16:17:10Z","updated_at":"2018-12-06T16:17:10Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-infra","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/456437763","html_url":"https://github.com/elastic/elasticsearch/issues/36318#issuecomment-456437763","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/36318","id":456437763,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NjQzNzc2Mw==","user":{"login":"dliappis","id":1754575,"node_id":"MDQ6VXNlcjE3NTQ1NzU=","avatar_url":"https://avatars0.githubusercontent.com/u/1754575?v=4","gravatar_id":"","url":"https://api.github.com/users/dliappis","html_url":"https://github.com/dliappis","followers_url":"https://api.github.com/users/dliappis/followers","following_url":"https://api.github.com/users/dliappis/following{/other_user}","gists_url":"https://api.github.com/users/dliappis/gists{/gist_id}","starred_url":"https://api.github.com/users/dliappis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dliappis/subscriptions","organizations_url":"https://api.github.com/users/dliappis/orgs","repos_url":"https://api.github.com/users/dliappis/repos","events_url":"https://api.github.com/users/dliappis/events{/privacy}","received_events_url":"https://api.github.com/users/dliappis/received_events","type":"User","site_admin":false},"created_at":"2019-01-22T15:19:55Z","updated_at":"2019-01-22T17:09:41Z","author_association":"CONTRIBUTOR","body":"## Files updated in [PR#37709](https://github.com/elastic/elasticsearch/pull/37709)\r\n\r\n- [x] InternalClusterInfoService\r\n- [x] TransportKeepAlive\r\n- [x] ShardFollowTasksExecutor\r\n\r\n## The following files aren't applicable to this refactoring pattern\r\n\r\n- [ClusterApplierService](https://github.com/elastic/elasticsearch/blob/e9fcb25a2876594cbadbc6f229e524e3dde8875d/server/src/main/java/org/elasticsearch/cluster/service/ClusterApplierService.java#L278-L298)\r\n    We need to ensure `listener.onClose()` in catch block when `lifecycle.stoppedOrClosed()` thus can't be directly be replaced by a call to [ThreadPool#scheduleUnlessShuttingDown()](https://github.com/elastic/elasticsearch/blob/6ac0cb1842b85d5a93f036c9d0790ecb4b2b1fc3/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java#L355-L366).\r\n\r\n- [MasterService](https://github.com/elastic/elasticsearch/blob/e9fcb25a2876594cbadbc6f229e524e3dde8875d/server/src/main/java/org/elasticsearch/cluster/service/MasterService.java#L780-L794)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [EsThreadPoolExecutor](https://github.com/elastic/elasticsearch/blob/74d1cfbf7e748868fed35bd2fe55f2788cded7b8/server/src/main/java/org/elasticsearch/common/util/concurrent/EsThreadPoolExecutor.java#L97-L113)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [MasterFaultDetection](https://github.com/elastic/elasticsearch/blob/74d1cfbf7e748868fed35bd2fe55f2788cded7b8/server/src/main/java/org/elasticsearch/discovery/zen/MasterFaultDetection.java#L191-L199)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [NodesFaultDetection](https://github.com/elastic/elasticsearch/blob/74d1cfbf7e748868fed35bd2fe55f2788cded7b8/server/src/main/java/org/elasticsearch/discovery/zen/NodesFaultDetection.java#L178-L191)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [WorkerBulkByScrollTaskState](https://github.com/elastic/elasticsearch/blob/74d1cfbf7e748868fed35bd2fe55f2788cded7b8/server/src/main/java/org/elasticsearch/index/reindex/WorkerBulkByScrollTaskState.java#L192-L199)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [IndicesStore](https://github.com/elastic/elasticsearch/blob/74d1cfbf7e748868fed35bd2fe55f2788cded7b8/server/src/main/java/org/elasticsearch/indices/store/IndicesStore.java#L346-L355)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [Scheduler](https://github.com/elastic/elasticsearch/blob/e9fcb25a2876594cbadbc6f229e524e3dde8875d/server/src/main/java/org/elasticsearch/threadpool/Scheduler.java#L200-L210)\r\n    We don't call `logger.debug()` in the catch block.\r\n\r\n- [ThreadPool](https://github.com/elastic/elasticsearch/blob/e9fcb25a2876594cbadbc6f229e524e3dde8875d/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java#L357-L368)\r\n    This is the `scheduleUnlessShuttingDown()` method itself.\r\n\r\n- [TransportService](https://github.com/elastic/elasticsearch/blob/afeb3992b3bfc8587de7d1acd074b9efeb3ac775/server/src/main/java/org/elasticsearch/transport/TransportService.java#L975-L990)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [EsExecutorTests](https://github.com/elastic/elasticsearch/blob/e9fcb25a2876594cbadbc6f229e524e3dde8875d/server/src/test/java/org/elasticsearch/common/util/concurrent/EsExecutorsTests.java#L145-L155)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [FixedThreadPoolTests](https://github.com/elastic/elasticsearch/blob/757932a9751757c9c3689032fc4190dbfbe831a6/server/src/test/java/org/elasticsearch/threadpool/FixedThreadPoolTests.java#L76-L82)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [MlDailyMaintenanceService](https://github.com/elastic/elasticsearch/blob/757932a9751757c9c3689032fc4190dbfbe831a6/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/MlDailyMaintenanceService.java#L99-L109)\r\n    Requires returned future object from `threadPool.schedule()` to stop scheduled task. Perhaps we could support returning the ScheduledFuture in [scheduleUnlessShuttingDown](https://github.com/elastic/elasticsearch/blob/6ac0cb1842b85d5a93f036c9d0790ecb4b2b1fc3/server/src/main/java/org/elasticsearch/threadpool/ThreadPool.java#L355-L366) in a future PR?\r\n\r\n- [AutoDetectProcessManager](https://github.com/elastic/elasticsearch/blob/757932a9751757c9c3689032fc4190dbfbe831a6/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/AutodetectProcessManager.java#L539-L551)\r\n    Doesn't call `schedule()` in the `try { }` block.\r\n\r\n- [NativeAutodetectProcessFactory](https://github.com/elastic/elasticsearch/blob/757932a9751757c9c3689032fc4190dbfbe831a6/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/NativeAutodetectProcessFactory.java#L76-L87)\r\n    Doesn't call `schedule()` in the `try { }` block but `start()` from an instance of `NativeAutodetectProcess` instead.\r\n\r\n- [AutoDetectResultProcessor](https://github.com/elastic/elasticsearch/blob/afeb3992b3bfc8587de7d1acd074b9efeb3ac775/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/autodetect/output/AutoDetectResultProcessor.java)\r\n   Doesn't call `schedule()` or catch `EsRejectedExecutionException` anymore, already removed in https://github.com/elastic/elasticsearch/pull/36702/files.\r\n\r\n- [NativeNormalizerProcessFactory](https://github.com/elastic/elasticsearch/blob/0a93a0358bfed106bf397a24c0590008225ad21f/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/process/normalizer/NativeNormalizerProcessFactory.java#L48-L59)\r\n    Doesn't call `schedule()` in the `try { }` block but `start()` from an instance of `NativeNormalizerProcess` instead.\r\n\r\n- [CleanerService](https://github.com/elastic/elasticsearch/blob/34f2d2ec916909e107a85c26b1cccdda3026aac9/x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/cleaner/CleanerService.java#L199-L208)\r\n    Relies on future object returned by `threadPool.schedule()`; see also `MlDailyMaintenanceService` above.\r\n\r\n- [ExecutionService](https://github.com/elastic/elasticsearch/blob/7507af29fa0ae8569e3551d7815fc55afe5af014/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/execution/ExecutionService.java#L204-L211)\r\n    Doesn't call `schedule()` inside the lambda function or [here](https://github.com/elastic/elasticsearch/blob/7507af29fa0ae8569e3551d7815fc55afe5af014/x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/execution/ExecutionService.java#L396-L399).\r\n","performed_via_github_app":null}]