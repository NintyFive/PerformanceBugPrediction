[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219102637","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-219102637","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":219102637,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTEwMjYzNw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-13T17:08:35Z","updated_at":"2016-05-13T17:08:35Z","author_association":"CONTRIBUTOR","body":"Hi @rusnyder \n\nI've tried out your replication and it seems to work just fine on 1.7.5.  This is what I did:\n\n```\nPUT /fnscore-test-index\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 0\n    }\n  }\n}\n\nPUT /fnscore-test-index/event/1\n{\"field\":\"value-1\"}\nPUT /fnscore-test-index/event/2\n{\"field\":\"value-2\"}\n\nPOST /fnscore-test-index/event/_count\n{\n  \"query\": {\n    \"bool\": {\n      \"must_not\": [\n        {\n          \"function_score\": {\n            \"functions\": [\n              {\n                \"script_score\": {\n                  \"script\": \"-1\",\n                  \"lang\": \"expression\"\n                }\n              }\n            ],\n            \"score_mode\": \"sum\",\n            \"boost_mode\": \"replace\",\n            \"min_score\": 0\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n> Adding a refresh after each insert changes how many documents fail to match the query criteria in small samples, but with an increased sample size, that difference diminishes as the sample size increases, more/less completely vanishing in the 80-100 document range\n\nThis makes me think you have changed the refresh interval on this index?  I think if you try this on a clean cluster with default settings, you'll find it working just fine.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219745822","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-219745822","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":219745822,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTc0NTgyMg==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-17T15:01:08Z","updated_at":"2016-05-17T15:01:36Z","author_association":"NONE","body":"I'm seeing the same behavior as you (as in, not broken) when executing the same commands as you on a fresh cluster, but am still able to reproduce my issue by replacing the independent index requests with either a for loop in bash OR (newly discovered) with a bulk request:\n\n_NOTE: I'll switch to using sense-like syntax for sharing queries - sorry for the bash!_\n\n``` shell\nDELETE /fnscore-test-index\n\nPUT /fnscore-test-index\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 0\n    }\n  }\n}\n\nPOST /fnscore-test-index/_bulk\n{\"index\":{\"_type\":\"event\",\"_id\":\"1\"}}\n{\"field\":\"value-1\"}\n{\"index\":{\"_type\":\"event\",\"_id\":\"2\"}}\n{\"field\":\"value-2\"}\n\nPOST /fnscore-test-index/event/_count\n{\n  \"query\": {\n    \"bool\": {\n      \"must_not\": [\n        {\n          \"function_score\": {\n            \"functions\": [\n              {\n                \"script_score\": {\n                  \"script\": \"-1\",\n                  \"lang\": \"expression\"\n                }\n              }\n            ],\n            \"score_mode\": \"sum\",\n            \"boost_mode\": \"replace\",\n            \"min_score\": 0\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nSince both a for loop of individual index requests and a bulk request are able reproduce the issue (for me, anyway - the verdict is out for yourself!), it leads me to believe the lack-of-delay between insert statements is closely tied to the underlying issue.  It also makes me feel like it's not a fun one.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219815038","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-219815038","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":219815038,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTgxNTAzOA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-17T18:45:44Z","updated_at":"2016-05-17T18:45:44Z","author_association":"CONTRIBUTOR","body":"And if you do:\n\n```\nPOST fnscore-test-index/_refresh\n```\n\nbefore your count?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219847107","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-219847107","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":219847107,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTg0NzEwNw==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-17T20:41:58Z","updated_at":"2016-05-17T20:41:58Z","author_association":"NONE","body":"Adding a refresh doesn't change the count.  I then also tried to optimize, just for kicks and giggles, since that fixed similar (yet unrelated) issues in another cluster to no avail:\n\n```\nPOST /fnscore-test-index/_optimize?max_num_segments=1\n```\n\nI added the explain param to the \"failing\" query and even the explain results indicate that the hit that is being returned shouldn't, in fact, be returned since it's not actually a search hit (either that or I'm not reading the explain output correctly, which is possible):\n\n``` javascript\nPOST /fnscore-test-index/event/_search?explain\n{\n  \"query\": {\n    \"bool\": {\n      \"must_not\": [\n        {\n          \"function_score\": {\n            \"functions\": [\n              {\n                \"script_score\": {\n                  \"script\": \"-1\",\n                  \"lang\": \"expression\"\n                }\n              }\n            ],\n            \"score_mode\": \"sum\",\n            \"boost_mode\": \"replace\",\n            \"min_score\": 0\n          }\n        }\n      ]\n    }\n  }\n}\n\n// Note that value/description indicate that this shouldn't have hit:\n\n{\n   \"took\": 1,\n   \"timed_out\": false,\n   \"_shards\": {\n      \"total\": 1,\n      \"successful\": 1,\n      \"failed\": 0\n   },\n   \"hits\": {\n      \"total\": 1,\n      \"max_score\": 1,\n      \"hits\": [\n         {\n            \"_shard\": 0,\n            \"_node\": \"nvCXAPZoS3OImOn5X0l72A\",\n            \"_index\": \"fnscore-test-index\",\n            \"_type\": \"event\",\n            \"_id\": \"1\",\n            \"_score\": 1,\n            \"_source\": {\n               \"field\": \"value-1\"\n            },\n            \"_explanation\": {\n               \"value\": 0,\n               \"description\": \"Failure to meet condition(s) of required/prohibited clause(s)\",\n               \"details\": [\n                  {\n                     \"value\": 0,\n                     \"description\": \"match on prohibited clause (function score (ConstantScore(*:*),function=script[-1], params [null]))\",\n                     \"details\": [\n                        {\n                           \"value\": -1,\n                           \"description\": \"function score, product of:\",\n                           \"details\": [\n                              {\n                                 \"value\": -1,\n                                 \"description\": \"Math.min of\",\n                                 \"details\": [\n                                    {\n                                       \"value\": -1,\n                                       \"description\": \"script score function, computed with script:\\\"-1\",\n                                       \"details\": [\n                                          {\n                                             \"value\": 1,\n                                             \"description\": \"_score: \",\n                                             \"details\": [\n                                                {\n                                                   \"value\": 1,\n                                                   \"description\": \"ConstantScore(*:*), product of:\",\n                                                   \"details\": [\n                                                      {\n                                                         \"value\": 1,\n                                                         \"description\": \"boost\"\n                                                      },\n                                                      {\n                                                         \"value\": 1,\n                                                         \"description\": \"queryNorm\"\n                                                      }\n                                                   ]\n                                                }\n                                             ]\n                                          }\n                                       ]\n                                    },\n                                    {\n                                       \"value\": 3.4028235e+38,\n                                       \"description\": \"maxBoost\"\n                                    }\n                                 ]\n                              },\n                              {\n                                 \"value\": 1,\n                                 \"description\": \"queryBoost\"\n                              }\n                           ]\n                        }\n                     ]\n                  },\n                  {\n                     \"value\": 1,\n                     \"description\": \"ConstantScore(*:*), product of:\",\n                     \"details\": [\n                        {\n                           \"value\": 1,\n                           \"description\": \"boost\"\n                        },\n                        {\n                           \"value\": 1,\n                           \"description\": \"queryNorm\"\n                        }\n                     ]\n                  }\n               ]\n            }\n         }\n      ]\n   }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/219994647","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-219994647","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":219994647,"node_id":"MDEyOklzc3VlQ29tbWVudDIxOTk5NDY0Nw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-18T11:06:26Z","updated_at":"2016-05-18T11:06:26Z","author_association":"CONTRIBUTOR","body":"> I'm seeing the same behavior as you (as in, not broken) when executing the same commands as you on a fresh cluster, but am still able to reproduce my issue by replacing the independent index requests with either a for loop in bash OR (newly discovered) with a bulk request:\n\nDo you mean that you're able to replicate this on a fresh cluster of 1.7.5? Or only on your existing cluster?\n\nI've run your recreation many times without seeing it fail once.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/220142988","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-220142988","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":220142988,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMDE0Mjk4OA==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-18T20:09:20Z","updated_at":"2016-05-18T20:10:50Z","author_association":"NONE","body":"My apologies - I mean in a fresh cluster.  Perhaps it's something machine or JVM specific.  I'll try reproducing this with a few more combinations of machine + JVM version and get back with more info.\n\nEDIT: To be clear, by \"fresh cluster\" I mean deleting the data directory entirely, then starting Elasticsearch and running the recreation script.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/220676576","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-220676576","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":220676576,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMDY3NjU3Ng==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-20T18:01:28Z","updated_at":"2016-05-20T18:01:28Z","author_association":"NONE","body":"I've gotten a few other devs here to reproduce the issue w/ fresh ES 1.7.5 installs and fresh clusters on some different OS's and Java versions (combinations of Fedora, Ubuntu, and OS X with Java 1.8 updates 45, 60, and 91).  I've also created a now-failing test that reproduces the issue (sorry I didn't lead with this!): https://github.com/rusnyder/elasticsearch/commit/554e36c5855ab5a314f1d32d968d57493f1f617a\n\nI can inline a patch for that test, if desired, but otherwise will just spend some time this weekend trying to figure out what's happening.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/220744586","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-220744586","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":220744586,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMDc0NDU4Ng==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-20T23:58:31Z","updated_at":"2016-05-20T23:58:31Z","author_association":"NONE","body":"I think I figured out what the issue is, but I haven't quite worked out a solution yet.\n\nDuring the query phase of the aforementioned queries (`must_not` wrapping a `function_score`), this internally gets scored using Lucene's [`ReqExclScorer`](https://github.com/apache/lucene-solr/blob/branch_4x/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java) wrapping an effective match all as the required scorer (more specifically, a `ConstantScore(*:*)` and a [`CustomBoostFactorScorer`](https://github.com/elastic/elasticsearch/blob/1.7/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java) as the exclusion scorer.  When using the `min_score` parameter of the function score query, the `CustomBoostFactorScorer` delegates advancement through the document set to its inner class, [`MinScoreNextDoc`](https://github.com/elastic/elasticsearch/blob/1.7/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java#L92)\n\nThe problem is that `MinScoreNextDoc.advance(int)` and `ReqExclScorer.nextDoc` are stepping on each other's toes, because both are advancing (calling `nextDoc()`) on the underlying scorer but`ReqExclScorer` is more/less expecting to be the only thing doing the advancement while marking exclusions.\n\nI'll walk through the code path of concern here (all info on variables was found by and can reproduced by stepping through the test case I linked in the previous comment):\n\n[`org.apache.lucene.search.Weight.DefaultBulkScorer#scoreAll(Collector, Scorer)`](https://github.com/apache/lucene-solr/blob/branch_4x/lucene/core/src/java/org/apache/lucene/search/Weight.java#L190)\n\n``` java\npublic abstract class Weight {\n  ...\n  static class DefaultBulkScorer extends BulkScorer {\n    /* [rusnyder] This field, in our test case, is set to the ReqExclScorer of concern */\n    private final Scorer scorer;\n    ...\n    static void scoreAll(Collector collector, Scorer scorer) throws IOException {\n      int doc;\n      /* [rusnyder] scorer.nextDoc() -> see next snippet */\n      while ((doc = scorer.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        collector.collect(doc);\n      }\n    }\n    ...\n  }\n}\n```\n\n[`org.apache.lucene.search.ReqExclScorer#nextDoc()`](https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.10.4/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java#L46)\n\n``` java\nclass ReqExclScorer extends Scorer {\n  ...\n  public int nextDoc() throws IOException {\n    if (reqScorer == null) {\n      return doc;\n    }\n    /* [rusnyder] This is the first of 2 document advancements in the ReqExclScorer */\n    doc = reqScorer.nextDoc();\n    if (doc == NO_MORE_DOCS) {\n      reqScorer = null; // exhausted, nothing left\n      return doc;\n    }\n    if (exclDisi == null) {\n      return doc;\n    }\n    /* [rusnyder] toNonExcluded() -> see next snippet */\n    return doc = toNonExcluded();\n  }\n  ...\n}\n```\n\n[`org.apache.lucene.search.ReqExclScorer#toNonExcluded()`](https://github.com/apache/lucene-solr/blob/releases/lucene-solr/4.10.4/lucene/core/src/java/org/apache/lucene/search/ReqExclScorer.java#L72)\n\n``` java\nclass ReqExclScorer extends Scorer {\n  ...\n  private int toNonExcluded() throws IOException {\n    int exclDoc = exclDisi.docID();\n    int reqDoc = reqScorer.docID(); // may be excluded\n    do {  \n      if (reqDoc < exclDoc) {\n        return reqDoc; // reqScorer advanced to before exclScorer, ie. not excluded\n      } else if (reqDoc > exclDoc) {\n        /* [rusnyder] exclDisi is an instance of \n           FunctionScoreQuery.FunctionFactorScorer here, but that class \n           inherits CustomBoostFactorScorer which is where the \n           pertinent logic is */\n        /* [rusnyder] exclDisi.advance(reqDoc) -> see next snippet */\n        exclDoc = exclDisi.advance(reqDoc);\n        if (exclDoc == NO_MORE_DOCS) {\n          exclDisi = null; // exhausted, no more exclusions\n          return reqDoc;\n        }\n        if (exclDoc > reqDoc) {\n          return reqDoc; // not excluded\n        }\n      }\n    /* [rusnyder]: The function score query from the test should result in\n        all documents being added to the exclusion set, whereas this nextDoc()\n        is only invoked for sparse exclusion sets (i.e. - our test never hits this) */\n    } while ((reqDoc = reqScorer.nextDoc()) != NO_MORE_DOCS);\n    reqScorer = null; // exhausted, nothing left\n    return NO_MORE_DOCS;\n  }\n  ...\n}\n```\n\n[`org.elasticsearch.common.lucene.search.function.CustomBoostFactorScorer.MinScoreNextDoc#aadvance(int)`](https://github.com/elastic/elasticsearch/blob/1.7/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java#L112)\n\n``` java\nabstract class CustomBoostFactorScorer extends Scorer {\n    ...\n    public class MinScoreNextDoc implements NextDoc {\n        ...\n        public int advance(int target) throws IOException {\n            int doc = scorer.advance(target);\n            if (doc == NO_MORE_DOCS) {\n                return doc;\n            }\n            currentScore = innerScore();\n            if (currentScore < minScore) {\n                /* [rusnyder] This is the advancement that conflicts with\n                   the advancements made above */\n                return scorer.nextDoc();\n            }\n            return doc;\n        }\n    }\n    ...\n}\n```\n\nThe conflict is in between the call `scorer.nextDoc()` from within the `CustomBoostFactorScorer` (Elasticsearch) and the `reqScorer.nextDoc()` call from the ReqExclScorer (Lucene).  I tried increasing the number of documents that I indexed in my test, and what I saw made lots of sense: For a contiguous sequence of documents within a single segment that all match the \"exclusion\" criteria (the code path I outlined is within the context of a single `AtomicReader` on a single segment), every other document from such a sequence is being returned.  This makes plenty of sense when looking at the code because for each document that \"hits\" the exclusion set in the code path above, the `nextDoc()` function gets invoked twice which ultimately results in the following document within that sequence to be skipped.\n\nI'm new to this part of the codebase and am still rationalizing where exactly the breakdown is and which part of the code is responsible for sorting this out.  My instinct leads me to believe that the onus is either on Elasticsearch's `CustomBoostFactorScorer` to stop advancing the underlying scorer or on Lucene's `ReqExclScorer` to better handle the case where the exclusion scorer needs to advance through multiple docs at a time to build the exclusion set.\n\nAnyway, I'll see if I can pull something together that makes sense, and in the meantime, and if there's any useful info you have in the meantime, I'd love to hear it!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/220945449","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-220945449","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":220945449,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMDk0NTQ0OQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-05-23T10:36:25Z","updated_at":"2016-05-23T10:36:25Z","author_association":"CONTRIBUTOR","body":"Awesome work @rusnyder !!!  Thank you for diving into this.\n\n@jpountz please could you take a look?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/220957954","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-220957954","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":220957954,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMDk1Nzk1NA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-23T11:44:35Z","updated_at":"2016-05-23T11:44:35Z","author_association":"CONTRIBUTOR","body":"@rusnyder Thanks for digging! Base on the description of the issue, I think all that is needed to fix the bug is the following?\n\n``` patch\ndiff --git a/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java b/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java\nindex bcc785a..ded96e8 100644\n--- a/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java\n+++ b/src/main/java/org/elasticsearch/common/lucene/search/function/CustomBoostFactorScorer.java\n@@ -116,7 +116,7 @@ abstract class CustomBoostFactorScorer extends Scorer {\n             }\n             currentScore = innerScore();\n             if (currentScore < minScore) {\n-                return scorer.nextDoc();\n+                return nextDoc();\n             }\n             return doc;\n         }\n\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221003522","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-221003522","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":221003522,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTAwMzUyMg==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-23T14:54:31Z","updated_at":"2016-05-23T14:54:31Z","author_association":"NONE","body":"Wow @jpountz - that was easy.  It's like you guys know what you're doing...\n\nThat worked like a charm!  I'm happy to put out a PR w/ the test and the fix, but I'll leave that decision up to you!\n\nThanks again!!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/221981854","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-221981854","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":221981854,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMTk4MTg1NA==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-26T20:15:51Z","updated_at":"2016-05-26T20:16:33Z","author_association":"NONE","body":"Of note, I went back and tested this in 2.0.2, 2.1.2, 2.2.2, and 2.3.3 now that I had a better understand of what was going on and the test case more honed in, and there is a similar issue in 2.0.2, 2.1.2, and 2.2.2, except that all three of those versions consistently return zero documents for the \"must not(function score(match no docs))\" query when they should be returning all of the docs.  2.3.3 returns the right results for the query.\n\nI haven't had much time to dig in on those, but I took a look to see what would happen if I applied the same patch to those versions and this patch does NOT fix the 2.x versions.  I'll dig more later, but since the `ReqExclScorer` more/less received an overhaul in Lucene 5.x, it'll take a bit more exploring for me to track down.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222143495","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-222143495","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":222143495,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjE0MzQ5NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-27T13:16:56Z","updated_at":"2016-05-27T13:16:56Z","author_association":"CONTRIBUTOR","body":"Thanks for the PR!\n\n>  return zero documents for the \"must not(function score(match no docs))\" query when they should be returning all of the docs\n\nI could not replicate this bug, can you share the query you are running?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222146436","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-222146436","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":222146436,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjE0NjQzNg==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-27T13:29:37Z","updated_at":"2016-05-27T13:29:37Z","author_association":"NONE","body":"Sure thing.  It's the same as the original steps to reproduce the 1.7 bug, but I added an optimize to guarantee all documents are on the same segment first:\n\n```\nPUT /fnscore-test-index\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 0\n    }\n  }\n}\n\nPOST /fnscore-test-index/_bulk\n{\"index\":{\"_type\":\"event\",\"_id\":\"1\"}}\n{\"field\":\"value-1\"}\n{\"index\":{\"_type\":\"event\",\"_id\":\"2\"}}\n{\"field\":\"value-2\"}\n\nPOST /fnscore-test-index/_refresh\nPOST /fnscore-test-index/_optimize?max_num_segments=1\n\nPOST /fnscore-test-index/event/_search?explain\n{\n  \"query\": {\n    \"bool\": {\n      \"must_not\": [\n        {\n          \"function_score\": {\n            \"functions\": [\n              {\n                \"script_score\": {\n                  \"script\": \"-1\",\n                  \"lang\": \"expression\"\n                }\n              }\n            ],\n            \"score_mode\": \"sum\",\n            \"boost_mode\": \"replace\",\n            \"min_score\": 0\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nI hope I'm not going crazy, but that sequence is causing the query to return 0 events on fresh installs of the three aforementioned versions for me.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222150298","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-222150298","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":222150298,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjE1MDI5OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-27T13:45:51Z","updated_at":"2016-05-27T13:45:51Z","author_association":"CONTRIBUTOR","body":"The default query for a function_score is a match_all query, so I think returning no hits in this case is the expected behoviour?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222183676","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-222183676","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":222183676,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjE4MzY3Ng==","user":{"login":"rusnyder","id":1737440,"node_id":"MDQ6VXNlcjE3Mzc0NDA=","avatar_url":"https://avatars3.githubusercontent.com/u/1737440?v=4","gravatar_id":"","url":"https://api.github.com/users/rusnyder","html_url":"https://github.com/rusnyder","followers_url":"https://api.github.com/users/rusnyder/followers","following_url":"https://api.github.com/users/rusnyder/following{/other_user}","gists_url":"https://api.github.com/users/rusnyder/gists{/gist_id}","starred_url":"https://api.github.com/users/rusnyder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusnyder/subscriptions","organizations_url":"https://api.github.com/users/rusnyder/orgs","repos_url":"https://api.github.com/users/rusnyder/repos","events_url":"https://api.github.com/users/rusnyder/events{/privacy}","received_events_url":"https://api.github.com/users/rusnyder/received_events","type":"User","site_admin":false},"created_at":"2016-05-27T15:53:43Z","updated_at":"2016-05-27T15:53:43Z","author_association":"NONE","body":"I assumed that was the default behavior was a `match_all` if no function was specified, not if a function was specified that matched no events.  As per the [function score docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html):\n\n> If no query is given with a function this is equivalent to specifying `\"match_all\": {}`\n\nSince we _are_ specifying a function here that should be matching zero events, I'd think the docs from that `match_all` would all get filtered out by that function.  To add to my expected behavior, with the index setup and documents as indexed in the previous comment, running just the function score query without the `must_not` _also_ provides 0 results, which is the behavior that I would expect:\n\n```\nPOST /fnscore-test-index/_search\n{\n   \"query\": {\n      \"function_score\": {\n         \"functions\": [\n            {\n               \"script_score\": {\n                  \"script\": \"-1\",\n                  \"lang\": \"expression\"\n               }\n            }\n         ],\n         \"score_mode\": \"sum\",\n         \"boost_mode\": \"replace\",\n         \"min_score\": 0\n      }\n   }\n}\n```\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222456075","html_url":"https://github.com/elastic/elasticsearch/issues/18315#issuecomment-222456075","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18315","id":222456075,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjQ1NjA3NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-05-30T09:48:43Z","updated_at":"2016-05-30T09:48:43Z","author_association":"CONTRIBUTOR","body":"@rusnyder Function score takes two kinds of queries: one that defines the matching docs, and then one per function that defines the documents to apply the function to (which is effectively just a filter since its score is never used). The sentence you are quoting is about the latter. Maybe we should reuse the parameter name and rewrite it to `If no _filter_ is given with a function this is equivalent to specifying \"match_all\": {}` to be clearer.\n","performed_via_github_app":null}]