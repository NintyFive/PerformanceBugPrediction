[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/9854703","html_url":"https://github.com/elastic/elasticsearch/issues/2363#issuecomment-9854703","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/2363","id":9854703,"node_id":"MDEyOklzc3VlQ29tbWVudDk4NTQ3MDM=","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2012-10-29T02:16:41Z","updated_at":"2012-10-29T02:16:41Z","author_association":"MEMBER","body":"The issue occurs because TransportDeleteWarmerAction [throws an exception](/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/admin/indices/warmer/delete/TransportDeleteWarmerAction.java#L130) inside submitStateUpdateTask, and as a result [the count down latch](/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/admin/indices/warmer/delete/TransportDeleteWarmerAction.java#L155) in ProcessedClusterStateUpdateTask.clusterStateProcessed is never triggered and the REST request waits forever for a response. We could solve this issue by surrounding the body of the execute method in TransportDeleteWarmerAction with try catch block and releasing the latch if an exception is thrown. However, I think it would be more useful to add the clusterStateProcessingFailed method to the ProcessedClusterStateUpdateTask, that would be triggered in the event of cluster state update failure. Because failure can occur after the ClusterStateUpdateTask.execute method returns, (for example if one of the cluster state listeners throws an exception), it's still possible that the clusterStateProcessed would be never called even if ClusterStateUpdateTask.execute was successful. By adding clusterStateProcessingFailed method we would guarantee that the submitStateUpdateTask caller would get a response if update was successful (clusterStateProcessed) as well as if it failed (clusterStateProcessingFailed). \n","performed_via_github_app":null}]