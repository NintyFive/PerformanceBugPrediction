[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343506741","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343506741","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343506741,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MzUwNjc0MQ==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2017-11-10T15:41:22Z","updated_at":"2017-11-10T15:41:22Z","author_association":"MEMBER","body":"I believe this is expected as `secondLvl.thirdLvl` is not a field. But `secondLvl.thirdLvl.name` is.\r\n\r\nYou should try with:\r\n\r\n```name\r\n{\r\n  \"exists\": {\r\n    \"field\": \"secondLvl.thirdLvl.name\"\r\n  }\r\n}\r\n```\r\n\r\nI think it's better to discuss that problem on discuss.elastic.co so please reopen there if you need more help.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343509748","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343509748","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343509748,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MzUwOTc0OA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2017-11-10T15:51:59Z","updated_at":"2017-11-10T15:51:59Z","author_association":"MEMBER","body":"Reopening. Might be a real issue. Sorry","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343511328","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343511328","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343511328,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MzUxMTMyOA==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2017-11-10T15:57:29Z","updated_at":"2017-11-10T15:57:29Z","author_association":"MEMBER","body":"The `exists` query handles object field so it's not the issue here. The problem is that a nested query can only match documents that appear at the same level. In your example the second document does not have a value for that level so it cannot match even if it's a `must_not` query because it does not have any fields that appear at that level. I'd not call it a bug but rather a limitation of how nested queries work. @martijnvg  do you agree ?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343523926","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343523926","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343523926,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MzUyMzkyNg==","user":{"login":"dnhatn","id":13474362,"node_id":"MDQ6VXNlcjEzNDc0MzYy","avatar_url":"https://avatars3.githubusercontent.com/u/13474362?v=4","gravatar_id":"","url":"https://api.github.com/users/dnhatn","html_url":"https://github.com/dnhatn","followers_url":"https://api.github.com/users/dnhatn/followers","following_url":"https://api.github.com/users/dnhatn/following{/other_user}","gists_url":"https://api.github.com/users/dnhatn/gists{/gist_id}","starred_url":"https://api.github.com/users/dnhatn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dnhatn/subscriptions","organizations_url":"https://api.github.com/users/dnhatn/orgs","repos_url":"https://api.github.com/users/dnhatn/repos","events_url":"https://api.github.com/users/dnhatn/events{/privacy}","received_events_url":"https://api.github.com/users/dnhatn/received_events","type":"User","site_admin":false},"created_at":"2017-11-10T16:42:49Z","updated_at":"2017-11-10T16:42:49Z","author_association":"MEMBER","body":"A query with `match_all` (as the most inner clause) returns [doc1].\r\n\r\n```\r\nPOST sample/root/_search\r\n{\r\n  \"query\": {\r\n    \"nested\": {\r\n      \"query\": {\r\n        \"nested\": {\r\n          \"query\": {\r\n            \"match_all\": {}\r\n          },\r\n          \"path\": \"secondLvl.thirdLvl\"\r\n        }\r\n      },\r\n      \"path\": \"secondLvl\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nA query with `must` (as the most inner clause) returns [doc1]\r\n\r\n```\r\nPOST sample/root/_search\r\n{\r\n  \"query\": {\r\n    \"nested\": {\r\n      \"query\": {\r\n        \"nested\": {\r\n          \"query\": {\r\n            \"bool\": {\r\n              \"must\": [\r\n                {\r\n                  \"exists\": {\r\n                    \"field\": \"secondLvl.thirdLvl.name\"\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          \"path\": \"secondLvl.thirdLvl\"\r\n        }\r\n      },\r\n      \"path\": \"secondLvl\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIt's logical to expect `must_not` as the complement of `must`, thus we should expect a query with `must_not` (as the most inner clause)  return no result (eg. all documents returned in `match_all` but not in `must` ~ no result).  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343594588","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343594588","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343594588,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MzU5NDU4OA==","user":{"login":"llRandom","id":2345582,"node_id":"MDQ6VXNlcjIzNDU1ODI=","avatar_url":"https://avatars3.githubusercontent.com/u/2345582?v=4","gravatar_id":"","url":"https://api.github.com/users/llRandom","html_url":"https://github.com/llRandom","followers_url":"https://api.github.com/users/llRandom/followers","following_url":"https://api.github.com/users/llRandom/following{/other_user}","gists_url":"https://api.github.com/users/llRandom/gists{/gist_id}","starred_url":"https://api.github.com/users/llRandom/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/llRandom/subscriptions","organizations_url":"https://api.github.com/users/llRandom/orgs","repos_url":"https://api.github.com/users/llRandom/repos","events_url":"https://api.github.com/users/llRandom/events{/privacy}","received_events_url":"https://api.github.com/users/llRandom/received_events","type":"User","site_admin":false},"created_at":"2017-11-10T21:40:13Z","updated_at":"2017-11-13T08:04:20Z","author_association":"NONE","body":"I think I understand an example with `match_all`, `must` and `must_not` but why it works different if I have 1 level of nested entities instead of 2?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343853155","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343853155","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343853155,"node_id":"MDEyOklzc3VlQ29tbWVudDM0Mzg1MzE1NQ==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2017-11-13T08:57:19Z","updated_at":"2017-11-13T08:57:19Z","author_association":"MEMBER","body":"@jimczi @llRandom Yes, that is a limitation of the nested query. The bool query with must_not doesn't even get evaluated because there are no nested objects on the third level.\r\n\r\nI think there are two workarounds for this:\r\n* Add an empty third level in the second document like this:\r\n\r\n```\r\nPUT /sample/root/2\r\n{\"id\":2,\"secondLvl\":[{\"thirdLvl\":[{}]}]}\r\n``` \r\n\r\n* Or change the query so that on the second level you add a bool query with two should clauses, one containing your original nested query for the third level and another should clause with a bool query with must not that queries for all second level documents that do not have a third level field:\r\n\r\n```\r\nPOST http://localhost:9200/sample/root/_search\r\n{\r\n  \"query\": {\r\n    \"nested\": {\r\n      \"query\": {\r\n        \"bool\": {\r\n          \"should\": [\r\n            {\r\n              \"nested\": {\r\n                \"query\": {\r\n                  \"bool\": {\r\n                    \"must_not\": [\r\n                      {\r\n                        \"exists\": {\r\n                          \"field\": \"secondLvl.thirdLvl\"\r\n                        }\r\n                      }\r\n                    ]\r\n                  }\r\n                },\r\n                \"path\": \"secondLvl.thirdLvl\"\r\n              }\r\n            },\r\n            {\r\n              \"bool\": {\r\n                \"must_not\": [\r\n                  {\r\n                    \"nested\": {\r\n                      \"path\": \"secondLvl.thirdLvl\",\r\n                      \"query\": {\r\n                        \"match_all\": {}\r\n                      }\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      \"path\": \"secondLvl\"\r\n    }\r\n  }\r\n}\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/343869486","html_url":"https://github.com/elastic/elasticsearch/issues/27343#issuecomment-343869486","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/27343","id":343869486,"node_id":"MDEyOklzc3VlQ29tbWVudDM0Mzg2OTQ4Ng==","user":{"login":"llRandom","id":2345582,"node_id":"MDQ6VXNlcjIzNDU1ODI=","avatar_url":"https://avatars3.githubusercontent.com/u/2345582?v=4","gravatar_id":"","url":"https://api.github.com/users/llRandom","html_url":"https://github.com/llRandom","followers_url":"https://api.github.com/users/llRandom/followers","following_url":"https://api.github.com/users/llRandom/following{/other_user}","gists_url":"https://api.github.com/users/llRandom/gists{/gist_id}","starred_url":"https://api.github.com/users/llRandom/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/llRandom/subscriptions","organizations_url":"https://api.github.com/users/llRandom/orgs","repos_url":"https://api.github.com/users/llRandom/repos","events_url":"https://api.github.com/users/llRandom/events{/privacy}","received_events_url":"https://api.github.com/users/llRandom/received_events","type":"User","site_admin":false},"created_at":"2017-11-13T10:00:34Z","updated_at":"2017-11-13T10:00:34Z","author_association":"NONE","body":"Thank you, `must_not match_all` did the trick, sorry for false issue!","performed_via_github_app":null}]