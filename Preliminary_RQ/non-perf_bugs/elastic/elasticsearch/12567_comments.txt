[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/127951548","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-127951548","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":127951548,"node_id":"MDEyOklzc3VlQ29tbWVudDEyNzk1MTU0OA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-08-05T10:35:33Z","updated_at":"2015-08-05T10:35:33Z","author_association":"CONTRIBUTOR","body":"This is a problem in the Azure client itself.  Threads do not timeout by default and so the only way to interrupt the thread is to restart the node.  There are two timeouts available:\n\n`setMaximumExecutionTimeInMs`\n\nThe maximum execution time interval begins at the time that the client begins building the request. The default maximum execution is set in the client and is by default null, indicating no maximum time.\n\n`setTimeoutIntervalInMs`\n\nSets the timeout to use when making this request. The default server timeout is set in the client and is by default null, indicating no server timeout.\n\nSee http://dl.windowsazure.com/storage/javadoc/com/microsoft/azure/storage/RequestOptions.html for full description.\n\nWe should probably do the following:\n- expose the timeout settings\n- check how they are _really_ used by the Azure client depending of the type of request (max. operation time seems to be checked in between 2 request retries but I'm not sure)\n- check that delete command leaves the snapshot in a coherent state if a timeout happen\n- add some docs about it\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/171569348","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-171569348","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":171569348,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MTU2OTM0OA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-01-14T08:20:03Z","updated_at":"2016-01-14T08:20:03Z","author_association":"MEMBER","body":"> `setTimeoutIntervalInMs`\n> \n> Sets the timeout to use when making this request. The default server timeout is set in the client and is by default null, indicating no server timeout.\n\n`setTimeoutIntervalInMs` has been implemented in #15080. \n\n> We should probably do the following:\n> - expose the timeout settings\n\nDone. See https://github.com/elastic/elasticsearch/pull/15080/files#diff-e1e28473441a5cb9762b0176ddc4d22bR126\n\n> - check how they are _really_ used by the Azure client depending of the type of request (max. operation time seems to be checked in between 2 request retries but I'm not sure)\n\nThat seems to still be an issue. According to recent reports with the support team, it looks like that even after 5 minutes, Azure client does not stop and raise an exception...\n\n> - check that delete command leaves the snapshot in a coherent state if a timeout happen\n\n@imotov could comment on what would happen if the azure client raises an exception.\n\n> - add some docs about it\n\nDone in #15080. https://www.elastic.co/guide/en/elasticsearch/plugins/master/repository-azure-usage.html\n\nI wonder if we should implement `setMaximumExecutionTimeInMs` instead? @craigwi WDYT? Should we use this instead of `setTimeoutIntervalInMs`? Or may be there is an issue in the azure client?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/171778737","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-171778737","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":171778737,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MTc3ODczNw==","user":{"login":"craigwi","id":6687101,"node_id":"MDQ6VXNlcjY2ODcxMDE=","avatar_url":"https://avatars2.githubusercontent.com/u/6687101?v=4","gravatar_id":"","url":"https://api.github.com/users/craigwi","html_url":"https://github.com/craigwi","followers_url":"https://api.github.com/users/craigwi/followers","following_url":"https://api.github.com/users/craigwi/following{/other_user}","gists_url":"https://api.github.com/users/craigwi/gists{/gist_id}","starred_url":"https://api.github.com/users/craigwi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/craigwi/subscriptions","organizations_url":"https://api.github.com/users/craigwi/orgs","repos_url":"https://api.github.com/users/craigwi/repos","events_url":"https://api.github.com/users/craigwi/events{/privacy}","received_events_url":"https://api.github.com/users/craigwi/received_events","type":"User","site_admin":false},"created_at":"2016-01-14T21:02:17Z","updated_at":"2016-01-14T21:02:17Z","author_association":"CONTRIBUTOR","body":"Hi @dadoonet, this service request came from us and I just now looked at the details.  As far as I can tell, the problem is that I did not pass the BlobRequestOptions to the calls to openInputStream() and openOutputStream() (in AzureStorageServiceImpl.java).\n\nI had assumed that the options on the CloudBlobClient would be inherited by all containers and blobs referenced by it, but the evidence here is that the timeout option, at least, does not get passed through.\n\nI am going to change my fork of the plugin and make the two calls looks like:\n\n```\n    return client.getContainerReference(container).getBlockBlobReference(blob).openInputStream(null, client.getDefaultRequestOptions(), null);\n```\n\nand \n\n```\n    return client.getContainerReference(container).getBlockBlobReference(blob).openOutputStream(null, client.getDefaultRequestOptions(), null);\n```\n\nThe middle parameter is the key addition, of course.\n\nI'll verify and let you know.\n\nCraig.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/171779878","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-171779878","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":171779878,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MTc3OTg3OA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-01-14T21:07:03Z","updated_at":"2016-01-14T21:07:03Z","author_association":"MEMBER","body":"Fantastic !\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/171928658","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-171928658","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":171928658,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MTkyODY1OA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-01-15T10:32:19Z","updated_at":"2016-01-15T10:32:19Z","author_association":"MEMBER","body":"@craigwi I looked at the azure client code and found that when you call `openOutputStream()`, it calls `openOutputStream(null, null /* options */, null)`.\n\nOptions are then populated by calling `options = BlobRequestOptions.applyDefaults(options, BlobType.BLOCK_BLOB, this.blobServiceClient, false)` which does:\n\n``` java\n    protected static final BlobRequestOptions applyDefaults(final BlobRequestOptions options, final BlobType blobType,\n            final CloudBlobClient client, final boolean setStartTime) {\n        BlobRequestOptions modifiedOptions = new BlobRequestOptions(options);\n        BlobRequestOptions.populateRequestOptions(modifiedOptions, client.getDefaultRequestOptions(), setStartTime);\n        return BlobRequestOptions.applyDefaultsInternal(modifiedOptions, blobType, client, setStartTime);\n    }\n```\n\n`BlobRequestOptions.populateRequestOptions` then calls `RequestOptions.populateRequestOptions` which does:\n\n``` java\n    protected static final RequestOptions populateRequestOptions(RequestOptions modifiedOptions,\n            final RequestOptions clientOptions, final boolean setStartTime) {\n        // ...\n        if (modifiedOptions.getTimeoutIntervalInMs() == null) {\n            modifiedOptions.setTimeoutIntervalInMs(clientOptions.getTimeoutIntervalInMs());\n        }\n\n        if (modifiedOptions.getMaximumExecutionTimeInMs() == null) {\n            modifiedOptions.setMaximumExecutionTimeInMs(clientOptions.getMaximumExecutionTimeInMs());\n        }\n\n        if (modifiedOptions.getMaximumExecutionTimeInMs() != null\n                && modifiedOptions.getOperationExpiryTimeInMs() == null && setStartTime) {\n            modifiedOptions.setOperationExpiryTimeInMs(new Date().getTime()\n                    + modifiedOptions.getMaximumExecutionTimeInMs());\n        }\n\n        return modifiedOptions;\n    }\n```\n\nSo to me your initial assumption is correct. The default client options are applied here.\nI don't think that passing `client.getDefaultRequestOptions()` will change anything here unless I'm missing something.\n\nMay be it's a bug elsewhere? \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/171933503","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-171933503","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":171933503,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MTkzMzUwMw==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-01-15T11:00:02Z","updated_at":"2016-01-15T11:00:02Z","author_association":"MEMBER","body":"@craigwi so I created a simple test case and looked in debug mode at what is happening on the azure client:\n\n``` java\npublic void testDumb() throws URISyntaxException, StorageException {\n    CloudStorageAccount storageAccount = CloudStorageAccount.getDevelopmentStorageAccount();\n    CloudBlobClient client = storageAccount.createCloudBlobClient();\n    client.getDefaultRequestOptions().setTimeoutIntervalInMs(10000);\n    client.getContainerReference(\"dumb\").getBlockBlobReference(\"blob\").openOutputStream();\n}\n```\n\nOptions are correctly updated.\n\n<img width=\"607\" alt=\"blobrequestoptions java - elasticsearch - -documents-elasticsearch-dev-es-gradle-elasticsearch intellij idea aujourd hui at 11 44 32\" src=\"https://cloud.githubusercontent.com/assets/274222/12351644/6795ecee-bb7f-11e5-8371-a7a92f69b6ae.png\">\n\nI looked at the `BlobOutputStream` and the root problem is that actually the azure client does not use at all this time out setting.\nThis setting is only used by `BlobRequest` which we are not using.\n\n<img width=\"1084\" alt=\"intellij idea intellij idea aujourd hui at 11 50 50\" src=\"https://cloud.githubusercontent.com/assets/274222/12351651/73fb24a4-bb7f-11e5-8ff1-1349e2199299.png\">\n\nSo I believe that the change we have to do is bigger than what we did until now. I think it's time to implement #12448 which would use not Azure Input/Output Streams but `StorageRequest` or `BlobRequest`. I'll look at the Azure storage client examples unless you find another idea in the meantime.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/171962184","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-171962184","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":171962184,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MTk2MjE4NA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-01-15T13:29:52Z","updated_at":"2016-01-15T13:29:52Z","author_association":"MEMBER","body":"I looked at the other parts of the Azure client code and I found only one case where the `RequestOptions` is used:\n\nIn `CloudBlockBlob.upload`:\n\n``` java\n        // If the stream is rewindable, and the length is known and less than\n        // threshold the upload in a single put, otherwise use a stream.\n        if (sourceStream.markSupported() && descriptor.getLength() != -1\n                && descriptor.getLength() < options.getSingleBlobPutThresholdInBytes() + 1) {\n            this.uploadFullBlob(sourceStream, descriptor.getLength(), accessCondition, options, opContext);\n        }\n```\n\nBut when you use directly a stream, `RequestOptions` are not used.. \n\nSo the only short-term workaround I can see is by using the `upload` method and make sure we enter that code bloc.\n\nI opened https://github.com/Azure/azure-storage-java/issues/71.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/172002727","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-172002727","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":172002727,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MjAwMjcyNw==","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"created_at":"2016-01-15T16:10:37Z","updated_at":"2016-01-15T16:10:37Z","author_association":"MEMBER","body":"> > check that delete command leaves the snapshot in a coherent state if a timeout happen\n> \n> @imotov could comment on what would happen if the azure client raises an exception.\n\nThe problem here is not in a timeout during a delete command. The problem is in absence of a timeout while writing a file to azure. The delete operation first makes sure that a snapshot that a user is trying to delete is not currently running, and if the snapshot is running the delete operation tries to cancel it. The cancellation process sends an abort message to all shards involved in the snapshot and waits for all shards to stop writing. The source of the problem is that one of the shards cannot stop writing because it's forever stuck in the write operation. If we will add the write operation timeout, it will resolve the core issue - the abort operation will not get stuck for more then the timeout interval and therefore will be easily cancellable. Moreover, it will help to eliminate the need to delete a stuck snapshot to start with, since the snapshot will not get stuck waiting for a write to finish in the first place. Instead it will just fail the snapshot for the shard that got stuck and move on. \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/172373960","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-172373960","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":172373960,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MjM3Mzk2MA==","user":{"login":"craigwi","id":6687101,"node_id":"MDQ6VXNlcjY2ODcxMDE=","avatar_url":"https://avatars2.githubusercontent.com/u/6687101?v=4","gravatar_id":"","url":"https://api.github.com/users/craigwi","html_url":"https://github.com/craigwi","followers_url":"https://api.github.com/users/craigwi/followers","following_url":"https://api.github.com/users/craigwi/following{/other_user}","gists_url":"https://api.github.com/users/craigwi/gists{/gist_id}","starred_url":"https://api.github.com/users/craigwi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/craigwi/subscriptions","organizations_url":"https://api.github.com/users/craigwi/orgs","repos_url":"https://api.github.com/users/craigwi/repos","events_url":"https://api.github.com/users/craigwi/events{/privacy}","received_events_url":"https://api.github.com/users/craigwi/received_events","type":"User","site_admin":false},"created_at":"2016-01-17T20:05:10Z","updated_at":"2016-01-17T20:05:10Z","author_association":"CONTRIBUTOR","body":"guys, per the post I made on azure-storage-java (https://github.com/Azure/azure-storage-java/issues/71), the primary issue (lack of timeout) is due to a bug in an old version of com.microsoft.azure.storage.  We need to use version 3.0.0 or newer.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/172733697","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-172733697","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":172733697,"node_id":"MDEyOklzc3VlQ29tbWVudDE3MjczMzY5Nw==","user":{"login":"craigwi","id":6687101,"node_id":"MDQ6VXNlcjY2ODcxMDE=","avatar_url":"https://avatars2.githubusercontent.com/u/6687101?v=4","gravatar_id":"","url":"https://api.github.com/users/craigwi","html_url":"https://github.com/craigwi","followers_url":"https://api.github.com/users/craigwi/followers","following_url":"https://api.github.com/users/craigwi/following{/other_user}","gists_url":"https://api.github.com/users/craigwi/gists{/gist_id}","starred_url":"https://api.github.com/users/craigwi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/craigwi/subscriptions","organizations_url":"https://api.github.com/users/craigwi/orgs","repos_url":"https://api.github.com/users/craigwi/repos","events_url":"https://api.github.com/users/craigwi/events{/privacy}","received_events_url":"https://api.github.com/users/craigwi/received_events","type":"User","site_admin":false},"created_at":"2016-01-19T04:28:27Z","updated_at":"2016-01-19T04:28:27Z","author_association":"CONTRIBUTOR","body":"I updated my version of the cloud azure plugin to use azure-storage-java v3.1: https://github.com/craigwi/elasticsearch-cloud-azure/releases/tag/v2.8.4-craigwi.  I picked v3.1 because v4.0.0 looked to have a larger scope of changes and more risk.  So far, my tests, including frequent snapshots and restores, appear to be successful.\n\nCraig.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/172842982","html_url":"https://github.com/elastic/elasticsearch/issues/12567#issuecomment-172842982","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/12567","id":172842982,"node_id":"MDEyOklzc3VlQ29tbWVudDE3Mjg0Mjk4Mg==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2016-01-19T12:46:06Z","updated_at":"2016-01-19T12:46:06Z","author_association":"MEMBER","body":"@craigwi It sounds like we should set `client.getDefaultRequestOptions().setMaximumExecutionTimeInMs(timeout);` \nIn that case, we will have a better control from elasticsearch when something goes wrong and takes too much time.\n\nWDYT?\n\nI wonder if we should set both timeouts or only `setMaximumExecutionTimeInMs`?\nI guess that `setMaximumExecutionTimeInMs` would be enough.\n","performed_via_github_app":null}]