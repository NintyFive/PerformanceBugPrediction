[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/695077295","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-695077295","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":695077295,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NTA3NzI5NQ==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-18T20:44:08Z","updated_at":"2020-09-20T11:09:19Z","author_association":"MEMBER","body":"> Since #62458, ' has been freed (is currently deprecated) so we could replace ` with '.\r\n\r\nI think we need to continue to consider both Endgame users and Elasticsearch users. This hasn't been gone through a single release in either as deprecated feature. We deprecated it in a PR a few weeks ago, and are already trying to reuse it. From the user's POV, they'll see inconsistent behavior between Endgame and Elasticsearch, but also between Elasticsearch 7.9 and 7.10. If we leave it deprecated in 7.10, _then_ we can later reuse it.\r\n\r\nBut I still don't think `'` is a good choice for escaped identifiers:\r\n\r\nI think this issue assumes agreement that `'` is desirable, but I still don't understand why `'` is more desirable than `` ` `` for identifiers. In most languages (programming, query, serialization) that I've encountered, `'` is used for a single character literal or for a full string. SQL seems to be exception more than the norm, but even then the usage of `'` and `\"` is flipped.\r\n\r\nI think we haven't had too many use cases of identifiers that _don't_ match our existing regex: `(LETTER | '_' | '@') (LETTER | DIGIT | '_')*`. Do we have a guess at what those edge cases are? I think the biggest offender is the hyphen `-`. If we don't have pressing issues, why not leave the option open to decide more carefully for 7.11?\r\n\r\nSince `'` seems to have a very strong association with strings in many languages, I think the character `` ` `` is more appropriate for defining a field name with special characters. `` ` `` has less implicit associations and brings less baggage to EQL.\r\n\r\nI've heard it said in these discussions that `` ` `` and `'`  have been confused for each other. But I struggle to see how this is the case for people writing a query in a query language.\r\n\r\nI think we should go with the most intuitive decision for past, present, and future users of EQL. In my mind `'` is an unintuitive choice for escaping field names. And with the prevalence of Slack and Markdown, the distinction between `` ` `` and `'`  will only be understood more.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696037464","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696037464","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696037464,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjAzNzQ2NA==","user":{"login":"astefan","id":893749,"node_id":"MDQ6VXNlcjg5Mzc0OQ==","avatar_url":"https://avatars2.githubusercontent.com/u/893749?v=4","gravatar_id":"","url":"https://api.github.com/users/astefan","html_url":"https://github.com/astefan","followers_url":"https://api.github.com/users/astefan/followers","following_url":"https://api.github.com/users/astefan/following{/other_user}","gists_url":"https://api.github.com/users/astefan/gists{/gist_id}","starred_url":"https://api.github.com/users/astefan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/astefan/subscriptions","organizations_url":"https://api.github.com/users/astefan/orgs","repos_url":"https://api.github.com/users/astefan/repos","events_url":"https://api.github.com/users/astefan/events{/privacy}","received_events_url":"https://api.github.com/users/astefan/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T10:45:16Z","updated_at":"2020-09-21T13:46:28Z","author_association":"CONTRIBUTOR","body":"Backtick is not a widely used symbol and definitely not more common than `'`. If this one (`` ` ``) is available and I have to choose between it and `'` I'll always choose `'`. Regarding Python EQL and already existent users outside ES EQL, a deprecation path in those products release cycle could make the backtick - single quote change. ES EQL is still in experimental phase and I think we should take advantage of this situation and not prolong its switch to Beta status unnecessarily. If we have a set of good features and a stable grammar in place, a Beta status could mean more interested users in taking ES EQL for a spin and provide useful feedback.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696133776","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696133776","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696133776,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjEzMzc3Ng==","user":{"login":"matriv","id":5058131,"node_id":"MDQ6VXNlcjUwNTgxMzE=","avatar_url":"https://avatars1.githubusercontent.com/u/5058131?v=4","gravatar_id":"","url":"https://api.github.com/users/matriv","html_url":"https://github.com/matriv","followers_url":"https://api.github.com/users/matriv/followers","following_url":"https://api.github.com/users/matriv/following{/other_user}","gists_url":"https://api.github.com/users/matriv/gists{/gist_id}","starred_url":"https://api.github.com/users/matriv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matriv/subscriptions","organizations_url":"https://api.github.com/users/matriv/orgs","repos_url":"https://api.github.com/users/matriv/repos","events_url":"https://api.github.com/users/matriv/events{/privacy}","received_events_url":"https://api.github.com/users/matriv/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T14:00:35Z","updated_at":"2020-09-21T14:00:35Z","author_association":"CONTRIBUTOR","body":"Let me add some more thoughts as well.\r\n\r\n- The single quote ' is currently used rarely to identify strings\r\n- If a user issues a query with ' around a string literal, e.g.: process where a = 'foo' then the foo will be parsed as a identifier and:\r\n  - if foo is a valid identifier, an exception will be thrown since we cannot have comparisons with identifiers both to the left and to the right.\r\n  - if foo is an invalid identifier, an exception will be thrown stating this.\r\nThis doesn't seem as a dangerous behaviour since it doesn't lead to a correct query with wrong behaviour.\r\n\r\nIt seems quite inconvenient for the user to receive a message mentioning a wrong identifier for something that until now it was considered a string literal and I have a preference for the more clear 2 step approach (1. error message for single quotes around string, 2. replacement of backquotes with single quote for identifiers), but based on [@astefan 's comment](https://github.com/elastic/elasticsearch/issues/62650#issuecomment-695995357)\r\nIf we lock ourselves in the situation that we have to wait replacing the backquote with the single quote for identifiers until next major release, I'd rather proceed with this breaking change now, since it's safe enough (no wrong results for deprecated syntax) and end up with a more clear grammar.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696152512","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696152512","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696152512,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjE1MjUxMg==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T14:28:15Z","updated_at":"2020-09-21T14:48:00Z","author_association":"MEMBER","body":"My biggest issue is that people have almost universally come to expect `'` to mean strings or characters.\r\nBut people don't have expectations of the `` ` ``, and its meaning is varied. `` ` `` usually has something to do with strings, like string interpolation or string escaping, if it's used at all.\r\n\r\nIf we went forward with `'`, then I think we have to justify why we are deliberately making what seems like an unintuitive choice. Even though the numbers for usage of `'` for strings with Endgame is low (both by employees and by users), I think it's interesting that both were used, even in contexts where `'` provided no utility over `\"`. Did users read the syntax guide and realize that both were acceptable? Or did some pick `'` out of habit? My point: it seems like that preference or association between `'` and strings _is already there_.\r\n\r\nWe can stick with our removal of `'` to remove options and direct users to a single syntax, but I don't think we should go against the grain here. We should always make these grammar/syntax decisions based on what's desirable, not just what's available. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696175227","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696175227","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696175227,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjE3NTIyNw==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T15:05:30Z","updated_at":"2020-09-21T15:48:16Z","author_association":"MEMBER","body":"We also have more options than just `'` and `` ` ``.\r\n\r\nOne more option that comes to mind is using backslashes to escape characters. This `\\<escape>` would just be an extension of our existing syntax for fields: `field\\-with\\-hyphens`.\r\n\r\nIf you do that, it's crystal clear what is a string and what is a field:\r\n*  _If it's quoted at all, it's a string. If it's unquoted, it's a field._\r\n\r\nWe could extend this syntax:\r\nhttps://github.com/elastic/elasticsearch/blob/8f94981bb093f104228d267b532e0a3d5b7f6a38/x-pack/plugin/eql/src/main/antlr/EqlBase.g4#L215-L218\r\n\r\n```g4\r\nfragment IDENTIFIER_ESCAPE\r\n    // prohibit unnecessary alpha escapes, so we can later extend these (such as \\uXXXX and \\UXXXXXXXX)\r\n    : [\\\\] ([^A-Za-z\\b\\t\\n\\f\\r]|[btnfr])\r\n    ;\r\n\r\n IDENTIFIER \r\n     : (LETTER | '_' | '@' | IDENTIFIER_ESCAPE) (LETTER | DIGIT | '_' | IDENTIFIER_ESCAPE)* \r\n     ; \r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696353255","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696353255","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696353255,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjM1MzI1NQ==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T20:23:55Z","updated_at":"2020-09-21T20:23:55Z","author_association":"MEMBER","body":"> between Elasticsearch 7.9 and 7.10. If we leave it deprecated in 7.10, then we can later reuse it.\r\n\r\nThat is incorrect. A beta means the feature set is locked but the implementation or some minor features not fully implemented. For the whole duration of the 7.x line.\r\n\r\nIf `` ` `` backticks are used for field identifiers in a beta, they should be available in the GA as well.\r\nIf `'` are deprecated in the beta, we cannot add them with a different meaning in GA.\r\n\r\nThe whole reason EQL in Elasticsearch 7.9 is experimental is to allow such **breaking** changes to occur. \r\nIf Elasticsearch EQL is experimental, the whole stack on top of it will be experimental also.\r\n\r\n> In most languages (programming, query, serialization) that I've encountered, ' is used for a single character literal or for a full string. SQL seems to be exception more than the norm...\r\n\r\nI don't follow...\r\nThe vast majority of programming languages have strict rules for identifiers and thus do not require quoting in the first place.\r\n\r\nFurther more in practice, in EQL `\"` is used heavily for string declaration not `'`; are you suggesting we use `\"` for identifiers and `'` for strings?\r\n\r\n> I've heard it said in these discussions that ` and ' have been confused for each other. But I struggle to see how this is the case for people writing a query in a query language.\r\n\r\nUser experience? Back-ticks are rarely used in declarative/query languages as oppose to single quotes which are. We have already experienced this internally where folks on the team used single quotes instead of backticks to define a field name in an EQL query which obviously failed.\r\n\r\nSQL might be quirky but it's the most popular declarative language and serves as a good analogy on when to use one over the other. Based on the Markdown/Slack conventions (which are *markup** languages and have no notion of evaluation, identifiers, etc...), I would expect '`' to be used for raw string declaration (don't escape anything) as oppose to quoting identifiers.\r\n\r\nSince quoting identifiers is a best practice and virtually all our queries should use, picking a known character is desirable over a less known one that is visually similar.\r\n\r\n> One more option that comes to mind is using backslashes to escape characters. This \\<escape> would just be an extension of our existing syntax for fields: field\\-with\\-hyphens.\r\n\r\nThat's a step backwards since instead of just quoting a field regardless of its value, one must now escape *each* problematic character in the name.\r\n\r\n` 'this.is.a.subfield.of.an.object' ` becomes `this\\.is\\.a\\.subfield\\.of\\.an\\.object`","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696371636","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696371636","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696371636,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjM3MTYzNg==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-21T20:56:42Z","updated_at":"2020-09-21T21:03:33Z","author_association":"MEMBER","body":"We would maintain our `.` handling, so that last change would be unnecessary. `this.is.a.subfield.of.an.object` is still supported.\r\n\r\nThis wouldn't be breaking at all, but would merely extend the regex for identifier matching. And the \"quotes mean strings\" approach will make our lives and our user's lives easier.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/696686116","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-696686116","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":696686116,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NjY4NjExNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T12:23:07Z","updated_at":"2020-09-22T12:23:07Z","author_association":"MEMBER","body":"Pick a different special character, say ' '\r\n`'this is a special field' vs this\\ a\\ special\\ field`. Not only it will **not** work but it's unreadable. \r\nAs a user I don't know where if that's a regex or escaped field name and if so where does it start.\r\n\r\nFurther more regex in parser are discouraged due to their greedy nature which leads to ambiguity.\r\n\r\n> And the \"quotes mean strings\" approach will make our lives and our user's lives easier.\r\n\r\nThey already do.. Not sure what you mean.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/697024138","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-697024138","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":697024138,"node_id":"MDEyOklzc3VlQ29tbWVudDY5NzAyNDEzOA==","user":{"login":"rw-access","id":31489089,"node_id":"MDQ6VXNlcjMxNDg5MDg5","avatar_url":"https://avatars1.githubusercontent.com/u/31489089?v=4","gravatar_id":"","url":"https://api.github.com/users/rw-access","html_url":"https://github.com/rw-access","followers_url":"https://api.github.com/users/rw-access/followers","following_url":"https://api.github.com/users/rw-access/following{/other_user}","gists_url":"https://api.github.com/users/rw-access/gists{/gist_id}","starred_url":"https://api.github.com/users/rw-access/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rw-access/subscriptions","organizations_url":"https://api.github.com/users/rw-access/orgs","repos_url":"https://api.github.com/users/rw-access/repos","events_url":"https://api.github.com/users/rw-access/events{/privacy}","received_events_url":"https://api.github.com/users/rw-access/received_events","type":"User","site_admin":false},"created_at":"2020-09-22T22:53:39Z","updated_at":"2020-09-22T23:05:46Z","author_association":"MEMBER","body":"By _quotes mean strings_, I'm referring to the existing bias in all sorts of languages for quote characters (both `'` and `\"`) to be used for string literals. But we're going against that bias/expectation if we use `'` for fields instead. Meanwhile, `` ` `` doesn't have that problem, because it's biggest association (if any) is \"inline code\". And my reason for mentioning Markdown and Slack earlier was to illustrate how the usage of `` ` `` is only becoming more widespread and that  `` ` `` must be easy enough to distinguish from  `'` if so many people already use it.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/699866306","html_url":"https://github.com/elastic/elasticsearch/issues/62663#issuecomment-699866306","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/62663","id":699866306,"node_id":"MDEyOklzc3VlQ29tbWVudDY5OTg2NjMwNg==","user":{"login":"costin","id":76245,"node_id":"MDQ6VXNlcjc2MjQ1","avatar_url":"https://avatars3.githubusercontent.com/u/76245?v=4","gravatar_id":"","url":"https://api.github.com/users/costin","html_url":"https://github.com/costin","followers_url":"https://api.github.com/users/costin/followers","following_url":"https://api.github.com/users/costin/following{/other_user}","gists_url":"https://api.github.com/users/costin/gists{/gist_id}","starred_url":"https://api.github.com/users/costin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/costin/subscriptions","organizations_url":"https://api.github.com/users/costin/orgs","repos_url":"https://api.github.com/users/costin/repos","events_url":"https://api.github.com/users/costin/events{/privacy}","received_events_url":"https://api.github.com/users/costin/received_events","type":"User","site_admin":false},"created_at":"2020-09-28T08:37:51Z","updated_at":"2020-09-28T08:37:51Z","author_association":"MEMBER","body":"After discussing this topic, we concluded to:\r\n- keep using `` ` `` (backticks) for quoting identifiers\r\n- *not* use `'` (single quote) for quoting identifiers. This means `'` remains currently unused in the grammar.\r\n\r\nMoving forward, the usage `` ` `` inside a quoted identifier needs to be checked. That is, what happens when using quoting an identifier that contains backticks...","performed_via_github_app":null}]