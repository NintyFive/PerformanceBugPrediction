{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/1722","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1722/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1722/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/1722/events","html_url":"https://github.com/elastic/elasticsearch/issues/1722","id":3297709,"node_id":"MDU6SXNzdWUzMjk3NzA5","number":1722,"title":"API: Multi Search","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[{"id":23172,"node_id":"MDU6TGFiZWwyMzE3Mg==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Efeature","name":">feature","color":"006b75","default":false,"description":null},{"id":230713,"node_id":"MDU6TGFiZWwyMzA3MTM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v0.19.0.RC3","name":"v0.19.0.RC3","color":"DDDDDD","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2012-02-20T16:56:14Z","updated_at":"2012-02-20T20:02:47Z","closed_at":"2012-02-20T16:57:37Z","author_association":"MEMBER","active_lock_reason":null,"body":"The multi search API allows to execute several search requests within the same API. The endpoint for it is `_msearch`. \n\nThe format of the request is similar to the bulk API format, and the structure is:\n\n```\nheader\\n\nbody\\n\nheader\\n\nbody\\n\n```\n\nThe header part includes which index / indices to search on, optional (mapping) types to search on, the `search_type`, `preference`, and `routing`. The body includes the typical search body request (including the `query`, `facets`, `from`, `size`, and so on). Here is an example:\n\n```\n$ cat requests\n{\"index\" : \"test\"}\n{\"query\" : {\"match_all\" : {}}, \"from\" : 0, \"size\" : 10}\n{\"index\" : \"test\", \"search_type\" : \"count\"}\n{\"query\" : {\"match_all\" : {}}}\n{}\n{\"query\" : {\"match_all\" : {}}}\n\n{\"query\" : {\"match_all\" : {}}}\n{\"search_type\" : \"count\"}\n{\"query\" : {\"match_all\" : {}}}\n\n$ curl -XGET localhost:9200/_msearch --data-binary @requests; echo\n```\n\nNote, the above includes an example of an empty header (can also be just without any content) which is supported as well.\n\nThe response returns a `responses` array, which includes the search response for each search request matching its order in the original multi search request. If there was a complete failure for that specific search request, an object with `error` message will be returned in place of the actual search response.\n\nThe endpoint allows to also search against an index/indices and type/types in the URI itself, in which case it will be used as the default unless explicitly defined otherwise in the header. For example:\n\n```\n$ cat requests\n{}\n{\"query\" : {\"match_all\" : {}}, \"from\" : 0, \"size\" : 10}\n{}\n{\"query\" : {\"match_all\" : {}}}\n{\"index\" : \"test2\"}\n{\"query\" : {\"match_all\" : {}}}\n\n$ curl -XGET localhost:9200/test/_msearch --data-binary @requests; echo\n```\n\nThe above will execute the search against the `test` index for all the requests that don't define an index, and the last one will be executed against the `test2` index.\n","closed_by":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"performed_via_github_app":null}