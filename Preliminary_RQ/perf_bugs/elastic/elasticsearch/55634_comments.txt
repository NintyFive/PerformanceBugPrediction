[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618086011","html_url":"https://github.com/elastic/elasticsearch/issues/55634#issuecomment-618086011","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55634","id":618086011,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODA4NjAxMQ==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-04-22T23:11:44Z","updated_at":"2020-04-22T23:11:44Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-core-features (:Core/Features/Ingest)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618145497","html_url":"https://github.com/elastic/elasticsearch/issues/55634#issuecomment-618145497","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55634","id":618145497,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODE0NTQ5Nw==","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"created_at":"2020-04-23T02:49:37Z","updated_at":"2020-04-23T02:56:43Z","author_association":"CONTRIBUTOR","body":"Nice find @jbaiera !\r\n\r\nI think this deadlock can only happen if a `pipeline` processor is defined after an `enrich` processor and the subsequent pipeline also has an `enrich` processor, and the system is under heavy load. \r\n\r\nThe root cause of the deadlock, I do believe is as Jimmy mentions - the search thread ends up processing (parts) of the ingest pipeline(s) and end up getting hung up on the same queue.put method that the write threads are stuck on. Meaning that the search threads needs to complete to allow the write thread to complete, but the search threads can not because they are blocked by the same resource that the write thread is blocked on.\r\n\r\nI did some debugging with the following additional logging: https://gist.github.com/jakelandis/61d18359baa325c6c12b40b8d015e798 (log in comments of gist)\r\n\r\nUsing the following repro case, i was able to see search thread processing the ingest document.  I believe the fix here is to ensure that that CompoundProcessor\r\n\r\n```\r\nPOST _bulk\r\n{ \"index\" : { \"_index\" : \"mysource\"} }\r\n{ \"my_number\" : 1, \"my_value\" : \"a\" }\r\n\r\nPUT _enrich/policy/myenrich_policy\r\n{\r\n   \"match\": {\r\n        \"indices\": \"mysource\",\r\n        \"match_field\": \"my_number\",\r\n        \"enrich_fields\": [\"my_value\"]\r\n    }\r\n}\r\n\r\nPOST _enrich/policy/myenrich_policy/_execute\r\n\r\nPUT /_ingest/pipeline/myset_pipeline\r\n{\r\n  \"processors\": [\r\n    {\r\n      \"set\": {\r\n        \"field\": \"my_set_field\",\r\n        \"value\": \"foobar\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nPUT /_ingest/pipeline/myenrich_pipeline\r\n{\r\n  \"processors\": [\r\n    {\r\n      \"enrich\": {\r\n        \"policy_name\": \"myenrich_policy\",\r\n        \"field\": \"custom_id\",\r\n        \"target_field\": \"enrich_value\"\r\n      }\r\n    },\r\n    {\r\n      \"pipeline\": {\r\n        \"name\": \"myset_pipeline\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n\r\nPOST myindex/_doc/1?pipeline=myenrich_pipeline\r\n{\r\n  \"custom_id\" : 1\r\n}\r\n```\r\nThe relevant (custom) logs are:\r\n```\r\n[2020-04-22T21:44:53,702][WARN ][*********************    ] [runTask-0] [elasticsearch[runTask-0][write][T#6]] Draining queue\r\n[2020-04-22T21:44:53,717][WARN ][*********************    ] [runTask-0] [elasticsearch[runTask-0][search][T#16]] Calling slot.actionListener\r\n[2020-04-22T21:44:53,718][WARN ][*********************    ] [runTask-0] [elasticsearch[runTask-0][search][T#16]] innerExecute -> result != null\r\n[2020-04-22T21:44:53,718][WARN ][*********************    ] [runTask-0] [elasticsearch[runTask-0][search][T#16]] Processing ingest document\r\n[2020-04-22T21:44:53,719][WARN ][*********************    ] [runTask-0] [elasticsearch[runTask-0][search][T#16]]java.base/java.lang.Thread.getStackTrace(Thread.java:1598)\r\norg.elasticsearch.ingest.Pipeline.execute(Pipeline.java:106)\r\norg.elasticsearch.ingest.IngestDocument.executePipeline(IngestDocument.java:651)\r\norg.elasticsearch.ingest.PipelineProcessor.execute(PipelineProcessor.java:45)\r\norg.elasticsearch.ingest.CompoundProcessor.innerExecute(CompoundProcessor.java:141)\r\norg.elasticsearch.ingest.CompoundProcessor.lambda$innerExecute$1(CompoundProcessor.java:161)\r\norg.elasticsearch.xpack.enrich.AbstractEnrichProcessor.lambda$execute$0(AbstractEnrichProcessor.java:130)\r\norg.elasticsearch.xpack.enrich.AbstractEnrichProcessor.lambda$createSearchRunner$1(AbstractEnrichProcessor.java:182)\r\norg.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63)\r\norg.elasticsearch.client.node.NodeClient.lambda$executeLocally$0(NodeClient.java:91)\r\norg.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:158)\r\norg.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:151)\r\norg.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.handleResponse(EnrichCoordinatorProxyAction.java:161)\r\norg.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.lambda$coordinateLookups$1(EnrichCoordinatorProxyAction.java:143)\r\norg.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.lambda$lookupFunction$4(EnrichCoordinatorProxyAction.java:206)\r\norg.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63)\r\norg.elasticsearch.client.node.NodeClient.lambda$executeLocally$0(NodeClient.java:91)\r\norg.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:158)\r\norg.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:151)\r\norg.elasticsearch.action.support.single.shard.TransportSingleShardAction$AsyncSingleAction$2.handleResponse(TransportSingleShardAction.java:261)\r\norg.elasticsearch.action.support.single.shard.TransportSingleShardAction$AsyncSingleAction$2.handleResponse(TransportSingleShardAction.java:247)\r\norg.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1101)\r\norg.elasticsearch.transport.TransportService$DirectResponseChannel.processResponse(TransportService.java:1179)\r\norg.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1159)\r\norg.elasticsearch.transport.TaskTransportChannel.sendResponse(TaskTransportChannel.java:54)\r\norg.elasticsearch.action.support.ChannelActionListener.onResponse(ChannelActionListener.java:47)\r\norg.elasticsearch.action.support.ChannelActionListener.onResponse(ChannelActionListener.java:30)\r\norg.elasticsearch.action.ActionRunnable.lambda$supply$0(ActionRunnable.java:58)\r\norg.elasticsearch.action.ActionRunnable$2.doRun(ActionRunnable.java:73)\r\norg.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\norg.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\r\norg.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:691)\r\norg.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\njava.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\r\njava.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\r\njava.base/java.lang.Thread.run(Thread.java:832)\r\n```\r\nBasically the execute pipeline via the CompoundProcessor.innerExecute is getting executed on the search thread. It needs to fork back to the write thread pool (or some other thread pool) to prevent the deadlock.  ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618147066","html_url":"https://github.com/elastic/elasticsearch/issues/55634#issuecomment-618147066","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55634","id":618147066,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODE0NzA2Ng==","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"created_at":"2020-04-23T02:55:47Z","updated_at":"2020-04-23T02:55:47Z","author_association":"CONTRIBUTOR","body":"And the following assertion gets trips when running from source code with assertions enabled (code in `EnrichCoordinatorProxyAction`):\r\n\r\n```java         \r\nassert Thread.currentThread().getName().contains(ThreadPool.Names.WRITE)\r\n                || Thread.currentThread().getName().contains(ThreadPool.Names.MANAGEMENT);\r\n```\r\nWith the following repro:\r\n```\r\nPOST _bulk\r\n{ \"index\" : { \"_index\" : \"mysource\"} }\r\n{ \"my_number\" : 1, \"my_value\" : \"a\" }\r\nPUT _enrich/policy/myenrich_policy\r\n{\r\n   \"match\": {\r\n        \"indices\": \"mysource\",\r\n        \"match_field\": \"my_number\",\r\n        \"enrich_fields\": [\"my_value\"]\r\n    }\r\n}\r\n\r\n\r\nPOST _enrich/policy/myenrich_policy/_execute\r\nPUT /_ingest/pipeline/myenrich_pipeline\r\n{\r\n  \"processors\": [\r\n    {\r\n      \"enrich\": {\r\n        \"policy_name\": \"myenrich_policy\",\r\n        \"field\": \"custom_id\",\r\n        \"target_field\": \"enrich_value\"\r\n      }\r\n    },\r\n    {\r\n      \"pipeline\": {\r\n        \"name\": \"myenrich_pipeline2\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\nPUT /_ingest/pipeline/myenrich_pipeline2\r\n{\r\n  \"processors\": [\r\n    {\r\n      \"enrich\": {\r\n        \"policy_name\": \"myenrich_policy\",\r\n        \"field\": \"custom_id\",\r\n        \"target_field\": \"enrich_value2\"\r\n      }\r\n    }\r\n    ]\r\n}\r\n\r\nPOST myindex/_doc/1?pipeline=myenrich_pipeline\r\n{\r\n  \"custom_id\" : 1\r\n}\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/618252812","html_url":"https://github.com/elastic/elasticsearch/issues/55634#issuecomment-618252812","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55634","id":618252812,"node_id":"MDEyOklzc3VlQ29tbWVudDYxODI1MjgxMg==","user":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"created_at":"2020-04-23T08:15:00Z","updated_at":"2020-04-23T08:15:00Z","author_association":"MEMBER","body":"Good catch @jbaiera and thanks @jakelandis for the additional explanation and easy reproduction!","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/620247036","html_url":"https://github.com/elastic/elasticsearch/issues/55634#issuecomment-620247036","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55634","id":620247036,"node_id":"MDEyOklzc3VlQ29tbWVudDYyMDI0NzAzNg==","user":{"login":"jbaiera","id":875779,"node_id":"MDQ6VXNlcjg3NTc3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/875779?v=4","gravatar_id":"","url":"https://api.github.com/users/jbaiera","html_url":"https://github.com/jbaiera","followers_url":"https://api.github.com/users/jbaiera/followers","following_url":"https://api.github.com/users/jbaiera/following{/other_user}","gists_url":"https://api.github.com/users/jbaiera/gists{/gist_id}","starred_url":"https://api.github.com/users/jbaiera/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jbaiera/subscriptions","organizations_url":"https://api.github.com/users/jbaiera/orgs","repos_url":"https://api.github.com/users/jbaiera/repos","events_url":"https://api.github.com/users/jbaiera/events{/privacy}","received_events_url":"https://api.github.com/users/jbaiera/received_events","type":"User","site_admin":false},"created_at":"2020-04-27T21:32:32Z","updated_at":"2020-04-27T21:32:32Z","author_association":"CONTRIBUTOR","body":"I was able to get a solid reproduction by eliding the assertions (similar to how a production runtime would do so) and dramatically throttling the maximum allowed throughput (only 1 concurrent search at a time, queue size set to 10). \r\n\r\nImportantly, the pipeline must indeed contain two enrich processors, but they do not need to be separated by a pipeline processor. The deadlock still occurs when running a single pipeline with two processors back to back. \r\n\r\nFor reference, here are the stack traces that came out of the pipeline processor scenario:\r\n```\r\n\"elasticsearch[node_s_0][write][T#1]\" #32 daemon prio=5 os_prio=31 cpu=101.01ms elapsed=18.47s tid=0x00007f9b9b6c7800 nid=0xad03 waiting on condition  [0x0000700010ef0000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n\tat jdk.internal.misc.Unsafe.park(java.base@11.0.2/Native Method)\r\n\t- parking to wait for  <0x00000007ed2cc738> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\r\n\tat java.util.concurrent.locks.LockSupport.park(java.base@11.0.2/LockSupport.java:194)\r\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(java.base@11.0.2/AbstractQueuedSynchronizer.java:2081)\r\n\tat java.util.concurrent.ArrayBlockingQueue.put(java.base@11.0.2/ArrayBlockingQueue.java:367)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.schedule(EnrichCoordinatorProxyAction.java:118)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$TransportAction.doExecute(EnrichCoordinatorProxyAction.java:74)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$TransportAction.doExecute(EnrichCoordinatorProxyAction.java:58)\r\n\tat org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:88)\r\n\tat org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:64)\r\n\tat org.elasticsearch.tasks.TaskManager.registerAndExecute(TaskManager.java:151)\r\n\tat org.elasticsearch.client.node.NodeClient.executeLocally(NodeClient.java:90)\r\n\tat org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:79)\r\n\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:380)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor.lambda$createSearchRunner$3(AbstractEnrichProcessor.java:179)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor$$Lambda$2924/0x0000000800a89040.accept(Unknown Source)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor.execute(AbstractEnrichProcessor.java:101)\r\n\tat org.elasticsearch.ingest.CompoundProcessor.innerExecute(CompoundProcessor.java:138)\r\n\tat org.elasticsearch.ingest.CompoundProcessor.execute(CompoundProcessor.java:124)\r\n\tat org.elasticsearch.ingest.Pipeline.execute(Pipeline.java:100)\r\n\tat org.elasticsearch.ingest.IngestDocument.executePipeline(IngestDocument.java:650)\r\n\tat org.elasticsearch.ingest.IngestService.innerExecute(IngestService.java:505)\r\n\tat org.elasticsearch.ingest.IngestService.executePipelines(IngestService.java:411)\r\n\tat org.elasticsearch.ingest.IngestService$3.doRun(IngestService.java:385)\r\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:691)\r\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.2/ThreadPoolExecutor.java:1128)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.2/ThreadPoolExecutor.java:628)\r\n\tat java.lang.Thread.run(java.base@11.0.2/Thread.java:834)\r\n\r\n\"elasticsearch[node_s_0][search][T#2]\" #35 daemon prio=5 os_prio=31 cpu=14.63ms elapsed=18.03s tid=0x00007f9b9a963000 nid=0x14e03 waiting on condition  [0x00007000111f8000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n\tat jdk.internal.misc.Unsafe.park(java.base@11.0.2/Native Method)\r\n\t- parking to wait for  <0x00000007ed2cc738> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\r\n\tat java.util.concurrent.locks.LockSupport.park(java.base@11.0.2/LockSupport.java:194)\r\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(java.base@11.0.2/AbstractQueuedSynchronizer.java:2081)\r\n\tat java.util.concurrent.ArrayBlockingQueue.put(java.base@11.0.2/ArrayBlockingQueue.java:367)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.schedule(EnrichCoordinatorProxyAction.java:118)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$TransportAction.doExecute(EnrichCoordinatorProxyAction.java:74)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$TransportAction.doExecute(EnrichCoordinatorProxyAction.java:58)\r\n\tat org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:88)\r\n\tat org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:64)\r\n\tat org.elasticsearch.tasks.TaskManager.registerAndExecute(TaskManager.java:151)\r\n\tat org.elasticsearch.client.node.NodeClient.executeLocally(NodeClient.java:90)\r\n\tat org.elasticsearch.client.node.NodeClient.doExecute(NodeClient.java:79)\r\n\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:380)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor.lambda$createSearchRunner$3(AbstractEnrichProcessor.java:179)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor$$Lambda$2924/0x0000000800a89040.accept(Unknown Source)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor.execute(AbstractEnrichProcessor.java:101)\r\n\tat org.elasticsearch.ingest.CompoundProcessor.innerExecute(CompoundProcessor.java:138)\r\n\tat org.elasticsearch.ingest.CompoundProcessor.execute(CompoundProcessor.java:124)\r\n\tat org.elasticsearch.ingest.Pipeline.execute(Pipeline.java:100)\r\n\tat org.elasticsearch.ingest.IngestDocument.executePipeline(IngestDocument.java:650)\r\n\tat org.elasticsearch.ingest.PipelineProcessor.execute(PipelineProcessor.java:45)\r\n\tat org.elasticsearch.ingest.CompoundProcessor.innerExecute(CompoundProcessor.java:138)\r\n\tat org.elasticsearch.ingest.CompoundProcessor.lambda$innerExecute$1(CompoundProcessor.java:157)\r\n\tat org.elasticsearch.ingest.CompoundProcessor$$Lambda$2836/0x0000000800a5e840.accept(Unknown Source)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor.lambda$execute$0(AbstractEnrichProcessor.java:130)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor$$Lambda$2927/0x0000000800a89c40.accept(Unknown Source)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor.lambda$createSearchRunner$1(AbstractEnrichProcessor.java:182)\r\n\tat org.elasticsearch.xpack.enrich.AbstractEnrichProcessor$$Lambda$2928/0x0000000800a8a040.accept(Unknown Source)\r\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63)\r\n\tat org.elasticsearch.client.node.NodeClient.lambda$executeLocally$0(NodeClient.java:91)\r\n\tat org.elasticsearch.client.node.NodeClient$$Lambda$2313/0x00000008008de040.accept(Unknown Source)\r\n\tat org.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:158)\r\n\tat org.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:151)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.handleResponse(EnrichCoordinatorProxyAction.java:164)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.lambda$coordinateLookups$1(EnrichCoordinatorProxyAction.java:146)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator$$Lambda$2931/0x0000000800a8ac40.accept(Unknown Source)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator.lambda$lookupFunction$4(EnrichCoordinatorProxyAction.java:209)\r\n\tat org.elasticsearch.xpack.enrich.action.EnrichCoordinatorProxyAction$Coordinator$$Lambda$2933/0x0000000800a8b440.accept(Unknown Source)\r\n\tat org.elasticsearch.action.ActionListener$1.onResponse(ActionListener.java:63)\r\n\tat org.elasticsearch.client.node.NodeClient.lambda$executeLocally$0(NodeClient.java:91)\r\n\tat org.elasticsearch.client.node.NodeClient$$Lambda$2313/0x00000008008de040.accept(Unknown Source)\r\n\tat org.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:158)\r\n\tat org.elasticsearch.tasks.TaskManager$1.onResponse(TaskManager.java:151)\r\n\tat org.elasticsearch.action.support.single.shard.TransportSingleShardAction$AsyncSingleAction$2.handleResponse(TransportSingleShardAction.java:261)\r\n\tat org.elasticsearch.action.support.single.shard.TransportSingleShardAction$AsyncSingleAction$2.handleResponse(TransportSingleShardAction.java:247)\r\n\tat org.elasticsearch.transport.TransportService$ContextRestoreResponseHandler.handleResponse(TransportService.java:1101)\r\n\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.processResponse(TransportService.java:1179)\r\n\tat org.elasticsearch.transport.TransportService$DirectResponseChannel.sendResponse(TransportService.java:1159)\r\n\tat org.elasticsearch.transport.TaskTransportChannel.sendResponse(TaskTransportChannel.java:54)\r\n\tat org.elasticsearch.action.support.ChannelActionListener.onResponse(ChannelActionListener.java:47)\r\n\tat org.elasticsearch.action.support.ChannelActionListener.onResponse(ChannelActionListener.java:30)\r\n\tat org.elasticsearch.action.ActionRunnable.lambda$supply$0(ActionRunnable.java:58)\r\n\tat org.elasticsearch.action.ActionRunnable$$Lambda$2847/0x0000000800a62040.accept(Unknown Source)\r\n\tat org.elasticsearch.action.ActionRunnable$2.doRun(ActionRunnable.java:73)\r\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\tat org.elasticsearch.common.util.concurrent.TimedRunnable.doRun(TimedRunnable.java:44)\r\n\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingAbstractRunnable.doRun(ThreadContext.java:691)\r\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.2/ThreadPoolExecutor.java:1128)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.2/ThreadPoolExecutor.java:628)\r\n\tat java.lang.Thread.run(java.base@11.0.2/Thread.java:834)\r\n```","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/654272172","html_url":"https://github.com/elastic/elasticsearch/issues/55634#issuecomment-654272172","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/55634","id":654272172,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NDI3MjE3Mg==","user":{"login":"jbaiera","id":875779,"node_id":"MDQ6VXNlcjg3NTc3OQ==","avatar_url":"https://avatars1.githubusercontent.com/u/875779?v=4","gravatar_id":"","url":"https://api.github.com/users/jbaiera","html_url":"https://github.com/jbaiera","followers_url":"https://api.github.com/users/jbaiera/followers","following_url":"https://api.github.com/users/jbaiera/following{/other_user}","gists_url":"https://api.github.com/users/jbaiera/gists{/gist_id}","starred_url":"https://api.github.com/users/jbaiera/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jbaiera/subscriptions","organizations_url":"https://api.github.com/users/jbaiera/orgs","repos_url":"https://api.github.com/users/jbaiera/repos","events_url":"https://api.github.com/users/jbaiera/events{/privacy}","received_events_url":"https://api.github.com/users/jbaiera/received_events","type":"User","site_admin":false},"created_at":"2020-07-06T14:26:17Z","updated_at":"2020-07-06T14:26:17Z","author_association":"CONTRIBUTOR","body":"Closing this since the deadlock is mitigated with #56247. Further discussion about the temporary capture of search threads will take place in #56450.","performed_via_github_app":null}]