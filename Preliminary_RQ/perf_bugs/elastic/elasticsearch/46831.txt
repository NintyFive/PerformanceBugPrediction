{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/46831","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/46831/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/46831/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/46831/events","html_url":"https://github.com/elastic/elasticsearch/issues/46831","id":495283523,"node_id":"MDU6SXNzdWU0OTUyODM1MjM=","number":46831,"title":"Percolator degraded performance 7.2","user":{"login":"fhalde","id":7455872,"node_id":"MDQ6VXNlcjc0NTU4NzI=","avatar_url":"https://avatars2.githubusercontent.com/u/7455872?v=4","gravatar_id":"","url":"https://api.github.com/users/fhalde","html_url":"https://github.com/fhalde","followers_url":"https://api.github.com/users/fhalde/followers","following_url":"https://api.github.com/users/fhalde/following{/other_user}","gists_url":"https://api.github.com/users/fhalde/gists{/gist_id}","starred_url":"https://api.github.com/users/fhalde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fhalde/subscriptions","organizations_url":"https://api.github.com/users/fhalde/orgs","repos_url":"https://api.github.com/users/fhalde/repos","events_url":"https://api.github.com/users/fhalde/events{/privacy}","received_events_url":"https://api.github.com/users/fhalde/received_events","type":"User","site_admin":false},"labels":[{"id":156502592,"node_id":"MDU6TGFiZWwxNTY1MDI1OTI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Percolator","name":":Search/Percolator","color":"0e8a16","default":false,"description":"Reverse search: find queries that match a document"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-09-18T15:00:56Z","updated_at":"2019-09-19T15:19:53Z","closed_at":"2019-09-19T15:19:53Z","author_association":"NONE","active_lock_reason":null,"body":"We are migrating from 1.7 to 7.2 ES\r\n\r\nOur use case of percolator is pretty simple. We have around 120K percolators spread on a 5 node cluster. Percolator docs have meta fields that lets us filter out unnecessary queries that are surely not going to match [1.7 had an explicit support for filtering in the percolator API, In 7.2 we have to make use of bool query]\r\n\r\nThe index has 48 shards. We have allocated 8GB of heap giving the Young Gen 6GB [we saw the usage of Old gen is our previous cluster to be zero]. The machine has 15GB of RAM. We use the G1GC collector [default] and haven't tweaked anything [we made use of the ParNewGC for 1.7]. Number of GC that happen per minute is ~40 and take around 200ms. We do see a XX:MaxGCPauseMillis setting in the JVM which is defaulted to 200ms. Anything to do with this? I've also heard that G1GC doesn't work well with smaller heaps [it's good with >10GB]\r\n\r\nAnyways,\r\n\r\nWhat I want to know is that how does ES optimise queries on its end? And how much does ordering of filters matter? [we did benchmarking with filter ordering and did see a bit of benefit but not much really at peak time]. This is how we do percolation\r\n\r\n\r\n    {\r\n      \"query\": {\r\n        \"bool\": {\r\n          \"filter\": [\r\n             { \"term\": { \"domain\": <> } },\r\n             { \"percolate\": { } }\r\n         ]\r\n       }\r\n     }\r\n    } \r\n\r\nWe keep the domain filtering before in the hopes that ES will filter out unnecessary percolation\r\n\r\nOne other significant change we've done in the ES queries was the below\r\n\r\n    {\r\n       \"query\":  {\r\n              \"bool\": {\r\n                  \"filter\": [\r\n                     { \"term\": { ... } },\r\n                     { \"term\": { ... } },\r\n                     { \"term\": { ... } }\r\n                  ]\r\n               }\r\n         }\r\n    } \r\n\r\n\r\nnow looks like\r\n\r\n    {\r\n       \"query\":  {\r\n              \"bool\": {\r\n                  \"filter\": [\r\n                     { \"bool { \"filter\": { \"term\": { ... } } } },\r\n                     { \"bool { \"filter\": { \"term\": { ... } } } },\r\n                     { \"bool { \"filter\": { \"term\": { ... } } } }\r\n                  ]\r\n               }\r\n         }\r\n    } \r\n\r\n\r\nThis just simplified ES query creation from our home grown logic spec. But does having unnecessary bools affect the way queries are executed by Lucene? I heard ES has done some sort of intermediate representation of queries, so I'm guessing it optimises certain things? What exactly would they be? Most of our queries are either term queries or match queries on keywords/text/numbers/booleans/dates\r\n\r\nOther common settings like memorylock are all in place. This cluster is exclusively for percolation only so no other traffic. Our traffic is around 200 QPS","closed_by":{"login":"gwbrown","id":1522844,"node_id":"MDQ6VXNlcjE1MjI4NDQ=","avatar_url":"https://avatars1.githubusercontent.com/u/1522844?v=4","gravatar_id":"","url":"https://api.github.com/users/gwbrown","html_url":"https://github.com/gwbrown","followers_url":"https://api.github.com/users/gwbrown/followers","following_url":"https://api.github.com/users/gwbrown/following{/other_user}","gists_url":"https://api.github.com/users/gwbrown/gists{/gist_id}","starred_url":"https://api.github.com/users/gwbrown/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gwbrown/subscriptions","organizations_url":"https://api.github.com/users/gwbrown/orgs","repos_url":"https://api.github.com/users/gwbrown/repos","events_url":"https://api.github.com/users/gwbrown/events{/privacy}","received_events_url":"https://api.github.com/users/gwbrown/received_events","type":"User","site_admin":false},"performed_via_github_app":null}