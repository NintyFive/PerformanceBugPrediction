[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/440438116","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-440438116","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":440438116,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDQzODExNg==","user":{"login":"conet","id":11311763,"node_id":"MDQ6VXNlcjExMzExNzYz","avatar_url":"https://avatars2.githubusercontent.com/u/11311763?v=4","gravatar_id":"","url":"https://api.github.com/users/conet","html_url":"https://github.com/conet","followers_url":"https://api.github.com/users/conet/followers","following_url":"https://api.github.com/users/conet/following{/other_user}","gists_url":"https://api.github.com/users/conet/gists{/gist_id}","starred_url":"https://api.github.com/users/conet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/conet/subscriptions","organizations_url":"https://api.github.com/users/conet/orgs","repos_url":"https://api.github.com/users/conet/repos","events_url":"https://api.github.com/users/conet/events{/privacy}","received_events_url":"https://api.github.com/users/conet/received_events","type":"User","site_admin":false},"created_at":"2018-11-20T21:36:46Z","updated_at":"2018-11-20T21:37:23Z","author_association":"NONE","body":"@rjernst I updated the description since I figured out a way to increase the sample dataset hit by the query.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/449545718","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-449545718","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":449545718,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTU0NTcxOA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2018-12-22T05:06:13Z","updated_at":"2018-12-22T05:06:13Z","author_association":"MEMBER","body":"Thanks for the steps @conet. I am now able to reproduce this and have done a detailed investigation.\r\n\r\nYour example has about 200 shards due to the 5 default shards per index and 40 indexes you create. When I first tried running your reproduction steps, I only did 20 copies, and noticed it was about half the time you saw (around 400-500ms). When I went up to 40 shards, I then see about the same times you saw. This led me to hypothesize the issue is scales linearly with the number of shards. To confirm this theory, I reindexed all 40 indexes into a single index, and ran the slow query. The response was immediate: no slowness. So, the overhead of a single deprecation call is not an issue, it is only when many are done within the same request, across different shards on the same node.\r\n\r\nI then ran a profiler while running the slow query a few times. The interesting part of the results were as follows:\r\n```\r\n--- 14030000000 ns (37.35%), 1403 samples\r\n  [ 0] org.apache.lucene.util.CloseableThreadLocal.set\r\n  [ 1] org.elasticsearch.common.util.concurrent.ThreadContext$ContextThreadLocal.set\r\n  [ 2] org.elasticsearch.common.util.concurrent.ThreadContext.addResponseHeader\r\n  [ 3] org.elasticsearch.common.logging.DeprecationLogger.deprecated\r\n  [ 4] org.elasticsearch.common.logging.DeprecationLogger.deprecatedAndMaybeLog\r\n  [ 5] org.elasticsearch.script.JodaCompatibleZonedDateTime.lambda$logDeprecated$0\r\n  [ 6] org.elasticsearch.script.JodaCompatibleZonedDateTime$$Lambda$3213.1313296263.run\r\n  [ 7] java.security.AccessController.doPrivileged\r\n  [ 8] org.elasticsearch.script.JodaCompatibleZonedDateTime.logDeprecated\r\n  [ 9] org.elasticsearch.script.JodaCompatibleZonedDateTime.logDeprecatedMethod\r\n  [10] org.elasticsearch.script.JodaCompatibleZonedDateTime.getMillis\r\n```\r\n\r\nSo the time is spent in the thread local we set to store warning response headers. This actually has nothing to do with scripting exactly, but instead the fact the scripts are run per shard, and the deprecation call happens many times across different ThreadContexts (because each shard's search is run independently). \r\n\r\nAs far as how to avoid this immediately, there are two options:\r\n* reduce the number of shards you search against\r\n* convert your scripts to use the non-deprecated method (which it sounds like you may have already done)\r\n\r\nA long term fix is may be more complicated, and needs some agreement from other developers here. I'm marking this issue for discussion after the holidays. There are a few options to consider:\r\n1. **Don't do anything**: this is only for deprecations, and there is a workaround (and in general there always should be, ie what replaces the deprecated usage). This option isn't great from a user perspective, as upgrading should generally not cause a slowdown just because you were using something that was previously ok to use.\r\n2. **Create tracking across threads for deprecations**: this would most likely be incredibly complex, and I'm unsure how it could work effectively in practice as the ThreadContexts intention is to avoid cross thread barriers.\r\n3. **Use the same logging guard for warning headers**: we currently guard against logging the same deprecation warning multiple times by using a unique key per deprecation site, and keeping track of the last 128 unique deprecations on the node. We made the decision at that time to continue writing all warning headers all the time. If deprecations can be truncated in the log, why not also in warning headers?\r\n\r\nMy vote is for 3, as I think this is the simplest to implement.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/449588295","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-449588295","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":449588295,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTU4ODI5NQ==","user":{"login":"conet","id":11311763,"node_id":"MDQ6VXNlcjExMzExNzYz","avatar_url":"https://avatars2.githubusercontent.com/u/11311763?v=4","gravatar_id":"","url":"https://api.github.com/users/conet","html_url":"https://github.com/conet","followers_url":"https://api.github.com/users/conet/followers","following_url":"https://api.github.com/users/conet/following{/other_user}","gists_url":"https://api.github.com/users/conet/gists{/gist_id}","starred_url":"https://api.github.com/users/conet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/conet/subscriptions","organizations_url":"https://api.github.com/users/conet/orgs","repos_url":"https://api.github.com/users/conet/repos","events_url":"https://api.github.com/users/conet/events{/privacy}","received_events_url":"https://api.github.com/users/conet/received_events","type":"User","site_admin":false},"created_at":"2018-12-22T18:06:52Z","updated_at":"2018-12-22T18:06:52Z","author_association":"NONE","body":"Thanks for the thorough investigation, I agree that 3 sounds like the best solution.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451303138","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-451303138","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":451303138,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTMwMzEzOA==","user":{"login":"pcsanwald","id":163306,"node_id":"MDQ6VXNlcjE2MzMwNg==","avatar_url":"https://avatars1.githubusercontent.com/u/163306?v=4","gravatar_id":"","url":"https://api.github.com/users/pcsanwald","html_url":"https://github.com/pcsanwald","followers_url":"https://api.github.com/users/pcsanwald/followers","following_url":"https://api.github.com/users/pcsanwald/following{/other_user}","gists_url":"https://api.github.com/users/pcsanwald/gists{/gist_id}","starred_url":"https://api.github.com/users/pcsanwald/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pcsanwald/subscriptions","organizations_url":"https://api.github.com/users/pcsanwald/orgs","repos_url":"https://api.github.com/users/pcsanwald/repos","events_url":"https://api.github.com/users/pcsanwald/events{/privacy}","received_events_url":"https://api.github.com/users/pcsanwald/received_events","type":"User","site_admin":false},"created_at":"2019-01-03T22:50:55Z","updated_at":"2019-01-03T22:50:55Z","author_association":"CONTRIBUTOR","body":"@rjernst we discussed this in FixIt thursday, and there was general agreement that 3 seems like the right approach. obv up to you if you wanna leave it `discuss` or remove the label.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/451383832","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-451383832","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":451383832,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MTM4MzgzMg==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2019-01-04T08:35:22Z","updated_at":"2019-01-04T08:35:22Z","author_association":"MEMBER","body":"I'm not sure if suppressing warnings is a good idea here. When we suppress deprecation warnings in logs I think it's ok because it's the same consumer (the log file) that would get all the warnings. If we suppress the warning headers int he same way then only 1 in every 128 callers will get any given deprecation warning meaning some clients may never receive the warnings. This seems like it might turn the deprecations warnings into a lottery making it hard to know that you are not hitting any deprecations when parsing a response because you may have hit some suppressed deprecation site.\r\n\r\nIf we are going to suppress deprecations warnings I think we should only do it within the same request so every request that hits a deprecation site is guaranteed to emit at least one of those deprecation warning headers, though I fear this will probably not be enough to solve the original performance issue","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452499782","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-452499782","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":452499782,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MjQ5OTc4Mg==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2019-01-08T23:45:41Z","updated_at":"2019-01-08T23:45:41Z","author_association":"MEMBER","body":"@colings86 IMO the deprecation log is the \"official\" source of truth for deprecations that occurred. Deprecations may not occur on a request: for example, they could be when reading a setting on startup. In your example, the deprecation log would already have an entry. I really wonder if deprecation warnings should be removed altogether from responses.\r\n\r\n@pcsanwald Given @colings86`s concerns, I think this should be discussed again.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/452629722","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-452629722","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":452629722,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1MjYyOTcyMg==","user":{"login":"colings86","id":236731,"node_id":"MDQ6VXNlcjIzNjczMQ==","avatar_url":"https://avatars0.githubusercontent.com/u/236731?v=4","gravatar_id":"","url":"https://api.github.com/users/colings86","html_url":"https://github.com/colings86","followers_url":"https://api.github.com/users/colings86/followers","following_url":"https://api.github.com/users/colings86/following{/other_user}","gists_url":"https://api.github.com/users/colings86/gists{/gist_id}","starred_url":"https://api.github.com/users/colings86/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colings86/subscriptions","organizations_url":"https://api.github.com/users/colings86/orgs","repos_url":"https://api.github.com/users/colings86/repos","events_url":"https://api.github.com/users/colings86/events{/privacy}","received_events_url":"https://api.github.com/users/colings86/received_events","type":"User","site_admin":false},"created_at":"2019-01-09T09:29:44Z","updated_at":"2019-01-09T09:29:58Z","author_association":"MEMBER","body":"> I really wonder if deprecation warnings should be removed altogether from responses.\r\n\r\nI think the warnings in responses are useful because the caller is often not the administrator and so often will not have access to the deprecation logs. Having an indication in the response means the caller can be made aware they are using a deprecated feature and have the chance to rectify things without the admin needing to identify and alert each user themselves (though they may still need to do this if some users ignore the warnings).\r\n\r\nI agree that it would be good to discuss this again though","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/455419860","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-455419860","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":455419860,"node_id":"MDEyOklzc3VlQ29tbWVudDQ1NTQxOTg2MA==","user":{"login":"jasontedor","id":4744941,"node_id":"MDQ6VXNlcjQ3NDQ5NDE=","avatar_url":"https://avatars3.githubusercontent.com/u/4744941?v=4","gravatar_id":"","url":"https://api.github.com/users/jasontedor","html_url":"https://github.com/jasontedor","followers_url":"https://api.github.com/users/jasontedor/followers","following_url":"https://api.github.com/users/jasontedor/following{/other_user}","gists_url":"https://api.github.com/users/jasontedor/gists{/gist_id}","starred_url":"https://api.github.com/users/jasontedor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasontedor/subscriptions","organizations_url":"https://api.github.com/users/jasontedor/orgs","repos_url":"https://api.github.com/users/jasontedor/repos","events_url":"https://api.github.com/users/jasontedor/events{/privacy}","received_events_url":"https://api.github.com/users/jasontedor/received_events","type":"User","site_admin":false},"created_at":"2019-01-18T03:58:08Z","updated_at":"2019-01-18T03:58:08Z","author_association":"MEMBER","body":"We discussed this in our team discussion meeting today. Because responses are ephemeral in nature, it seems that the warning headers should stay on each response. What we do in the log messages is okay because the log files are generally durable. Instead of addressing this by circumventing the issue, we want to go after the performance problems. We investigated some of them during our meeting and found room for improvement in a few areas. I opened #37590 and #37597 for these. What remains is half explained by the de-duplication (#37530). Let's attack that now.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/614883938","html_url":"https://github.com/elastic/elasticsearch/issues/35754#issuecomment-614883938","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","id":614883938,"node_id":"MDEyOklzc3VlQ29tbWVudDYxNDg4MzkzOA==","user":{"login":"stu-elastic","id":24232742,"node_id":"MDQ6VXNlcjI0MjMyNzQy","avatar_url":"https://avatars0.githubusercontent.com/u/24232742?v=4","gravatar_id":"","url":"https://api.github.com/users/stu-elastic","html_url":"https://github.com/stu-elastic","followers_url":"https://api.github.com/users/stu-elastic/followers","following_url":"https://api.github.com/users/stu-elastic/following{/other_user}","gists_url":"https://api.github.com/users/stu-elastic/gists{/gist_id}","starred_url":"https://api.github.com/users/stu-elastic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stu-elastic/subscriptions","organizations_url":"https://api.github.com/users/stu-elastic/orgs","repos_url":"https://api.github.com/users/stu-elastic/repos","events_url":"https://api.github.com/users/stu-elastic/events{/privacy}","received_events_url":"https://api.github.com/users/stu-elastic/received_events","type":"User","site_admin":false},"created_at":"2020-04-16T20:41:51Z","updated_at":"2020-04-16T20:41:51Z","author_association":"CONTRIBUTOR","body":"With the changes mentioned by @jasontedor and as @ebadyano notes in a [comment](https://github.com/elastic/elasticsearch/issues/37530#issuecomment-554357794) the performance hit has reduced to a 4% hit.\r\n\r\nSince Joda removal is planned for version 8 and the performance improvements landed in 7, we recommend moving to the latest 7 to avoid this performance trap.","performed_via_github_app":null}]