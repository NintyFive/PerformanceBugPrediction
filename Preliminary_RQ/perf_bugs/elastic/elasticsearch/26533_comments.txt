[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/327789043","html_url":"https://github.com/elastic/elasticsearch/issues/26533#issuecomment-327789043","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26533","id":327789043,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNzc4OTA0Mw==","user":{"login":"vikrantrana1996","id":29449980,"node_id":"MDQ6VXNlcjI5NDQ5OTgw","avatar_url":"https://avatars1.githubusercontent.com/u/29449980?v=4","gravatar_id":"","url":"https://api.github.com/users/vikrantrana1996","html_url":"https://github.com/vikrantrana1996","followers_url":"https://api.github.com/users/vikrantrana1996/followers","following_url":"https://api.github.com/users/vikrantrana1996/following{/other_user}","gists_url":"https://api.github.com/users/vikrantrana1996/gists{/gist_id}","starred_url":"https://api.github.com/users/vikrantrana1996/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vikrantrana1996/subscriptions","organizations_url":"https://api.github.com/users/vikrantrana1996/orgs","repos_url":"https://api.github.com/users/vikrantrana1996/repos","events_url":"https://api.github.com/users/vikrantrana1996/events{/privacy}","received_events_url":"https://api.github.com/users/vikrantrana1996/received_events","type":"User","site_admin":false},"created_at":"2017-09-07T12:49:11Z","updated_at":"2017-09-07T12:49:11Z","author_association":"NONE","body":"+1","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/329787820","html_url":"https://github.com/elastic/elasticsearch/issues/26533#issuecomment-329787820","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26533","id":329787820,"node_id":"MDEyOklzc3VlQ29tbWVudDMyOTc4NzgyMA==","user":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"created_at":"2017-09-15T13:48:02Z","updated_at":"2017-09-15T13:48:02Z","author_association":"CONTRIBUTOR","body":"the issues here is that we don't have a timeout on the connection for bulk which I think it ok for bulk to not timeout. if you want to make sure your bulk requests do actually time out you can do that by adding a plugin to the `TransportClient`. The plugin must implement `NetworkPlugin` and there you can wrap an async sender that is basically an interceptor of the request before it gets executed. You can there take advantage of the `TransportRequestOptions` that allow you to specify a timeout conditionally for bulk. I know this is not perfect but given that we fade out transport client and the rest client has a global timeout I think we are generally ok. if you need help adding this workaround I am happy to help, but lets move it to the discuss forum. ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/495678986","html_url":"https://github.com/elastic/elasticsearch/issues/26533#issuecomment-495678986","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/26533","id":495678986,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NTY3ODk4Ng==","user":{"login":"zhaomoran","id":19631523,"node_id":"MDQ6VXNlcjE5NjMxNTIz","avatar_url":"https://avatars2.githubusercontent.com/u/19631523?v=4","gravatar_id":"","url":"https://api.github.com/users/zhaomoran","html_url":"https://github.com/zhaomoran","followers_url":"https://api.github.com/users/zhaomoran/followers","following_url":"https://api.github.com/users/zhaomoran/following{/other_user}","gists_url":"https://api.github.com/users/zhaomoran/gists{/gist_id}","starred_url":"https://api.github.com/users/zhaomoran/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhaomoran/subscriptions","organizations_url":"https://api.github.com/users/zhaomoran/orgs","repos_url":"https://api.github.com/users/zhaomoran/repos","events_url":"https://api.github.com/users/zhaomoran/events{/privacy}","received_events_url":"https://api.github.com/users/zhaomoran/received_events","type":"User","site_admin":false},"created_at":"2019-05-24T15:31:52Z","updated_at":"2019-05-24T15:31:52Z","author_association":"NONE","body":"6.3.1 high rest client also had the same problem.Neither onResponse nor onFaiure  called by high rest client bulk async requestã€‚\r\n\r\nThread dump Looks like as follows:\r\n```\r\n\"elasticsearch[scheduler][T#1]\" #81 daemon prio=5 os_prio=0 tid=0x00007f6b459eb000 nid=0x83 waiting on condition [0x00007f6a1c7fb000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n\tat sun.misc.Unsafe.park(Native Method)\r\n\t- parking to wait for  <0x000000068d0594e8> (a java.util.concurrent.CountDownLatch$Sync)\r\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\r\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\r\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\r\n\tat java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)\r\n\tat org.elasticsearch.action.bulk.BulkRequestHandler.execute(BulkRequestHandler.java:86)\r\n\tat org.elasticsearch.action.bulk.BulkProcessor.execute(BulkProcessor.java:339)\r\n\tat org.elasticsearch.action.bulk.BulkProcessor.access$300(BulkProcessor.java:51)\r\n\tat org.elasticsearch.action.bulk.BulkProcessor$Flush.run(BulkProcessor.java:373)\r\n\t- locked <0x00000006c01f83b8> (a org.elasticsearch.action.bulk.BulkProcessor)\r\n\tat org.elasticsearch.threadpool.Scheduler$ReschedulingRunnable.doRun(Scheduler.java:182)\r\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n\r\n   Locked ownable synchronizers:\r\n\t- <0x00000006c0041380> (a java.util.concurrent.ThreadPoolExecutor$Worker)\r\n```","performed_via_github_app":null}]