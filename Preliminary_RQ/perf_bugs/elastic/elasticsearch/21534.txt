{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/21534","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21534/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21534/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21534/events","html_url":"https://github.com/elastic/elasticsearch/issues/21534","id":189098541,"node_id":"MDU6SXNzdWUxODkwOTg1NDE=","number":21534,"title":"Breaking FilePermission changes in JDK 9 b140+ and performance impact","user":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"labels":[{"id":144797810,"node_id":"MDU6TGFiZWwxNDQ3OTc4MTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Core","name":":Core/Infra/Core","color":"0e8a16","default":false,"description":"Core issues without another label"},{"id":92913658,"node_id":"MDU6TGFiZWw5MjkxMzY1OA==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/blocker","name":"blocker","color":"e11d21","default":false,"description":null},{"id":675650443,"node_id":"MDU6TGFiZWw2NzU2NTA0NDM=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/v6.0.0-beta2","name":"v6.0.0-beta2","color":"dddddd","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":18,"created_at":"2016-11-14T12:17:53Z","updated_at":"2017-08-24T12:52:50Z","closed_at":"2017-08-22T01:53:33Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"A new change introduced in JDK 9 b140 removes pathname canonicalization when FilePermission objects are constructed. From the [official announcement](http://mail.openjdk.java.net/pipermail/jdk9-dev/2016-October/005062.html):\r\n\r\n> We do this mainly for performance enhancement so that there is no need to consult the file system every time a FilePermisson is created.\r\n> \r\n> This means FilePermissions on the following pathnames will be unrelated:\r\n> \r\n> 1. On \"./file\" and \"/path/to/current/directory/file\".\r\n> 2. On symlink and its target.\r\n> 3. On \"C:\\Program Files\" and \"C:\\PROGRA~1\" on Windows.\r\n> \r\n> and any other name change that a canonicalization can make.\r\n\r\nThis possibly breaks file permissions for Elasticsearch. A concrete example is the default temp directory `java.io.tmpdir` on my Mac under `/var/...` which is symlinked to `/private/var/...`, which breaks running the tests from the IDE. Running them with Gradle also breaks as `java.io.tmpdir` is specified as `./temp` by the test task.\r\n\r\nThe JDK 9 change implements a compatibility layer which covers permissions defined in policy files:\r\n\r\n> That said, this changeset also adds a compatibility layer at the permission check level to translate between an absolute pathname and a relative one. So, even if FilePermission on a relative path does not imply one on an absolute path pointing to the same file, when you grant a permission in a relative pathname, you are still allowed to read the file with an absolute pathname.\r\n> \r\n> This compatibility layer covers these cases:\r\n> \r\n> 1. When a permission is granted in a policy file.\r\n> \r\n> 2. When a permission is automatically granted because it's on a path where the class files are stored.\r\n> \r\n> 3. When a permission is requested in a doPrivileged-with-permissions call\r\n> \r\n> We do hope that whenever you want to access a file, the permission you granted in a policy would be better to match the pathname you use to access the file. For example, if you plan to call 'new FileInputStream(\"/home/me/x\")', please also grant FilePermission on \"/home/me/x\" instead of just \"x\".\r\n> \r\n> Please note the compatibility layer does NOT cover:\r\n> \r\n> 1. A user-defined security manager or policy implementation, because we cannot control it. (Not always, but you need to test).\r\n> \r\n> 2. The translation between a symlink and its target, because it needs to read the file system.\r\n> \r\n> 3. The translation between a Windows long file name and its DOS-8.3 shorted name, because it needs to read the file system.\r\n> \r\n> Also, \"/-\" does not imply \"./file\" even if it's a Unix. Please use \"<<ALL FILES>>\" instead.\r\n\r\nElasticsearch does not only rely on policy files though (e.g. adding permissions for temp directory is done programmatically).\r\n\r\nAlternatively the JDK 9 also introduces a new system property that brings back the old behavior:\r\n\r\n> Finally, if you cannot live with this new behavior and like the pre-jdk9 style, you can always set the system property jdk.io.permissionsUseCanonicalPath back to true.\r\n\r\nI've tried that one and everything runs again without any modifications. I wonder if we should treat this as a temporary fix for now. As a more permanent fix I've tried patching the ES security code so that it resolves symlinks / resolves relative to absolute paths before add file permissions by replacing the last two lines in `org.elasticsearch.bootstrap.security.Security#addPath(...)`:\r\n\r\n```\r\n            policy.add(new FilePermission(path.toString(), permissions));\r\n            policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + \"-\", permissions));\r\n```\r\nwith\r\n```\r\n        Path realPath;\r\n        try {\r\n            realPath = path.normalize().toRealPath();\r\n        } catch (IOException e) {\r\n            throw new IllegalStateException(\"Unable to convert to real path '\" + configurationName + \"' (\" + path + \")\", e);\r\n        }\r\n        if (path.toString().equals(realPath.toString()) == false) {\r\n            System.out.println(\"NEED REALPATH \" + path + \" real: \" + realPath);\r\n            policy.add(new FilePermission(realPath.toString(), permissions));\r\n            policy.add(new FilePermission(realPath.toString() + path.getFileSystem().getSeparator() + \"-\", permissions));\r\n        } else {\r\n            policy.add(new FilePermission(path.toString(), permissions));\r\n            policy.add(new FilePermission(path.toString() + path.getFileSystem().getSeparator() + \"-\", permissions));\r\n        }\r\n```\r\n\r\nI observed however a big performance hit with this compared to JDK 8 (which goes as far as to make some tests fail due to timeouts that are too low):\r\n\r\nTest that I've run (with fixed seed):\r\n\r\n- `org.elasticsearch.cluster.allocation.ClusterRerouteIT#testDelayWithALargeAmountOfShards`\r\n- JDK8 b111 with and without the patch above: ~7 seconds\r\n- JDK9 b140/b144 with and without the patch above and with `-Djdk.io.permissionsUseCanonicalPath=true` (simulating JDK8 behavior): ~7 seconds\r\n- JDK9 b140/b144 with the patch above and the new behavior `-Djdk.io.permissionsUseCanonicalPath=false` which corresponds to not setting the system property at all: ~32 seconds\r\n\r\nI've looked at the runs using a profiler but couldn't notice anything beside the obvious that extra time is spent in `java.security.Permissions#implies` when using the new JDK9 behavior. Thoughts?","closed_by":{"login":"ywelsch","id":3718355,"node_id":"MDQ6VXNlcjM3MTgzNTU=","avatar_url":"https://avatars3.githubusercontent.com/u/3718355?v=4","gravatar_id":"","url":"https://api.github.com/users/ywelsch","html_url":"https://github.com/ywelsch","followers_url":"https://api.github.com/users/ywelsch/followers","following_url":"https://api.github.com/users/ywelsch/following{/other_user}","gists_url":"https://api.github.com/users/ywelsch/gists{/gist_id}","starred_url":"https://api.github.com/users/ywelsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ywelsch/subscriptions","organizations_url":"https://api.github.com/users/ywelsch/orgs","repos_url":"https://api.github.com/users/ywelsch/repos","events_url":"https://api.github.com/users/ywelsch/events{/privacy}","received_events_url":"https://api.github.com/users/ywelsch/received_events","type":"User","site_admin":false},"performed_via_github_app":null}