{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/13964","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13964/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13964/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/13964/events","html_url":"https://github.com/elastic/elasticsearch/issues/13964","id":109990449,"node_id":"MDU6SXNzdWUxMDk5OTA0NDk=","number":13964,"title":"Elasticsearch 2.0 beta testing: Performance difference between similar aggs vs. query","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"labels":[{"id":141141324,"node_id":"MDU6TGFiZWwxNDExNDEzMjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Aggregations","name":":Analytics/Aggregations","color":"0e8a16","default":false,"description":"Aggregations"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-10-06T11:42:59Z","updated_at":"2017-05-05T14:35:49Z","closed_at":"2017-05-05T14:35:49Z","author_association":"MEMBER","active_lock_reason":null,"body":"TLDR: Searches with sorting on a field to get the min/max value of a dataset appears to be a bit faster than aggregating using `min/max` aggs. Maybe just a flaw in my test, feel free to point it out!\n\nWhile testing 2.0, I did a simple test. Using `makelogs` to index 2 million documents\n\n``` bash\nmakelogs -c 2m -d 10 --verbose --omit relatedContent\n```\n\nNote: You need to install the latest makelogs if you want to use it: `npm install -g makelogs@beta`\n\nNow I executed the following two queries, thinking that they did not have any difference in execution speed\n\n``` json\nGET logstash-*/_search\n{\n  \"size\": 1, \n  \"sort\": [\n    {\n      \"@timestamp\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\nGET logstash-*/_search?search_type=count\n{\n  \"aggs\": {\n    \"foo\": {\n      \"max\": {\n        \"field\": \"@timestamp\"\n      }\n    }\n  }\n}\n```\n\nHowever, the search seems to be a bit faster. I gathered data by running this and taking the `took` time from the responses, including one warmup round and no indexing happening:\n\n`````` bash\nfor i in {1..500} ; do curl -s 'localhost:9200/logstash-*/_search' -d '{ \"size\": 1, \"sort\": [ { \"@timestamp\": { \"order\": \"desc\" } } ] }' | underscore extract 'took'   ; done | tee -a took-search.txt\nfor i in {1..500} ; do curl -s 'localhost:9200/logstash-*/_search?search_type=count' -d '{ \"aggs\": { \"foo\": { \"max\": { \"field\": \"@timestamp\" } } } }' | underscore extract 'took'   ; done | tee -a took-aggs.txt```\n\nThose are the results\n\n```bash\n$ cat ../took-search.txt| st --complete\nN     min   q1    median  q3  max   sum     mean    stddev    stderr\n500   18    24.5  26      28  120     13524   27.048  6.50156     0.290758\n\n$ cat ../took-aggs.txt| st --complete\nN     min   q1    median  q3  max   sum     mean    stddev    stderr\n500   26    33    35      37  57    17643   35.286  3.77528   0.168835\n\n$ cat ../took-search.txt| ./data_hacks/histogram.py -m 18 -x 50\n# NumSamples = 500; Min = 18.00; Max = 50.00\n#2 values outside of min/max\n# Mean = 27.048000; Variance = 42.185696; SD = 6.495052; Median 26.000000\n# each ∎ represents a count of 2\n   18.0000 -    21.2000 [    12]: ∎∎∎∎∎∎\n   21.2000 -    24.4000 [   113]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   24.4000 -    27.6000 [   217]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   27.6000 -    30.8000 [    99]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   30.8000 -    34.0000 [    38]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   34.0000 -    37.2000 [     8]: ∎∎∎∎\n   37.2000 -    40.4000 [     3]: ∎\n   40.4000 -    43.6000 [     5]: ∎∎\n   43.6000 -    46.8000 [     3]: ∎\n   46.8000 -    50.0000 [     0]:\n\n$ cat ../took-aggs.txt| ./data_hacks/histogram.py -m 18 -x 50\n# NumSamples = 500; Min = 18.00; Max = 50.00\n#4 values outside of min/max\n# Mean = 35.286000; Variance = 14.224204; SD = 3.771499; Median 35.000000\n# each ∎ represents a count of 2\n   18.0000 -    21.2000 [     0]:\n   21.2000 -    24.4000 [     0]:\n   24.4000 -    27.6000 [     6]: ∎∎∎\n   27.6000 -    30.8000 [    27]: ∎∎∎∎∎∎∎∎∎∎∎∎∎\n   30.8000 -    34.0000 [   175]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   34.0000 -    37.2000 [   188]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   37.2000 -    40.4000 [    75]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎\n   40.4000 -    43.6000 [    16]: ∎∎∎∎∎∎∎∎\n   43.6000 -    46.8000 [     4]: ∎∎\n   46.8000 -    50.0000 [     5]: ∎∎\n\n# Calculate the 95% time\n$ cat ../took-search.txt| ./data_hacks/ninety_five_percent.py\n34   \n$ cat ../took-aggs.txt| ./data_hacks/ninety_five_percent.py\n41\n``````\n\nTools used here: [st](https://github.com/nferraz/st) and [data_hacks](https://github.com/bitly/data_hacks)\n\nThe performance difference of those two queries is actually bigger on 1.7.\n\nIf there are flaws in my measurements, please close immediately, cant rule it out.\n\nAll of these tests happened on my MBP on osx.\n","closed_by":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"performed_via_github_app":null}