{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/23709","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23709/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23709/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/23709/events","html_url":"https://github.com/elastic/elasticsearch/issues/23709","id":216293817,"node_id":"MDU6SXNzdWUyMTYyOTM4MTc=","number":23709,"title":"Geo operations in ES 5.1.2 are slower than older ES","user":{"login":"imidya","id":1527203,"node_id":"MDQ6VXNlcjE1MjcyMDM=","avatar_url":"https://avatars1.githubusercontent.com/u/1527203?v=4","gravatar_id":"","url":"https://api.github.com/users/imidya","html_url":"https://github.com/imidya","followers_url":"https://api.github.com/users/imidya/followers","following_url":"https://api.github.com/users/imidya/following{/other_user}","gists_url":"https://api.github.com/users/imidya/gists{/gist_id}","starred_url":"https://api.github.com/users/imidya/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imidya/subscriptions","organizations_url":"https://api.github.com/users/imidya/orgs","repos_url":"https://api.github.com/users/imidya/repos","events_url":"https://api.github.com/users/imidya/events{/privacy}","received_events_url":"https://api.github.com/users/imidya/received_events","type":"User","site_admin":false},"labels":[{"id":141079527,"node_id":"MDU6TGFiZWwxNDEwNzk1Mjc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Analytics/Geo","name":":Analytics/Geo","color":"0e8a16","default":false,"description":"Indexing, search aggregations of geo points and shapes"},{"id":156502592,"node_id":"MDU6TGFiZWwxNTY1MDI1OTI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Percolator","name":":Search/Percolator","color":"0e8a16","default":false,"description":"Reverse search: find queries that match a document"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-03-23T04:29:05Z","updated_at":"2018-09-10T05:52:59Z","closed_at":"2018-09-10T05:52:58Z","author_association":"NONE","active_lock_reason":null,"body":"**Elasticsearch version**: 5.1.2\r\n\r\n**Plugins installed**: None\r\n\r\n**JVM version**: Oracle JDK 1.8.0_121, JVM build 25.121-b13 64-Bit\r\n\r\n**OS version**: Ubuntu 14.04.1 LTS\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nI want to implement a function which is giving a geo point (latitude and longitude) and returning matched administrative districts which the geo point is inside the district.\r\n\r\nIn ES 1.4, I implement this function through percolator. I store percolators with GeoShape datatype for each district. Get the execution time of percolate query is 10ms. When I upgrade ES to 5.1.2,  the execution with same datatype takes more than 400ms. I'm trying to solve this problem and find a document in ES official website, it says that only Terms Query percolater will be keep in memory and other percolators will be placed in disk or memory decided by ES. Therefore, I convert GeoShape to GeoHash and use Terms Query[1] instead of percolate query, this action reduces the execution time from 400ms to 50ms. But the execution time is still five times than ES 1.4.\r\n\r\nAnother solution I tried is indexing GeoShape into an index and quering with GeoShape Query. And I found the execution time of geo point is matched by large GeoShape document is much longer than small GeoShape document. The execution time are 7ms and 70ms. But in ES 1.4, the execution time is always 20ms whether geo point macthed by samll document or large doucment. \r\n\r\n\r\nThe problems are:\r\n\r\n1. Percolator in ES 5.1.2 is much slower than ES 1.4 when we percolate a geo point with many GeoShape queries.\r\n2. There are clear difference of execution time between geo point matched by small document and large document.\r\n\r\n| ES version    | Implementation                                                        | Time  |\r\n| ------------- |:---------------------------------------------------------------------:| -----:|\r\n|ES 1.4         |GeoShape Query through percolator                                      |20ms   |\r\n|ES 5.1.2       |GeoShape Query through percolator                                      |400ms  |\r\n|ES 5.1.2       |Terms Query with GeoHash through percolator                            |50ms   |\r\n|ES 5.1.2       |Index GeoShape and GeoShape Query (Geo point matched by small document)|<10ms   |\r\n|ES 5.1.2       |Index GeoShape and GeoShape Query (Geo point matched by large document)|70ms   |\r\n\r\n\r\n[1] Percolator in Terms Query with GeoHash\r\n\r\n```\r\n{\r\n\t\"query\": {\r\n\t\t\"bool\": {\r\n\t\t\t\"filter\": {\r\n\t\t\t\t\"terms\": {\r\n\t\t\t\t\t\"hash\": [\r\n\t\t\t\t\t\t\"wsjkqzbzc\",\r\n\t\t\t\t\t\t\"wsjkqzbzd\",\r\n\t\t\t\t\t\t\"wsjkqzbze\",\r\n\t\t\t\t\t\t\"wsjkqzbzf\",\r\n\t\t\t\t\t\t\"wsjkqzbzg\",\r\n                                                 â€¦\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n**Steps to reproduce**:\r\n\r\nYou can download percolators and geojson data [HERE](https://github.com/imidya/kr_geojson)\r\n\r\n- ES 1.4 (Percolator)\r\n\r\n 1. Setup ES 1.4\r\n 2. Put a mapping and create a percolator index\r\n \r\n```\r\nPUT kr-adminarea\r\n{\r\n\t\"mappings\": {\r\n\t\t\"geojson\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"location\": {\r\n\t\t\t\t\t\"type\": \"geo_shape\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\".percolator\": {\r\n\t\t\t\"properties\": {\r\n\t\t\t\t\"query\": {\r\n\t\t\t\t\t\"type\": \"object\",\r\n\t\t\t\t\t\"enabled\": false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n \r\n 3. Index percolators into index.\r\n\r\n```\r\nPOST kr-adminarea/.percolator/kr11\r\n{\r\n\t\"query\": {\r\n\t\t\"bool\": {\r\n\t\t\t\"filter\": {\r\n\t\t\t\t\"geo_shape\": {\r\n\t\t\t\t\t\"location\": {\r\n\t\t\t\t\t\t\"shape\": {\r\n\t\t\t\t\t\t\t\"coordinates\": [\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t\t121.631747299,\r\n\t\t\t\t\t\t\t\t\t\t24.36943161500005\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t.....\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} \r\n```\r\n \r\n 4. Performance test.\r\n\r\n```\r\nGET kr-adminarea/geojson/_percolate\r\n{\r\n  \"doc\": {\r\n    \"location\": {\r\n      \"type\": \"point\",\r\n      \"coordinates\": [126.671228, 34.553791]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\nGET kr-adminarea/geojson/_percolate\r\n{\r\n  \"doc\": {\r\n    \"location\": {\r\n      \"type\": \"point\",\r\n      \"coordinates\": [127.062141, 37.590843]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n \r\n\r\n- ES 5.1.2 (Percolate Query)\r\n\r\n1. Setup ES 5.1.2\r\n2. Put a mapping and create a percolator index\r\n \r\n```\r\nPUT kr-adminarea\r\n{\r\n  \"mappings\": {\r\n    \"geojson\": {\r\n      \"properties\": {\r\n        \"location\": {\r\n          \"type\": \"geo_shape\"\r\n        }\r\n      }\r\n    },\r\n    \"queries\": {\r\n      \"properties\": {\r\n        \"query\": {\r\n          \"type\": \"percolator\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n} \r\n```\r\n\r\n3. Index percolators which in \"percolaters\" folder into index.\r\n\r\n```\r\nPOST kr-adminarea/queries/kr1\r\n{\r\n\t\"query\": {\r\n\t\t\"bool\": {\r\n\t\t\t\"filter\": {\r\n\t\t\t\t\"geo_shape\": {\r\n\t\t\t\t\t\"location\": {\r\n\t\t\t\t\t\t\"shape\": {\r\n\t\t\t\t\t\t\t\"coordinates\": [\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t\t121.631747299,\r\n\t\t\t\t\t\t\t\t\t\t24.36943161500005\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t.....\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} \r\n```\r\n\r\n4. Performance test.\r\n\r\n```\r\nGET kr-adminarea/_search\r\n{\r\n\t\"query\": {\r\n\t\t\"percolate\": {\r\n\t\t\t\"field\": \"query\",\r\n\t\t\t\"document_type\": \"geojson\",\r\n\t\t\t\"document\": {\r\n\t\t\t\t\"location\": {\r\n\t\t\t\t\t\"coordinates\": [127.062141, 37.590843],\r\n                                        \"type\": \"point\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n \r\n \r\n- ES 5.1.2 (GeoShape Index)\r\n\r\n1. Setup ES 5.1.2\r\n2. Put a mapping and create an index\r\n \r\n```\r\nPUT kr-adminarea\r\n{\r\n  \"mappings\": {\r\n    \"geojson\": {\r\n      \"properties\": {\r\n        \"location\": {\r\n          \"type\": \"geo_shape\",\r\n          \"tree\": \"quadtree\",\r\n          \"precision\": \"50m\"\r\n        }\r\n      }\r\n    }\r\n} \r\n```\r\n\r\n3. Index GeoShape data in \"geo_shape\" folder.\r\n\r\n```\r\nPOST kr-adminarea/geojson/kr1\r\n{\r\n\t\"location\": {\r\n\t\t\"shape\": {\r\n\t\t\t\"coordinates\": [\r\n\t\t\t\t[\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t121.631747299,\r\n\t\t\t\t\t\t24.36943161500005\r\n\t\t\t\t\t]\r\n\t\t\t\t\t.....\r\n\t\t\t\t]\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n} \r\n```\r\n\r\n4. Performance test. (Matched by small document, geo point: 127.062141, 37.590843)\r\n\r\n```\r\nGET kr-adminarea/geojson/_search\r\n{\r\n   \"_source\": false,\r\n   \"query\": {\r\n      \"bool\": {\r\n         \"filter\": {\r\n            \"geo_shape\": {\r\n               \"location\": {\r\n                  \"shape\": {\r\n                     \"coordinates\": [127.062141, 37.590843],\r\n                     \"type\": \"point\",\r\n                     \"relation\": \"interacts\"\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n5. Performance test. (Matched by large document, geo point: 126.671228, 34.553791)\r\n\r\n```\r\nGET kr-adminarea/geojson/_search\r\n{\r\n   \"_source\": false,\r\n   \"query\": {\r\n      \"bool\": {\r\n         \"filter\": {\r\n            \"geo_shape\": {\r\n               \"location\": {\r\n                  \"shape\": {\r\n                     \"coordinates\": [126.671228, 34.553791],\r\n                     \"type\": \"point\",\r\n                     \"relation\": \"interacts\"\r\n                  }\r\n               }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n","closed_by":{"login":"martijnvg","id":580421,"node_id":"MDQ6VXNlcjU4MDQyMQ==","avatar_url":"https://avatars3.githubusercontent.com/u/580421?v=4","gravatar_id":"","url":"https://api.github.com/users/martijnvg","html_url":"https://github.com/martijnvg","followers_url":"https://api.github.com/users/martijnvg/followers","following_url":"https://api.github.com/users/martijnvg/following{/other_user}","gists_url":"https://api.github.com/users/martijnvg/gists{/gist_id}","starred_url":"https://api.github.com/users/martijnvg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martijnvg/subscriptions","organizations_url":"https://api.github.com/users/martijnvg/orgs","repos_url":"https://api.github.com/users/martijnvg/repos","events_url":"https://api.github.com/users/martijnvg/events{/privacy}","received_events_url":"https://api.github.com/users/martijnvg/received_events","type":"User","site_admin":false},"performed_via_github_app":null}