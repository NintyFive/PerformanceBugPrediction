{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/47599","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47599/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47599/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/47599/events","html_url":"https://github.com/elastic/elasticsearch/issues/47599","id":502785266,"node_id":"MDU6SXNzdWU1MDI3ODUyNjY=","number":47599,"title":"BulkProcessor can deadlock when bulk requests fail","user":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"labels":[{"id":493198109,"node_id":"MDU6TGFiZWw0OTMxOTgxMDk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Java%20High%20Level%20REST%20Client","name":":Core/Features/Java High Level REST Client","color":"0e8a16","default":false,"description":"Expressive Java Client for Elasticsearch"},{"id":912845062,"node_id":"MDU6TGFiZWw5MTI4NDUwNjI=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Watcher","name":":Core/Features/Watcher","color":"0e8a16","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-10-04T18:38:27Z","updated_at":"2020-04-07T15:15:20Z","closed_at":"2019-10-31T18:02:57Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"If the [BulkProcessor](https://github.com/elastic/elasticsearch/blob/v6.8.3/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java) results in failed bulk requests, they will be retried via the [RetryHandler](https://github.com/elastic/elasticsearch/blob/v6.8.3/server/src/main/java/org/elasticsearch/action/bulk/Retry.java#L143). In versions of Elasticsearch prior to 7.3.0 this can result in a deadlock. \r\n\r\nThe deadlock can happen due to the `Scheduler` which is shared between the `Flush` and `Retry` logic. The deadlock can happen because the `Scheduler` is configured with 1 worker thread which can be blocked in the `Flush` method. The `Flush` method is guarded by [synchronized (BulkProcessor.this)](https://github.com/elastic/elasticsearch/blob/v6.8.3/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java#L408) , but the [internalAdd(..)](https://github.com/elastic/elasticsearch/blob/v6.8.3/server/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java#L324) method is also blocked by the same (synchronized) monitor lock. What can happen is that a bulk request comes in through `internalAdd` obtains the lock, the bulk request is sent and a failure occurs, so the retry logic kicks in.  The scheduler thread is blocked in the `Flush` method due to the `internalAdd`'s hold on the synchronized block , so now when the retry attempts to schedule a retry, it can not because the `Flush` is blocking the only worker thread for the scheduler. So here `Flush` can not continue because it is waiting on `internalAdd` to finish, and `internalAdd` can not finish because it waiting on `Retry`, but `Retry` can not finish because it is waiting on a scheduler thread which it can not obtain because it is waiting on `Flush` to finish. \r\n\r\nThe change in 7.3.0 fixes this issue because it is much more selective about exactly what is locked, and no longer wraps the execution of the bulk request inside the lock. \r\n\r\nUntil `7.3.0` the only workaround is to set the [BackOffPolicy](https://github.com/elastic/elasticsearch/blob/v6.8.3/server/src/main/java/org/elasticsearch/action/bulk/BackoffPolicy.java) to `BackoffPolicy.noBackoff()` so that the `Retry` does not kick in. The default backoff is `BackoffPolicy.exponentialBackoff()` which is used by Watcher and is not configurable and thus is susceptible to this bug pre `7.3.0`\r\n\r\nThis is related to [https://github.com/elastic/elasticsearch/pull/41418](https://github.com/elastic/elasticsearch/pull/41418) butthe fix for that does not fix this issue. This issue is fixed by [https://github.com/elastic/elasticsearch/pull/41451](https://github.com/elastic/elasticsearch/pull/41451) in 7.3.0.\r\n\r\nEDIT: see below for a case where this can still happen in [7.3.0-[7.5.0](https://github.com/elastic/elasticsearch/pull/48697)) (_if the flush documents themselves fail_)","closed_by":{"login":"jakelandis","id":976291,"node_id":"MDQ6VXNlcjk3NjI5MQ==","avatar_url":"https://avatars2.githubusercontent.com/u/976291?v=4","gravatar_id":"","url":"https://api.github.com/users/jakelandis","html_url":"https://github.com/jakelandis","followers_url":"https://api.github.com/users/jakelandis/followers","following_url":"https://api.github.com/users/jakelandis/following{/other_user}","gists_url":"https://api.github.com/users/jakelandis/gists{/gist_id}","starred_url":"https://api.github.com/users/jakelandis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakelandis/subscriptions","organizations_url":"https://api.github.com/users/jakelandis/orgs","repos_url":"https://api.github.com/users/jakelandis/repos","events_url":"https://api.github.com/users/jakelandis/events{/privacy}","received_events_url":"https://api.github.com/users/jakelandis/received_events","type":"User","site_admin":false},"performed_via_github_app":null}