{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/20957","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20957/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20957/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/20957/events","html_url":"https://github.com/elastic/elasticsearch/issues/20957","id":183298889,"node_id":"MDU6SXNzdWUxODMyOTg4ODk=","number":20957,"title":"Some searches may slow down as a node warms up","user":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"labels":[{"id":146832564,"node_id":"MDU6TGFiZWwxNDY4MzI1NjQ=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Search/Search","name":":Search/Search","color":"0e8a16","default":false,"description":"Search-related issues that do not fall into other categories"},{"id":111416437,"node_id":"MDU6TGFiZWwxMTE0MTY0Mzc=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/discuss","name":"discuss","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2016-10-16T23:11:14Z","updated_at":"2018-07-27T13:21:21Z","closed_at":"2018-07-27T13:21:20Z","author_association":"MEMBER","active_lock_reason":null,"body":"**Elasticsearch version**: 5.0.0-rc1\n\n**Plugins installed**: [none]\n\n**JVM version**: 1.8.0_102\n\n**OS version**: Mac OS X (reproducible on Linux as well)\n\n**Description of the problem including expected versus actual behavior**:\n\nOn indices with a large number of small records a match_all search can become significantly slower after the first few executions. \n\n**Steps to reproduce**:\n1. download elasticsearch 5.0.0-rc1 and start a single node with default settings\n2. using [`esrally`](https://github.com/elastic/rally) execute `nyc_taxis` banchmark to create this index\n3. restart the node\n4. execute the following command several times taking note of `took` time reported for each execution\n\n```\ncurl \"localhost:9200/nyc_taxis/_search\"\n```\n\nOn my machine, I typically see the following execution times: the first query typically takes around 90ms, the second query can take anywhere between 30ms and 80ms, then starting with 3rd query execution time would oscillate between 270ms and 380ms. In other words, the 3rd search can be more than 10x slower than the second.\n\n**Analysis**:\n\nBy manually instrumenting elasticsearch and lucene libraries I was able to narrow the source of slow down to [this loop](https://github.com/apache/lucene-solr/blob/branch_6_2/lucene/core/src/java/org/apache/lucene/search/MatchAllDocsQuery.java#L53-L58) in the `score` method of `BulkScorer` in `MatchAllDocsQuery`. In my tests after 2 search executions, this loop would become significantly slower while execution time for all other areas would remain the same. I have verified that scorers, collectors didn't change between executions and all executions looped over the same set of segments with the same number of documents. The only difference between the second and the third execution that I was able to find is that the loop significantly slows down right after JVM inlines the score method. By experimenting with different requests I was able to delay method inlining, and I was consistently observing slow down immediately after seeing the following message in JVM's inlining output\n\n```\n  @ 15   org.apache.lucene.search.FakeScorer::<init> (16 bytes)   inline (hot)\n    @ 2   org.apache.lucene.search.Scorer::<init> (10 bytes)   inline (hot)\n      @ 1   java.lang.Object::<init> (1 bytes)   inline (hot)\n  @ 32   org.apache.lucene.search.TopScoreDocCollector$ScorerLeafCollector::setScorer (6 bytes)   inline (hot)\n   \\-> TypeProfile (5/5 counts) = org/apache/lucene/search/TopScoreDocCollector$SimpleTopScoreDocCollector$1\n  @ 72   org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector$1::collect (127 bytes)   inline (hot)\n    @ 4   org.apache.lucene.search.FakeScorer::score (5 bytes)   inline (hot)\n     \\-> TypeProfile (13395/13395 counts) = org/apache/lucene/search/FakeScorer\n    @ 117   org.apache.lucene.util.PriorityQueue::updateTop (12 bytes)   executed < MinInliningThreshold times\n  @ 4   org.apache.lucene.search.FakeScorer::score (5 bytes)   inline (hot)\n   \\-> TypeProfile (19539/19539 counts) = org/apache/lucene/search/FakeScorer\n```\n\nSo, there is definitely a strong correlation between slow down and this method being inlined. \n\n**Other thoughts**:\nSince it seems to be a JVM issue I am not sure if we can/should do anything about it. The test case here is somewhat artificial as well. On the other side, artificial or not it's an order of magnitude performance degradation and I wonder if it occurs in other places as well, but it is not as noticeable because a cold node is generally slower! So, I would like to discuss this issue before spending more time on it.\n","closed_by":{"login":"imotov","id":655851,"node_id":"MDQ6VXNlcjY1NTg1MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/655851?v=4","gravatar_id":"","url":"https://api.github.com/users/imotov","html_url":"https://github.com/imotov","followers_url":"https://api.github.com/users/imotov/followers","following_url":"https://api.github.com/users/imotov/following{/other_user}","gists_url":"https://api.github.com/users/imotov/gists{/gist_id}","starred_url":"https://api.github.com/users/imotov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imotov/subscriptions","organizations_url":"https://api.github.com/users/imotov/orgs","repos_url":"https://api.github.com/users/imotov/repos","events_url":"https://api.github.com/users/imotov/events{/privacy}","received_events_url":"https://api.github.com/users/imotov/received_events","type":"User","site_admin":false},"performed_via_github_app":null}