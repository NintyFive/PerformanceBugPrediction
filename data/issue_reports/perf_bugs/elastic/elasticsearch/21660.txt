{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/21660","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21660/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21660/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/21660/events","html_url":"https://github.com/elastic/elasticsearch/issues/21660","id":190323387,"node_id":"MDU6SXNzdWUxOTAzMjMzODc=","number":21660,"title":"Performance problems with StreamOutput.writeString","user":{"login":"habdank","id":8561546,"node_id":"MDQ6VXNlcjg1NjE1NDY=","avatar_url":"https://avatars3.githubusercontent.com/u/8561546?v=4","gravatar_id":"","url":"https://api.github.com/users/habdank","html_url":"https://github.com/habdank","followers_url":"https://api.github.com/users/habdank/followers","following_url":"https://api.github.com/users/habdank/following{/other_user}","gists_url":"https://api.github.com/users/habdank/gists{/gist_id}","starred_url":"https://api.github.com/users/habdank/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/habdank/subscriptions","organizations_url":"https://api.github.com/users/habdank/orgs","repos_url":"https://api.github.com/users/habdank/repos","events_url":"https://api.github.com/users/habdank/events{/privacy}","received_events_url":"https://api.github.com/users/habdank/received_events","type":"User","site_admin":false},"labels":[{"id":23173,"node_id":"MDU6TGFiZWwyMzE3Mw==","url":"https://api.github.com/repos/elastic/elasticsearch/labels/%3Ebug","name":">bug","color":"b60205","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"assignees":[{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2016-11-18T13:49:17Z","updated_at":"2016-11-21T09:47:50Z","closed_at":"2016-11-21T09:47:50Z","author_association":"NONE","active_lock_reason":null,"body":"Dears,\r\n\r\nWe suppose, we found a performance problem in the elasticsearch code.\r\n\r\n**Elasticsearch version**: 2.4.1 but also master branch\r\n**Plugins installed**: [] Shield, but it has nothing to do with the problem\r\n**JVM version**: 1.8.112\r\n**OS version**: Windows, Linux\r\n**Description of the problem including expected versus actual behavior**:\r\n\r\nWe had spend some time on testing Elasticsearch performance. \r\nWe think, we found a problem in the JAVA API (client) for the Elasticsearch. \r\nWe performed tests making regular logging (with time stamps) as well as running software with JProfiler.\r\n\r\nThe performace problem is located in the elasticsearch/core/src/main/java/org/elasticsearch/common/io/stream/StreamOutput.java in the method: `public void writeString(String str)`\r\n\r\nAnd we suppose the problem is that writeString uses in the loop `writeByte `method (elasticsearch/core/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java) \r\nwhich uses `ensureCapacity `method (elasticsearch/core/src/main/java/org/elasticsearch/common/io/stream/BytesStreamOutput.java ), \r\nwhich calls `grow `method (elasticsearch/core/src/main/java/org/elasticsearch/common/util/BigArrays.java).\r\n\r\nThe regular usage of the writeByte has no problem with ensure capacity and grow. But ...\r\n\r\nJProfiler shows us, when it comes to call `writeString` the method call chain is higly inefficient,\r\nbecause writeString **for every** character in the string calls all mentioned methods to write single byte, which needs to ensure capacity and grows Arrays - byte by byte. \r\nThis is made for every document, which send to Elasticsearch, which is normally not a short string. \r\nIn this operation there are many objects copied and there are executed many memory reallocations in the loop for single bytes.\r\n\r\nWe also made code review in the master brach, and it confirms what JProfiler states. The `writeString` call tree is exactly using those heavy methods for each and every byte.\r\n\r\nCall-graph is attached.\r\n![call_graph](https://cloud.githubusercontent.com/assets/8561546/20434245/458e9c84-ada7-11e6-9746-0841393de53e.png)\r\n\r\n\r\n**Describe the feature**:\r\n\r\nThe proposal would be to modify writeString method **not** to use writeByte foreach and every byte,\r\nbut to do the following:\r\n\r\n1. Check the needed size of the string/array/buffer (once)\r\n2. Allocate memory for the needed size (once)\r\n3. Perform \"unsafe\" copy of the string (once) - it is no more unsafe, as memory is already provided.\r\n4. Execute special modifications on characters **in the already copied string**, which are done in writeString method - this might be done in a kind of a loop.\r\n\r\nWhat do you think of it?\r\n\r\nWe are testing now a kind of simple check if this proposal is helping us, \r\nbut we do not know very good your codebase, so we cannot provide complete bug fix, \r\nwhich will be widely tested.\r\n\r\nThanks in advace for any input to this problem.\r\n\r\nBest regards,\r\nSeweryn.\r\n","closed_by":{"login":"s1monw","id":973334,"node_id":"MDQ6VXNlcjk3MzMzNA==","avatar_url":"https://avatars0.githubusercontent.com/u/973334?v=4","gravatar_id":"","url":"https://api.github.com/users/s1monw","html_url":"https://github.com/s1monw","followers_url":"https://api.github.com/users/s1monw/followers","following_url":"https://api.github.com/users/s1monw/following{/other_user}","gists_url":"https://api.github.com/users/s1monw/gists{/gist_id}","starred_url":"https://api.github.com/users/s1monw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s1monw/subscriptions","organizations_url":"https://api.github.com/users/s1monw/orgs","repos_url":"https://api.github.com/users/s1monw/repos","events_url":"https://api.github.com/users/s1monw/events{/privacy}","received_events_url":"https://api.github.com/users/s1monw/received_events","type":"User","site_admin":false},"performed_via_github_app":null}