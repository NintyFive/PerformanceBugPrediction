[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/684070703","html_url":"https://github.com/elastic/elasticsearch/issues/61762#issuecomment-684070703","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61762","id":684070703,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NDA3MDcwMw==","user":{"login":"elasticmachine","id":15837671,"node_id":"MDQ6VXNlcjE1ODM3Njcx","avatar_url":"https://avatars3.githubusercontent.com/u/15837671?v=4","gravatar_id":"","url":"https://api.github.com/users/elasticmachine","html_url":"https://github.com/elasticmachine","followers_url":"https://api.github.com/users/elasticmachine/followers","following_url":"https://api.github.com/users/elasticmachine/following{/other_user}","gists_url":"https://api.github.com/users/elasticmachine/gists{/gist_id}","starred_url":"https://api.github.com/users/elasticmachine/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elasticmachine/subscriptions","organizations_url":"https://api.github.com/users/elasticmachine/orgs","repos_url":"https://api.github.com/users/elasticmachine/repos","events_url":"https://api.github.com/users/elasticmachine/events{/privacy}","received_events_url":"https://api.github.com/users/elasticmachine/received_events","type":"User","site_admin":false},"created_at":"2020-08-31T22:14:41Z","updated_at":"2020-08-31T22:14:41Z","author_association":"COLLABORATOR","body":"Pinging @elastic/es-distributed (:Distributed/Snapshot/Restore)","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/684077880","html_url":"https://github.com/elastic/elasticsearch/issues/61762#issuecomment-684077880","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/61762","id":684077880,"node_id":"MDEyOklzc3VlQ29tbWVudDY4NDA3Nzg4MA==","user":{"login":"original-brownbear","id":6490959,"node_id":"MDQ6VXNlcjY0OTA5NTk=","avatar_url":"https://avatars0.githubusercontent.com/u/6490959?v=4","gravatar_id":"","url":"https://api.github.com/users/original-brownbear","html_url":"https://github.com/original-brownbear","followers_url":"https://api.github.com/users/original-brownbear/followers","following_url":"https://api.github.com/users/original-brownbear/following{/other_user}","gists_url":"https://api.github.com/users/original-brownbear/gists{/gist_id}","starred_url":"https://api.github.com/users/original-brownbear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/original-brownbear/subscriptions","organizations_url":"https://api.github.com/users/original-brownbear/orgs","repos_url":"https://api.github.com/users/original-brownbear/repos","events_url":"https://api.github.com/users/original-brownbear/events{/privacy}","received_events_url":"https://api.github.com/users/original-brownbear/received_events","type":"User","site_admin":false},"created_at":"2020-08-31T22:34:05Z","updated_at":"2020-08-31T22:34:05Z","author_association":"MEMBER","body":"```java\r\n    public void testMultiplePartialSnapshotsQueuedAfterDelete() throws Exception {\r\n        final String masterNode = internalCluster().startMasterOnlyNode();\r\n        internalCluster().startDataOnlyNode();\r\n        final String repoName = \"test-repo\";\r\n        createRepository(repoName, \"mock\");\r\n        createIndexWithContent(\"index-one\");\r\n        createIndexWithContent(\"index-two\");\r\n        createNSnapshots(repoName, randomIntBetween(1, 5));\r\n\r\n        final ActionFuture<AcknowledgedResponse> deleteFuture = startAndBlockOnDeleteSnapshot(repoName, \"*\");\r\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshot(repoName, \"snapshot-three\", true);\r\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshot(repoName, \"snapshot-four\", true);\r\n        awaitNSnapshotsInProgress(2);\r\n\r\n        assertAcked(client().admin().indices().prepareDelete(\"index-two\"));\r\n        unblockNode(repoName, masterNode);\r\n\r\n        assertThat(snapshotThree.get().getSnapshotInfo().state(), is(SnapshotState.PARTIAL));\r\n        assertThat(snapshotFour.get().getSnapshotInfo().state(), is(SnapshotState.PARTIAL));\r\n        assertAcked(deleteFuture.get());\r\n    }\r\n```\r\n\r\nreproduces this, will code up a fix tomorrow.","performed_via_github_app":null}]