[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/266431798","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-266431798","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":266431798,"node_id":"MDEyOklzc3VlQ29tbWVudDI2NjQzMTc5OA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-12-12T13:33:29Z","updated_at":"2016-12-12T13:33:29Z","author_association":"CONTRIBUTOR","body":"@nknize could you provide some wisdom please","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/269168982","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-269168982","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":269168982,"node_id":"MDEyOklzc3VlQ29tbWVudDI2OTE2ODk4Mg==","user":{"login":"uamadman","id":8550796,"node_id":"MDQ6VXNlcjg1NTA3OTY=","avatar_url":"https://avatars3.githubusercontent.com/u/8550796?v=4","gravatar_id":"","url":"https://api.github.com/users/uamadman","html_url":"https://github.com/uamadman","followers_url":"https://api.github.com/users/uamadman/followers","following_url":"https://api.github.com/users/uamadman/following{/other_user}","gists_url":"https://api.github.com/users/uamadman/gists{/gist_id}","starred_url":"https://api.github.com/users/uamadman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uamadman/subscriptions","organizations_url":"https://api.github.com/users/uamadman/orgs","repos_url":"https://api.github.com/users/uamadman/repos","events_url":"https://api.github.com/users/uamadman/events{/privacy}","received_events_url":"https://api.github.com/users/uamadman/received_events","type":"User","site_admin":false},"created_at":"2016-12-26T06:21:21Z","updated_at":"2016-12-26T06:29:28Z","author_association":"NONE","body":"I'm experiencing something similar. I've created a brutish python script for showcasing this issue.\r\nThe following shows a simple python script that creates a GeoShape mapping and adds data.\r\nThis method indexes roughly 5 line-strings per second/ 2 minutes per 1000, while triggering the GC Allocation failure for the entirety of the load.\r\n\r\nOf my current single node systems I would expect a minimum 1000 geo_shapes per second.\r\n\r\n\r\n```\r\nfrom random import random, randint\r\nimport math\r\nimport time\r\n\r\ntry:\r\n    from elasticsearch import Elasticsearch\r\n\r\n    es = Elasticsearch()\r\nexcept ImportError:\r\n    quit()\r\n\r\nes_index = 'assets'\r\n\r\n\r\ndef get(query, index=es_index, es=es):\r\n    body = {\r\n            \"query\": query,\r\n            \"size\": 1000\r\n            }\r\n    ret = es.search(index=index, body=body)\r\n    return ret\r\n\r\n\r\ndef put(uuid, json, doc, index=es_index, es=es):\r\n    ret = es.create(index=index,\r\n                    doc_type=doc,\r\n                    id=uuid,\r\n                    body=json)\r\n    return ret\r\n\r\n\r\ndef delete_index(index=es_index, es=es):\r\n    ret = es.indices.delete(index=index)\r\n    return ret\r\n\r\n\r\ndef create_index(index=es_index, es=es, number_of_shards=1, number_of_replicas=0):\r\n    settings = {\r\n        \"settings\": {\r\n            \"number_of_shards\": number_of_shards,\r\n            \"number_of_replicas\": number_of_replicas\r\n        },\r\n        \"mappings\": {\r\n            \"player\": {\r\n                \"properties\": {\r\n                    \"PATH\": {\r\n                        \"type\": \"geo_shape\"\r\n                        # \"precision\": \"10m\"\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    ret = es.indices.create(index=index, body=settings)\r\n    return ret\r\n\r\n\r\ndef random_elastic_linestring(nodes, mx, my, Mx, My):\r\n    linestring = []\r\n    for n in range(0, nodes):\r\n        linestring.append([random.randint(mx, Mx), random.randint(my, My)])\r\n    es_doc = {\r\n        \"type\": \"linestring\",\r\n        \"coordinates\": linestring\r\n    }\r\n    return es_doc\r\n\r\n\r\n\r\nif __name__ == \"__main__\":      \r\n    try:\r\n        delete_index()\r\n    except:\r\n        print(\"It doesn't exist\")\r\n    create_index()\r\n    for i in range(1, 1000):\r\n        x = (random() - .5) * 1000\r\n        y = (random() - .5) * 1000\r\n        a = {'id': 'randomname' + str(i),\r\n             'asset': 'randomname',\r\n             'Zone': 'X' + str(math.floor(x)) + 'Y' + str(math.floor(y)),\r\n             'Travel_Rate': randint(400, 2000),\r\n             'Draw_Level': 1,\r\n             'HOME': None,\r\n             'PATH': random_elastic_linestring(randint(2, 10), -5, -5, 5, 5),\r\n             'DEL': False,\r\n             '_time': time.time()}\r\n        put(a['id'], a, 'player')\r\n\r\n```\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8550796/21476619/3ac8c224-cb08-11e6-92a4-0888b7fa20b2.png)\r\n\r\nElastic 5.1.1\r\nJAVA_HOME: jdk 1_8_112\r\nJVM Settings:\r\nXms4g\r\nXmx4g\r\n-XX:+PrintGCDetails\r\n\r\ndatalocation: 25GB\\s Ram Disk","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/287631114","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-287631114","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":287631114,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NzYzMTExNA==","user":{"login":"joelstewart","id":6554411,"node_id":"MDQ6VXNlcjY1NTQ0MTE=","avatar_url":"https://avatars3.githubusercontent.com/u/6554411?v=4","gravatar_id":"","url":"https://api.github.com/users/joelstewart","html_url":"https://github.com/joelstewart","followers_url":"https://api.github.com/users/joelstewart/followers","following_url":"https://api.github.com/users/joelstewart/following{/other_user}","gists_url":"https://api.github.com/users/joelstewart/gists{/gist_id}","starred_url":"https://api.github.com/users/joelstewart/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joelstewart/subscriptions","organizations_url":"https://api.github.com/users/joelstewart/orgs","repos_url":"https://api.github.com/users/joelstewart/repos","events_url":"https://api.github.com/users/joelstewart/events{/privacy}","received_events_url":"https://api.github.com/users/joelstewart/received_events","type":"User","site_admin":false},"created_at":"2017-03-19T17:09:24Z","updated_at":"2017-03-19T17:09:24Z","author_association":"NONE","body":"It is apparent for linestrings that are limited to a very small geo-area, the indexing speeds are acceptable for a large number of points in a linestring.    \r\n\r\nBuilding some random line strings with points limited to range:\r\n     private double minLat = 10.00d;\r\n     private double maxLat = 10.001d;\r\n     private double minLon = 10.00d;\r\n     private double maxLon = 10.0001d;\r\n\r\nscales fairly well to hundreds of points.  There is not an apparent \"exponential\" growth that happens when allowing the points to come from anywhere on the globe.   That breaks down quickly and starts to show a non-linear growth at around 10 points, to where with even only a few dozen can take 30 seconds to index a single document, and attempting a 1000 will be over an hour.\r\n\r\n(tested with 2.2.0 / 2.4.4)\r\n\r\n@nknize  - would you please follow up with what should be expected from line-string / multi-line-string indexing performance in regards to point count, point distance, and overall \"complexity\" of line shape.\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/289493223","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-289493223","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":289493223,"node_id":"MDEyOklzc3VlQ29tbWVudDI4OTQ5MzIyMw==","user":{"login":"rsimon","id":470971,"node_id":"MDQ6VXNlcjQ3MDk3MQ==","avatar_url":"https://avatars3.githubusercontent.com/u/470971?v=4","gravatar_id":"","url":"https://api.github.com/users/rsimon","html_url":"https://github.com/rsimon","followers_url":"https://api.github.com/users/rsimon/followers","following_url":"https://api.github.com/users/rsimon/following{/other_user}","gists_url":"https://api.github.com/users/rsimon/gists{/gist_id}","starred_url":"https://api.github.com/users/rsimon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rsimon/subscriptions","organizations_url":"https://api.github.com/users/rsimon/orgs","repos_url":"https://api.github.com/users/rsimon/repos","events_url":"https://api.github.com/users/rsimon/events{/privacy}","received_events_url":"https://api.github.com/users/rsimon/received_events","type":"User","site_admin":false},"created_at":"2017-03-27T15:40:39Z","updated_at":"2017-03-27T15:44:32Z","author_association":"NONE","body":"I can also confirm that `geo_shape` indexing is very slow. I have just migrated code from ES 1.7.2 to 2.4.4 and, interestingly, performance seemed to be at least one order of magnitude faster in the old version. I was using geohash tree type (precision 50m). Changing to quadree in v2.4.4 helped a bit to speed things up, but it's still significantly slower than in v1.7.2.\r\n\r\nAs soon as I remove the shape field from my mapping (with `dynamic` set to `false`) insert speed is back to the normal high levels, so it's definitely the geo_shape. Any thoughts yet on possible optimization strategies?\r\n\r\nAnother observation - not sure if this is of any help to track this down: the majority of my \"shapes\" are in fact Points. (I still need to index them as geo_shapes, since my data contains a mix of points and polygons.) So in my case, we're definitely not talking about complex shapes at all.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/310535494","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-310535494","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":310535494,"node_id":"MDEyOklzc3VlQ29tbWVudDMxMDUzNTQ5NA==","user":{"login":"instagibb","id":1813388,"node_id":"MDQ6VXNlcjE4MTMzODg=","avatar_url":"https://avatars2.githubusercontent.com/u/1813388?v=4","gravatar_id":"","url":"https://api.github.com/users/instagibb","html_url":"https://github.com/instagibb","followers_url":"https://api.github.com/users/instagibb/followers","following_url":"https://api.github.com/users/instagibb/following{/other_user}","gists_url":"https://api.github.com/users/instagibb/gists{/gist_id}","starred_url":"https://api.github.com/users/instagibb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/instagibb/subscriptions","organizations_url":"https://api.github.com/users/instagibb/orgs","repos_url":"https://api.github.com/users/instagibb/repos","events_url":"https://api.github.com/users/instagibb/events{/privacy}","received_events_url":"https://api.github.com/users/instagibb/received_events","type":"User","site_admin":false},"created_at":"2017-06-23T00:10:41Z","updated_at":"2017-07-04T23:51:53Z","author_association":"NONE","body":"~Has anyone found a solution to this slow indexing of `geo_shape`?~\r\n\r\n~I am using ES 5.4.2 docker container with the Java client with the bulk processor and indexing mostly text/number documents with some simple polygons. It is taking around **15+ minutes** to index around 5000 docs.~ \r\n\r\n~Before adding the `geo_shape` mapping I was indexing 500,000 docs in \\~2-3 minutes.~\r\n\r\nThe slow down appears to be caused by submitting obsolete/bad GeoJSON. The JTS library I am using was outputting GeoJSON using an incompatible CRS (Coordinate Reference System) namely EPSG:3857 (Pseudo Mercator/WGS 84) and was including the block:\r\n```javascript\r\n\"crs\": { \r\n    \"type\": \"name\", \r\n    \"properties\": { \r\n        \"name\": \"EPSG:3857\" \r\n    }\r\n}\r\n```\r\n\r\nBy making sure the GeoJSON was output using the CRS of EPSG:4326 (WGS 84) as per the [GeoJSON spec](https://tools.ietf.org/html/rfc7946#section-4) (see the \"note\" in section 4) indexing speed has returned to normal. \r\n\r\nHopefully this helps somebody and I haven't just wasted everyones time :)\r\n\r\nEDIT: Indexing `geo_shape` is still much slower than normal text documents but not as slow as submitting bad GeoJSON\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/320213259","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-320213259","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":320213259,"node_id":"MDEyOklzc3VlQ29tbWVudDMyMDIxMzI1OQ==","user":{"login":"gem360","id":17275578,"node_id":"MDQ6VXNlcjE3Mjc1NTc4","avatar_url":"https://avatars2.githubusercontent.com/u/17275578?v=4","gravatar_id":"","url":"https://api.github.com/users/gem360","html_url":"https://github.com/gem360","followers_url":"https://api.github.com/users/gem360/followers","following_url":"https://api.github.com/users/gem360/following{/other_user}","gists_url":"https://api.github.com/users/gem360/gists{/gist_id}","starred_url":"https://api.github.com/users/gem360/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gem360/subscriptions","organizations_url":"https://api.github.com/users/gem360/orgs","repos_url":"https://api.github.com/users/gem360/repos","events_url":"https://api.github.com/users/gem360/events{/privacy}","received_events_url":"https://api.github.com/users/gem360/received_events","type":"User","site_admin":false},"created_at":"2017-08-04T10:17:07Z","updated_at":"2017-08-04T10:17:07Z","author_association":"NONE","body":"I can also confirm that indexing geo shapes is very slow. When we try to index a geo shape  line string with 9k points it takes around a minute to respond.\r\n\r\nUsing elasticsearch 2.4.\r\n\r\nschema and example linestring attached\r\n\r\n[schema.txt](https://github.com/elastic/elasticsearch/files/1199988/schema.txt)\r\n[segment-9513.txt](https://github.com/elastic/elasticsearch/files/1199989/segment-9513.txt)\r\n\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/324671243","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-324671243","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":324671243,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNDY3MTI0Mw==","user":{"login":"schlosna","id":54594,"node_id":"MDQ6VXNlcjU0NTk0","avatar_url":"https://avatars0.githubusercontent.com/u/54594?v=4","gravatar_id":"","url":"https://api.github.com/users/schlosna","html_url":"https://github.com/schlosna","followers_url":"https://api.github.com/users/schlosna/followers","following_url":"https://api.github.com/users/schlosna/following{/other_user}","gists_url":"https://api.github.com/users/schlosna/gists{/gist_id}","starred_url":"https://api.github.com/users/schlosna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/schlosna/subscriptions","organizations_url":"https://api.github.com/users/schlosna/orgs","repos_url":"https://api.github.com/users/schlosna/repos","events_url":"https://api.github.com/users/schlosna/events{/privacy}","received_events_url":"https://api.github.com/users/schlosna/received_events","type":"User","site_admin":false},"created_at":"2017-08-24T15:31:40Z","updated_at":"2017-08-24T15:31:40Z","author_association":"NONE","body":"This is likely related to an issue in spatial4j/JTS when it is attempting to determine if a line covers a rectangle, see possible PR to address: https://github.com/locationtech/spatial4j/pull/144","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/334759601","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-334759601","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":334759601,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNDc1OTYwMQ==","user":{"login":"nknize","id":830187,"node_id":"MDQ6VXNlcjgzMDE4Nw==","avatar_url":"https://avatars3.githubusercontent.com/u/830187?v=4","gravatar_id":"","url":"https://api.github.com/users/nknize","html_url":"https://github.com/nknize","followers_url":"https://api.github.com/users/nknize/followers","following_url":"https://api.github.com/users/nknize/following{/other_user}","gists_url":"https://api.github.com/users/nknize/gists{/gist_id}","starred_url":"https://api.github.com/users/nknize/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nknize/subscriptions","organizations_url":"https://api.github.com/users/nknize/orgs","repos_url":"https://api.github.com/users/nknize/repos","events_url":"https://api.github.com/users/nknize/events{/privacy}","received_events_url":"https://api.github.com/users/nknize/received_events","type":"User","site_admin":false},"created_at":"2017-10-06T13:46:57Z","updated_at":"2017-10-06T13:47:55Z","author_association":"CONTRIBUTOR","body":"tldr: try setting `tree` to `quadtree` and `distance_error_pct` to `0.001`\r\n\r\nIn short @schlosna is correct. There are a few things going on here that cause slow shape indexing. One is related to the number of terms (quad cells) and number of vertices. The more terms the more calls to `jts.relate` (which is slow). The more vertices the slower `jts.relate` becomes. Another is related to heap consumption in `createCellIteratorToIndex` where intersecting cells are collected into an in-memory list. See my related related comments in [#25833](https://github.com/elastic/elasticsearch/issues/25833#issuecomment-317116918) describing what's going on in lucene in a little more detail and what you can do (for now) to help with these issues. \r\n\r\nThere are a few patches coming to correct this issue in the near term (fix memory consumption and change tree defaults). In the long term we are working on a new geo field type based on Bkd tree that avoids the rasterization approach altogether (which has the added bonus of eliminating the jts and s4j dependencies).\r\n\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/353069055","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-353069055","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":353069055,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MzA2OTA1NQ==","user":{"login":"synhershko","id":212252,"node_id":"MDQ6VXNlcjIxMjI1Mg==","avatar_url":"https://avatars2.githubusercontent.com/u/212252?v=4","gravatar_id":"","url":"https://api.github.com/users/synhershko","html_url":"https://github.com/synhershko","followers_url":"https://api.github.com/users/synhershko/followers","following_url":"https://api.github.com/users/synhershko/following{/other_user}","gists_url":"https://api.github.com/users/synhershko/gists{/gist_id}","starred_url":"https://api.github.com/users/synhershko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/synhershko/subscriptions","organizations_url":"https://api.github.com/users/synhershko/orgs","repos_url":"https://api.github.com/users/synhershko/repos","events_url":"https://api.github.com/users/synhershko/events{/privacy}","received_events_url":"https://api.github.com/users/synhershko/received_events","type":"User","site_admin":false},"created_at":"2017-12-20T13:55:03Z","updated_at":"2017-12-20T13:55:03Z","author_association":"CONTRIBUTOR","body":"> In the long term we are working on a new geo field type based on Bkd tree that avoids the rasterization approach altogether (which has the added bonus of eliminating the jts and s4j dependencies).\r\n\r\n+1. Would love to have an ETA on this, we are currently experiencing the same in a large scale project.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/376295201","html_url":"https://github.com/elastic/elasticsearch/issues/22087#issuecomment-376295201","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/22087","id":376295201,"node_id":"MDEyOklzc3VlQ29tbWVudDM3NjI5NTIwMQ==","user":{"login":"nknize","id":830187,"node_id":"MDQ6VXNlcjgzMDE4Nw==","avatar_url":"https://avatars3.githubusercontent.com/u/830187?v=4","gravatar_id":"","url":"https://api.github.com/users/nknize","html_url":"https://github.com/nknize","followers_url":"https://api.github.com/users/nknize/followers","following_url":"https://api.github.com/users/nknize/following{/other_user}","gists_url":"https://api.github.com/users/nknize/gists{/gist_id}","starred_url":"https://api.github.com/users/nknize/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nknize/subscriptions","organizations_url":"https://api.github.com/users/nknize/orgs","repos_url":"https://api.github.com/users/nknize/repos","events_url":"https://api.github.com/users/nknize/events{/privacy}","received_events_url":"https://api.github.com/users/nknize/received_events","type":"User","site_admin":false},"created_at":"2018-03-26T20:09:22Z","updated_at":"2018-03-26T20:09:22Z","author_association":"CONTRIBUTOR","body":"closing in favor of #25833 and #16749","performed_via_github_app":null}]