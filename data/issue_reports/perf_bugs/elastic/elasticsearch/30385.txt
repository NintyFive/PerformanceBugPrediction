{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/30385","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30385/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30385/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/30385/events","html_url":"https://github.com/elastic/elasticsearch/issues/30385","id":320231675,"node_id":"MDU6SXNzdWUzMjAyMzE2NzU=","number":30385,"title":"high rest client has low performance","user":{"login":"kervin521","id":9798724,"node_id":"MDQ6VXNlcjk3OTg3MjQ=","avatar_url":"https://avatars0.githubusercontent.com/u/9798724?v=4","gravatar_id":"","url":"https://api.github.com/users/kervin521","html_url":"https://github.com/kervin521","followers_url":"https://api.github.com/users/kervin521/followers","following_url":"https://api.github.com/users/kervin521/following{/other_user}","gists_url":"https://api.github.com/users/kervin521/gists{/gist_id}","starred_url":"https://api.github.com/users/kervin521/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kervin521/subscriptions","organizations_url":"https://api.github.com/users/kervin521/orgs","repos_url":"https://api.github.com/users/kervin521/repos","events_url":"https://api.github.com/users/kervin521/events{/privacy}","received_events_url":"https://api.github.com/users/kervin521/received_events","type":"User","site_admin":false},"labels":[{"id":493198109,"node_id":"MDU6TGFiZWw0OTMxOTgxMDk=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Features/Java%20High%20Level%20REST%20Client","name":":Core/Features/Java High Level REST Client","color":"0e8a16","default":false,"description":"Expressive Java Client for Elasticsearch"},{"id":111624690,"node_id":"MDU6TGFiZWwxMTE2MjQ2OTA=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/feedback_needed","name":"feedback_needed","color":"d4c5f9","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-05-04T10:52:57Z","updated_at":"2018-07-03T12:19:37Z","closed_at":"2018-07-03T12:19:37Z","author_association":"NONE","active_lock_reason":null,"body":"data size : 1MB\r\nuse api : bulk api\r\n\r\nRest Client|HighRest client\r\n---------------------|--------------------------\r\nuse time:5s             | use time:20s  \r\n\r\ncode example:\r\n```java\r\nRestClientBuilder builder = RestClient.builder(hosts);\r\nbuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\r\n \t            @Override\r\n \t public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder config) {\r\n \t               config.setDefaultIOReactorConfig(IOReactorConfig.custom().setIoThreadCount(100).build());\r\n \t               if(!StringUtil.isEmpty(username)&&!StringUtil.isEmpty(password)){\r\n \t            \t   final CredentialsProvider credential = new BasicCredentialsProvider();\r\n \t            \t   credential.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(username, password));\r\n \t            \t   config.setDefaultCredentialsProvider(credential);\r\n \t               }\r\n \t               return config;\r\n \t }\r\n});\r\nbuilder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\r\n\t@Override\r\n\tpublic RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder config) {\r\n \t            \tconfig.setConnectTimeout(5*1000);\r\n \t            \tconfig.setSocketTimeout(60*1000);\r\n \t                return config;\r\n  \t}\r\n});\r\nbuilder.setMaxRetryTimeoutMillis(60*1000);\r\nRestClient client = builder.build();\r\nRestHighLevelClient hclient = new RestHighLevelClient(super.getClient());\r\n```\r\n```java\r\n\tpublic String bulkUpsert(String index, String type, List<Object> jsons) throws Exception {\r\n\t\tString uri = \"/_bulk\";\r\n\t\tString body = \"\";\r\n\t\tfor (Object json : jsons) {\r\n\t\t\tString source = json instanceof String ?json.toString():JSON.toJSONString(json);\r\n\t\t\tJSONObject obj = JSON.parseObject(source);\r\n\t\t\tString id = null;\r\n\t\t\tif(obj.containsKey(\"id\")||obj.containsKey(\"_id\")){\r\n\t\t\t\tif(obj.containsKey(\"_id\")){\r\n\t\t\t\t\tid = obj.getString(\"_id\");\r\n\t\t\t\t\tobj.remove(\"_id\");\r\n\t\t\t\t}else{\r\n\t\t\t\t\tid = obj.getString(\"id\");\r\n\t\t\t\t\tobj.remove(\"id\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!StringUtil.isEmpty(id)){\r\n\t\t\t\tString action = \"{update:{_index:'\"+index+\"',_type:'\"+type+\"',_id:'\"+id+\"'}}\";\r\n\t\t\t\tString _body =\"{doc:\"+obj.toJSONString()+\"}\";\r\n\t\t\t\tbody += JSON.parseObject(action).toJSONString()+\"\\n\"+JSON.parseObject(_body).toJSONString()+\"\\n\";\r\n\t\t\t}else{\r\n\t\t\t\tid = UUIDs.base64UUID();\r\n\t\t\t\tString action = \"{create:{_index:'\"+index+\"',_type:'\"+type+\"',_id:'\"+id+\"'}}\";\r\n\t\t\t\tbody += JSON.parseObject(action).toJSONString()+\"\\n\"+obj.toJSONString()+\"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tHttpEntity entity = null;\r\n\t\tif(body!=null){\r\n\t\t\tentity = new NStringEntity(body, ContentType.APPLICATION_JSON);\r\n\t\t}\r\n\t\tResponse response = client.performRequest(HttpUtil.METHOD_POST, uri,Collections.emptyMap(),entity);\r\n\t\treturn EntityUtils.toString(response.getEntity());\r\n\t}\r\npublic String bulkUpsert(String index,String type,List<Object> jsons){\r\n\t\ttry {\r\n\t\t\tif(hclient==null){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tBulkRequest request = new BulkRequest();\r\n\t\t\tfor (Object json : jsons) {\r\n\t\t\t\tString source = json instanceof String ?json.toString():JSON.toJSONString(json);\r\n\t\t\t\tJSONObject obj = JSON.parseObject(source);\r\n\t\t\t\tString id = UUIDs.base64UUID();\r\n\t\t\t\tif(obj.containsKey(\"id\")){\r\n\t\t\t\t\tid = obj.getString(\"id\");\r\n\t\t\t\t\tobj.remove(\"id\");\r\n\t\t\t\t}\r\n//\t\t\t\tif(obj.containsKey(\"id\")){\r\n//\t\t\t\t\trequest.add(new UpdateRequest(index, type, id).doc(obj.toJSONString(),XContentType.JSON));\r\n//\t\t\t\t}else{\r\n//\t\t\t\t\trequest.add(new IndexRequest(index, type).source(obj.toJSONString(),XContentType.JSON));\r\n//\t\t\t\t}\r\n\t\t\t\trequest.add(new UpdateRequest(index, type, id).upsert(obj.toJSONString(),XContentType.JSON));\r\n\t\t\t}\r\n\t\t\tBulkResponse result = hclient.bulk(request);\r\n\t\t\treturn result.toString();\r\n\t\t}catch (Exception e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n```","closed_by":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"performed_via_github_app":null}