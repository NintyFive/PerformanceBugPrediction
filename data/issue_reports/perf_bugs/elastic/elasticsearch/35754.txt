{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754","repository_url":"https://api.github.com/repos/elastic/elasticsearch","labels_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754/labels{/name}","comments_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754/comments","events_url":"https://api.github.com/repos/elastic/elasticsearch/issues/35754/events","html_url":"https://github.com/elastic/elasticsearch/issues/35754","id":382854470,"node_id":"MDU6SXNzdWUzODI4NTQ0NzA=","number":35754,"title":"Script queries using joda time getMillis() slower than using java time toInstant().toEpochMilli()","user":{"login":"conet","id":11311763,"node_id":"MDQ6VXNlcjExMzExNzYz","avatar_url":"https://avatars2.githubusercontent.com/u/11311763?v=4","gravatar_id":"","url":"https://api.github.com/users/conet","html_url":"https://github.com/conet","followers_url":"https://api.github.com/users/conet/followers","following_url":"https://api.github.com/users/conet/following{/other_user}","gists_url":"https://api.github.com/users/conet/gists{/gist_id}","starred_url":"https://api.github.com/users/conet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/conet/subscriptions","organizations_url":"https://api.github.com/users/conet/orgs","repos_url":"https://api.github.com/users/conet/repos","events_url":"https://api.github.com/users/conet/events{/privacy}","received_events_url":"https://api.github.com/users/conet/received_events","type":"User","site_admin":false},"labels":[{"id":146834791,"node_id":"MDU6TGFiZWwxNDY4MzQ3OTE=","url":"https://api.github.com/repos/elastic/elasticsearch/labels/:Core/Infra/Scripting","name":":Core/Infra/Scripting","color":"0e8a16","default":false,"description":"Scripting abstractions, Painless, and Mustache"}],"state":"closed","locked":false,"assignee":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"assignees":[{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2018-11-20T21:26:07Z","updated_at":"2020-04-16T20:41:51Z","closed_at":"2020-04-16T20:41:51Z","author_association":"NONE","active_lock_reason":null,"body":"<!--\r\n\r\n** Please read the guidelines below. **\r\n\r\nIssues that do not follow these guidelines are likely to be closed.\r\n\r\n1.  GitHub is reserved for bug reports and feature requests. The best place to\r\n    ask a general question is at the Elastic [forums](https://discuss.elastic.co).\r\n    GitHub is not the place for general questions.\r\n\r\n2.  Is this bug report or feature request for a supported OS? If not, it\r\n    is likely to be closed.  See https://www.elastic.co/support/matrix#show_os\r\n\r\n3.  Please fill out EITHER the feature request block or the bug report block\r\n    below, and delete the other block.\r\n\r\n-->\r\n\r\n<!-- Bug report -->\r\n\r\n**Elasticsearch version** (`bin/elasticsearch --version`):\r\nVersion: 6.5.0, Build: default/tar/816e6f6/2018-11-09T18:58:36.352602Z, JVM: 1.8.0_191\r\n\r\n**Plugins installed**: []\r\nNo extra plugins\r\n\r\n**JVM version** (`java -version`):\r\njava -version\r\njava version \"1.8.0_191\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_191-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)\r\n\r\n**Description of the problem including expected versus actual behavior**:\r\nI've been using script queries that called `getMillis()` without issues until I upgraded to `6.5.0` after I started noticing serious query time deterioration (I'm talking about tens of seconds up from a few seconds), eventually by reading the changelog I realized that joda time was being deprecated, after switching the `getMillis()` call to `toInstant().toEpochMilli()` I got back the original query times (the ones before the upgrade). See a more detailed description [in this PR](https://github.com/elastic/elasticsearch/pull/31441#issuecomment-439458673). Since I've been asked to open an issue with the steps to reproduce it here they are.\r\n\r\n**Steps to reproduce**:\r\n 1. Download and start elasticsearch 6.5.0\r\n 2. Download and start kibana 6.5.0\r\n 3. Load the `Sample web logs` sample datasets\r\n 4. Increase the doc count by copying the sample index (I copied it 40 times):\r\n```\r\ncurl -XPOST \"http://localhost:9200/_reindex\" -H 'Content-Type: application/json' -d'\r\n{\r\n  \"source\": {\r\n    \"index\": \"kibana_sample_data_logs\"\r\n  },\r\n  \"dest\": {\r\n    \"index\": \"kibana_sample_data_logs_1\"\r\n  }\r\n}'\r\n```\r\n 5. Run the fast query:\r\n```\r\ncurl -XPOST \"http://localhost:9200/kibana_sample_data_logs*/_search\" -H 'Content-Type: application/json' -d'\r\n{\r\n  \"size\": 0,\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"must\": [\r\n        {\r\n          \"script\": {\r\n            \"script\": {\r\n              \"source\": \"doc[\\\"timestamp\\\"].value.toInstant().toEpochMilli() < params.millis\",\r\n              \"lang\": \"painless\",\r\n              \"params\": {\r\n                \"millis\": 1542747500000\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}'\r\n---\r\n{\r\n  \"took\" : 38,\r\n  \"timed_out\" : false,\r\n  \"_shards\" : {\r\n    \"total\" : 201,\r\n    \"successful\" : 201,\r\n    \"skipped\" : 0,\r\n    \"failed\" : 0\r\n  },\r\n  \"hits\" : {\r\n    \"total\" : 94259,\r\n    \"max_score\" : 0.0,\r\n    \"hits\" : [ ]\r\n  }\r\n}\r\n```\r\n\r\n 6. Run the slow query:\r\n```\r\ncurl -XPOST \"http://localhost:9200/kibana_sample_data_logs*/_search\" -H 'Content-Type: application/json' -d'\r\n{\r\n  \"size\": 0,\r\n  \"query\": {\r\n    \"bool\": {\r\n      \"must\": [\r\n        {\r\n          \"script\": {\r\n            \"script\": {\r\n              \"source\": \"doc[\\\"timestamp\\\"].value.getMillis() < params.millis\",\r\n              \"lang\": \"painless\",\r\n              \"params\": {\r\n                \"millis\": 1542747500000\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}'\r\n---\r\n#! Deprecation: Use of the joda time method [getMillis()] is deprecated. Use [toInstant().toEpochMilli()] instead.\r\n{\r\n  \"took\" : 1088,\r\n  \"timed_out\" : false,\r\n  \"_shards\" : {\r\n    \"total\" : 201,\r\n    \"successful\" : 201,\r\n    \"skipped\" : 0,\r\n    \"failed\" : 0\r\n  },\r\n  \"hits\" : {\r\n    \"total\" : 94259,\r\n    \"max_score\" : 0.0,\r\n    \"hits\" : [ ]\r\n  }\r\n}\r\n```\r\n\r\nWe're talking about 95K documents and the deprecated query is already 30 times slower, one could argue that it is because the deprecation log itself but from my experience with bigger indexes the problem becomes more noticeable, the slow query seems to slow down linearly with the number of documents checked by it.","closed_by":{"login":"stu-elastic","id":24232742,"node_id":"MDQ6VXNlcjI0MjMyNzQy","avatar_url":"https://avatars0.githubusercontent.com/u/24232742?v=4","gravatar_id":"","url":"https://api.github.com/users/stu-elastic","html_url":"https://github.com/stu-elastic","followers_url":"https://api.github.com/users/stu-elastic/followers","following_url":"https://api.github.com/users/stu-elastic/following{/other_user}","gists_url":"https://api.github.com/users/stu-elastic/gists{/gist_id}","starred_url":"https://api.github.com/users/stu-elastic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stu-elastic/subscriptions","organizations_url":"https://api.github.com/users/stu-elastic/orgs","repos_url":"https://api.github.com/users/stu-elastic/repos","events_url":"https://api.github.com/users/stu-elastic/events{/privacy}","received_events_url":"https://api.github.com/users/stu-elastic/received_events","type":"User","site_admin":false},"performed_via_github_app":null}