[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/222985753","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-222985753","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":222985753,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMjk4NTc1Mw==","user":{"login":"jimczi","id":15977469,"node_id":"MDQ6VXNlcjE1OTc3NDY5","avatar_url":"https://avatars0.githubusercontent.com/u/15977469?v=4","gravatar_id":"","url":"https://api.github.com/users/jimczi","html_url":"https://github.com/jimczi","followers_url":"https://api.github.com/users/jimczi/followers","following_url":"https://api.github.com/users/jimczi/following{/other_user}","gists_url":"https://api.github.com/users/jimczi/gists{/gist_id}","starred_url":"https://api.github.com/users/jimczi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimczi/subscriptions","organizations_url":"https://api.github.com/users/jimczi/orgs","repos_url":"https://api.github.com/users/jimczi/repos","events_url":"https://api.github.com/users/jimczi/events{/privacy}","received_events_url":"https://api.github.com/users/jimczi/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T13:04:49Z","updated_at":"2016-06-01T13:04:49Z","author_association":"MEMBER","body":"Can you share the queries you're running ? The createWeight you are mentioning is supposed to be very fast but it seems that you have phrase queries with a lot of terms. What is the average number of terms in your phrase query ?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223073127","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-223073127","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":223073127,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzA3MzEyNw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T17:53:56Z","updated_at":"2016-06-01T17:53:56Z","author_association":"CONTRIBUTOR","body":"And is this a real-world test case?  Caching is based on query expense and reuse.  Does the rest reflect that?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223135876","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-223135876","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":223135876,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzEzNTg3Ng==","user":{"login":"jfenc91","id":3521256,"node_id":"MDQ6VXNlcjM1MjEyNTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3521256?v=4","gravatar_id":"","url":"https://api.github.com/users/jfenc91","html_url":"https://github.com/jfenc91","followers_url":"https://api.github.com/users/jfenc91/followers","following_url":"https://api.github.com/users/jfenc91/following{/other_user}","gists_url":"https://api.github.com/users/jfenc91/gists{/gist_id}","starred_url":"https://api.github.com/users/jfenc91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfenc91/subscriptions","organizations_url":"https://api.github.com/users/jfenc91/orgs","repos_url":"https://api.github.com/users/jfenc91/repos","events_url":"https://api.github.com/users/jfenc91/events{/privacy}","received_events_url":"https://api.github.com/users/jfenc91/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T21:51:05Z","updated_at":"2016-06-01T21:51:05Z","author_association":"NONE","body":"Thanks for taking a look @jimferenczi @clintongormley !\n\nThis is a real world use case. The traffic against this cluster was replicated from a production setting. \n\nI have confirmed that caching is being used to some extent through checking the cluster metrics.  Additionally, I had had to debug an issue where I set the indices.queries.cache.count too high and caused slow cache lookups. Currently I have that set at 500,000 which seems to not cause any issues. If this was not using the cache I would expect to be seeing many more stack traces regarding query evaluation (which I did see on the first few times the query was executed on the cluster). \n\nUnfortunately the exact query is not mine to share, but here is an anonymized sample version.  Admittedly it is still structured for 1.7.3 caching. However, when I was profiling with hotthreads I did account for the reality that it takes a certain amount of reuse of the query before it ends up in the LRUCache. \n\nhttps://gist.github.com/jfenc91/240616ff625bf4d60957c42a6f7fc0f2\n\nOn total the query has somewhere between 1-1.5k terms. The phrase queries that I have are ranging from 1 – 12 tokens and are typically no more than 5. The parts of this query that are indicated for caching get reused a few hundered times a day and tend to change a few times a week to a few times a month. \n\nAlso some other stats. \nnumber of Indexes: 7\nshards per index: 5\nTotal segments at time of test: ~350 \nAvailable cores on data nodes: 160\n\nCheers! \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223138998","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-223138998","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":223138998,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzEzODk5OA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-06-01T22:04:12Z","updated_at":"2016-06-01T22:04:12Z","author_association":"CONTRIBUTOR","body":"I think you are right we should try to avoid seeking the terms dict when we are going to use a cached entry anyway.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223231370","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-223231370","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":223231370,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzIzMTM3MA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-06-02T08:44:05Z","updated_at":"2016-06-02T08:44:05Z","author_association":"CONTRIBUTOR","body":"I opened https://issues.apache.org/jira/browse/LUCENE-7311 for discussion.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223389326","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-223389326","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":223389326,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzM4OTMyNg==","user":{"login":"jfenc91","id":3521256,"node_id":"MDQ6VXNlcjM1MjEyNTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3521256?v=4","gravatar_id":"","url":"https://api.github.com/users/jfenc91","html_url":"https://github.com/jfenc91","followers_url":"https://api.github.com/users/jfenc91/followers","following_url":"https://api.github.com/users/jfenc91/following{/other_user}","gists_url":"https://api.github.com/users/jfenc91/gists{/gist_id}","starred_url":"https://api.github.com/users/jfenc91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfenc91/subscriptions","organizations_url":"https://api.github.com/users/jfenc91/orgs","repos_url":"https://api.github.com/users/jfenc91/repos","events_url":"https://api.github.com/users/jfenc91/events{/privacy}","received_events_url":"https://api.github.com/users/jfenc91/received_events","type":"User","site_admin":false},"created_at":"2016-06-02T19:00:43Z","updated_at":"2016-06-02T19:34:30Z","author_association":"NONE","body":"Thanks for jumping in here @jpountz! \n\nSo I did a quick hack to make the call to createWeight more lazy:\nhttps://github.com/elastic/elasticsearch/compare/b9e4a6acad4008027e4038f6abed7f7dba346f94...jfenc91:feature_queryCacheHack\nhttps://github.com/jfenc91/lucene-solr/compare/release_5.5.0...jfenc91:feature_queryCacheHack\n\nUnfortunately, even with that change, the caching is not competitive to the 1.7.3 version. Here is what I am now getting out of hotthreads:\nhttps://gist.github.com/jfenc91/88a3179cf3c3136964c1a8167fbf8b73\n\nSo I am left with a few questions/thoughts\n\n1)  I am seeing a bunch of LRUQueryCache.java:643 which in my fork happens when shouldCache(context)= false. So for some reason some parts of the query are not being cached. Since I am fairly certain I am hitting the lru requirement I am less sure about this line: ReaderUtil.getTopLevelContext(context).reader().maxDoc(). Is that basically the number of docs that the query is filtering against? Or the resulting number of docs we would get if the query were “*” instead of some other term? \n\n2)  In 1.7.3 I specified what needed to be cached. So my 1.5k terms in a query phrase resulted in one cached result. Here it seems like lucene is decomposing the query and building a cache for individual portions of it? Should the top level Boolean query be cached as well? If so, is the idea that the other portions of the query will eventual get lru-ed out of the cache and we will just be left with the bitset for the top level Boolean query? \n\nHere are some of my cache stats:\n• _size_in_bytes: 18428944,\n• total_count: 5121219796,\n• hit_count: 48890920,\n• miss_count: 5072328876,\n• cache_size: 10147,\n• cache_count: 232641,\n• evictions: 22249\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/223792317","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-223792317","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":223792317,"node_id":"MDEyOklzc3VlQ29tbWVudDIyMzc5MjMxNw==","user":{"login":"jfenc91","id":3521256,"node_id":"MDQ6VXNlcjM1MjEyNTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3521256?v=4","gravatar_id":"","url":"https://api.github.com/users/jfenc91","html_url":"https://github.com/jfenc91","followers_url":"https://api.github.com/users/jfenc91/followers","following_url":"https://api.github.com/users/jfenc91/following{/other_user}","gists_url":"https://api.github.com/users/jfenc91/gists{/gist_id}","starred_url":"https://api.github.com/users/jfenc91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfenc91/subscriptions","organizations_url":"https://api.github.com/users/jfenc91/orgs","repos_url":"https://api.github.com/users/jfenc91/repos","events_url":"https://api.github.com/users/jfenc91/events{/privacy}","received_events_url":"https://api.github.com/users/jfenc91/received_events","type":"User","site_admin":false},"created_at":"2016-06-05T04:20:26Z","updated_at":"2016-07-17T19:28:39Z","author_association":"NONE","body":"After looking into this more, my problem is an ineffective query caching policy. \n\nThings get a bit better with the following:\n1) An XUsageTrackingQueryCachingPolicy with a configurable history size. It seems that boolean queries that are composed of more than 256 sub-queries simply can't be cached right now because the length of the history:\n\nhttps://github.com/elastic/elasticsearch/blob/v2.3.2/core/src/main/java/org/apache/lucene/search/XUsageTrackingQueryCachingPolicy.java#L83\n\n2) Removing the guard against caching document sets that are very small. My complex queries tend to match very few results in the index and it looks like there is (smaller than .03% of the segment/shard/index I'm not sure... But regardless I am failing that check):\n\nhttps://github.com/apache/lucene-solr/blob/releases/lucene-solr/5.5.0/lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.java#L95\n\n3) Removing the guard against caching in large segments/shards (not sure which). This seems to be another one of those guards that really prevent caching from working at moments where it is needed most. Especially with roaring bitmaps, shards tons of documents combined with queries that have very few hits are really where caching is at it's best. Admittedly I understand this check the least. So, maybe I am missing something and this wasn’t really necessary to remove.\n\nhttps://github.com/apache/lucene-solr/blob/releases/lucene-solr/5.5.0/lucene/core/src/java/org/apache/lucene/search/LRUQueryCache.java#L613\n\nEven after addressing these three issues, I found my cache was being swamped by simpler queries and the stuff that was really important to cache wasn't really surviving evictions. I could implement and propose changes to the existing query cache policy to better fit my use case, but at the end of the day, it is really hard to make sure those changes won't end up hurting some other use case. I think this kind of highlights the need for pluggable query cache policies. \n\nWhat are your thoughts @clintongormley @jpountz?\n\nMore Notes:\nAfter eliminating some locking in the LRU cache (I changed it to a ReentrantReadWriteLock) and replacing the logic of shouldCache() with something that better fit my use case, my 3 second latency spikes with real traffic on 1.7 are now comparable to 14 second latency spikes with 2.3. The query equality checks are possibly slowing things down compared to the previous cache keys. But anyway, It would be really awesome if there was a path to make future versions of Elasticsearch performant for my use case.   \n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/227380935","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-227380935","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":227380935,"node_id":"MDEyOklzc3VlQ29tbWVudDIyNzM4MDkzNQ==","user":{"login":"longliveenduro","id":599308,"node_id":"MDQ6VXNlcjU5OTMwOA==","avatar_url":"https://avatars3.githubusercontent.com/u/599308?v=4","gravatar_id":"","url":"https://api.github.com/users/longliveenduro","html_url":"https://github.com/longliveenduro","followers_url":"https://api.github.com/users/longliveenduro/followers","following_url":"https://api.github.com/users/longliveenduro/following{/other_user}","gists_url":"https://api.github.com/users/longliveenduro/gists{/gist_id}","starred_url":"https://api.github.com/users/longliveenduro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/longliveenduro/subscriptions","organizations_url":"https://api.github.com/users/longliveenduro/orgs","repos_url":"https://api.github.com/users/longliveenduro/repos","events_url":"https://api.github.com/users/longliveenduro/events{/privacy}","received_events_url":"https://api.github.com/users/longliveenduro/received_events","type":"User","site_admin":false},"created_at":"2016-06-21T08:57:52Z","updated_at":"2016-06-21T08:57:52Z","author_association":"NONE","body":"Very interesting, we also have at least doubled our latency by using ES 2.3.3 and we are using simpler filters than in your query. I hope there will be some progress.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233163717","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-233163717","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":233163717,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzE2MzcxNw==","user":{"login":"ben-manes","id":378614,"node_id":"MDQ6VXNlcjM3ODYxNA==","avatar_url":"https://avatars3.githubusercontent.com/u/378614?v=4","gravatar_id":"","url":"https://api.github.com/users/ben-manes","html_url":"https://github.com/ben-manes","followers_url":"https://api.github.com/users/ben-manes/followers","following_url":"https://api.github.com/users/ben-manes/following{/other_user}","gists_url":"https://api.github.com/users/ben-manes/gists{/gist_id}","starred_url":"https://api.github.com/users/ben-manes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ben-manes/subscriptions","organizations_url":"https://api.github.com/users/ben-manes/orgs","repos_url":"https://api.github.com/users/ben-manes/repos","events_url":"https://api.github.com/users/ben-manes/events{/privacy}","received_events_url":"https://api.github.com/users/ben-manes/received_events","type":"User","site_admin":false},"created_at":"2016-07-17T03:54:45Z","updated_at":"2016-07-17T03:54:45Z","author_association":"NONE","body":"#16802 might be helpful here.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/233263294","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-233263294","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":233263294,"node_id":"MDEyOklzc3VlQ29tbWVudDIzMzI2MzI5NA==","user":{"login":"longliveenduro","id":599308,"node_id":"MDQ6VXNlcjU5OTMwOA==","avatar_url":"https://avatars3.githubusercontent.com/u/599308?v=4","gravatar_id":"","url":"https://api.github.com/users/longliveenduro","html_url":"https://github.com/longliveenduro","followers_url":"https://api.github.com/users/longliveenduro/followers","following_url":"https://api.github.com/users/longliveenduro/following{/other_user}","gists_url":"https://api.github.com/users/longliveenduro/gists{/gist_id}","starred_url":"https://api.github.com/users/longliveenduro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/longliveenduro/subscriptions","organizations_url":"https://api.github.com/users/longliveenduro/orgs","repos_url":"https://api.github.com/users/longliveenduro/repos","events_url":"https://api.github.com/users/longliveenduro/events{/privacy}","received_events_url":"https://api.github.com/users/longliveenduro/received_events","type":"User","site_admin":false},"created_at":"2016-07-18T08:11:16Z","updated_at":"2016-07-18T08:11:16Z","author_association":"NONE","body":"Thanks for the hint! Looks promising!\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/277242432","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-277242432","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":277242432,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NzI0MjQzMg==","user":{"login":"amazoyer","id":8255044,"node_id":"MDQ6VXNlcjgyNTUwNDQ=","avatar_url":"https://avatars2.githubusercontent.com/u/8255044?v=4","gravatar_id":"","url":"https://api.github.com/users/amazoyer","html_url":"https://github.com/amazoyer","followers_url":"https://api.github.com/users/amazoyer/followers","following_url":"https://api.github.com/users/amazoyer/following{/other_user}","gists_url":"https://api.github.com/users/amazoyer/gists{/gist_id}","starred_url":"https://api.github.com/users/amazoyer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amazoyer/subscriptions","organizations_url":"https://api.github.com/users/amazoyer/orgs","repos_url":"https://api.github.com/users/amazoyer/repos","events_url":"https://api.github.com/users/amazoyer/events{/privacy}","received_events_url":"https://api.github.com/users/amazoyer/received_events","type":"User","site_admin":false},"created_at":"2017-02-03T13:06:31Z","updated_at":"2017-02-03T13:06:45Z","author_association":"NONE","body":"I have the same concern with the caching policy. It would be great if caching policy was pluggable.\r\n@jfenc91 : did you find a work around for your problem?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/277319330","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-277319330","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":277319330,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NzMxOTMzMA==","user":{"login":"jfenc91","id":3521256,"node_id":"MDQ6VXNlcjM1MjEyNTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3521256?v=4","gravatar_id":"","url":"https://api.github.com/users/jfenc91","html_url":"https://github.com/jfenc91","followers_url":"https://api.github.com/users/jfenc91/followers","following_url":"https://api.github.com/users/jfenc91/following{/other_user}","gists_url":"https://api.github.com/users/jfenc91/gists{/gist_id}","starred_url":"https://api.github.com/users/jfenc91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfenc91/subscriptions","organizations_url":"https://api.github.com/users/jfenc91/orgs","repos_url":"https://api.github.com/users/jfenc91/repos","events_url":"https://api.github.com/users/jfenc91/events{/privacy}","received_events_url":"https://api.github.com/users/jfenc91/received_events","type":"User","site_admin":false},"created_at":"2017-02-03T18:08:53Z","updated_at":"2017-02-03T18:14:02Z","author_association":"NONE","body":"@amazoyer I'm still on 1.7.3. The best option I have come across is indexing (and then reindexing + updating) the query result with a query id. Although ES is ridiculously fast and doesn't need query caching for the typical use case.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286647225","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-286647225","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":286647225,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjY0NzIyNQ==","user":{"login":"kainosnoema","id":145951,"node_id":"MDQ6VXNlcjE0NTk1MQ==","avatar_url":"https://avatars1.githubusercontent.com/u/145951?v=4","gravatar_id":"","url":"https://api.github.com/users/kainosnoema","html_url":"https://github.com/kainosnoema","followers_url":"https://api.github.com/users/kainosnoema/followers","following_url":"https://api.github.com/users/kainosnoema/following{/other_user}","gists_url":"https://api.github.com/users/kainosnoema/gists{/gist_id}","starred_url":"https://api.github.com/users/kainosnoema/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kainosnoema/subscriptions","organizations_url":"https://api.github.com/users/kainosnoema/orgs","repos_url":"https://api.github.com/users/kainosnoema/repos","events_url":"https://api.github.com/users/kainosnoema/events{/privacy}","received_events_url":"https://api.github.com/users/kainosnoema/received_events","type":"User","site_admin":false},"created_at":"2017-03-15T05:48:00Z","updated_at":"2017-03-15T05:52:10Z","author_association":"NONE","body":"We were also just bitten by the caching changes in 2.x+ on a production workload. Currently still trying to find a solution, but it's looking like ES just can't do what it used to here. Queries that include about a half-dozen cached terms filters with up to hundreds of terms each went from ~80ms to 8-9 seconds—no longer able to be run in real-time.\r\n\r\nAre there any plans to bring some level of caching control back?","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286674495","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-286674495","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":286674495,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjY3NDQ5NQ==","user":{"login":"setaou","id":524358,"node_id":"MDQ6VXNlcjUyNDM1OA==","avatar_url":"https://avatars0.githubusercontent.com/u/524358?v=4","gravatar_id":"","url":"https://api.github.com/users/setaou","html_url":"https://github.com/setaou","followers_url":"https://api.github.com/users/setaou/followers","following_url":"https://api.github.com/users/setaou/following{/other_user}","gists_url":"https://api.github.com/users/setaou/gists{/gist_id}","starred_url":"https://api.github.com/users/setaou/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/setaou/subscriptions","organizations_url":"https://api.github.com/users/setaou/orgs","repos_url":"https://api.github.com/users/setaou/repos","events_url":"https://api.github.com/users/setaou/events{/privacy}","received_events_url":"https://api.github.com/users/setaou/received_events","type":"User","site_admin":false},"created_at":"2017-03-15T08:36:02Z","updated_at":"2017-03-15T08:36:02Z","author_association":"NONE","body":"We did hit what seemed to be the same bug in the end of 2016. Having found no solution, we tried to fork ES+Lucene to bring back the _cache query parameter in order to better control the caching (see https://github.com/geneanet/elasticsearch/commits/geneanet-cachetuning and https://github.com/geneanet/lucene-solr/commits/geneanet-cachetuning for reference). It did not improve the situation, so either our patch was not really effective or the problem was more complex than just adjusting what should be cached or not.\r\n\r\nCurrently, our only solution is to keep using ES 1.7, as ES 5 has for our use cases a slightly lower performance and a much greater resource usage (about 3 x more CPU usage).","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286875074","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-286875074","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":286875074,"node_id":"MDEyOklzc3VlQ29tbWVudDI4Njg3NTA3NA==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-03-15T20:51:33Z","updated_at":"2017-03-15T20:51:33Z","author_association":"CONTRIBUTOR","body":"> Are there any plans to bring some level of caching control back?\r\n\r\nWe made and will keep making changes that improve caching, however we have no plans to bring back cache control options.\r\n\r\n> It did not improve the situation, so either our patch was not really effective or the problem was more complex than just adjusting what should be cached or not.\r\n\r\nThis is very likely indeed. ES 1.7 was relying a lot on caching into bitsets in order to be able to run conjunctions using bitwise operations, but in a way that did not fit well into how Lucene performs query planning. In ES 2.0 we changed cache entries to have a sparse representation and conjunctions to run more consistently, in a way that is easier to reason about but does not use bitwise operations. As a consequence, some queries might indeed perform slower (but other queries also perform faster) and just changing the query caching heuristics is not enough to restore the 1.7 behaviour.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/286936972","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-286936972","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":286936972,"node_id":"MDEyOklzc3VlQ29tbWVudDI4NjkzNjk3Mg==","user":{"login":"jfenc91","id":3521256,"node_id":"MDQ6VXNlcjM1MjEyNTY=","avatar_url":"https://avatars0.githubusercontent.com/u/3521256?v=4","gravatar_id":"","url":"https://api.github.com/users/jfenc91","html_url":"https://github.com/jfenc91","followers_url":"https://api.github.com/users/jfenc91/followers","following_url":"https://api.github.com/users/jfenc91/following{/other_user}","gists_url":"https://api.github.com/users/jfenc91/gists{/gist_id}","starred_url":"https://api.github.com/users/jfenc91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfenc91/subscriptions","organizations_url":"https://api.github.com/users/jfenc91/orgs","repos_url":"https://api.github.com/users/jfenc91/repos","events_url":"https://api.github.com/users/jfenc91/events{/privacy}","received_events_url":"https://api.github.com/users/jfenc91/received_events","type":"User","site_admin":false},"created_at":"2017-03-16T02:10:03Z","updated_at":"2017-03-16T02:27:46Z","author_association":"NONE","body":"I got 75% of the way to the old performance when I ensured that the cache was used optimally as if I was explicitly caching. The remaining bit may be obtainable by optimizing out the query comparison (since that is very expensive for the use case where caching matters) and instead only comparing provided cache keys. \r\n\r\nHonestly, I believe the situation where ES is now targeting for caching is where things didn't need to be cached in the first place. I would love to see ES go back to the direction of at least offering explicate caching (because automatic caching is really hard to get right and it probably is not possible to get to an effective automatic caching solution by only leveraging the lucene layer). ","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/288206389","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-288206389","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":288206389,"node_id":"MDEyOklzc3VlQ29tbWVudDI4ODIwNjM4OQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2017-03-21T20:22:41Z","updated_at":"2017-03-21T20:22:41Z","author_association":"CONTRIBUTOR","body":"Keep upgrading - things have improved greatly in 5.x, and we have more optimizations which will be released shortly.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/288207943","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-288207943","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":288207943,"node_id":"MDEyOklzc3VlQ29tbWVudDI4ODIwNzk0Mw==","user":{"login":"kainosnoema","id":145951,"node_id":"MDQ6VXNlcjE0NTk1MQ==","avatar_url":"https://avatars1.githubusercontent.com/u/145951?v=4","gravatar_id":"","url":"https://api.github.com/users/kainosnoema","html_url":"https://github.com/kainosnoema","followers_url":"https://api.github.com/users/kainosnoema/followers","following_url":"https://api.github.com/users/kainosnoema/following{/other_user}","gists_url":"https://api.github.com/users/kainosnoema/gists{/gist_id}","starred_url":"https://api.github.com/users/kainosnoema/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kainosnoema/subscriptions","organizations_url":"https://api.github.com/users/kainosnoema/orgs","repos_url":"https://api.github.com/users/kainosnoema/repos","events_url":"https://api.github.com/users/kainosnoema/events{/privacy}","received_events_url":"https://api.github.com/users/kainosnoema/received_events","type":"User","site_admin":false},"created_at":"2017-03-21T20:28:01Z","updated_at":"2017-03-21T20:28:01Z","author_association":"NONE","body":"@clintongormley thanks, that's actually our current strategy. We're re-writing all our queries to be 5.x compatible and will be upgrading later this week or early next. I'll update here with the results.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/290671025","html_url":"https://github.com/elastic/elasticsearch/issues/18680#issuecomment-290671025","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/18680","id":290671025,"node_id":"MDEyOklzc3VlQ29tbWVudDI5MDY3MTAyNQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T09:56:24Z","updated_at":"2017-03-31T09:56:24Z","author_association":"CONTRIBUTOR","body":"There have been a number of changes that should make things better in 5.3/5.4 so I'm going to close that issue. I'm not saying it will now perform on par with 1.7, some queries are still going to be slower and others faster. When facing slow queries, it is also important to look a whether documents are modeled in a good way: the best speedups are obtained by modeling documents in a way that makes queries simpler. Here is a subset of changes that have helped filter caching over the last months:\r\n - #21566 term queries are not cached anymore, leaving space in the history for more complex queries\r\n - #23079 nested queries and mappings add fewer implicit filters\r\n - https://issues.apache.org/jira/browse/LUCENE-7677 Compound filters are cached earlier than leaf filters.\r\n - https://issues.apache.org/jira/browse/LUCENE-7235 Do not take the lock on small segments.\r\n - https://issues.apache.org/jira/browse/LUCENE-7237 Skip using the cache under contention.\r\n - #22316 Improved concurrency of ShardCoreKeyMap.\r\n\r\nIn addition to that, there have been efforts to make queries faster when they are not cached, in particular `range` (https://issues.apache.org/jira/browse/LUCENE-7643) and `nested` (https://issues.apache.org/jira/browse/LUCENE-7654).","performed_via_github_app":null}]