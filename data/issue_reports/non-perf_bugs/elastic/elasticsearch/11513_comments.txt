[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109305213","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-109305213","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":109305213,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTMwNTIxMw==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-06-05T14:12:17Z","updated_at":"2015-06-05T14:12:17Z","author_association":"CONTRIBUTOR","body":"Even with  `coerce:false`, the out-of-range byte value doesn't fail, and the short shouldn't fail with `coerce:true`, but does...\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/112594511","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-112594511","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":112594511,"node_id":"MDEyOklzc3VlQ29tbWVudDExMjU5NDUxMQ==","user":{"login":"szroland","id":10174523,"node_id":"MDQ6VXNlcjEwMTc0NTIz","avatar_url":"https://avatars2.githubusercontent.com/u/10174523?v=4","gravatar_id":"","url":"https://api.github.com/users/szroland","html_url":"https://github.com/szroland","followers_url":"https://api.github.com/users/szroland/followers","following_url":"https://api.github.com/users/szroland/following{/other_user}","gists_url":"https://api.github.com/users/szroland/gists{/gist_id}","starred_url":"https://api.github.com/users/szroland/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szroland/subscriptions","organizations_url":"https://api.github.com/users/szroland/orgs","repos_url":"https://api.github.com/users/szroland/repos","events_url":"https://api.github.com/users/szroland/events{/privacy}","received_events_url":"https://api.github.com/users/szroland/received_events","type":"User","site_admin":false},"created_at":"2015-06-16T22:40:22Z","updated_at":"2015-06-16T22:40:22Z","author_association":"CONTRIBUTOR","body":"Fields mapped as byte actually get read as short and then cast to byte. E.g. if you map the field as byte and send in the 33000 value, you get the same error (e.g. out of range for **short**), e.g.:\n\n```\nat org.elasticsearch.common.xcontent.support.AbstractXContentParser.shortValue(AbstractXContentParser.java:108)\nat org.elasticsearch.index.mapper.core.ByteFieldMapper.innerParseCreateField(ByteFieldMapper.java:289)\n```\n\nFor consistency, `AbstractXContentParser.byteValue()` method could be created that ultimately could call `JsonParser.getByteValue()`, which does include byte range check, assuming this behavior of the range check in the parser is desired. However, this is why coerce has no effect.\n\nCoerce works converting String values, but not for down-casting numeric values for short/byte fields, since the range check is in JsonParser in the latter case, e.g. `ensureNumberConversion()` is too late, the parser will have thrown the exception by then if the incoming value is numeric.\n\nJsonParser only checks range for short and byte (e.g. not for int). So an approach could be to always parse the value as int and then cast down for short/byte fields. `ensureNumberConversion()` would then ensure range enforcement as needed. I think this approach would be more consistent overall than relying on `JsonParser.getShortValue()`/`JsonParser.getByteValue()` for short/byte, and `ensureNumberConversion()` for int/float range check.\n\nIf you agree, I can implement this.\n\nCoerce documentations also doesn't explicitly mention the behavior of casting down, it only mentions truncating fractions, which is not exactly the same thing, strictly speaking. Maybe it should be spelled out that not only will your 10.2 be converted to 10, but also 266 will become 10 for byte fields.\n\nAnother consistency issue is that even if coerce is set and String values are accepted, fractions cause `NumberFormatException`, so while `330.12` and `\"330\"` are accepted, `\"330.12\"` is not. JsonParser explicitly checks for the `.` to decide between `long` and `double`, the same approach could be used here as well.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/113148495","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-113148495","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":113148495,"node_id":"MDEyOklzc3VlQ29tbWVudDExMzE0ODQ5NQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2015-06-18T13:02:00Z","updated_at":"2015-06-18T13:02:00Z","author_association":"CONTRIBUTOR","body":"@szroland +1 this proposal makes sense to me.\n\n> If you agree, I can implement this.\n\nFeel free to ping me when you have a PR ready.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/113301886","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-113301886","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":113301886,"node_id":"MDEyOklzc3VlQ29tbWVudDExMzMwMTg4Ng==","user":{"login":"szroland","id":10174523,"node_id":"MDQ6VXNlcjEwMTc0NTIz","avatar_url":"https://avatars2.githubusercontent.com/u/10174523?v=4","gravatar_id":"","url":"https://api.github.com/users/szroland","html_url":"https://github.com/szroland","followers_url":"https://api.github.com/users/szroland/followers","following_url":"https://api.github.com/users/szroland/following{/other_user}","gists_url":"https://api.github.com/users/szroland/gists{/gist_id}","starred_url":"https://api.github.com/users/szroland/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szroland/subscriptions","organizations_url":"https://api.github.com/users/szroland/orgs","repos_url":"https://api.github.com/users/szroland/repos","events_url":"https://api.github.com/users/szroland/events{/privacy}","received_events_url":"https://api.github.com/users/szroland/received_events","type":"User","site_admin":false},"created_at":"2015-06-18T22:06:30Z","updated_at":"2015-06-18T22:06:30Z","author_association":"CONTRIBUTOR","body":"Looking at this a bit more I think we might want to be just a little bit careful, and make sure the semantics of coerce is fully intended. Bytes are problematic, because they are read as shorts and then casted to byte. So to illustrate the issue, let me use a short field, and the value 32768, which is `Short.MAX_VALUE` + 1, e.g. fits only into an int.\n\nCurrent behavior:\n\n| Input | Output (coerce=true) | Output (coerce=false) |\n| --- | --- | --- |\n| 42 | 42 | 42 |\n| 42.12 | 42 | IllegalArgumentException |\n| \"42\" | 42 | IllegalArgumentException |\n| \"42.12\" | NumberFormatException | IllegalArgumentException |\n| 32768 | JsonParseException | JsonParseException |\n| 32768.12 | JsonParseException | JsonParseException |\n| \"32768\" | NumberFormatException | IllegalArgumentException |\n| \"32768.12\" | NumberFormatException | IllegalArgumentException |\n| true | JsonParseException | JsonParseException |\n| \"true\" | NumberFormatException | IllegalArgumentException |\n\nThe issue is that 42.12 is accepted, but \"42.12\" is not, even though coerce also supposed to mean to accept the number as a string.\nOther issue is that overflow is sometimes an IllegalArgumentException, which can be ignored using ignore_malformed, sometimes it is JsonParseException, which can not be ignored.\nWith bytes, there is also the automatic cast, which results in even the integer of the number changing (e.g. from 266 to 10).\n\nSo one possible behavior is that the integer part must be in range, but when `coerce` is true the number can have a fractional part which is cut off and/or it can also be input as string.\n\n| Input | Output (coerce=true) | Output (coerce=false) |\n| --- | --- | --- |\n| 42 | 42 | 42 |\n| 42.12 | 42 | IllegalArgumentException |\n| \"42\" | 42 | IllegalArgumentException |\n| \"42.12\" | **42** | IllegalArgumentException |\n| 32768 | **IllegalArgumentException** | **IllegalArgumentException** |\n| 32768.12 | **IllegalArgumentException** | **IllegalArgumentException** |\n| \"32768\" | NumberFormatException | IllegalArgumentException |\n| \"32768.12\" | NumberFormatException | IllegalArgumentException |\n| true | **IllegalArgumentException** | **IllegalArgumentException** |\n| \"true\" | NumberFormatException | IllegalArgumentException |\n\nThe alternative is to allow the implicit casting of out-of-range values when coerce is true, not only for bytes but for other types as well, but that can be a little bit confusing e.g. turning into negative value in this case.\n\n| Input | Output (coerce=true) | Output (coerce=false) |\n| --- | --- | --- |\n| 42 | 42 | 42 |\n| 42.12 | 42 | IllegalArgumentException |\n| \"42\" | 42 | IllegalArgumentException |\n| \"42.12\" | **42** | IllegalArgumentException |\n| 32768 | :boom: **-32768** | **IllegalArgumentException** |\n| 32768.12 | :boom: **-32768** | **IllegalArgumentException** |\n| \"32768\" | :boom: **-32768** | IllegalArgumentException |\n| \"32768.12\" | :boom: **-32768** | IllegalArgumentException |\n| true | **IllegalArgumentException** | **IllegalArgumentException** |\n| \"true\" | NumberFormatException | IllegalArgumentException |\n\nReading back I'm getting mixed signals on this casting aspect of coerce from @passing and @clintongormley.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/160393842","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-160393842","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":160393842,"node_id":"MDEyOklzc3VlQ29tbWVudDE2MDM5Mzg0Mg==","user":{"login":"anujgandharv","id":1678221,"node_id":"MDQ6VXNlcjE2NzgyMjE=","avatar_url":"https://avatars2.githubusercontent.com/u/1678221?v=4","gravatar_id":"","url":"https://api.github.com/users/anujgandharv","html_url":"https://github.com/anujgandharv","followers_url":"https://api.github.com/users/anujgandharv/followers","following_url":"https://api.github.com/users/anujgandharv/following{/other_user}","gists_url":"https://api.github.com/users/anujgandharv/gists{/gist_id}","starred_url":"https://api.github.com/users/anujgandharv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anujgandharv/subscriptions","organizations_url":"https://api.github.com/users/anujgandharv/orgs","repos_url":"https://api.github.com/users/anujgandharv/repos","events_url":"https://api.github.com/users/anujgandharv/events{/privacy}","received_events_url":"https://api.github.com/users/anujgandharv/received_events","type":"User","site_admin":false},"created_at":"2015-11-29T09:29:53Z","updated_at":"2015-11-29T09:29:53Z","author_association":"NONE","body":"When is it planned to be fixed? We have a use case where we need this functionality.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/187837031","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-187837031","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":187837031,"node_id":"MDEyOklzc3VlQ29tbWVudDE4NzgzNzAzMQ==","user":{"login":"martinhynar","id":1698238,"node_id":"MDQ6VXNlcjE2OTgyMzg=","avatar_url":"https://avatars0.githubusercontent.com/u/1698238?v=4","gravatar_id":"","url":"https://api.github.com/users/martinhynar","html_url":"https://github.com/martinhynar","followers_url":"https://api.github.com/users/martinhynar/followers","following_url":"https://api.github.com/users/martinhynar/following{/other_user}","gists_url":"https://api.github.com/users/martinhynar/gists{/gist_id}","starred_url":"https://api.github.com/users/martinhynar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martinhynar/subscriptions","organizations_url":"https://api.github.com/users/martinhynar/orgs","repos_url":"https://api.github.com/users/martinhynar/repos","events_url":"https://api.github.com/users/martinhynar/events{/privacy}","received_events_url":"https://api.github.com/users/martinhynar/received_events","type":"User","site_admin":false},"created_at":"2016-02-23T18:46:25Z","updated_at":"2016-02-23T18:46:25Z","author_association":"NONE","body":"It seems that not only byte allows decimals, I see the same behavior with short, integer, and long too.\nWith this mapping\n\n```\n{ \"mappings\": {\n    \"example\": {\n      \"properties\": {\n        \"number_long\": { \"type\": \"long\", \"coerce\": true },\n        \"number_integer\": { \"type\": \"integer\", \"coerce\": true },\n        \"number_short\":  { \"type\": \"short\", \"coerce\": true }}}}}\n```\n\nand document\n\n```\n{ \"number_long\": 42.5,\n  \"number_integer\": 42.5,\n  \"number_short\": 42.5 }\n```\n\nI am getting values that are not integers. `_search?fields=number_long,number_integer,number_short,_source`\n\n```\n\"hits\": [{\n        \"_index\": \"test-integers\",\n        \"_type\": \"example\",\n        \"_id\": \"1\",\n        \"_score\": 1,\n        \"_source\": {\n          \"number_long\": 42.5,\n          \"number_integer\": 42.5,\n          \"number_short\": 42.5 },\n        \"fields\": {\n          \"number_long\": [ 42.5 ],\n          \"number_integer\": [ 42.5 ],\n          \"number_short\": [ 42.5 ]}}]\n```\n\nBehavior is same on 1.7.4 and 2.2.0.\n\n@szroland How you managed to get 42 from 42.12 with coercion enabled?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/188083931","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-188083931","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":188083931,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODA4MzkzMQ==","user":{"login":"jpountz","id":299848,"node_id":"MDQ6VXNlcjI5OTg0OA==","avatar_url":"https://avatars2.githubusercontent.com/u/299848?v=4","gravatar_id":"","url":"https://api.github.com/users/jpountz","html_url":"https://github.com/jpountz","followers_url":"https://api.github.com/users/jpountz/followers","following_url":"https://api.github.com/users/jpountz/following{/other_user}","gists_url":"https://api.github.com/users/jpountz/gists{/gist_id}","starred_url":"https://api.github.com/users/jpountz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jpountz/subscriptions","organizations_url":"https://api.github.com/users/jpountz/orgs","repos_url":"https://api.github.com/users/jpountz/repos","events_url":"https://api.github.com/users/jpountz/events{/privacy}","received_events_url":"https://api.github.com/users/jpountz/received_events","type":"User","site_admin":false},"created_at":"2016-02-24T05:40:17Z","updated_at":"2016-02-24T05:40:17Z","author_association":"CONTRIBUTOR","body":"@martinhynar those values are retrieved from the `_source`, which elasticsearch does not modify. So if the source contains 42.5 for a field value, trying to read this value from the source will always return 42.5 regardless of the mappings.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/188131321","html_url":"https://github.com/elastic/elasticsearch/issues/11513#issuecomment-188131321","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11513","id":188131321,"node_id":"MDEyOklzc3VlQ29tbWVudDE4ODEzMTMyMQ==","user":{"login":"martinhynar","id":1698238,"node_id":"MDQ6VXNlcjE2OTgyMzg=","avatar_url":"https://avatars0.githubusercontent.com/u/1698238?v=4","gravatar_id":"","url":"https://api.github.com/users/martinhynar","html_url":"https://github.com/martinhynar","followers_url":"https://api.github.com/users/martinhynar/followers","following_url":"https://api.github.com/users/martinhynar/following{/other_user}","gists_url":"https://api.github.com/users/martinhynar/gists{/gist_id}","starred_url":"https://api.github.com/users/martinhynar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martinhynar/subscriptions","organizations_url":"https://api.github.com/users/martinhynar/orgs","repos_url":"https://api.github.com/users/martinhynar/repos","events_url":"https://api.github.com/users/martinhynar/events{/privacy}","received_events_url":"https://api.github.com/users/martinhynar/received_events","type":"User","site_admin":false},"created_at":"2016-02-24T07:58:17Z","updated_at":"2016-02-24T07:58:17Z","author_association":"NONE","body":"@jpountz Thanks for explanation.\nI updated my example locally by adding `\"store\":true` to all fields and now the values returned by search are all 42. I did not realized that store is false by default and therefore values are extracted from `_source`.\n","performed_via_github_app":null}]