[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/116140851","html_url":"https://github.com/elastic/elasticsearch/issues/11895#issuecomment-116140851","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11895","id":116140851,"node_id":"MDEyOklzc3VlQ29tbWVudDExNjE0MDg1MQ==","user":{"login":"pickypg","id":1501235,"node_id":"MDQ6VXNlcjE1MDEyMzU=","avatar_url":"https://avatars2.githubusercontent.com/u/1501235?v=4","gravatar_id":"","url":"https://api.github.com/users/pickypg","html_url":"https://github.com/pickypg","followers_url":"https://api.github.com/users/pickypg/followers","following_url":"https://api.github.com/users/pickypg/following{/other_user}","gists_url":"https://api.github.com/users/pickypg/gists{/gist_id}","starred_url":"https://api.github.com/users/pickypg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pickypg/subscriptions","organizations_url":"https://api.github.com/users/pickypg/orgs","repos_url":"https://api.github.com/users/pickypg/repos","events_url":"https://api.github.com/users/pickypg/events{/privacy}","received_events_url":"https://api.github.com/users/pickypg/received_events","type":"User","site_admin":false},"created_at":"2015-06-27T20:53:27Z","updated_at":"2015-06-27T20:53:27Z","author_association":"MEMBER","body":"Not for or against this, but I wanted to [link to the Avro page](https://github.com/FasterXML/jackson-dataformat-avro#schema-not-optional). One key takeaway that does make it less attractive for me:\n\n> Avro is strongly Schema-based, and all use requires an Avro Schema. Since there is little metadata in encoded in Avro data, it is not possible to know anything about structure of data without Schema.\n\nThis makes it inherently harder to implement than the rest of the formats that we do support.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/116167075","html_url":"https://github.com/elastic/elasticsearch/issues/11895#issuecomment-116167075","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11895","id":116167075,"node_id":"MDEyOklzc3VlQ29tbWVudDExNjE2NzA3NQ==","user":{"login":"mtraynham","id":5741321,"node_id":"MDQ6VXNlcjU3NDEzMjE=","avatar_url":"https://avatars0.githubusercontent.com/u/5741321?v=4","gravatar_id":"","url":"https://api.github.com/users/mtraynham","html_url":"https://github.com/mtraynham","followers_url":"https://api.github.com/users/mtraynham/followers","following_url":"https://api.github.com/users/mtraynham/following{/other_user}","gists_url":"https://api.github.com/users/mtraynham/gists{/gist_id}","starred_url":"https://api.github.com/users/mtraynham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mtraynham/subscriptions","organizations_url":"https://api.github.com/users/mtraynham/orgs","repos_url":"https://api.github.com/users/mtraynham/repos","events_url":"https://api.github.com/users/mtraynham/events{/privacy}","received_events_url":"https://api.github.com/users/mtraynham/received_events","type":"User","site_admin":false},"created_at":"2015-06-28T00:08:45Z","updated_at":"2015-06-28T01:49:10Z","author_association":"NONE","body":"@pickypg That is very good point! Somewhat of a pitfall to Avro.  For RPC, both parties must know the schema to understand the transmitted Avro data; unlike file based serialization that stores a copy of the schema at the top.  Although, an Avro schema is somewhat similar to an ElasticSearch index mapping and it might be possible to infer that schema (or store it on the index mapping).  I only bring it up because you could get a lot more over wire in less time.\n\nThis kind of diverges from my curiosity though, which was more about why XContent responses are built using array/object/field builders and not just POJO's that could be shared through the Java API, like with index mappings or field types or using Jackson directly.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/120385415","html_url":"https://github.com/elastic/elasticsearch/issues/11895#issuecomment-120385415","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11895","id":120385415,"node_id":"MDEyOklzc3VlQ29tbWVudDEyMDM4NTQxNQ==","user":{"login":"spinscale","id":667544,"node_id":"MDQ6VXNlcjY2NzU0NA==","avatar_url":"https://avatars2.githubusercontent.com/u/667544?v=4","gravatar_id":"","url":"https://api.github.com/users/spinscale","html_url":"https://github.com/spinscale","followers_url":"https://api.github.com/users/spinscale/followers","following_url":"https://api.github.com/users/spinscale/following{/other_user}","gists_url":"https://api.github.com/users/spinscale/gists{/gist_id}","starred_url":"https://api.github.com/users/spinscale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/spinscale/subscriptions","organizations_url":"https://api.github.com/users/spinscale/orgs","repos_url":"https://api.github.com/users/spinscale/repos","events_url":"https://api.github.com/users/spinscale/events{/privacy}","received_events_url":"https://api.github.com/users/spinscale/received_events","type":"User","site_admin":false},"created_at":"2015-07-10T11:00:30Z","updated_at":"2015-07-10T11:24:32Z","author_association":"MEMBER","body":"one of the reasons, that we do not use POJOs, is that this would require serialization/deserialization up front and possibly create big objects in memory. This would not be GC friendly.\n\nFor example, take an elasticsearch query. Instead of having to pass the pojo to the different query parser (one for a filtered query, one for a geo shape query, etc.. one for each type), we can just pass the xcontent parser and read through it step by step.\n\nAs you already mentioned, the `XContent` stuff is just a small layer on top of JSON to simplify the handling of streaming data. Due to this, it is not really easy to create POJOs out of this at this layer and you need to do that in your client code.\n\nAs you can see in our `pom.xml` dependencies, we already use the `jackson-dataformat-smile`, `jackson-dataformat-yaml` and `jackson-dataformat-cbor` libraries. Because of the `xContent` abstraction it is really easy for us to support different formats and also extract the format being used in the data sent to elasticsearch (one of the reasons why we can index data in YAML format as well as read JSON configuration files). You may be able to extend the xcontentparsers to also support avro without the need to bind to a POJO by using the `jackson-dataformat-avro` library...\n\nI will close this ticket though, as we will not change our approach here. Hope this helps.\n\n**Update**: One last thing I forgot to mention... we can also do things like exiting early (from example if there is an error how the query was written, not a JSON error, but a semantically one), which would not work in case you create a POJO up front.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/120426928","html_url":"https://github.com/elastic/elasticsearch/issues/11895#issuecomment-120426928","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11895","id":120426928,"node_id":"MDEyOklzc3VlQ29tbWVudDEyMDQyNjkyOA==","user":{"login":"mtraynham","id":5741321,"node_id":"MDQ6VXNlcjU3NDEzMjE=","avatar_url":"https://avatars0.githubusercontent.com/u/5741321?v=4","gravatar_id":"","url":"https://api.github.com/users/mtraynham","html_url":"https://github.com/mtraynham","followers_url":"https://api.github.com/users/mtraynham/followers","following_url":"https://api.github.com/users/mtraynham/following{/other_user}","gists_url":"https://api.github.com/users/mtraynham/gists{/gist_id}","starred_url":"https://api.github.com/users/mtraynham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mtraynham/subscriptions","organizations_url":"https://api.github.com/users/mtraynham/orgs","repos_url":"https://api.github.com/users/mtraynham/repos","events_url":"https://api.github.com/users/mtraynham/events{/privacy}","received_events_url":"https://api.github.com/users/mtraynham/received_events","type":"User","site_admin":false},"created_at":"2015-07-10T14:47:32Z","updated_at":"2015-07-10T14:47:32Z","author_association":"NONE","body":"@spinscale Hey thanks for addressing me.  I do understand the benefits of the streaming aspect and the gains that may be had with query parsing/responses.  In terms of fairly static endpoints that don't receive requests very often, and the schema may be somewhat small and addressable (specifically index mappings), it just seems a bit overkill.  The Java API does have fluid interfaces for handling these types of requests, but it simply builds XContent behind the scenes.  In my case, we load a mapping and add/remove fields as we see fit.  So I found myself implementing POJO's to simulate what XContent would generate.  I couldn't find a good way to read a static index mapping from disk, nor an easy way to modify the fields that were on that mapping using XContent.\n","performed_via_github_app":null}]