[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/113137936","html_url":"https://github.com/elastic/elasticsearch/issues/11709#issuecomment-113137936","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11709","id":113137936,"node_id":"MDEyOklzc3VlQ29tbWVudDExMzEzNzkzNg==","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars1.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"created_at":"2015-06-18T12:27:47Z","updated_at":"2015-06-18T12:27:47Z","author_association":"MEMBER","body":"I have a simple pull request for this https://github.com/kimchy/elasticsearch/tree/retry_on_cluster_block_transport_client, but there is a problem that I am not sure how best to fix, see the commit note for it\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/246309950","html_url":"https://github.com/elastic/elasticsearch/issues/11709#issuecomment-246309950","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11709","id":246309950,"node_id":"MDEyOklzc3VlQ29tbWVudDI0NjMwOTk1MA==","user":{"login":"Inkromind","id":1708396,"node_id":"MDQ6VXNlcjE3MDgzOTY=","avatar_url":"https://avatars2.githubusercontent.com/u/1708396?v=4","gravatar_id":"","url":"https://api.github.com/users/Inkromind","html_url":"https://github.com/Inkromind","followers_url":"https://api.github.com/users/Inkromind/followers","following_url":"https://api.github.com/users/Inkromind/following{/other_user}","gists_url":"https://api.github.com/users/Inkromind/gists{/gist_id}","starred_url":"https://api.github.com/users/Inkromind/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Inkromind/subscriptions","organizations_url":"https://api.github.com/users/Inkromind/orgs","repos_url":"https://api.github.com/users/Inkromind/repos","events_url":"https://api.github.com/users/Inkromind/events{/privacy}","received_events_url":"https://api.github.com/users/Inkromind/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T10:35:59Z","updated_at":"2016-09-12T10:35:59Z","author_association":"NONE","body":"We ran into this issue when one of our nodes was being restarted. It was receiving requests before it was fully initialized and so it threw a ClusterBlockException. The request was not retried with another node.\n\nIs anything going to happen with @kimchy s changes (for which I couldn't find a pull request) or should we catch this exception ourselves and retry (with the possibility that our request is sent to the same node and the same exception occurs)? Or is there another better way to handle this kind of scenario?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/275983106","html_url":"https://github.com/elastic/elasticsearch/issues/11709#issuecomment-275983106","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11709","id":275983106,"node_id":"MDEyOklzc3VlQ29tbWVudDI3NTk4MzEwNg==","user":{"login":"BadgerBadgerBadgerBadger","id":5138570,"node_id":"MDQ6VXNlcjUxMzg1NzA=","avatar_url":"https://avatars0.githubusercontent.com/u/5138570?v=4","gravatar_id":"","url":"https://api.github.com/users/BadgerBadgerBadgerBadger","html_url":"https://github.com/BadgerBadgerBadgerBadger","followers_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/followers","following_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/following{/other_user}","gists_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/gists{/gist_id}","starred_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/subscriptions","organizations_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/orgs","repos_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/repos","events_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/events{/privacy}","received_events_url":"https://api.github.com/users/BadgerBadgerBadgerBadger/received_events","type":"User","site_admin":false},"created_at":"2017-01-30T05:30:04Z","updated_at":"2017-01-30T05:30:04Z","author_association":"NONE","body":"What's the status on this? I believe we've faced the same issue.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/296484398","html_url":"https://github.com/elastic/elasticsearch/issues/11709#issuecomment-296484398","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11709","id":296484398,"node_id":"MDEyOklzc3VlQ29tbWVudDI5NjQ4NDM5OA==","user":{"login":"tanero","id":3600684,"node_id":"MDQ6VXNlcjM2MDA2ODQ=","avatar_url":"https://avatars2.githubusercontent.com/u/3600684?v=4","gravatar_id":"","url":"https://api.github.com/users/tanero","html_url":"https://github.com/tanero","followers_url":"https://api.github.com/users/tanero/followers","following_url":"https://api.github.com/users/tanero/following{/other_user}","gists_url":"https://api.github.com/users/tanero/gists{/gist_id}","starred_url":"https://api.github.com/users/tanero/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tanero/subscriptions","organizations_url":"https://api.github.com/users/tanero/orgs","repos_url":"https://api.github.com/users/tanero/repos","events_url":"https://api.github.com/users/tanero/events{/privacy}","received_events_url":"https://api.github.com/users/tanero/received_events","type":"User","site_admin":false},"created_at":"2017-04-23T19:59:30Z","updated_at":"2017-04-23T19:59:30Z","author_association":"NONE","body":"I receive the same error, when I have connected with TransportClient from java api,  If the node went down and start again, exception occurs.","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/319399205","html_url":"https://github.com/elastic/elasticsearch/issues/11709#issuecomment-319399205","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11709","id":319399205,"node_id":"MDEyOklzc3VlQ29tbWVudDMxOTM5OTIwNQ==","user":{"login":"MorrieAtElastic","id":28967808,"node_id":"MDQ6VXNlcjI4OTY3ODA4","avatar_url":"https://avatars1.githubusercontent.com/u/28967808?v=4","gravatar_id":"","url":"https://api.github.com/users/MorrieAtElastic","html_url":"https://github.com/MorrieAtElastic","followers_url":"https://api.github.com/users/MorrieAtElastic/followers","following_url":"https://api.github.com/users/MorrieAtElastic/following{/other_user}","gists_url":"https://api.github.com/users/MorrieAtElastic/gists{/gist_id}","starred_url":"https://api.github.com/users/MorrieAtElastic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MorrieAtElastic/subscriptions","organizations_url":"https://api.github.com/users/MorrieAtElastic/orgs","repos_url":"https://api.github.com/users/MorrieAtElastic/repos","events_url":"https://api.github.com/users/MorrieAtElastic/events{/privacy}","received_events_url":"https://api.github.com/users/MorrieAtElastic/received_events","type":"User","site_admin":false},"created_at":"2017-08-01T15:07:40Z","updated_at":"2017-08-01T15:07:40Z","author_association":"CONTRIBUTOR","body":"I am reproducing this quite regularly (although not every time) using 5.5.1 transport client against 5.5.1   4-node cluster running on Ubuntu 14/vagrant. \r\n\r\nI'll paste in my simple java code: \r\n- run this against a cluster and confirm connections to all nodes via netstat \r\n- kill a node and the client usually survives the node crash; netstat shows that connections to the crashed nodes are dropped\r\n- restart the node and monitor reconnections to cluster in the logs; in my experience about 50% of the time the client will successfully reconnect to the restarted node but the other 50% of the time the client dies with the following stack: \r\n\r\n```\r\nException in thread \"main\" ClusterBlockException[blocked by: [SERVICE_UNAVAILABLE/1/state not recovered / initialized];]\r\n\tat org.elasticsearch.cluster.block.ClusterBlocks.globalBlockedException(ClusterBlocks.java:165)\r\n\tat org.elasticsearch.cluster.block.ClusterBlocks.globalBlockedRaiseException(ClusterBlocks.java:151)\r\n\tat org.elasticsearch.action.search.TransportSearchAction.executeSearch(TransportSearchAction.java:255)\r\n\tat org.elasticsearch.action.search.TransportSearchAction.doExecute(TransportSearchAction.java:186)\r\n\tat org.elasticsearch.action.search.TransportSearchAction.doExecute(TransportSearchAction.java:65)\r\n\tat org.elasticsearch.action.support.TransportAction$RequestFilterChain.proceed(TransportAction.java:170)\r\n\tat org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:142)\r\n\tat org.elasticsearch.action.support.HandledTransportAction$TransportHandler.messageReceived(HandledTransportAction.java:64)\r\n\tat org.elasticsearch.action.support.HandledTransportAction$TransportHandler.messageReceived(HandledTransportAction.java:54)\r\n\tat org.elasticsearch.transport.RequestHandlerRegistry.processMessageReceived(RequestHandlerRegistry.java:69)\r\n\tat org.elasticsearch.transport.TcpTransport$RequestHandler.doRun(TcpTransport.java:1544)\r\n\tat org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)\r\n\tat org.elasticsearch.common.util.concurrent.EsExecutors$1.execute(EsExecutors.java:110)\r\n\tat org.elasticsearch.transport.TcpTransport.handleRequest(TcpTransport.java:1501)\r\n\tat org.elasticsearch.transport.TcpTransport.messageReceived(TcpTransport.java:1385)\r\n\tat org.elasticsearch.transport.netty4.Netty4MessageChannelHandler.channelRead(Netty4MessageChannelHandler.java:74)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:297)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:413)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926)\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:134)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:544)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:498)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nJava source: \r\n\r\n```\r\npackage com.elastic.app;\r\n\r\nimport java.util.Map;\r\nimport java.io.*;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.net.InetSocketAddress;\r\n\r\nimport org.elasticsearch.cluster.ClusterName;\r\nimport org.elasticsearch.action.search.SearchResponse;\r\nimport org.elasticsearch.client.Client;\r\nimport org.elasticsearch.client.transport.TransportClient;\r\nimport org.elasticsearch.transport.client.PreBuiltTransportClient;\r\nimport org.elasticsearch.common.settings.Settings;\r\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\r\nimport org.elasticsearch.common.transport.TransportAddress;\r\nimport org.elasticsearch.search.SearchHitField;\r\nimport org.elasticsearch.search.SearchHits;\r\nimport org.json.JSONObject;\r\nimport org.elasticsearch.action.search.SearchResponse;\r\nimport org.elasticsearch.action.search.SearchType;\r\nimport org.elasticsearch.client.AdminClient;\r\nimport org.elasticsearch.client.ClusterAdminClient;\r\nimport org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest;\r\nimport org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\r\n\r\n\r\nimport static org.elasticsearch.index.query.QueryBuilders.*;\r\nimport org.elasticsearch.search.aggregations.AggregationBuilders;\r\nimport org.elasticsearch.action.search.SearchResponse;\r\nimport org.elasticsearch.action.search.SearchType;\r\n\r\n\r\npublic class tc {\r\n    public static void main(String[] args) {\r\n\r\n    Settings settings = Settings.builder()\r\n        .put(\"cluster.name\", \"ES_Cluster\")\r\n        .put(\"client.transport.sniff\", false)\r\n        .put(\"client.transport.ping_timeout\", \"30s\")\r\n        .put(\"client.transport.nodes_sampler_interval\", \"30s\")\r\n        .build();\r\n\r\n    TransportClient esclient = new PreBuiltTransportClient(settings)\r\n             .addTransportAddress(new InetSocketTransportAddress(new InetSocketAddress (\"10.142.160.101\", 9300)))\r\n             .addTransportAddress(new InetSocketTransportAddress(new InetSocketAddress (\"10.142.160.102\", 9300)))\r\n             .addTransportAddress(new InetSocketTransportAddress(new InetSocketAddress (\"10.142.160.103\", 9300)))\r\n             .addTransportAddress(new InetSocketTransportAddress(new InetSocketAddress (\"10.142.160.104\", 9300)));\r\n\r\n    System.out.println( \"esclient Built and Connected\" );\r\n \r\n\r\n    for (int indx=0; indx<100000; indx++) {\r\n    SearchResponse response = esclient.prepareSearch(\"nginx_elastic_stack_example\")\r\n                                        .setTypes(\"logs\")\r\n                                        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\r\n                                        .setFrom(0).setSize(60).setExplain(true)\r\n                                        .addAggregation (AggregationBuilders.terms(\"by_country\").field(\"country_name\"))\r\n                                        .execute()\r\n                                        .actionGet();\r\n    }\r\n\r\n    System.out.println( \"Query on nginx logs completed\" );    \r\n\r\n    AdminClient esAdmin = esclient.admin (); \r\n    ClusterHealthResponse eshealth  = esAdmin.cluster().prepareHealth().get(); \r\n\r\n\r\n    //Close Transport Client Connection\r\n    esclient.close();\r\n    System.out.println( \"Closing esclient\" );\r\n\r\n    }\r\n}\r\n\r\n```\r\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/372945756","html_url":"https://github.com/elastic/elasticsearch/issues/11709#issuecomment-372945756","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11709","id":372945756,"node_id":"MDEyOklzc3VlQ29tbWVudDM3Mjk0NTc1Ng==","user":{"login":"javanna","id":832460,"node_id":"MDQ6VXNlcjgzMjQ2MA==","avatar_url":"https://avatars1.githubusercontent.com/u/832460?v=4","gravatar_id":"","url":"https://api.github.com/users/javanna","html_url":"https://github.com/javanna","followers_url":"https://api.github.com/users/javanna/followers","following_url":"https://api.github.com/users/javanna/following{/other_user}","gists_url":"https://api.github.com/users/javanna/gists{/gist_id}","starred_url":"https://api.github.com/users/javanna/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javanna/subscriptions","organizations_url":"https://api.github.com/users/javanna/orgs","repos_url":"https://api.github.com/users/javanna/repos","events_url":"https://api.github.com/users/javanna/events{/privacy}","received_events_url":"https://api.github.com/users/javanna/received_events","type":"User","site_admin":false},"created_at":"2018-03-14T08:46:44Z","updated_at":"2018-03-14T08:46:44Z","author_association":"MEMBER","body":"Our language clients retry `5xx` errors, but not `4xx` responses as they are request errors which should be fixed on the client side. There are different cluster blocks, and they are associated with different response codes: \r\n\r\n|  Block type | response code  |\r\n|---|---|\r\n| CLUSTER_READ_ONLY_BLOCK  | 403  |\r\n|  CLUSTER_READ_ONLY_ALLOW_DELETE_BLOCK | 403  | \r\n|  INDEX_CLOSED_BLOCK | 403  | \r\n|  INDEX_READ_ONLY_BLOCK | 403  | \r\n|  INDEX_WRITE_BLOCK | 403  | \r\n|  INDEX_METADATA_BLOCK | 403  | \r\n|  INDEX_READ_ONLY_ALLOW_DELETE_BLOCK | 403  | \r\n|  NO_MASTER_BLOCK_ALL | 503  | \r\n|  NO_MASTER_BLOCK_WRITES | 503  | \r\n|  STATE_NOT_RECOVERED_BLOCK | 503  | \r\n\r\nBased on the language clients retry logic, only the last three should be retried. For the transport client things are a bit different as it doesn't speak http, and it may not retry with the same logic. Transport Client is deprecated though , see #27085 . I just verified that the java REST client behaves properly when it comes to retries, hence I am closing this.","performed_via_github_app":null}]