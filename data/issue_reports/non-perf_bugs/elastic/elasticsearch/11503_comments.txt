[{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109035560","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-109035560","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":109035560,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTAzNTU2MA==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-06-04T20:15:59Z","updated_at":"2015-06-04T20:15:59Z","author_association":"MEMBER","body":"+1 to being strict. Could we limit to only true/false like booleanparser (i'm all for using it!), and do \"backcompat\" based on index created version?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109048798","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-109048798","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":109048798,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTA0ODc5OA==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-06-04T20:58:50Z","updated_at":"2015-06-04T21:23:53Z","author_association":"CONTRIBUTOR","body":"There are languages, such as Perl, which don't have boolean values.  This is the reason that boolean parsing in Elasticsearch is lenient.\n\nI think it is OK to be lenient (as in have multiple ways of expressing true and false) but then to throw an exception if an unrecognised value is provided, eg:\n- False: `false`, `0`, `\"false\"`, `\"0\"` \n- True: `true`, `\"true\"`, `1`, `\"1\"`\n\nI believe that `no`, `yes`, `on`, `off`, etc are supported because of the YAML spec: http://yaml.org/type/bool.html\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109048952","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-109048952","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":109048952,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTA0ODk1Mg==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2015-06-04T20:59:31Z","updated_at":"2015-06-04T20:59:31Z","author_association":"CONTRIBUTOR","body":"To be clear, my comment applies to values passed through the REST API, as opposed to settings in a config file\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109179727","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-109179727","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":109179727,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTE3OTcyNw==","user":{"login":"rmuir","id":504194,"node_id":"MDQ6VXNlcjUwNDE5NA==","avatar_url":"https://avatars1.githubusercontent.com/u/504194?v=4","gravatar_id":"","url":"https://api.github.com/users/rmuir","html_url":"https://github.com/rmuir","followers_url":"https://api.github.com/users/rmuir/followers","following_url":"https://api.github.com/users/rmuir/following{/other_user}","gists_url":"https://api.github.com/users/rmuir/gists{/gist_id}","starred_url":"https://api.github.com/users/rmuir/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmuir/subscriptions","organizations_url":"https://api.github.com/users/rmuir/orgs","repos_url":"https://api.github.com/users/rmuir/repos","events_url":"https://api.github.com/users/rmuir/events{/privacy}","received_events_url":"https://api.github.com/users/rmuir/received_events","type":"User","site_admin":false},"created_at":"2015-06-05T06:54:02Z","updated_at":"2015-06-05T06:54:02Z","author_association":"CONTRIBUTOR","body":"Finally an issue worth discussing :)\n\nI think we should have so-called \"strict\" boolean parsing, because we can assume what we are doing is actually important. When things aren't important e.g. `do you want another beer?`, then lenient parsing of booleans is just fine: you can default to `true` and nothing will go wrong!\n\nSo the context is critical: here we are talking about situations such as parameter configuration for a distributed system that might hold terabytes of data, and input parameters to APIs that might be connected to even larger systems doing god knows what.\n\nThis is just the assumption you must make with code: in general computers are used for important things these days, so that's why I think everyone should use boolean parsing that doesn't suck. \n\nLet's just make this clear and unambiguous to prevent problems: it's easy!\n\n> Today, most boolean settings in Elasticsearch are parsed leniently\n> using Booleans.parseBoolean, which interprets 0, no, off and false\n> as false, else true for any random strings like NO or OFF or foobar, etc.\n\nTerrible\n\n> I think this is dangerous: if the user has a typo for false, or maybe\n> thinks \"disabled\" would also mean false, they silently get true.\n\nIts dangerous for a ton of other reasons too, for example its inconsistent with java's equally crappy `Boolean.parseBoolean` which instead maps unknown values to `false`. This is just asking for bugs.\n\n> There are languages, such as Perl, which don't have boolean values. This is the reason that boolean parsing in Elasticsearch is lenient.\n\nPerl has the worst boolean semantics on the planet:\n\n```\nThe number 0, the strings '0' and '', the empty list \"()\", and \"undef\"\nare all false in a boolean context. All other values are true.\nNegation of a true value by \"!\" or \"not\" returns a special false\nvalue. When evaluated as a string it is treated as '', but as a \nnumber, it is treated as 0.\n```\n\nSomehow they managed to actually make it worse than C. \n\nThis doesn't mean we should map all non-zero numbers to `true`, or do other crazy things because of language X or Y or Z. Seriously, why can't we just supply simple unambiguous interfaces and let the Perl language client deal with making it \"perl-like\" on the client-side? That's its job.\n\nTrying to do this stuff server-side just begs for complexity and bugs. Which numbers are acceptable? Maybe we should apply unicode normalization so that full-width numbers work? What about ideographic numbers? We can bring in ICU to parse chinese numbers. Some writing systems might not have a concept of zero, what to do there? \n\nScrew that. In most cases we expect these configuration values to be important, and the API to be used as an important interface for the application. Communication here should be clear, simple, and unambiguous. We can do this, and just transcend the language problem the same way we'd solve this in the physical world. What is the best way there? Something like this works surprisingly well:\n\n```\nNod your head for `yes`, shake for `no`, anything else and I'll punch you in the face.\n```\n\nWe can translate that directly into java code, by parsing \"true\" to `true` and \"false\" to `false`, with anything else as an exception. In Java, its important declare a checked exception like `ParseException` too, so that you inform the caller of the \"rules\", and so that the flow of their code is forced to deal with the exceptional case. I generally hate checked exceptions like anyone else, but when used sparingly as a tool to prevent bugs, they do have their place.\n\n> I believe that no, yes, on, off, etc are supported because of the YAML spec: http://yaml.org/type/bool.html\n\nThis doesn't mean we have to allow them. There are other things in the YAML spec we may not allow too. This isn't inconsistent, its the same as YAML only allowing certain whitespace characters, despite requiring a Unicode text encoding. They don't have to allow all Unicode whitespace just because Unicode defines whitespace in a certain way.\n\nIf we think the boolean settings being parsed are all unimportant, then by all means, stick with a crappy lenient parser. Otherwise we should really fix this everywhere.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109184821","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-109184821","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":109184821,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTE4NDgyMQ==","user":{"login":"uboness","id":211019,"node_id":"MDQ6VXNlcjIxMTAxOQ==","avatar_url":"https://avatars3.githubusercontent.com/u/211019?v=4","gravatar_id":"","url":"https://api.github.com/users/uboness","html_url":"https://github.com/uboness","followers_url":"https://api.github.com/users/uboness/followers","following_url":"https://api.github.com/users/uboness/following{/other_user}","gists_url":"https://api.github.com/users/uboness/gists{/gist_id}","starred_url":"https://api.github.com/users/uboness/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/uboness/subscriptions","organizations_url":"https://api.github.com/users/uboness/orgs","repos_url":"https://api.github.com/users/uboness/repos","events_url":"https://api.github.com/users/uboness/events{/privacy}","received_events_url":"https://api.github.com/users/uboness/received_events","type":"User","site_admin":false},"created_at":"2015-06-05T07:14:03Z","updated_at":"2015-06-05T07:14:03Z","author_association":"CONTRIBUTOR","body":"@rmuir I love your boolean parser, a piece of art... and love the copyrights on it too. I'm cool with stricter parsing, but only if we keep `42` to represent `maybe`!\n\n+1 for `\"true\"` & `\"false\"`\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/109211728","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-109211728","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":109211728,"node_id":"MDEyOklzc3VlQ29tbWVudDEwOTIxMTcyOA==","user":{"login":"dadoonet","id":274222,"node_id":"MDQ6VXNlcjI3NDIyMg==","avatar_url":"https://avatars3.githubusercontent.com/u/274222?v=4","gravatar_id":"","url":"https://api.github.com/users/dadoonet","html_url":"https://github.com/dadoonet","followers_url":"https://api.github.com/users/dadoonet/followers","following_url":"https://api.github.com/users/dadoonet/following{/other_user}","gists_url":"https://api.github.com/users/dadoonet/gists{/gist_id}","starred_url":"https://api.github.com/users/dadoonet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dadoonet/subscriptions","organizations_url":"https://api.github.com/users/dadoonet/orgs","repos_url":"https://api.github.com/users/dadoonet/repos","events_url":"https://api.github.com/users/dadoonet/events{/privacy}","received_events_url":"https://api.github.com/users/dadoonet/received_events","type":"User","site_admin":false},"created_at":"2015-06-05T09:06:41Z","updated_at":"2015-06-05T09:06:41Z","author_association":"MEMBER","body":"Hahaha! I'd love to see in our code base:\n\n``` java\nif (str.equals(\"42\")) {\n  return randomBoolean();\n}\n```\n\nLike an easter egg...\n\nTotally +1 to either reject any unknown form and never fall back to `true`.\n`true` and `false` makes sense to me.\n\nIn that case, may the upgrade plugin should try to detect \"old settings\" and warn the user to change their values? I guess it's hard to build that as this plugin does not read for example `elasticsearch.yml` file?\nAlso, how to know that users have been using in their data `something` which is translated to `true`?\nSo what would happen if someone tries to reindex the same doc again (eg. update it by script)?\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/138836317","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-138836317","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":138836317,"node_id":"MDEyOklzc3VlQ29tbWVudDEzODgzNjMxNw==","user":{"login":"saurajeet","id":1396733,"node_id":"MDQ6VXNlcjEzOTY3MzM=","avatar_url":"https://avatars0.githubusercontent.com/u/1396733?v=4","gravatar_id":"","url":"https://api.github.com/users/saurajeet","html_url":"https://github.com/saurajeet","followers_url":"https://api.github.com/users/saurajeet/followers","following_url":"https://api.github.com/users/saurajeet/following{/other_user}","gists_url":"https://api.github.com/users/saurajeet/gists{/gist_id}","starred_url":"https://api.github.com/users/saurajeet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/saurajeet/subscriptions","organizations_url":"https://api.github.com/users/saurajeet/orgs","repos_url":"https://api.github.com/users/saurajeet/repos","events_url":"https://api.github.com/users/saurajeet/events{/privacy}","received_events_url":"https://api.github.com/users/saurajeet/received_events","type":"User","site_admin":false},"created_at":"2015-09-09T08:53:30Z","updated_at":"2015-09-09T08:53:30Z","author_association":"NONE","body":"thanks @jpountz for taking time to find the right place for the issue i filed. \n+1 for \"true\" or \"false\" in stricter parsing.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/138837493","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-138837493","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":138837493,"node_id":"MDEyOklzc3VlQ29tbWVudDEzODgzNzQ5Mw==","user":{"login":"rjernst","id":289412,"node_id":"MDQ6VXNlcjI4OTQxMg==","avatar_url":"https://avatars3.githubusercontent.com/u/289412?v=4","gravatar_id":"","url":"https://api.github.com/users/rjernst","html_url":"https://github.com/rjernst","followers_url":"https://api.github.com/users/rjernst/followers","following_url":"https://api.github.com/users/rjernst/following{/other_user}","gists_url":"https://api.github.com/users/rjernst/gists{/gist_id}","starred_url":"https://api.github.com/users/rjernst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rjernst/subscriptions","organizations_url":"https://api.github.com/users/rjernst/orgs","repos_url":"https://api.github.com/users/rjernst/repos","events_url":"https://api.github.com/users/rjernst/events{/privacy}","received_events_url":"https://api.github.com/users/rjernst/received_events","type":"User","site_admin":false},"created_at":"2015-09-09T08:55:58Z","updated_at":"2015-09-09T08:55:58Z","author_association":"MEMBER","body":"I started a branch here:\nhttps://github.com/rjernst/elasticsearch/tree/booleans_are_simple\n\nBut there are many tests that need to be fixed. Anyone feel free to pick it up and base future work on.\n","performed_via_github_app":null},{"url":"https://api.github.com/repos/elastic/elasticsearch/issues/comments/258665921","html_url":"https://github.com/elastic/elasticsearch/issues/11503#issuecomment-258665921","issue_url":"https://api.github.com/repos/elastic/elasticsearch/issues/11503","id":258665921,"node_id":"MDEyOklzc3VlQ29tbWVudDI1ODY2NTkyMQ==","user":{"login":"clintongormley","id":56599,"node_id":"MDQ6VXNlcjU2NTk5","avatar_url":"https://avatars0.githubusercontent.com/u/56599?v=4","gravatar_id":"","url":"https://api.github.com/users/clintongormley","html_url":"https://github.com/clintongormley","followers_url":"https://api.github.com/users/clintongormley/followers","following_url":"https://api.github.com/users/clintongormley/following{/other_user}","gists_url":"https://api.github.com/users/clintongormley/gists{/gist_id}","starred_url":"https://api.github.com/users/clintongormley/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clintongormley/subscriptions","organizations_url":"https://api.github.com/users/clintongormley/orgs","repos_url":"https://api.github.com/users/clintongormley/repos","events_url":"https://api.github.com/users/clintongormley/events{/privacy}","received_events_url":"https://api.github.com/users/clintongormley/received_events","type":"User","site_admin":false},"created_at":"2016-11-06T07:54:02Z","updated_at":"2016-11-06T07:54:02Z","author_association":"CONTRIBUTOR","body":"Fixed in 5.0 with the great settings rewrite\n","performed_via_github_app":null}]